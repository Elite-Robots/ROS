/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2022-10-10 21:30:23.514051
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[5]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.098)*x11);
x13=((0.089)*x5);
x14=((1.0)*x6);
x15=((1.0)*x11);
x16=((0.098)*x1);
x17=((1.0)*x0);
x18=((0.00048)*x5);
x19=((1.53e-6)*x4);
x20=((0.398)*x11);
x21=((0.418)*x1);
x22=((0.00048)*x8);
x23=((0.00048)*x6);
x24=((1.0)*x5);
x25=((-1.0)*x6);
x26=(x11*x8);
x27=(x1*x3);
x28=(x7*x8);
x29=(x0*x2);
x30=(x2*x4);
x31=(x3*x4);
x32=(x0*x10);
x33=((-1.0)*x5);
x34=(x1*x2);
x35=(x10*x15);
x36=((1.0)*x27);
x37=((0.098)*x31);
x38=(x31+x34);
x39=((((-1.0)*x36))+x30);
x40=((((-1.0)*x30))+x36);
x41=(x38*x5);
x42=(x40*x6);
x43=(((x29*x4))+(((-1.0)*x17*x27)));
x44=((((-1.0)*x15*x27))+((x11*x30)));
x45=(x17*((x31+x34)));
x46=((-1.0)*x45);
x47=(x15*((x31+x34)));
x48=((-1.0)*x47);
x49=(x44*x6);
x50=(x47*x6);
x51=(x45*x6);
x52=(x42+x41);
x53=((((-1.0)*x14*x38))+(((-1.0)*x24*x39)));
x54=(x51+((x43*x5)));
x55=(x50+((x44*x5)));
x56=(x54*x8);
x57=(x55*x8);
x58=(((x25*x43))+((x33*x46)));
eerot[0]=(((x9*((x35+(((-1.0)*x56))))))+((x58*x7)));
eerot[1]=(((x7*(((((-1.0)*x35))+x56))))+((x58*x9)));
eerot[2]=(((x10*x54))+x26);
IkReal x59=((1.0)*x0);
IkReal x60=(x29*x4);
eetrans[0]=(((x9*(((((-1.0)*x18*x46))+(((-1.0)*x23*x43))))))+(((0.089)*x26))+((x0*x21))+(((0.398)*x0*x27))+(((-1.0)*x19*x59))+(((-0.398)*x60))+((x5*(((((-1.0)*x16*x29))+(((-1.0)*x37*x59))))))+((x7*(((((-0.00048)*x10*x11))+((x22*x54))))))+((x10*((((x13*x43))+(((0.089)*x51))))))+((x6*(((((-1.0)*x16*x3*x59))+(((0.098)*x60))))))+(((-0.122)*x11)));
eerot[3]=(((x7*(((((-1.0)*x14*x44))+(((-1.0)*x24*x48))))))+((x9*(((((-1.0)*x32))+(((-1.0)*x57)))))));
eerot[4]=(((x9*((((x25*x44))+((x33*x48))))))+((x7*((x32+x57)))));
eerot[5]=((((-1.0)*x17*x8))+((x10*x55)));
IkReal x61=((1.0)*x12);
eetrans[1]=(((x9*(((((-0.00048)*x49))+(((-0.00048)*x48*x5))))))+(((-1.0)*x20*x30))+(((-1.0)*x11*x19))+(((0.122)*x0))+((x10*((((x13*x44))+(((0.089)*x50))))))+((x11*x21))+((x5*(((((-1.0)*x34*x61))+(((-1.0)*x31*x61))))))+((x6*(((((-1.0)*x27*x61))+((x12*x30))))))+((x20*x27))+((x7*(((((0.00048)*x32))+((x22*x55))))))+(((-0.089)*x0*x8)));
eerot[6]=(((x53*x7))+((x8*x9*(((((-1.0)*x14*x40))+(((-1.0)*x24*x38)))))));
eerot[7]=(((x53*x9))+((x28*x52)));
eerot[8]=(x10*x52);
eetrans[2]=((0.096)+(((-0.398)*x31))+(((-0.398)*x34))+((x9*(((((-1.0)*x18*x39))+(((-1.0)*x23*x38))))))+((x6*((x37+((x16*x2))))))+(((-1.53e-6)*x1))+((x10*(((((0.089)*x42))+((x13*x38))))))+((x5*(((((-1.0)*x16*x3))+(((0.098)*x30))))))+((x28*((((x18*x38))+((x23*x40))))))+(((-0.418)*x4)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=r02;
new_px=((((-0.00048)*r01))+px+(((-0.089)*r02)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=r12;
new_py=((((-0.00048)*r11))+py+(((-0.089)*r12)));
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=r22;
new_pz=((-0.096)+(((-0.089)*r22))+(((-0.00048)*r21))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x62=((1.0)*px);
IkReal x63=((1.0)*pz);
IkReal x64=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x64))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x63)));
rxp0_2=((((-1.0)*r10*x62))+((py*r00)));
rxp1_0=((((-1.0)*r21*x64))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x63)));
rxp1_2=((((-1.0)*r11*x62))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x64)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x63)));
rxp2_2=((((-1.0)*r12*x62))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x65=((0.098)*r20);
IkReal x66=((0.098)*r21);
IkReal x67=((-0.196)*npx);
IkReal x68=((-1.0)*npx);
IkReal x69=((-0.196)*npy);
IkReal x70=((-1.0)*npy);
IkReal x71=((-0.098)*r22);
IkReal x72=((-1.0)*rxp1_2);
IkReal x73=((-1.0)*r20);
IkReal x74=((-1.0)*rxp2_2);
IkReal x75=((-0.098)*r20);
matrixinvcoeffs[0]=x65;
matrixinvcoeffs[1]=x67;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=r20;
matrixinvcoeffs[10]=x68;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x65;
matrixinvcoeffs[19]=x67;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=r20;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x68;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=rxp0_2;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x66;
matrixinvcoeffs[33]=x69;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=r21;
matrixinvcoeffs[42]=x70;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x66;
matrixinvcoeffs[51]=x69;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=r21;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x70;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=rxp1_2;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=r22;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=((-1.0)*npz);
matrixinvcoeffs[76]=x71;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=((-1.0)*r22);
matrixinvcoeffs[90]=npz;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x71;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x74;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x72;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=((-0.098)*r21);
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x72;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x66;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x73;
matrixinvcoeffs[133]=x68;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x65;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x73;
matrixinvcoeffs[151]=x68;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x75;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=r22;
matrixinvcoeffs[165]=npz;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x74;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x71;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=r22;
matrixinvcoeffs[183]=npz;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x74;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((0.098)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=((-1.0)*r21);
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=npy;
matrixinvcoeffs[204]=x66;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x72;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=r21;
matrixinvcoeffs[218]=x70;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x66;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=r20;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=x68;
matrixinvcoeffs[236]=x75;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=x73;
matrixinvcoeffs[250]=npx;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x75;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=((-1.0)*rxp0_2);
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x76=pz*pz;
IkReal x77=(npz*pz);
IkReal x78=(gclwh4_11*rxp2_2);
IkReal x79=((0.392)*rxp0_2);
IkReal x80=(pp*r21);
IkReal x81=((0.007644784)*r22);
IkReal x82=(npx*pz);
IkReal x83=((2.0)*gclwh9_9);
IkReal x84=(gclwh14_14*r20);
IkReal x85=((0.007644784)*r21);
IkReal x86=(gclwh15_10*r20);
IkReal x87=(gclwh15_10*rxp0_2);
IkReal x88=((0.02)*pp);
IkReal x89=(gclwh11_9*r22);
IkReal x90=((0.131542656000459)*rxp2_2);
IkReal x91=(gclwh12_11*rxp1_2);
IkReal x92=(pp*r22);
IkReal x93=(npy*pz);
IkReal x94=((0.244)*gclwh12_14);
IkReal x95=(gclwh5_10*rxp2_2);
IkReal x96=((2.0)*gclwh6_8);
IkReal x97=((0.009604)*r22);
IkReal x98=((0.392)*rxp2_2);
IkReal x99=((0.00111328000045882)*rxp2_2);
IkReal x100=((0.007836864)*r20);
IkReal x101=((0.023912)*rxp2_2);
IkReal x102=(gclwh13_15*r21);
IkReal x103=((0.159936)*rxp2_2);
IkReal x104=((0.00019208)*r22);
IkReal x105=((1.0)*pz);
IkReal x106=(gclwh13_1*rxp1_2);
IkReal x107=((0.00111328000045882)*rxp0_2);
IkReal x108=((0.196)*rxp2_2);
IkReal x109=(gclwh12_11*r21);
IkReal x110=((0.159936)*rxp0_2);
IkReal x111=(gclwh6_12*r21);
IkReal x112=((0.007836864)*r22);
IkReal x113=(pp*r20);
IkReal x114=(gclwh13_10*r21);
IkReal x115=((0.392)*rxp1_2);
IkReal x116=(gclwh13_0*rxp1_2);
IkReal x117=((2.339303904e-8)*r22);
IkReal x118=((0.007644784)*r20);
IkReal x119=(gclwh4_11*r22);
IkReal x120=((0.009604)*r21);
IkReal x121=((0.001171688)*r21);
IkReal x122=((0.156016)*rxp2_2);
IkReal x123=((2.339303904e-8)*r20);
IkReal x124=((0.00392)*rxp2_2);
IkReal x125=(gclwh13_10*rxp1_2);
IkReal x126=(gclwh12_2*rxp1_2);
IkReal x127=((0.196)*pz);
IkReal x128=((2.339303904e-8)*r21);
IkReal x129=((0.047824)*rxp1_2);
IkReal x130=((0.00019208)*r20);
IkReal x131=((1.469412e-8)*r20);
IkReal x132=((4.7740896e-7)*rxp2_2);
IkReal x133=(gclwh6_12*rxp1_2);
IkReal x134=(gclwh15_15*r20);
IkReal x135=(gclwh12_3*rxp1_2);
IkReal x136=(gclwh5_10*r22);
IkReal x137=((1.469412e-8)*r22);
IkReal x138=(gclwh14_11*rxp0_2);
IkReal x139=(gclwh5_15*r22);
IkReal x140=((0.244)*gclwh15_15);
IkReal x141=((0.244)*gclwh13_15);
IkReal x142=(gclwh9_0*pz);
IkReal x143=((0.009604)*r20);
IkReal x144=((0.019208)*r20);
IkReal x145=((0.019208)*r21);
IkReal x146=((0.001171688)*r20);
IkReal x147=((2.0)*gclwh10_8);
IkReal x148=((0.023912)*rxp1_2);
IkReal x149=((0.156016)*rxp1_2);
IkReal x150=(gclwh15_0*rxp0_2);
IkReal x151=((0.023912)*rxp0_2);
IkReal x152=(gclwh7_13*r21);
IkReal x153=((0.196)*rxp1_2);
IkReal x154=((0.047824)*rxp2_2);
IkReal x155=(gclwh14_3*rxp0_2);
IkReal x156=((2.0)*gclwh8_8);
IkReal x157=((0.196)*rxp0_2);
IkReal x158=((2.0)*gclwh7_9);
IkReal x159=((0.244)*gclwh5_15);
IkReal x160=((0.019208)*r22);
IkReal x161=(gclwh4_14*r22);
IkReal x162=((0.156016)*rxp0_2);
IkReal x163=((0.00392)*rxp0_2);
IkReal x164=(gclwh14_2*rxp0_2);
IkReal x165=((0.244)*gclwh4_14);
IkReal x166=((1.469412e-8)*r21);
IkReal x167=((2.9988e-7)*rxp2_2);
IkReal x168=(gclwh7_13*rxp1_2);
IkReal x169=(gclwh15_1*rxp0_2);
IkReal x170=((0.047824)*rxp0_2);
IkReal x171=(gclwh14_11*r20);
IkReal x172=((0.001171688)*r22);
IkReal x173=(gclwh8_2*pz);
IkReal x174=(gclwh14_14*x151);
IkReal x175=(gclwh4_14*x101);
IkReal x176=(gclwh6_5*x121);
IkReal x177=(gclwh10_5*x172);
IkReal x178=(gclwh12_14*x148);
IkReal x179=(gclwh8_5*x146);
IkReal x180=(gclwh10_8*x97);
IkReal x181=(gclwh8_2*x131);
IkReal x182=(gclwh4_2*x167);
IkReal x183=(gclwh6_8*x120);
IkReal x184=(gclwh12_8*x153);
IkReal x185=((2.9988e-7)*x164);
IkReal x186=(gclwh10_2*x137);
IkReal x187=(gclwh8_8*x143);
IkReal x188=(gclwh4_8*x108);
IkReal x189=((2.9988e-7)*x126);
IkReal x190=(gclwh14_8*x157);
IkReal x191=(gclwh6_2*x166);
IkReal x192=(gclwh9_9*x143);
IkReal x193=(gclwh15_9*x157);
IkReal x194=(gclwh9_0*x131);
IkReal x195=((2.9988e-7)*x150);
IkReal x196=(gclwh5_9*x108);
IkReal x197=(gclwh5_0*x167);
IkReal x198=(gclwh11_0*x137);
IkReal x199=(gclwh13_9*x153);
IkReal x200=((0.009604)*x89);
IkReal x201=((2.9988e-7)*x116);
IkReal x202=(gclwh7_0*x166);
IkReal x203=(gclwh7_9*x120);
IkReal x204=(gclwh15_15*x151);
IkReal x205=(gclwh11_7*x172);
IkReal x206=(gclwh5_15*x101);
IkReal x207=(gclwh7_7*x121);
IkReal x208=(gclwh9_7*x146);
IkReal x209=(gclwh13_15*x148);
IkReal x210=((0.001171688)*x84);
IkReal x211=(gclwh8_5*x151);
IkReal x212=((0.001171688)*x161);
IkReal x213=(gclwh6_5*x148);
IkReal x214=(gclwh12_14*x121);
IkReal x215=(gclwh10_5*x101);
IkReal x216=((0.001171688)*x102);
IkReal x217=(gclwh7_7*x148);
IkReal x218=(gclwh11_7*x101);
IkReal x219=((0.001171688)*x139);
IkReal x220=((0.001171688)*x134);
IkReal x221=(gclwh9_7*x151);
IkReal x222=(pp*x153);
IkReal x223=((2.0)*x76);
IkReal x224=(pp*x157);
IkReal x225=((0.122)*gclwh6_5*x80);
IkReal x226=((0.122)*gclwh10_5*x92);
IkReal x227=((0.244)*gclwh8_5*x82);
IkReal x228=((0.244)*gclwh6_5*x93);
IkReal x229=((0.122)*gclwh8_5*x113);
IkReal x230=((0.244)*gclwh10_5*x77);
IkReal x231=(x127*x164);
IkReal x232=((1.53e-6)*gclwh8_2*x113);
IkReal x233=((3.06e-6)*gclwh6_2*x93);
IkReal x234=(x143*x173);
IkReal x235=(x156*x82);
IkReal x236=((3.06e-6)*gclwh10_2*x77);
IkReal x237=(x113*x173);
IkReal x238=(gclwh4_2*pz*x108);
IkReal x239=((0.196)*pp*x135);
IkReal x240=((1.53e-6)*gclwh10_2*x92);
IkReal x241=(x126*x127);
IkReal x242=((1.53e-6)*gclwh6_2*x80);
IkReal x243=(x93*x96);
IkReal x244=(gclwh6_2*pz*x120);
IkReal x245=(gclwh10_2*pz*x97);
IkReal x246=(x147*x77);
IkReal x247=((3.06e-6)*gclwh8_2*x82);
IkReal x248=((0.196)*pp*x155);
IkReal x249=(gclwh4_3*pp*x108);
IkReal x250=(x142*x143);
IkReal x251=(x127*x150);
IkReal x252=((2.0)*gclwh11_9*x77);
IkReal x253=(x158*x93);
IkReal x254=((3.06e-6)*gclwh7_0*x93);
IkReal x255=((3.06e-6)*gclwh11_0*x77);
IkReal x256=((1.53e-6)*gclwh9_0*x113);
IkReal x257=(gclwh5_0*pz*x108);
IkReal x258=((0.196)*pp*x106);
IkReal x259=(x113*x142);
IkReal x260=(x82*x83);
IkReal x261=(x116*x127);
IkReal x262=(gclwh7_0*pz*x120);
IkReal x263=(gclwh15_1*x224);
IkReal x264=((3.06e-6)*gclwh9_0*x82);
IkReal x265=(gclwh5_1*pp*x108);
IkReal x266=((1.53e-6)*gclwh7_0*x80);
IkReal x267=((1.53e-6)*gclwh11_0*x92);
IkReal x268=(gclwh11_0*pz*x97);
IkReal x269=((0.244)*gclwh9_7*x82);
IkReal x270=((0.122)*gclwh7_7*x80);
IkReal x271=((0.122)*gclwh11_7*x92);
IkReal x272=((0.244)*gclwh11_7*x77);
IkReal x273=((0.122)*gclwh9_7*x113);
IkReal x274=((0.244)*gclwh7_7*x93);
IkReal x275=((0.122)*gclwh4_14*x92);
IkReal x276=((0.122)*pp*x84);
IkReal x277=(x93*x94);
IkReal x278=((0.244)*gclwh14_14*x82);
IkReal x279=(x165*x77);
IkReal x280=((0.122)*gclwh12_14*x80);
IkReal x281=((0.122)*gclwh13_15*x80);
IkReal x282=(x159*x77);
IkReal x283=(x140*x82);
IkReal x284=((0.122)*gclwh5_15*x92);
IkReal x285=((0.122)*gclwh15_15*x113);
IkReal x286=(x141*x93);
IkReal x287=(gclwh6_2*npy*x223);
IkReal x288=(gclwh10_2*npz*x223);
IkReal x289=(gclwh10_2*x105*x92);
IkReal x290=(gclwh6_2*x105*x80);
IkReal x291=(gclwh8_2*npx*x223);
IkReal x292=(gclwh11_0*npz*x223);
IkReal x293=(gclwh7_0*npy*x223);
IkReal x294=(gclwh11_0*x105*x92);
IkReal x295=(gclwh9_0*npx*x223);
IkReal x296=(gclwh7_0*x105*x80);
IkReal x297=(x206+x204);
IkReal x298=(x175+x174);
IkReal x299=(x217+x218);
IkReal x300=(x213+x215);
IkReal x301=(x199+x203+x200+x260);
IkReal x302=(x184+x180+x183+x235);
IkReal x303=(x208+x274+x272+x273);
IkReal x304=(x179+x229+x228+x230);
IkReal x305=(x216+x283+x282+x281);
IkReal x306=(x214+x278+x279+x280);
IkReal x307=(x190+x187+x188+x243+x246);
IkReal x308=(x193+x192+x196+x252+x253);
IkReal x309=(x219+x220+x286+x285+x284);
IkReal x310=(x210+x212+x276+x277+x275);
IkReal x311=((-3.7332e-7)+x207+x205+x269+x270+x271);
IkReal x312=((-3.7332e-7)+x177+x176+x225+x227+x226);
IkReal x313=(x197+x195+x194+x258+x259+x254+x255+x256+x257+x250+x251+x292+x293);
IkReal x314=(x185+x181+x182+x238+x239+x232+x233+x231+x236+x237+x234+x288+x287);
IkReal x315=(x191+x186+x189+x290+x291+x242+x241+x240+x247+x245+x244+x249+x248+x289);
IkReal x316=(x198+x202+x201+x294+x295+x296+x265+x264+x267+x266+x261+x263+x262+x268);
op[0]=((((-1.632)*gclwh6_12*x93))+(((0.159936)*x78))+(((0.816)*gclwh10_12*x92))+((gclwh10_12*x112))+(((-1.0)*x298))+(((-0.816)*gclwh8_12*x113))+(((1.632)*gclwh8_12*x82))+x178+x312+(((-1.0)*gclwh8_12*x100))+(((0.816)*gclwh6_12*x80))+(((0.007836864)*x111))+(((-1.632)*gclwh10_12*x77))+(((-0.159936)*x91))+((gclwh14_11*x110))+(((-1.0)*x304)));
op[1]=((((0.131542656000459)*x155))+(((-1.0)*gclwh6_8*x80))+(((0.01920770012)*x91))+(((-0.131542656000459)*x135))+(((-0.01920770012)*x78))+((gclwh8_8*x113))+x307+x314+(((-0.01920770012)*x138))+(((-1.0)*x315))+(((-1.0)*gclwh10_8*x92))+(((-1.0)*x302))+((gclwh4_3*x90)));
op[2]=((-0.194224)+((x113*x156))+((gclwh8_8*x144))+((gclwh14_8*x79))+(((-1.0)*x80*x96))+(((-1.0)*gclwh12_8*x115))+(((-4.0)*gclwh8_8*x82))+(((-5.9976e-7)*x91))+(((-1.0)*gclwh10_8*x160))+(((5.9976e-7)*x78))+(((4.0)*gclwh6_8*x93))+(((5.9976e-7)*x138))+(((-1.0)*gclwh6_8*x145))+((gclwh4_8*x98))+(((-1.0)*x147*x92))+(((4.0)*gclwh10_8*x77)));
op[3]=((((-0.163856)*x138))+(((1.592)*gclwh6_2*x93))+(((-0.796)*gclwh10_2*x92))+((gclwh14_14*x170))+(((0.796)*gclwh8_2*x113))+((gclwh8_2*x118))+(((-1.0)*gclwh12_14*x129))+((gclwh4_2*x122))+(((4.7740896e-7)*x155))+(((-1.0)*gclwh10_2*x81))+(((-0.163856)*x78))+(((-1.592)*gclwh8_2*x82))+(((-0.156016)*x126))+(((-4.7740896e-7)*x135))+((gclwh14_2*x162))+((gclwh4_3*x132))+((gclwh4_14*x154))+(((0.163856)*x91))+(((-1.0)*gclwh6_2*x85))+(((1.592)*gclwh10_2*x77))+(((-0.796)*gclwh6_2*x80)));
op[4]=((((-0.00392)*x78))+(((0.04)*gclwh8_12*x82))+(((-0.04)*gclwh10_12*x77))+((gclwh10_12*x104))+(((0.00019208)*x111))+(((-1.0)*x178))+(((-1.0)*gclwh8_12*x130))+(((0.02)*gclwh6_12*x80))+(((-1.0)*gclwh8_12*r20*x88))+x312+x298+(((0.00392)*x91))+(((-0.00392)*x138))+(((-1.0)*x304))+((gclwh10_12*r22*x88))+(((-0.04)*gclwh6_12*x93)));
op[5]=(((gclwh10_8*x92))+(((-0.01920829988)*x138))+((gclwh14_3*x107))+(((-0.00111328000045882)*x135))+x302+x314+(((-1.0)*x315))+(((0.01920829988)*x91))+(((-1.0)*gclwh8_8*x113))+((gclwh6_8*x80))+(((-1.0)*x307))+((gclwh4_3*x99))+(((-0.01920829988)*x78)));
op[6]=(((pp*x89))+(((0.01920829988)*x125))+(((-1.0)*gclwh9_9*x113))+(((0.131542656000459)*x169))+((gclwh5_1*x90))+(((-0.01920829988)*x95))+x301+x313+(((-0.131542656000459)*x106))+((gclwh7_9*x80))+(((-0.01920829988)*x87))+(((-1.0)*x316))+(((-1.0)*x308)));
op[7]=((((-1.632)*gclwh7_13*x93))+(((-0.816)*gclwh9_13*x113))+(((0.159936)*x87))+(((-0.159936)*x125))+(((0.007836864)*x152))+(((-1.0)*x297))+(((0.816)*gclwh7_13*x80))+(((0.159936)*x95))+(((-1.0)*gclwh9_13*x100))+x311+x209+(((-1.632)*gclwh11_13*x77))+(((0.816)*gclwh11_13*x92))+((gclwh11_13*x112))+(((-1.0)*x303))+(((1.632)*gclwh9_13*x82)));
op[8]=((((-1.0)*gclwh5_15*x154))+(((0.796)*gclwh9_0*x113))+(((-1.0)*gclwh11_0*x81))+((gclwh5_1*x132))+(((4.7740896e-7)*x169))+(((0.156016)*x150))+(((-1.0)*gclwh7_0*x85))+(((1.592)*gclwh11_0*x77))+(((1.592)*gclwh7_0*x93))+(((-1.592)*gclwh9_0*x82))+(((-0.156016)*x116))+((gclwh9_0*x118))+(((0.163856)*x95))+(((-0.796)*gclwh11_0*x92))+(((-4.7740896e-7)*x106))+(((0.163856)*x87))+((gclwh13_15*x129))+(((-1.0)*gclwh15_15*x170))+(((-0.163856)*x125))+(((-0.796)*gclwh7_0*x80))+((gclwh5_0*x122)));
op[9]=((-0.194224)+((x113*x83))+(((-1.0)*x158*x80))+(((-2.0)*pp*x89))+(((4.0)*gclwh7_9*x93))+(((-1.0)*gclwh7_9*x145))+((gclwh9_9*x144))+(((-1.0)*gclwh13_9*x115))+((gclwh5_9*x98))+(((4.0)*gclwh11_9*x77))+(((-4.0)*gclwh9_9*x82))+(((-5.9976e-7)*x125))+(((-0.019208)*x89))+(((5.9976e-7)*x95))+((gclwh15_9*x79))+(((5.9976e-7)*x87)));
op[10]=((((-1.0)*pp*x89))+(((-0.01920770012)*x87))+(((-0.01920770012)*x95))+((gclwh9_9*x113))+(((-0.00111328000045882)*x106))+((gclwh15_1*x107))+((gclwh5_1*x99))+(((-1.0)*gclwh7_9*x80))+x308+x313+(((-1.0)*x316))+(((0.01920770012)*x125))+(((-1.0)*x301)));
op[11]=((((-0.04)*gclwh7_13*x93))+(((0.00392)*x125))+(((-0.04)*gclwh11_13*x77))+(((-0.00392)*x95))+(((-1.0)*x209))+x311+(((-0.00392)*x87))+x297+(((-1.0)*gclwh9_13*x130))+(((0.04)*gclwh9_13*x82))+((gclwh11_13*x104))+(((-1.0)*gclwh9_13*r20*x88))+((gclwh11_13*r22*x88))+(((-1.0)*x303))+(((0.00019208)*x152))+(((0.02)*gclwh7_13*x80)));
op[12]=((2.49696e-6)+(((0.816)*gclwh14_11*x113))+((gclwh8_12*x110))+(((-1.0)*gclwh10_12*x103))+(((-0.816)*gclwh12_11*x80))+(((-0.159936)*x133))+(((0.816)*gclwh4_11*x92))+((gclwh4_11*x112))+x306+x211+(((-1.0)*x310))+(((1.632)*gclwh12_11*x93))+(((-1.632)*gclwh4_11*x77))+(((-1.632)*gclwh14_11*x82))+((gclwh14_11*x100))+(((-1.0)*x300))+(((-0.007836864)*x109)));
op[13]=((-0.680739999997659)+(((-1.469412e-8)*gclwh1_2*r20))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-1.34227200000468)*gclwh1_3*npx*pz))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((1.469412e-8)*gclwh14_2*r20))+(((-3.06e-6)*gclwh4_2*npz*pz))+(((2.0)*gclwh4_3*npz*pp*pz))+(((1.53e-6)*gclwh1_2*pp*r20))+(((1.53e-6)*gclwh14_2*pp*r20))+(((-1.34227200000468)*gclwh4_3*npz*pz))+(((0.196)*pz))+((gclwh12_3*r21*(pp*pp)))+(((-0.00644559014402248)*gclwh1_3*r20))+(((1.469412e-8)*gclwh4_2*r22))+(((-0.196)*gclwh8_2*pz*rxp0_2))+(((-2.0)*gclwh4_8*npz*pz))+((gclwh1_2*pp*pz*r20))+(((-0.661532000002341)*gclwh12_3*pp*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((0.009604)*gclwh4_8*r22))+(((-0.00644559014402248)*gclwh3_3*r21))+(((0.196)*gclwh10_8*rxp2_2))+(((3.06e-6)*gclwh12_2*npy*pz))+(((2.0)*gclwh3_3*npy*pp*pz))+(((-0.09799847)*gclwh14_11*pp*r20))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-1.0)*gclwh12_8*pp*r21))+(((-0.009604)*gclwh1_2*pz*r20))+((gclwh3_2*pp*pz*r21))+(((2.0)*gclwh12_8*npy*pz))+((gclwh14_8*pp*r20))+(((-0.00094117730588)*gclwh4_11*r22))+(((0.00644559014402248)*gclwh14_3*r20))+(((-1.53e-6)*gclwh12_2*pp*r21))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.009604)*gclwh14_8*r20))+(((-1.469412e-8)*gclwh3_2*r21))+(((0.009604)*gclwh4_2*pz*r22))+(((-0.09799847)*gclwh4_11*pp*r22))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh14_8*npx*pz))+(((2.9988e-7)*gclwh6_2*rxp1_2))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-1.34227200000468)*gclwh14_3*npx*pz))+(((0.009604)*gclwh14_2*pz*r20))+(((0.00094117730588)*gclwh12_11*r21))+(((0.00644559014402248)*gclwh4_3*r22))+(((1.53e-6)*gclwh4_2*pp*r22))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.09799847)*gclwh12_11*pp*r21))+(((0.19599694)*gclwh4_11*npz*pz))+(((0.196)*gclwh10_2*pz*rxp2_2))+(((1.34227200000468)*gclwh12_3*npy*pz))+(((1.53e-6)*gclwh3_2*pp*r21))+(((-3.06e-6)*gclwh14_2*npx*pz))+(((0.680740000002341)*gclwh3_3*pp*r21))+(((-3.06e-6)*gclwh1_2*npx*pz))+(((-0.19599694)*gclwh12_11*npy*pz))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.009604)*gclwh12_2*pz*r21))+(((-2.9988e-7)*gclwh8_2*rxp0_2))+(((-0.00644559014402248)*gclwh12_3*r21))+(((-0.196)*gclwh8_8*rxp0_2))+(((-0.009604)*gclwh12_8*r21))+(((0.196)*gclwh6_2*pz*rxp1_2))+(((0.661532000002341)*gclwh4_3*pp*r22))+(((0.680740000002341)*gclwh1_3*pp*r20))+(((-0.00094117730588)*gclwh14_11*r20))+(((-1.34227200000468)*gclwh3_3*npy*pz))+(((2.9988e-7)*gclwh10_2*rxp2_2))+(((0.661532000002341)*gclwh14_3*pp*r20))+(((0.196)*gclwh6_8*rxp1_2))+((gclwh4_8*pp*r22))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.009604)*gclwh3_2*pz*r21))+(((0.19599694)*gclwh14_11*npx*pz))+(((-1.469412e-8)*gclwh12_2*r21))+(((-1.0)*gclwh1_3*r20*(pp*pp)))+(((-3.06e-6)*gclwh3_2*npy*pz)));
op[14]=((-0.0624079999953182)+(((3.06e-6)*gclwh14_11*x113))+((gclwh10_8*x98))+(((2.0)*gclwh14_8*x113))+(((-2.0)*gclwh12_8*x80))+(((-6.12e-6)*gclwh4_11*x77))+(((2.938824e-8)*x119))+(((-4.0)*gclwh4_8*x77))+(((2.0)*gclwh4_8*x92))+((gclwh6_8*x115))+(((-1.0)*gclwh8_8*x79))+(((-1.0)*gclwh12_8*x145))+((gclwh4_8*x160))+(((6.12e-6)*gclwh12_11*x93))+(((3.06e-6)*gclwh4_11*x92))+((gclwh14_8*x144))+(((-3.06e-6)*gclwh12_11*x80))+(((-6.12e-6)*gclwh14_11*x82))+(((2.938824e-8)*x171))+(((4.0)*gclwh12_8*x93))+(((-4.0)*gclwh14_8*x82))+(((-2.938824e-8)*x109)));
op[15]=((-2.55816e-6)+(((2.43576e-6)*gclwh1_3*x113))+(((-0.008028944)*x119))+(((-1.0)*gclwh1_3*x123))+(((0.244)*pp*x84))+(((0.002343376)*x84))+(((-4.87152e-6)*gclwh14_3*x82))+(((-1.0)*gclwh3_2*x85))+(((-4.87152e-6)*gclwh4_3*x77))+(((-1.0)*x80*x94))+(((1.672)*gclwh4_11*x77))+(((-1.0)*gclwh12_2*x85))+(((0.796)*gclwh1_2*x113))+(((0.836)*gclwh12_11*x80))+(((-2.43576e-6)*gclwh12_3*x80))+((gclwh14_2*x118))+(((-0.002343376)*gclwh12_14*r21))+((gclwh4_2*x81))+(((-4.87152e-6)*gclwh1_3*x82))+(((-0.488)*gclwh14_14*x82))+(((-4.87152e-6)*gclwh3_3*x93))+(((2.43576e-6)*gclwh4_3*x92))+(((-0.836)*gclwh4_11*x92))+(((-0.796)*gclwh12_2*x80))+(((-1.0)*gclwh3_3*x128))+((gclwh14_3*x123))+(((2.43576e-6)*gclwh3_3*x80))+(((-0.008028944)*x171))+(((1.592)*gclwh12_2*x93))+(((-1.592)*gclwh1_2*x82))+(((0.796)*gclwh14_2*x113))+((x165*x92))+(((-1.0)*gclwh1_2*x118))+(((4.87152e-6)*gclwh12_3*x93))+(((2.43576e-6)*gclwh14_3*x113))+(((-1.592)*gclwh14_2*x82))+(((-1.592)*gclwh4_2*x77))+(((-1.592)*gclwh3_2*x93))+(((-1.0)*gclwh12_3*x128))+(((-1.672)*gclwh12_11*x93))+(((1.672)*gclwh14_11*x82))+(((-0.488)*gclwh4_14*x77))+(((0.002343376)*x161))+(((0.796)*gclwh3_2*x80))+(((-0.836)*gclwh14_11*x113))+(((0.008028944)*x109))+((gclwh6_2*x149))+((gclwh10_2*x122))+((gclwh4_3*x117))+(((0.488)*gclwh12_14*x93))+(((-1.0)*gclwh8_2*x162))+(((0.796)*gclwh4_2*x92)));
op[16]=((-6.12e-8)+(((-1.0)*gclwh10_12*x124))+(((0.00019208)*x109))+(((0.02)*gclwh12_11*x80))+(((0.04)*gclwh14_11*x82))+(((-1.0)*x171*x88))+(((-1.0)*gclwh4_11*x104))+(((-1.0)*gclwh14_11*x130))+(((-1.0)*x119*x88))+(((0.04)*gclwh4_11*x77))+x310+x211+(((-0.04)*gclwh12_11*x93))+((gclwh8_12*x163))+(((-0.00392)*x133))+(((-1.0)*x306))+(((-1.0)*x300)));
op[17]=((0.0152839999976591)+(((-1.469412e-8)*gclwh1_2*r20))+(((-0.09800153)*gclwh14_11*pp*r20))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((1.469412e-8)*gclwh14_2*r20))+(((-3.06e-6)*gclwh4_2*npz*pz))+(((5.4550720022482e-5)*gclwh4_3*r22))+(((-0.0113600000046818)*gclwh14_3*npx*pz))+(((-5.4550720022482e-5)*gclwh12_3*r21))+(((2.0)*gclwh4_3*npz*pp*pz))+(((1.53e-6)*gclwh1_2*pp*r20))+(((1.53e-6)*gclwh14_2*pp*r20))+(((0.19600306)*gclwh4_11*npz*pz))+(((0.0152840000023409)*gclwh1_3*pp*r20))+(((0.196)*pz))+(((-0.0113600000046818)*gclwh1_3*npx*pz))+(((0.196)*gclwh8_8*rxp0_2))+((gclwh12_3*r21*(pp*pp)))+(((5.4550720022482e-5)*gclwh14_3*r20))+(((1.469412e-8)*gclwh4_2*r22))+(((-0.196)*gclwh8_2*pz*rxp0_2))+(((-1.0)*gclwh14_8*pp*r20))+((gclwh1_2*pp*pz*r20))+(((-5.4550720022482e-5)*gclwh3_3*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((3.06e-6)*gclwh12_2*npy*pz))+(((-0.196)*gclwh10_8*rxp2_2))+(((2.0)*gclwh3_3*npy*pp*pz))+(((-0.196)*gclwh6_8*rxp1_2))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-0.09800153)*gclwh4_11*pp*r22))+(((-0.009604)*gclwh1_2*pz*r20))+((gclwh3_2*pp*pz*r21))+(((0.0039239999976591)*gclwh12_3*pp*r21))+(((-5.4550720022482e-5)*gclwh1_3*r20))+(((-0.009604)*gclwh14_8*r20))+(((-2.0)*gclwh12_8*npy*pz))+(((-1.53e-6)*gclwh12_2*pp*r21))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((-1.469412e-8)*gclwh3_2*r21))+(((0.009604)*gclwh4_2*pz*r22))+(((-0.0113600000046818)*gclwh4_3*npz*pz))+(((2.0)*gclwh14_3*npx*pp*pz))+(((0.0113600000046818)*gclwh12_3*npy*pz))+(((2.9988e-7)*gclwh6_2*rxp1_2))+(((-2.0)*gclwh12_3*npy*pp*pz))+((gclwh12_8*pp*r21))+(((-0.19600306)*gclwh12_11*npy*pz))+(((0.009604)*gclwh14_2*pz*r20))+(((1.53e-6)*gclwh4_2*pp*r22))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.196)*gclwh10_2*pz*rxp2_2))+(((1.53e-6)*gclwh3_2*pp*r21))+(((-1.0)*gclwh4_8*pp*r22))+(((2.0)*gclwh14_8*npx*pz))+(((0.0152840000023409)*gclwh3_3*pp*r21))+(((-3.06e-6)*gclwh14_2*npx*pz))+(((-0.0039239999976591)*gclwh4_3*pp*r22))+(((-0.00094120669412)*gclwh4_11*r22))+(((-3.06e-6)*gclwh1_2*npx*pz))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.009604)*gclwh4_8*r22))+(((-0.009604)*gclwh12_2*pz*r21))+(((-2.9988e-7)*gclwh8_2*rxp0_2))+(((-0.0113600000046818)*gclwh3_3*npy*pz))+(((2.0)*gclwh4_8*npz*pz))+(((0.196)*gclwh6_2*pz*rxp1_2))+(((0.00094120669412)*gclwh12_11*r21))+(((2.9988e-7)*gclwh10_2*rxp2_2))+(((-0.0039239999976591)*gclwh14_3*pp*r20))+(((0.09800153)*gclwh12_11*pp*r21))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.009604)*gclwh3_2*pz*r21))+(((0.009604)*gclwh12_8*r21))+(((-1.469412e-8)*gclwh12_2*r21))+(((-1.0)*gclwh1_3*r20*(pp*pp)))+(((-3.06e-6)*gclwh3_2*npy*pz))+(((0.19600306)*gclwh14_11*npx*pz))+(((-0.00094120669412)*gclwh14_11*r20)));
op[18]=((0.680739999997659)+(((0.00094120669412)*gclwh5_10*r22))+(((-0.009604)*gclwh13_9*r21))+(((0.196)*gclwh9_0*pz*rxp0_2))+(((2.0)*gclwh2_1*npy*pp*pz))+(((1.34227200000468)*gclwh15_1*npx*pz))+(((-0.00644559014402248)*gclwh15_1*r20))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-3.06e-6)*gclwh2_0*npy*pz))+(((0.09800153)*gclwh5_10*pp*r22))+(((2.0)*gclwh13_9*npy*pz))+(((-1.469412e-8)*gclwh0_0*r20))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((0.196)*pz))+(((2.0)*gclwh5_0*npz*(pz*pz)))+((gclwh15_1*r20*(pp*pp)))+(((1.53e-6)*gclwh0_0*pp*r20))+(((0.009604)*gclwh5_9*r22))+(((1.53e-6)*gclwh2_0*pp*r21))+(((-0.009604)*gclwh5_0*pz*r22))+(((-2.9988e-7)*gclwh11_0*rxp2_2))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((0.680740000002341)*gclwh2_1*pp*r21))+(((-0.00644559014402248)*gclwh0_1*r20))+((gclwh13_0*pp*pz*r21))+(((1.469412e-8)*gclwh13_0*r21))+(((-1.469412e-8)*gclwh2_0*r21))+(((0.00644559014402248)*gclwh13_1*r21))+(((0.661532000002341)*gclwh13_1*pp*r21))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.19600306)*gclwh15_10*npx*pz))+(((0.009604)*gclwh15_9*r20))+((gclwh15_9*pp*r20))+(((-0.661532000002341)*gclwh5_1*pp*r22))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-3.06e-6)*gclwh0_0*npx*pz))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.009604)*gclwh0_0*pz*r20))+(((3.06e-6)*gclwh5_0*npz*pz))+(((0.196)*gclwh7_9*rxp1_2))+(((-0.009604)*gclwh2_0*pz*r21))+(((-2.0)*gclwh15_9*npx*pz))+(((-0.00644559014402248)*gclwh5_1*r22))+(((2.9988e-7)*gclwh9_0*rxp0_2))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((0.00094120669412)*gclwh15_10*r20))+(((-1.469412e-8)*gclwh5_0*r22))+(((-2.0)*gclwh5_9*npz*pz))+(((0.680740000002341)*gclwh0_1*pp*r20))+(((-0.196)*gclwh9_9*rxp0_2))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-1.53e-6)*gclwh15_0*pp*r20))+(((-3.06e-6)*gclwh13_0*npy*pz))+(((0.09800153)*gclwh15_10*pp*r20))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((1.53e-6)*gclwh13_0*pp*r21))+(((-0.196)*gclwh7_0*pz*rxp1_2))+(((-1.34227200000468)*gclwh0_1*npx*pz))+(((-1.469412e-8)*gclwh15_0*r20))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((0.009604)*gclwh13_0*pz*r21))+(((-0.19600306)*gclwh5_10*npz*pz))+(((0.19600306)*gclwh13_10*npy*pz))+(((-2.9988e-7)*gclwh7_0*rxp1_2))+(((1.34227200000468)*gclwh5_1*npz*pz))+(((0.196)*gclwh11_9*rxp2_2))+(((-0.009604)*gclwh15_0*pz*r20))+(((3.06e-6)*gclwh15_0*npx*pz))+(((-1.34227200000468)*gclwh2_1*npy*pz))+(((-1.34227200000468)*gclwh13_1*npy*pz))+(((-1.0)*gclwh13_9*pp*r21))+((gclwh5_1*r22*(pp*pp)))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.00644559014402248)*gclwh2_1*r21))+(((-0.09800153)*gclwh13_10*pp*r21))+(((-0.196)*gclwh11_0*pz*rxp2_2))+((gclwh5_9*pp*r22))+(((-1.53e-6)*gclwh5_0*pp*r22))+(((-0.661532000002341)*gclwh15_1*pp*r20))+(((-0.00094120669412)*gclwh13_10*r21))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[19]=((2.49696e-6)+(((1.632)*gclwh5_10*x77))+(((-1.0)*gclwh5_10*x112))+(((-1.632)*gclwh13_10*x93))+(((0.816)*gclwh13_10*x80))+(((-0.816)*pp*x86))+(((-0.816)*gclwh5_10*x92))+(((-1.0)*gclwh9_13*x110))+x309+x299+(((1.632)*gclwh15_10*x82))+(((0.007836864)*x114))+(((0.159936)*x168))+((gclwh11_13*x103))+(((-0.007836864)*x86))+(((-1.0)*x305))+(((-1.0)*x221)));
op[20]=((2.55816e-6)+((x113*x140))+(((2.43576e-6)*gclwh2_1*x80))+(((-4.87152e-6)*gclwh13_1*x93))+(((-1.0)*gclwh0_0*x118))+(((-0.488)*gclwh15_15*x82))+(((-1.0)*gclwh0_1*x123))+(((-1.0)*gclwh11_0*x122))+(((-0.008028944)*x136))+(((-0.796)*gclwh15_0*x113))+(((-0.488)*gclwh5_15*x77))+(((-1.0)*gclwh15_0*x118))+((gclwh13_1*x128))+(((-0.796)*gclwh5_0*x92))+(((2.43576e-6)*gclwh0_1*x113))+(((2.43576e-6)*gclwh13_1*x80))+(((-1.0)*gclwh15_1*x123))+(((-0.836)*gclwh5_10*x92))+(((-0.002343376)*x102))+(((0.002343376)*x134))+(((0.002343376)*x139))+(((1.592)*gclwh5_0*x77))+(((0.796)*gclwh0_0*x113))+(((-2.43576e-6)*gclwh5_1*x92))+(((-1.592)*gclwh13_0*x93))+(((-1.592)*gclwh0_0*x82))+(((-1.0)*gclwh7_0*x149))+(((0.488)*gclwh13_15*x93))+(((-1.0)*gclwh5_1*x117))+(((-1.672)*gclwh13_10*x93))+((x159*x92))+(((4.87152e-6)*gclwh15_1*x82))+(((-0.008028944)*x86))+(((0.796)*gclwh2_0*x80))+(((-1.592)*gclwh2_0*x93))+(((0.008028944)*x114))+(((-1.0)*gclwh5_0*x81))+(((-0.836)*pp*x86))+(((1.672)*gclwh5_10*x77))+(((-4.87152e-6)*gclwh0_1*x82))+((gclwh9_0*x162))+(((0.796)*gclwh13_0*x80))+(((1.672)*gclwh15_10*x82))+(((0.836)*gclwh13_10*x80))+(((-1.0)*gclwh2_1*x128))+(((-1.0)*gclwh2_0*x85))+(((4.87152e-6)*gclwh5_1*x77))+(((-1.0)*x141*x80))+(((-2.43576e-6)*gclwh15_1*x113))+(((-4.87152e-6)*gclwh2_1*x93))+((gclwh13_0*x85))+(((1.592)*gclwh15_0*x82)));
op[21]=((-0.0624079999953182)+(((-1.0)*gclwh7_9*x115))+(((-2.0)*gclwh5_9*x92))+(((4.0)*gclwh15_9*x82))+(((4.0)*gclwh5_9*x77))+(((-4.0)*gclwh13_9*x93))+(((6.12e-6)*gclwh5_10*x77))+(((2.0)*gclwh13_9*x80))+(((2.938824e-8)*x114))+((gclwh9_9*x79))+((gclwh13_9*x145))+(((-3.06e-6)*pp*x86))+(((-2.938824e-8)*x86))+(((-1.0)*gclwh15_9*x144))+(((-6.12e-6)*gclwh13_10*x93))+(((-1.0)*gclwh11_9*x98))+(((-3.06e-6)*gclwh5_10*x92))+(((6.12e-6)*gclwh15_10*x82))+(((-1.0)*gclwh5_9*x160))+(((-2.938824e-8)*x136))+(((3.06e-6)*gclwh13_10*x80))+(((-2.0)*gclwh15_9*x113)));
op[22]=((-0.0152839999976591)+(((2.0)*gclwh15_9*npx*pz))+(((0.0039239999976591)*gclwh15_1*pp*r20))+(((0.196)*gclwh9_0*pz*rxp0_2))+(((2.0)*gclwh2_1*npy*pp*pz))+(((2.0)*gclwh5_9*npz*pz))+(((-5.4550720022482e-5)*gclwh5_1*r22))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((-0.0039239999976591)*gclwh13_1*pp*r21))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-5.4550720022482e-5)*gclwh2_1*r21))+(((0.0113600000046818)*gclwh5_1*npz*pz))+(((-3.06e-6)*gclwh2_0*npy*pz))+(((-1.469412e-8)*gclwh0_0*r20))+(((0.0152840000023409)*gclwh2_1*pp*r21))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((0.196)*pz))+(((-0.19599694)*gclwh5_10*npz*pz))+(((2.0)*gclwh5_0*npz*(pz*pz)))+((gclwh15_1*r20*(pp*pp)))+(((-1.0)*gclwh15_9*pp*r20))+(((0.0113600000046818)*gclwh15_1*npx*pz))+(((1.53e-6)*gclwh0_0*pp*r20))+(((0.09799847)*gclwh5_10*pp*r22))+(((0.09799847)*gclwh15_10*pp*r20))+(((1.53e-6)*gclwh2_0*pp*r21))+(((-0.009604)*gclwh5_0*pz*r22))+(((-2.9988e-7)*gclwh11_0*rxp2_2))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((-0.0113600000046818)*gclwh2_1*npy*pz))+(((-5.4550720022482e-5)*gclwh15_1*r20))+(((-0.196)*gclwh11_9*rxp2_2))+(((-0.0113600000046818)*gclwh13_1*npy*pz))+(((5.4550720022482e-5)*gclwh13_1*r21))+((gclwh13_0*pp*pz*r21))+(((1.469412e-8)*gclwh13_0*r21))+(((-1.469412e-8)*gclwh2_0*r21))+(((0.196)*gclwh9_9*rxp0_2))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-3.06e-6)*gclwh0_0*npx*pz))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((0.19599694)*gclwh13_10*npy*pz))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.009604)*gclwh0_0*pz*r20))+(((3.06e-6)*gclwh5_0*npz*pz))+(((-0.19599694)*gclwh15_10*npx*pz))+(((-0.009604)*gclwh2_0*pz*r21))+(((0.009604)*gclwh13_9*r21))+(((2.9988e-7)*gclwh9_0*rxp0_2))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-1.469412e-8)*gclwh5_0*r22))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-1.53e-6)*gclwh15_0*pp*r20))+(((-3.06e-6)*gclwh13_0*npy*pz))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((1.53e-6)*gclwh13_0*pp*r21))+(((-0.196)*gclwh7_0*pz*rxp1_2))+(((-1.469412e-8)*gclwh15_0*r20))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((0.009604)*gclwh13_0*pz*r21))+(((0.00094117730588)*gclwh15_10*r20))+(((-0.009604)*gclwh15_9*r20))+(((0.00094117730588)*gclwh5_10*r22))+(((-2.9988e-7)*gclwh7_0*rxp1_2))+(((-2.0)*gclwh13_9*npy*pz))+(((0.0152840000023409)*gclwh0_1*pp*r20))+(((-0.009604)*gclwh5_9*r22))+((gclwh13_9*pp*r21))+(((-0.009604)*gclwh15_0*pz*r20))+(((3.06e-6)*gclwh15_0*npx*pz))+(((-5.4550720022482e-5)*gclwh0_1*r20))+((gclwh5_1*r22*(pp*pp)))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.09799847)*gclwh13_10*pp*r21))+(((-1.0)*gclwh5_9*pp*r22))+(((-0.196)*gclwh11_0*pz*rxp2_2))+(((-0.196)*gclwh7_9*rxp1_2))+(((0.0039239999976591)*gclwh5_1*pp*r22))+(((-0.00094117730588)*gclwh13_10*r21))+(((-1.53e-6)*gclwh5_0*pp*r22))+(((-0.0113600000046818)*gclwh0_1*npx*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[23]=((-6.12e-8)+(((-0.02)*gclwh13_10*x80))+(((0.04)*gclwh13_10*x93))+(((-0.04)*gclwh15_10*x82))+(((-1.0)*gclwh9_13*x163))+((gclwh5_10*x104))+((x136*x88))+((x86*x88))+(((-0.00019208)*x114))+x305+x299+(((-0.04)*gclwh5_10*x77))+(((0.00392)*x168))+((gclwh11_13*x124))+(((0.00019208)*x86))+(((-1.0)*x309))+(((-1.0)*x221)));
IkReal x317=pz*pz;
IkReal x318=(gclwh4_11*rxp2_2);
IkReal x319=(gclwh11_0*r22);
IkReal x320=((0.04)*pp);
IkReal x321=(pp*r21);
IkReal x322=(gclwh5_0*rxp2_2);
IkReal x323=(gclwh4_2*r22);
IkReal x324=(npy*pz);
IkReal x325=(npx*pz);
IkReal x326=((2.0)*gclwh9_9);
IkReal x327=(gclwh14_14*r20);
IkReal x328=(gclwh7_9*rxp1_2);
IkReal x329=(gclwh12_2*r21);
IkReal x330=(gclwh8_2*r20);
IkReal x331=(gclwh15_10*rxp0_2);
IkReal x332=((0.488)*pp);
IkReal x333=(gclwh15_15*r20);
IkReal x334=((0.00038416)*r20);
IkReal x335=((0.00784)*rxp0_2);
IkReal x336=((4.0)*gclwh14_8);
IkReal x337=((0.00038416)*r21);
IkReal x338=(gclwh11_9*r22);
IkReal x339=(gclwh5_1*rxp2_2);
IkReal x340=(gclwh9_7*r20);
IkReal x341=(gclwh8_12*r20);
IkReal x342=(pp*r22);
IkReal x343=((0.244)*gclwh12_14);
IkReal x344=((0.196)*rxp1_2);
IkReal x345=(gclwh5_10*rxp2_2);
IkReal x346=((2.0)*gclwh6_8);
IkReal x347=(gclwh10_8*r22);
IkReal x348=((1.0)*pz);
IkReal x349=(npz*pz);
IkReal x350=(gclwh10_2*rxp2_2);
IkReal x351=((2.938824e-8)*r21);
IkReal x352=((0.159936)*rxp1_2);
IkReal x353=(gclwh5_15*r22);
IkReal x354=(gclwh14_8*rxp0_2);
IkReal x355=((4.0)*gclwh7_9);
IkReal x356=(gclwh10_12*rxp2_2);
IkReal x357=((0.00019208)*r22);
IkReal x358=((0.392)*rxp2_2);
IkReal x359=((4.0)*gclwh4_8);
IkReal x360=(gclwh13_1*rxp1_2);
IkReal x361=(gclwh9_13*r20);
IkReal x362=(pp*r20);
IkReal x363=((4.0)*gclwh15_9);
IkReal x364=(gclwh11_13*r22);
IkReal x365=((0.038416)*r20);
IkReal x366=(gclwh14_3*rxp0_2);
IkReal x367=((0.196)*pz);
IkReal x368=((0.319872)*rxp1_2);
IkReal x369=(gclwh5_0*r22);
IkReal x370=((0.00019208)*r21);
IkReal x371=((4.0)*gclwh6_8);
IkReal x372=((0.00784)*rxp2_2);
IkReal x373=((0.038416)*r22);
IkReal x374=((4.0)*gclwh5_9);
IkReal x375=((0.122)*pp);
IkReal x376=(gclwh13_0*rxp1_2);
IkReal x377=(gclwh1_2*r20);
IkReal x378=((4.0)*gclwh9_9);
IkReal x379=((0.244)*pp);
IkReal x380=((0.196)*rxp2_2);
IkReal x381=((0.001171688)*r21);
IkReal x382=((2.339303904e-8)*r20);
IkReal x383=(gclwh6_2*r21);
IkReal x384=((0.009604)*pz);
IkReal x385=(gclwh5_15*rxp2_2);
IkReal x386=(gclwh13_10*rxp1_2);
IkReal x387=(gclwh12_11*rxp1_2);
IkReal x388=((0.047824)*rxp1_2);
IkReal x389=((0.007836864)*r21);
IkReal x390=((0.392)*rxp1_2);
IkReal x391=((0.095648)*rxp0_2);
IkReal x392=(gclwh14_2*rxp0_2);
IkReal x393=(gclwh10_2*r22);
IkReal x394=(gclwh4_14*r22);
IkReal x395=((0.392)*rxp0_2);
IkReal x396=(gclwh12_2*rxp1_2);
IkReal x397=(gclwh13_15*r21);
IkReal x398=(gclwh9_0*r20);
IkReal x399=(gclwh12_3*rxp1_2);
IkReal x400=((1.632)*pp);
IkReal x401=(gclwh4_11*r22);
IkReal x402=((0.019208)*r21);
IkReal x403=((0.816)*pp);
IkReal x404=(gclwh14_11*rxp0_2);
IkReal x405=(gclwh4_3*rxp2_2);
IkReal x406=(gclwh0_0*r20);
IkReal x407=((4.0)*gclwh8_8);
IkReal x408=(gclwh8_12*rxp0_2);
IkReal x409=((0.312032)*rxp1_2);
IkReal x410=((0.784)*rxp1_2);
IkReal x411=((4.0)*gclwh13_9);
IkReal x412=(gclwh14_11*r20);
IkReal x413=((0.02)*pp);
IkReal x414=((0.796)*pp);
IkReal x415=((0.019208)*r20);
IkReal x416=((0.095648)*rxp1_2);
IkReal x417=((4.0)*gclwh12_8);
IkReal x418=((1.53e-6)*pp);
IkReal x419=((0.015673728)*r21);
IkReal x420=((0.784)*rxp2_2);
IkReal x421=((2.0)*gclwh10_8);
IkReal x422=((0.196)*pp);
IkReal x423=((0.038416)*r21);
IkReal x424=((0.023912)*rxp1_2);
IkReal x425=(gclwh15_0*rxp0_2);
IkReal x426=((4.0)*gclwh10_8);
IkReal x427=((0.015673728)*r20);
IkReal x428=(gclwh15_1*rxp0_2);
IkReal x429=((0.023912)*rxp0_2);
IkReal x430=(gclwh7_0*r21);
IkReal x431=((0.488)*gclwh12_14);
IkReal x432=(gclwh4_14*rxp2_2);
IkReal x433=(gclwh6_2*rxp1_2);
IkReal x434=(gclwh10_12*r22);
IkReal x435=((2.0)*gclwh8_8);
IkReal x436=((3.06e-6)*pp);
IkReal x437=(gclwh11_13*rxp2_2);
IkReal x438=((1.592)*pp);
IkReal x439=(gclwh12_14*r21);
IkReal x440=((2.0)*gclwh7_9);
IkReal x441=(gclwh9_13*rxp0_2);
IkReal x442=((0.015289568)*r21);
IkReal x443=((0.019208)*r22);
IkReal x444=((0.488)*gclwh13_15);
IkReal x445=(gclwh4_2*rxp2_2);
IkReal x446=((0.319872)*rxp0_2);
IkReal x447=((0.009604)*r21);
IkReal x448=((0.244)*gclwh4_14);
IkReal x449=(gclwh3_2*r21);
IkReal x450=((2.339303904e-8)*r21);
IkReal x451=(gclwh15_9*rxp0_2);
IkReal x452=((0.784)*rxp0_2);
IkReal x453=((5.9976e-7)*rxp1_2);
IkReal x454=((0.047824)*rxp0_2);
IkReal x455=((0.009604)*r20);
IkReal x456=((0.001171688)*r22);
IkReal x457=(gclwh14_2*r20);
IkReal x458=(gclwh6_8*x402);
IkReal x459=((0.019208)*x347);
IkReal x460=((2.938824e-8)*x341);
IkReal x461=(gclwh12_8*x390);
IkReal x462=(gclwh4_8*x358);
IkReal x463=(gclwh8_8*x415);
IkReal x464=(gclwh6_12*x351);
IkReal x465=((2.938824e-8)*x434);
IkReal x466=((0.392)*x354);
IkReal x467=(gclwh12_14*x388);
IkReal x468=((0.047824)*x432);
IkReal x469=(gclwh14_14*x454);
IkReal x470=(gclwh15_15*x454);
IkReal x471=((0.047824)*x385);
IkReal x472=(gclwh13_15*x388);
IkReal x473=((2.938824e-8)*x361);
IkReal x474=(gclwh13_9*x390);
IkReal x475=((0.019208)*x338);
IkReal x476=(gclwh7_9*x402);
IkReal x477=(gclwh15_9*x395);
IkReal x478=(gclwh7_13*x351);
IkReal x479=((2.938824e-8)*x364);
IkReal x480=(gclwh9_9*x415);
IkReal x481=(gclwh5_9*x358);
IkReal x482=(gclwh6_12*x453);
IkReal x483=((5.9976e-7)*x356);
IkReal x484=(gclwh12_8*x402);
IkReal x485=(gclwh8_8*x395);
IkReal x486=(gclwh4_8*x443);
IkReal x487=(gclwh14_8*x415);
IkReal x488=((5.9976e-7)*x408);
IkReal x489=(gclwh10_8*x358);
IkReal x490=(gclwh6_8*x390);
IkReal x491=((0.002343376)*x439);
IkReal x492=((0.002343376)*x394);
IkReal x493=((0.002343376)*x327);
IkReal x494=((0.002343376)*x397);
IkReal x495=((0.002343376)*x333);
IkReal x496=((0.002343376)*x353);
IkReal x497=(gclwh5_9*x443);
IkReal x498=(gclwh15_9*x415);
IkReal x499=((5.9976e-7)*x441);
IkReal x500=((0.392)*x328);
IkReal x501=(gclwh11_9*x358);
IkReal x502=((5.9976e-7)*x437);
IkReal x503=(gclwh13_9*x402);
IkReal x504=(gclwh9_9*x395);
IkReal x505=(gclwh7_13*x453);
IkReal x506=(gclwh12_14*x424);
IkReal x507=(gclwh6_5*x381);
IkReal x508=(gclwh10_5*x456);
IkReal x509=(gclwh14_14*x429);
IkReal x510=((0.023912)*x432);
IkReal x511=((0.001171688)*gclwh8_5*r20);
IkReal x512=((1.469412e-8)*x393);
IkReal x513=(gclwh8_8*x455);
IkReal x514=(gclwh4_8*x380);
IkReal x515=((2.9988e-7)*x396);
IkReal x516=((0.196)*x354);
IkReal x517=((1.469412e-8)*x383);
IkReal x518=((0.009604)*x347);
IkReal x519=((1.469412e-8)*x330);
IkReal x520=((2.9988e-7)*x445);
IkReal x521=(gclwh6_8*x447);
IkReal x522=(gclwh12_8*x344);
IkReal x523=((2.9988e-7)*x392);
IkReal x524=((1.469412e-8)*x319);
IkReal x525=(gclwh13_9*x344);
IkReal x526=((0.009604)*x338);
IkReal x527=((2.9988e-7)*x376);
IkReal x528=((1.469412e-8)*x430);
IkReal x529=(gclwh7_9*x447);
IkReal x530=(gclwh9_9*x455);
IkReal x531=((0.196)*x451);
IkReal x532=((1.469412e-8)*x398);
IkReal x533=((2.9988e-7)*x425);
IkReal x534=(gclwh5_9*x380);
IkReal x535=((2.9988e-7)*x322);
IkReal x536=(gclwh11_7*x456);
IkReal x537=(gclwh7_7*x381);
IkReal x538=(gclwh13_15*x424);
IkReal x539=(gclwh15_15*x429);
IkReal x540=((0.001171688)*x340);
IkReal x541=((0.023912)*x385);
IkReal x542=((2.0)*x317);
IkReal x543=(x341*x436);
IkReal x544=(x342*x421);
IkReal x545=((6.12e-6)*gclwh10_12*x349);
IkReal x546=((6.12e-6)*gclwh6_12*x324);
IkReal x547=(x321*x346);
IkReal x548=(x325*x407);
IkReal x549=((3.06e-6)*gclwh10_12*x342);
IkReal x550=(x362*x435);
IkReal x551=(x349*x426);
IkReal x552=(x324*x371);
IkReal x553=((6.12e-6)*gclwh8_12*x325);
IkReal x554=((3.06e-6)*gclwh6_12*x321);
IkReal x555=((6.12e-6)*gclwh11_13*x349);
IkReal x556=(x361*x436);
IkReal x557=((6.12e-6)*gclwh7_13*x324);
IkReal x558=((2.0)*pp*x338);
IkReal x559=(x321*x440);
IkReal x560=(x325*x378);
IkReal x561=((3.06e-6)*gclwh11_13*x342);
IkReal x562=((3.06e-6)*gclwh7_13*x321);
IkReal x563=(x324*x355);
IkReal x564=((6.12e-6)*gclwh9_13*x325);
IkReal x565=((4.0)*gclwh11_9*x349);
IkReal x566=(x326*x362);
IkReal x567=(x349*x359);
IkReal x568=((2.0)*gclwh12_8*x321);
IkReal x569=(x325*x336);
IkReal x570=((2.0)*gclwh4_8*x342);
IkReal x571=((2.0)*gclwh14_8*x362);
IkReal x572=(x324*x417);
IkReal x573=(x321*x343);
IkReal x574=((0.488)*gclwh14_14*x325);
IkReal x575=((0.488)*gclwh4_14*x349);
IkReal x576=(x324*x431);
IkReal x577=(x342*x448);
IkReal x578=(x327*x379);
IkReal x579=((0.244)*gclwh13_15*x321);
IkReal x580=((0.488)*gclwh15_15*x325);
IkReal x581=((0.488)*gclwh5_15*x349);
IkReal x582=(x333*x379);
IkReal x583=((0.244)*gclwh5_15*x342);
IkReal x584=(x324*x444);
IkReal x585=(x324*x411);
IkReal x586=((2.0)*gclwh15_9*x362);
IkReal x587=((2.0)*gclwh5_9*x342);
IkReal x588=(x325*x363);
IkReal x589=((2.0)*gclwh13_9*x321);
IkReal x590=(x349*x374);
IkReal x591=((0.122)*gclwh6_5*x321);
IkReal x592=((0.122)*gclwh10_5*x342);
IkReal x593=((0.244)*gclwh8_5*x325);
IkReal x594=((0.244)*gclwh6_5*x324);
IkReal x595=((0.122)*gclwh8_5*x362);
IkReal x596=((0.244)*gclwh10_5*x349);
IkReal x597=(x367*x392);
IkReal x598=((1.53e-6)*gclwh10_2*x342);
IkReal x599=((1.53e-6)*gclwh6_2*x321);
IkReal x600=(x330*x384);
IkReal x601=(x324*x346);
IkReal x602=(pp*pz*x330);
IkReal x603=(x349*x421);
IkReal x604=(x367*x445);
IkReal x605=(gclwh12_3*pp*x344);
IkReal x606=((3.06e-6)*gclwh8_2*x325);
IkReal x607=(x330*x418);
IkReal x608=(gclwh12_2*pz*x344);
IkReal x609=((3.06e-6)*gclwh6_2*x324);
IkReal x610=(x383*x384);
IkReal x611=(x325*x435);
IkReal x612=((3.06e-6)*gclwh10_2*x349);
IkReal x613=(x384*x393);
IkReal x614=(x366*x422);
IkReal x615=(gclwh4_3*pp*x380);
IkReal x616=(x325*x326);
IkReal x617=(x384*x398);
IkReal x618=(x367*x425);
IkReal x619=((3.06e-6)*gclwh9_0*x325);
IkReal x620=((1.53e-6)*gclwh7_0*x321);
IkReal x621=(x322*x367);
IkReal x622=(x319*x418);
IkReal x623=(gclwh13_1*pp*x344);
IkReal x624=(gclwh9_0*pz*x362);
IkReal x625=(gclwh13_0*pz*x344);
IkReal x626=(x384*x430);
IkReal x627=(x422*x428);
IkReal x628=(x339*x422);
IkReal x629=((2.0)*gclwh11_9*x349);
IkReal x630=(x324*x440);
IkReal x631=((3.06e-6)*gclwh7_0*x324);
IkReal x632=((3.06e-6)*gclwh11_0*x349);
IkReal x633=((1.53e-6)*gclwh9_0*x362);
IkReal x634=(x319*x384);
IkReal x635=((0.244)*gclwh9_7*x325);
IkReal x636=((0.122)*gclwh7_7*x321);
IkReal x637=((0.122)*gclwh11_7*x342);
IkReal x638=((0.244)*gclwh11_7*x349);
IkReal x639=(x340*x375);
IkReal x640=((0.244)*gclwh7_7*x324);
IkReal x641=(gclwh6_2*npy*x542);
IkReal x642=(gclwh10_2*npz*x542);
IkReal x643=(gclwh10_2*x342*x348);
IkReal x644=(gclwh6_2*x321*x348);
IkReal x645=(gclwh8_2*npx*x542);
IkReal x646=(gclwh11_0*npz*x542);
IkReal x647=(gclwh7_0*npy*x542);
IkReal x648=(pp*x319*x348);
IkReal x649=(gclwh9_0*npx*x542);
IkReal x650=(gclwh7_0*x321*x348);
IkReal x651=(x470+x471);
IkReal x652=(x541+x539);
IkReal x653=(x509+x510);
IkReal x654=(x502+x505);
IkReal x655=(x469+x468);
IkReal x656=(x483+x482);
IkReal x657=(x526+x525+x529+x616);
IkReal x658=(x522+x521+x518+x611);
IkReal x659=(x494+x579+x580+x581);
IkReal x660=(x460+x545+x546+x543);
IkReal x661=(x491+x575+x574+x573);
IkReal x662=(x473+x557+x556+x555);
IkReal x663=(x511+x596+x595+x594);
IkReal x664=(x540+x640+x638+x639);
IkReal x665=(x531+x530+x534+x629+x630);
IkReal x666=(x516+x514+x513+x603+x601);
IkReal x667=(x492+x493+x578+x577+x576);
IkReal x668=(x485+x484+x568+x569+x567);
IkReal x669=(x496+x495+x582+x583+x584);
IkReal x670=(x478+x479+x564+x562+x561);
IkReal x671=(x503+x504+x588+x589+x590);
IkReal x672=(x465+x464+x553+x554+x549);
IkReal x673=((3.7332e-7)+x537+x536+x636+x637+x635);
IkReal x674=((3.7332e-7)+x508+x507+x593+x592+x591);
IkReal x675=(x458+x459+x461+x544+x547+x548);
IkReal x676=(x481+x480+x477+x566+x565+x563);
IkReal x677=(x474+x475+x476+x559+x558+x560);
IkReal x678=(x463+x462+x466+x552+x551+x550);
IkReal x679=(x498+x497+x500+x501+x585+x586+x587);
IkReal x680=(x489+x487+x486+x490+x571+x570+x572);
IkReal x681=(x527+x524+x528+x647+x646+x618+x619+x617+x624+x621+x620+x623+x622);
IkReal x682=(x517+x515+x512+x597+x599+x598+x642+x641+x602+x600+x606+x605+x604);
IkReal x683=(x533+x532+x535+x649+x648+x650+x625+x627+x626+x628+x634+x632+x633+x631);
IkReal x684=(x523+x520+x519+x645+x644+x643+x607+x609+x608+x614+x615+x610+x612+x613);
op[24]=((-0.398208)+x660+x678+(((-1.0)*x675))+(((-1.0)*x672)));
op[25]=((((-0.015673728)*x383))+(((3.264)*gclwh6_2*x324))+(((0.319872)*x445))+(((3.264)*gclwh10_2*x349))+(((0.319872)*x392))+(((-1.0)*x467))+(((-1.0)*gclwh12_2*x368))+((x330*x400))+(((-0.015673728)*x393))+(((-1.632)*gclwh6_2*x321))+x655+(((0.015673728)*x330))+(((-3.264)*gclwh8_2*x325))+(((-1.632)*gclwh10_2*x342)));
op[26]=((((-3.184)*gclwh8_12*x325))+(((-0.015289568)*x434))+(((-1.592)*gclwh10_12*x342))+(((3.184)*gclwh10_12*x349))+(((-1.592)*gclwh6_12*x321))+(((-1.0)*gclwh6_12*x442))+(((0.095648)*x432))+((x341*x438))+((gclwh14_14*x391))+(((0.015289568)*x341))+(((-1.0)*gclwh12_14*x416))+(((3.184)*gclwh6_12*x324)));
op[27]=((((-8.0)*gclwh6_8*x324))+(((-1.0)*gclwh4_8*x420))+(((8.0)*gclwh8_8*x325))+(((-8.0)*gclwh10_8*x349))+((x321*x371))+((x342*x426))+((gclwh6_8*x423))+((gclwh12_8*x410))+(((0.038416)*x347))+(((-1.0)*gclwh8_8*x365))+(((-0.784)*x354))+(((-1.0)*x362*x407)));
op[28]=((-0.00976)+x660+x675+(((-1.0)*x678))+(((-1.0)*x672)));
op[29]=((((-0.00038416)*x393))+(((0.00038416)*x330))+(((-0.00784)*x396))+(((0.08)*gclwh6_2*x324))+(((-1.0)*x320*x383))+(((-1.0)*x655))+((x320*x330))+x467+((gclwh4_2*x372))+((gclwh14_2*x335))+(((-1.0)*x320*x393))+(((-0.08)*gclwh8_2*x325))+(((-1.0)*gclwh6_2*x337))+(((0.08)*gclwh10_2*x349)));
op[30]=((((3.264)*gclwh11_0*x349))+(((0.319872)*x425))+(((-1.632)*gclwh7_0*x321))+(((0.015673728)*x398))+(((-3.264)*gclwh9_0*x325))+(((-0.015673728)*x319))+(((-1.0)*x651))+x472+(((1.632)*gclwh9_0*x362))+(((0.319872)*x322))+(((3.264)*gclwh7_0*x324))+(((-1.0)*x319*x400))+(((-1.0)*gclwh13_0*x368))+(((-1.0)*gclwh7_0*x419)));
op[31]=((-0.398208)+x662+x676+(((-1.0)*x677))+(((-1.0)*x670)));
op[32]=((((8.0)*gclwh11_9*x349))+(((8.0)*gclwh7_9*x324))+(((-1.0)*x321*x355))+(((-1.0)*gclwh13_9*x410))+(((-1.0)*gclwh7_9*x423))+(((-4.0)*pp*x338))+(((0.784)*x451))+(((-0.038416)*x338))+(((-8.0)*gclwh9_9*x325))+((gclwh9_9*x365))+((gclwh5_9*x420))+((x362*x378)));
op[33]=((((0.095648)*x385))+(((3.184)*gclwh7_13*x324))+(((-1.592)*gclwh11_13*x342))+(((-1.592)*gclwh7_13*x321))+((gclwh15_15*x391))+(((-0.015289568)*x364))+((x361*x438))+(((-1.0)*gclwh7_13*x442))+(((-1.0)*gclwh13_15*x416))+(((0.015289568)*x361))+(((3.184)*gclwh11_13*x349))+(((-3.184)*gclwh9_13*x325)));
op[34]=(((gclwh15_0*x335))+(((-0.08)*gclwh9_0*x325))+((x320*x398))+(((-1.0)*x472))+(((-0.00784)*x376))+(((-0.00038416)*x319))+(((-1.0)*gclwh7_0*x337))+(((-1.0)*x319*x320))+(((0.08)*gclwh7_0*x324))+(((0.08)*gclwh11_0*x349))+x651+((gclwh9_0*x334))+(((0.00784)*x322))+(((-1.0)*x320*x430)));
op[35]=((-0.00976)+x662+x677+(((-1.0)*x676))+(((-1.0)*x670)));
op[36]=((1.30194399999532)+(((-1.0)*x488))+(((-1.0)*x668))+x656+x680);
op[37]=((4.99392e-6)+(((1.632)*gclwh1_2*x362))+(((-1.0)*gclwh8_2*x446))+(((0.015673728)*x323))+(((-3.264)*gclwh14_2*x325))+((gclwh14_2*x427))+(((-3.264)*gclwh4_2*x349))+(((3.264)*gclwh12_2*x324))+(((-1.0)*gclwh3_2*x419))+((x323*x400))+(((-0.015673728)*x377))+(((0.319872)*x350))+(((-1.0)*x661))+((gclwh6_2*x368))+(((-1.632)*gclwh12_2*x321))+x667+(((-3.264)*gclwh1_2*x325))+(((-0.015673728)*x329))+(((1.632)*gclwh3_2*x321))+(((1.632)*gclwh14_2*x362))+(((-3.264)*gclwh3_2*x324)));
op[38]=((5.11632e-6)+(((0.004686752)*x394))+(((-0.004686752)*x439))+(((-1.0)*x321*x431))+(((-0.976)*gclwh14_14*x325))+(((0.312032)*x356))+(((0.976)*gclwh12_14*x324))+((gclwh6_12*x409))+(((-0.312032)*x408))+((x327*x332))+(((-0.976)*gclwh4_14*x349))+((x332*x394))+(((0.004686752)*x327)));
op[39]=((-0.0057439999906364)+(((8.0)*gclwh14_8*x325))+(((-1.0)*gclwh10_8*x420))+(((-8.0)*gclwh12_8*x324))+(((8.0)*gclwh4_8*x349))+((gclwh8_8*x452))+((x321*x417))+(((-1.0)*x342*x359))+((gclwh12_8*x423))+(((-1.0)*x336*x362))+(((-1.0)*gclwh14_8*x365))+(((-1.0)*gclwh4_8*x373))+(((-1.0)*gclwh6_8*x410)));
op[40]=((0.0289680000046818)+(((-1.0)*x488))+(((-1.0)*x680))+x656+x668);
op[41]=((-1.224e-7)+(((-0.08)*gclwh14_2*x325))+(((-0.08)*gclwh4_2*x349))+(((-1.0)*gclwh3_2*x337))+((x320*x323))+(((-1.0)*gclwh1_2*x334))+(((-0.00038416)*x329))+((x320*x449))+((x320*x377))+(((-1.0)*x320*x329))+(((-0.08)*gclwh3_2*x324))+(((0.00784)*x433))+(((-1.0)*x667))+(((-1.0)*gclwh8_2*x335))+x661+((gclwh14_2*x334))+(((0.00038416)*x323))+(((-0.08)*gclwh1_2*x325))+(((0.08)*gclwh12_2*x324))+((x320*x457))+(((0.00784)*x350)));
op[42]=((-4.99392e-6)+((gclwh9_0*x446))+(((-1.632)*gclwh15_0*x362))+(((-1.0)*gclwh15_0*x427))+(((-3.264)*gclwh0_0*x325))+(((3.264)*gclwh15_0*x325))+(((-1.0)*gclwh2_0*x419))+(((-3.264)*gclwh13_0*x324))+(((-1.0)*x659))+(((1.632)*gclwh2_0*x321))+(((-3.264)*gclwh2_0*x324))+((gclwh13_0*x419))+(((1.632)*gclwh13_0*x321))+(((-0.015673728)*x369))+(((-1.0)*gclwh7_0*x368))+x669+(((-0.319872)*gclwh11_0*rxp2_2))+(((-1.632)*gclwh5_0*x342))+(((-0.015673728)*x406))+(((1.632)*gclwh0_0*x362))+(((3.264)*gclwh5_0*x349)));
op[43]=((1.30194399999532)+(((-1.0)*x654))+x499+x671+(((-1.0)*x679)));
op[44]=((0.0057439999906364)+(((-1.0)*x362*x363))+(((-1.0)*gclwh5_9*x373))+(((-1.0)*x342*x374))+((gclwh13_9*x423))+((gclwh9_9*x452))+(((8.0)*gclwh5_9*x349))+(((-1.0)*gclwh11_9*x420))+((x321*x411))+(((-8.0)*gclwh13_9*x324))+(((8.0)*gclwh15_9*x325))+(((-1.0)*gclwh15_9*x365))+(((-0.784)*x328)));
op[45]=((5.11632e-6)+(((-0.004686752)*x353))+(((0.004686752)*x397))+(((-1.0)*x332*x353))+(((0.976)*gclwh15_15*x325))+((x321*x444))+(((-1.0)*gclwh7_13*x409))+(((-0.312032)*x437))+(((0.976)*gclwh5_15*x349))+(((-0.004686752)*x333))+(((-1.0)*x332*x333))+(((-0.976)*gclwh13_15*x324))+(((0.312032)*x441)));
op[46]=((1.224e-7)+(((-1.0)*gclwh2_0*x337))+(((-0.08)*gclwh0_0*x325))+((x320*x406))+(((0.08)*gclwh5_0*x349))+((gclwh13_0*r21*x320))+(((-1.0)*gclwh0_0*x334))+(((0.08)*gclwh15_0*x325))+(((-0.08)*gclwh2_0*x324))+(((-1.0)*x669))+(((-1.0)*gclwh11_0*x372))+x659+((gclwh13_0*x337))+(((-1.0)*gclwh15_0*x334))+((gclwh9_0*x335))+(((-1.0)*gclwh15_0*r20*x320))+(((-1.0)*x320*x369))+(((-0.00784)*gclwh7_0*rxp1_2))+(((-0.00038416)*x369))+(((-0.08)*gclwh13_0*x324))+((gclwh2_0*r21*x320)));
op[47]=((0.0289680000046818)+(((-1.0)*x654))+x499+x679+(((-1.0)*x671)));
op[48]=((((0.159936)*x404))+(((-0.816)*gclwh10_12*x342))+(((1.632)*gclwh10_12*x349))+(((-1.0)*gclwh12_11*x352))+(((1.632)*gclwh6_12*x324))+(((-1.0)*x506))+(((-0.007836864)*x434))+(((-1.0)*gclwh6_12*x389))+(((-1.0)*x663))+(((0.159936)*x318))+(((0.007836864)*x341))+x653+x674+((x341*x403))+(((-0.816)*gclwh6_12*x321))+(((-1.632)*gclwh8_12*x325)));
op[49]=(((gclwh6_8*x321))+(((-1.0)*x684))+(((-0.01920770012)*x404))+(((-1.0)*gclwh8_8*x362))+(((-0.01920770012)*x318))+(((-1.0)*x666))+x658+x682+((gclwh10_8*x342))+(((0.131542656000459)*x405))+(((0.131542656000459)*x366))+(((0.01920770012)*x387))+(((-0.131542656000459)*x399)));
op[50]=((0.194224)+(((-5.9976e-7)*x387))+(((5.9976e-7)*x404))+x675+(((5.9976e-7)*x318))+(((-1.0)*x678)));
op[51]=((((-1.592)*gclwh6_2*x324))+(((-1.592)*gclwh10_2*x349))+(((-0.156016)*x445))+(((1.592)*gclwh8_2*x325))+(((4.7740896e-7)*x366))+(((-0.163856)*x404))+(((-0.156016)*x392))+(((0.007644784)*x393))+(((-0.163856)*x318))+(((0.796)*gclwh10_2*x342))+(((-1.0)*x655))+(((0.796)*gclwh6_2*x321))+x467+(((-0.007644784)*x330))+(((-4.7740896e-7)*x399))+(((0.007644784)*x383))+(((0.156016)*x396))+(((-1.0)*x330*x414))+(((4.7740896e-7)*x405))+(((0.163856)*x387)));
op[52]=((((-1.0)*gclwh10_12*x357))+(((-0.02)*gclwh10_12*x342))+(((-0.00392)*x318))+(((-0.04)*gclwh8_12*x325))+(((0.00392)*x387))+(((0.00019208)*x341))+(((-1.0)*x653))+(((0.04)*gclwh6_12*x324))+(((-0.00392)*x404))+(((-1.0)*x663))+(((-0.02)*gclwh6_12*x321))+x506+x674+((x341*x413))+(((-1.0)*gclwh6_12*x370))+(((0.04)*gclwh10_12*x349)));
op[53]=((((-0.01920829988)*x318))+(((-1.0)*x684))+((gclwh8_8*x362))+(((-1.0)*x658))+(((0.00111328000045882)*x405))+(((0.01920829988)*x387))+(((-1.0)*gclwh6_8*x321))+x666+x682+(((-1.0)*gclwh10_8*x342))+(((-0.01920829988)*x404))+(((0.00111328000045882)*x366))+(((-0.00111328000045882)*x399)));
op[54]=((((0.131542656000459)*x339))+(((-1.0)*x683))+(((-0.01920829988)*x331))+(((-0.01920829988)*x345))+(((-1.0)*pp*x338))+(((-1.0)*x657))+(((0.01920829988)*x386))+x665+x681+(((-1.0)*gclwh7_9*x321))+((gclwh9_9*x362))+(((0.131542656000459)*x428))+(((-0.131542656000459)*x360)));
op[55]=((((1.632)*gclwh11_13*x349))+(((-0.816)*gclwh11_13*x342))+(((-1.632)*gclwh9_13*x325))+(((-0.007836864)*x364))+((x361*x403))+(((0.159936)*x331))+(((-1.0)*x538))+(((-1.0)*x664))+(((1.632)*gclwh7_13*x324))+x652+x673+(((0.159936)*x345))+(((0.007836864)*x361))+(((-1.0)*gclwh7_13*x389))+(((-0.816)*gclwh7_13*x321))+(((-1.0)*gclwh13_10*x352)));
op[56]=((((0.156016)*x376))+(((4.7740896e-7)*x428))+(((0.796)*gclwh7_0*x321))+(((1.592)*gclwh9_0*x325))+(((0.007644784)*x319))+(((0.007644784)*x430))+(((-1.0)*x472))+(((-1.592)*gclwh11_0*x349))+(((-4.7740896e-7)*x360))+(((-0.163856)*x386))+(((-0.156016)*x322))+(((-0.796)*gclwh9_0*x362))+(((-1.592)*gclwh7_0*x324))+x651+(((0.163856)*x345))+((x319*x414))+(((-0.007644784)*x398))+(((-0.156016)*x425))+(((0.163856)*x331))+(((4.7740896e-7)*x339)));
op[57]=((0.194224)+(((-5.9976e-7)*x386))+(((5.9976e-7)*x331))+(((5.9976e-7)*x345))+x677+(((-1.0)*x676)));
op[58]=((((-1.0)*gclwh9_9*x362))+(((-1.0)*x683))+(((-0.00111328000045882)*x360))+(((-0.01920770012)*x345))+((pp*x338))+(((0.00111328000045882)*x339))+(((-0.01920770012)*x331))+(((-1.0)*x665))+x657+x681+(((0.01920770012)*x386))+((gclwh7_9*x321))+(((0.00111328000045882)*x428)));
op[59]=((((0.04)*gclwh11_13*x349))+(((-0.04)*gclwh9_13*x325))+((x361*x413))+(((0.00392)*x386))+(((-1.0)*gclwh11_13*x357))+(((-1.0)*x652))+(((-0.02)*gclwh11_13*x342))+(((-1.0)*x664))+(((-1.0)*gclwh7_13*x370))+x538+(((-0.00392)*x345))+(((-0.02)*gclwh7_13*x321))+x673+(((-0.00392)*x331))+(((0.04)*gclwh7_13*x324))+(((0.00019208)*x361)));
op[60]=((-2.49696e-6)+(((-1.0)*x349*x448))+(((-0.244)*gclwh14_14*x325))+((x324*x343))+(((1.632)*gclwh12_11*x324))+(((-1.0)*gclwh12_14*x381))+(((0.159936)*x356))+(((0.816)*gclwh4_11*x342))+((gclwh8_5*x429))+(((-0.159936)*x408))+((x327*x375))+(((-1.0)*gclwh12_11*x389))+(((0.001171688)*x327))+(((-0.816)*gclwh12_11*x321))+(((-0.023912)*gclwh10_5*rxp2_2))+(((0.122)*gclwh4_14*x342))+(((-1.632)*gclwh14_11*x325))+(((-1.632)*gclwh4_11*x349))+(((0.001171688)*x394))+(((-1.0)*gclwh6_5*x424))+(((0.007836864)*x412))+(((0.816)*gclwh14_11*x362))+(((0.007836864)*x401))+(((-0.122)*gclwh12_14*x321))+((gclwh6_12*x352)));
op[61]=((0.680739999997659)+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-1.34227200000468)*gclwh1_3*npx*pz))+(((3.06e-6)*gclwh1_2*npx*pz))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((1.469412e-8)*gclwh1_2*r20))+((gclwh14_2*pp*pz*r20))+(((2.0)*gclwh4_3*npz*pp*pz))+(((-1.34227200000468)*gclwh4_3*npz*pz))+(((0.196)*pz))+(((1.469412e-8)*gclwh3_2*r21))+(((0.196)*gclwh8_8*rxp0_2))+((gclwh12_3*r21*(pp*pp)))+(((-1.53e-6)*gclwh1_2*pp*r20))+(((-1.53e-6)*gclwh14_2*pp*r20))+(((-0.00644559014402248)*gclwh1_3*r20))+(((-0.196)*gclwh8_2*pz*rxp0_2))+(((-1.53e-6)*gclwh4_2*pp*r22))+(((-1.0)*gclwh14_8*pp*r20))+((gclwh1_2*pp*pz*r20))+(((-0.661532000002341)*gclwh12_3*pp*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-1.469412e-8)*gclwh14_2*r20))+(((-0.00644559014402248)*gclwh3_3*r21))+(((1.53e-6)*gclwh12_2*pp*r21))+(((-3.06e-6)*gclwh12_2*npy*pz))+(((-0.196)*gclwh10_8*rxp2_2))+(((2.0)*gclwh3_3*npy*pp*pz))+(((-0.09799847)*gclwh14_11*pp*r20))+(((-0.196)*gclwh6_8*rxp1_2))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-0.009604)*gclwh1_2*pz*r20))+((gclwh3_2*pp*pz*r21))+(((-1.469412e-8)*gclwh4_2*r22))+(((-0.009604)*gclwh14_8*r20))+(((-2.0)*gclwh12_8*npy*pz))+(((-0.00094117730588)*gclwh4_11*r22))+(((0.00644559014402248)*gclwh14_3*r20))+(((3.06e-6)*gclwh3_2*npy*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.009604)*gclwh4_2*pz*r22))+(((1.469412e-8)*gclwh12_2*r21))+(((-0.09799847)*gclwh4_11*pp*r22))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+((gclwh12_8*pp*r21))+(((-1.34227200000468)*gclwh14_3*npx*pz))+(((0.009604)*gclwh14_2*pz*r20))+(((0.00094117730588)*gclwh12_11*r21))+(((0.00644559014402248)*gclwh4_3*r22))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.09799847)*gclwh12_11*pp*r21))+(((3.06e-6)*gclwh4_2*npz*pz))+(((0.19599694)*gclwh4_11*npz*pz))+(((0.196)*gclwh10_2*pz*rxp2_2))+(((1.34227200000468)*gclwh12_3*npy*pz))+(((-1.53e-6)*gclwh3_2*pp*r21))+(((-1.0)*gclwh4_8*pp*r22))+(((2.0)*gclwh14_8*npx*pz))+(((0.680740000002341)*gclwh3_3*pp*r21))+(((-0.19599694)*gclwh12_11*npy*pz))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.009604)*gclwh4_8*r22))+(((-0.009604)*gclwh12_2*pz*r21))+(((3.06e-6)*gclwh14_2*npx*pz))+(((-0.00644559014402248)*gclwh12_3*r21))+(((2.0)*gclwh4_8*npz*pz))+(((0.196)*gclwh6_2*pz*rxp1_2))+(((0.661532000002341)*gclwh4_3*pp*r22))+(((0.680740000002341)*gclwh1_3*pp*r20))+(((-2.9988e-7)*gclwh6_2*rxp1_2))+(((-0.00094117730588)*gclwh14_11*r20))+(((-1.34227200000468)*gclwh3_3*npy*pz))+(((0.661532000002341)*gclwh14_3*pp*r20))+(((2.9988e-7)*gclwh8_2*rxp0_2))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.009604)*gclwh3_2*pz*r21))+(((0.009604)*gclwh12_8*r21))+(((0.19599694)*gclwh14_11*npx*pz))+(((-1.0)*gclwh1_3*r20*(pp*pp)))+(((-2.9988e-7)*gclwh10_2*rxp2_2)));
op[62]=((0.0624079999953182)+(((2.938824e-8)*x412))+(((-1.0)*gclwh12_11*x351))+(((-1.0)*x680))+(((-3.06e-6)*gclwh12_11*x321))+(((-6.12e-6)*gclwh4_11*x349))+(((6.12e-6)*gclwh12_11*x324))+(((-6.12e-6)*gclwh14_11*x325))+x668+(((3.06e-6)*gclwh4_11*x342))+(((3.06e-6)*gclwh14_11*x362))+(((2.938824e-8)*x401)));
op[63]=((2.55816e-6)+(((-0.796)*gclwh1_2*x362))+(((-0.156016)*x433))+(((1.592)*gclwh1_2*x325))+(((-4.87152e-6)*gclwh4_3*x349))+(((1.592)*gclwh3_2*x324))+(((1.672)*gclwh4_11*x349))+(((-1.0)*x323*x414))+(((-0.007644784)*x457))+(((2.43576e-6)*gclwh4_3*x342))+(((1.672)*gclwh14_11*x325))+(((0.796)*gclwh12_2*x321))+(((0.836)*gclwh12_11*x321))+(((-0.007644784)*x323))+(((-0.796)*gclwh14_2*x362))+(((-1.0)*gclwh3_3*x450))+(((-4.87152e-6)*gclwh1_3*x325))+(((2.339303904e-8)*gclwh4_3*r22))+(((-0.836)*gclwh14_11*x362))+(((0.008028944)*gclwh12_11*r21))+((gclwh14_3*x382))+(((0.007644784)*x449))+(((-1.592)*gclwh12_2*x324))+(((-1.0)*gclwh1_3*x382))+(((1.592)*gclwh14_2*x325))+(((0.007644784)*x377))+(((0.156016)*gclwh8_2*rxp0_2))+(((-1.0)*x667))+(((-2.43576e-6)*gclwh12_3*x321))+(((-0.836)*gclwh4_11*x342))+(((-0.156016)*x350))+(((-0.796)*gclwh3_2*x321))+x661+(((1.592)*gclwh4_2*x349))+(((-0.008028944)*x412))+(((2.43576e-6)*gclwh3_3*x321))+(((2.43576e-6)*gclwh14_3*x362))+(((2.43576e-6)*gclwh1_3*x362))+(((-4.87152e-6)*gclwh14_3*x325))+(((-0.008028944)*x401))+(((4.87152e-6)*gclwh12_3*x324))+(((-4.87152e-6)*gclwh3_3*x324))+(((0.007644784)*x329))+(((-1.672)*gclwh12_11*x324))+(((-1.0)*gclwh12_3*x450)));
IkReal x685=((1.672)*pz);
IkReal x686=(gclwh5_10*npz);
IkReal x687=(gclwh15_9*r20);
IkReal x688=(gclwh5_1*r22);
IkReal x689=(npy*pz);
IkReal x690=(gclwh13_15*r21);
IkReal x691=((0.02)*pp);
IkReal x692=(gclwh15_10*r20);
IkReal x693=((2.339303904e-8)*r20);
IkReal x694=(gclwh5_10*r22);
IkReal x695=(gclwh12_11*r21);
IkReal x696=(gclwh7_13*rxp1_2);
IkReal x697=((0.122)*pp);
IkReal x698=(gclwh5_0*r22);
IkReal x699=(gclwh12_14*r21);
IkReal x700=((2.339303904e-8)*r21);
IkReal x701=(gclwh15_10*npx);
IkReal x702=(gclwh5_15*r22);
IkReal x703=((0.244)*pp);
IkReal x704=((0.023912)*rxp2_2);
IkReal x705=(gclwh5_9*r22);
IkReal x706=(gclwh4_14*r22);
IkReal x707=((0.00392)*rxp0_2);
IkReal x708=(npx*pz);
IkReal x709=((0.796)*pp);
IkReal x710=(gclwh2_0*r21);
IkReal x711=(gclwh0_0*r20);
IkReal x712=(gclwh15_0*r20);
IkReal x713=(gclwh13_10*r21);
IkReal x714=(gclwh14_14*r20);
IkReal x715=((6.12e-6)*pz);
IkReal x716=(gclwh4_11*r22);
IkReal x717=(gclwh11_13*rxp2_2);
IkReal x718=((1.632)*pz);
IkReal x719=(gclwh15_15*r20);
IkReal x720=(npz*pz);
IkReal x721=(gclwh13_9*r21);
IkReal x722=((2.43576e-6)*pp);
IkReal x723=(gclwh13_0*r21);
IkReal x724=((0.816)*pp);
IkReal x725=((3.06e-6)*pp);
IkReal x726=((0.04)*pz);
IkReal x727=((0.023912)*rxp1_2);
IkReal x728=((0.836)*pp);
IkReal x729=((0.023912)*rxp0_2);
IkReal x730=(gclwh14_11*r20);
IkReal x731=((2.0)*pp);
IkReal x732=((0.001171688)*x702);
IkReal x733=((0.001171688)*x719);
IkReal x734=(gclwh7_7*x727);
IkReal x735=(gclwh11_7*x704);
IkReal x736=((0.001171688)*x690);
IkReal x737=(gclwh9_7*x729);
IkReal x738=(x697*x702);
IkReal x739=(x697*x719);
IkReal x740=((0.244)*gclwh13_15*x689);
IkReal x741=(x690*x697);
IkReal x742=((0.244)*gclwh5_15*x720);
IkReal x743=((0.244)*gclwh15_15*x708);
IkReal x744=(x735+x734);
IkReal x745=(x736+x742+x743+x741);
IkReal x746=(x733+x732+x739+x738+x740);
op[64]=((6.12e-8)+(((-0.00019208)*x716))+(((0.00392)*gclwh10_12*rxp2_2))+((gclwh8_5*x729))+(((-0.001171688)*x706))+(((-0.001171688)*x714))+(((0.001171688)*x699))+(((-0.244)*gclwh12_14*x689))+(((-1.0)*x691*x730))+(((0.04)*gclwh14_11*x708))+(((-1.0)*x691*x716))+((x697*x699))+((x691*x695))+(((0.00019208)*x695))+(((-1.0)*gclwh6_5*x727))+(((0.244)*gclwh4_14*x720))+(((-0.04)*gclwh12_11*x689))+(((0.00392)*gclwh6_12*rxp1_2))+(((0.244)*gclwh14_14*x708))+(((-1.0)*x697*x714))+(((-1.0)*x697*x706))+(((-1.0)*gclwh8_12*x707))+(((-0.00019208)*x730))+(((0.04)*gclwh4_11*x720))+(((-1.0)*gclwh10_5*x704)));
op[65]=((-0.0152839999976591)+(((-0.09800153)*gclwh14_11*pp*r20))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((3.06e-6)*gclwh1_2*npx*pz))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((1.469412e-8)*gclwh1_2*r20))+((gclwh14_2*pp*pz*r20))+(((5.4550720022482e-5)*gclwh4_3*r22))+(((-0.0113600000046818)*gclwh14_3*npx*pz))+(((-5.4550720022482e-5)*gclwh12_3*r21))+(((2.0)*gclwh4_3*npz*pp*pz))+(((0.19600306)*gclwh4_11*npz*pz))+(((0.0152840000023409)*gclwh1_3*pp*r20))+(((0.196)*pz))+(((-0.0113600000046818)*gclwh1_3*npx*pz))+(((1.469412e-8)*gclwh3_2*r21))+((gclwh12_3*r21*(pp*pp)))+(((5.4550720022482e-5)*gclwh14_3*r20))+(((-1.53e-6)*gclwh1_2*pp*r20))+(((-1.53e-6)*gclwh14_2*pp*r20))+(((-0.196)*gclwh8_2*pz*rxp0_2))+(((-1.53e-6)*gclwh4_2*pp*r22))+(((-2.0)*gclwh4_8*npz*pz))+((gclwh1_2*pp*pz*r20))+(((-5.4550720022482e-5)*gclwh3_3*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-1.469412e-8)*gclwh14_2*r20))+(((0.009604)*gclwh4_8*r22))+(((0.196)*gclwh10_8*rxp2_2))+(((1.53e-6)*gclwh12_2*pp*r21))+(((-3.06e-6)*gclwh12_2*npy*pz))+(((2.0)*gclwh3_3*npy*pp*pz))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-0.09800153)*gclwh4_11*pp*r22))+(((-1.0)*gclwh12_8*pp*r21))+(((-0.009604)*gclwh1_2*pz*r20))+((gclwh3_2*pp*pz*r21))+(((0.0039239999976591)*gclwh12_3*pp*r21))+(((-5.4550720022482e-5)*gclwh1_3*r20))+(((-1.469412e-8)*gclwh4_2*r22))+(((2.0)*gclwh12_8*npy*pz))+((gclwh14_8*pp*r20))+(((3.06e-6)*gclwh3_2*npy*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.009604)*gclwh14_8*r20))+(((0.009604)*gclwh4_2*pz*r22))+(((-0.0113600000046818)*gclwh4_3*npz*pz))+(((1.469412e-8)*gclwh12_2*r21))+(((2.0)*gclwh14_3*npx*pp*pz))+(((0.0113600000046818)*gclwh12_3*npy*pz))+(((-2.0)*gclwh14_8*npx*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.19600306)*gclwh12_11*npy*pz))+(((0.009604)*gclwh14_2*pz*r20))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh1_3*npx*pp*pz))+(((3.06e-6)*gclwh4_2*npz*pz))+(((0.196)*gclwh10_2*pz*rxp2_2))+(((-1.53e-6)*gclwh3_2*pp*r21))+(((0.0152840000023409)*gclwh3_3*pp*r21))+(((-0.0039239999976591)*gclwh4_3*pp*r22))+(((-0.00094120669412)*gclwh4_11*r22))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.009604)*gclwh12_2*pz*r21))+(((3.06e-6)*gclwh14_2*npx*pz))+(((-0.0113600000046818)*gclwh3_3*npy*pz))+(((-0.196)*gclwh8_8*rxp0_2))+(((-0.009604)*gclwh12_8*r21))+(((0.196)*gclwh6_2*pz*rxp1_2))+(((-2.9988e-7)*gclwh6_2*rxp1_2))+(((0.00094120669412)*gclwh12_11*r21))+(((-0.0039239999976591)*gclwh14_3*pp*r20))+(((0.196)*gclwh6_8*rxp1_2))+(((0.09800153)*gclwh12_11*pp*r21))+(((2.9988e-7)*gclwh8_2*rxp0_2))+((gclwh4_8*pp*r22))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.009604)*gclwh3_2*pz*r21))+(((-1.0)*gclwh1_3*r20*(pp*pp)))+(((0.19600306)*gclwh14_11*npx*pz))+(((-0.00094120669412)*gclwh14_11*r20))+(((-2.9988e-7)*gclwh10_2*rxp2_2)));
op[66]=((-0.680739999997659)+(((0.00094120669412)*gclwh5_10*r22))+(((2.0)*gclwh15_9*npx*pz))+(((0.196)*gclwh9_0*pz*rxp0_2))+(((2.0)*gclwh2_1*npy*pp*pz))+(((2.0)*gclwh5_9*npz*pz))+(((1.34227200000468)*gclwh15_1*npx*pz))+(((-0.00644559014402248)*gclwh15_1*r20))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((3.06e-6)*gclwh0_0*npx*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-3.06e-6)*gclwh5_0*npz*pz))+(((0.09800153)*gclwh5_10*pp*r22))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((0.196)*pz))+(((2.0)*gclwh5_0*npz*(pz*pz)))+((gclwh15_1*r20*(pp*pp)))+(((-1.0)*gclwh15_9*pp*r20))+(((1.53e-6)*gclwh5_0*pp*r22))+(((-0.009604)*gclwh5_0*pz*r22))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((0.680740000002341)*gclwh2_1*pp*r21))+(((-0.196)*gclwh11_9*rxp2_2))+(((-0.00644559014402248)*gclwh0_1*r20))+(((1.53e-6)*gclwh15_0*pp*r20))+((gclwh13_0*pp*pz*r21))+(((-1.53e-6)*gclwh2_0*pp*r21))+(((0.196)*gclwh9_9*rxp0_2))+(((0.00644559014402248)*gclwh13_1*r21))+(((0.661532000002341)*gclwh13_1*pp*r21))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.19600306)*gclwh15_10*npx*pz))+(((1.469412e-8)*gclwh2_0*r21))+(((-0.661532000002341)*gclwh5_1*pp*r22))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-1.53e-6)*gclwh13_0*pp*r21))+(((2.9988e-7)*gclwh11_0*rxp2_2))+(((-1.53e-6)*gclwh0_0*pp*r20))+(((2.0)*gclwh13_1*npy*pp*pz))+(((2.9988e-7)*gclwh7_0*rxp1_2))+(((-0.009604)*gclwh0_0*pz*r20))+(((1.469412e-8)*gclwh15_0*r20))+(((-0.009604)*gclwh2_0*pz*r21))+(((0.009604)*gclwh13_9*r21))+(((-0.00644559014402248)*gclwh5_1*r22))+(((-1.469412e-8)*gclwh13_0*r21))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((0.00094120669412)*gclwh15_10*r20))+(((0.680740000002341)*gclwh0_1*pp*r20))+(((-2.9988e-7)*gclwh9_0*rxp0_2))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((0.09800153)*gclwh15_10*pp*r20))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((3.06e-6)*gclwh13_0*npy*pz))+(((-0.196)*gclwh7_0*pz*rxp1_2))+(((-1.34227200000468)*gclwh0_1*npx*pz))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((3.06e-6)*gclwh2_0*npy*pz))+(((0.009604)*gclwh13_0*pz*r21))+(((-0.19600306)*gclwh5_10*npz*pz))+(((-0.009604)*gclwh15_9*r20))+(((0.19600306)*gclwh13_10*npy*pz))+(((-2.0)*gclwh13_9*npy*pz))+(((1.34227200000468)*gclwh5_1*npz*pz))+(((-0.009604)*gclwh5_9*r22))+((gclwh13_9*pp*r21))+(((-0.009604)*gclwh15_0*pz*r20))+(((-3.06e-6)*gclwh15_0*npx*pz))+(((-1.34227200000468)*gclwh2_1*npy*pz))+(((-1.34227200000468)*gclwh13_1*npy*pz))+((gclwh5_1*r22*(pp*pp)))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.00644559014402248)*gclwh2_1*r21))+(((-0.09800153)*gclwh13_10*pp*r21))+(((1.469412e-8)*gclwh0_0*r20))+(((-1.0)*gclwh5_9*pp*r22))+(((-0.196)*gclwh11_0*pz*rxp2_2))+(((-0.196)*gclwh7_9*rxp1_2))+(((-0.661532000002341)*gclwh15_1*pp*r20))+(((-0.00094120669412)*gclwh13_10*r21))+(((1.469412e-8)*gclwh5_0*r22))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[67]=((-2.49696e-6)+(((-0.007836864)*x692))+(((-0.007836864)*x694))+((x713*x724))+((x701*x718))+(((-1.0)*x694*x724))+(((-0.159936)*x717))+(((0.007836864)*x713))+(((-1.0)*x692*x724))+(((-1.0)*x737))+x744+x745+((x686*x718))+(((-1.0)*x746))+(((-0.159936)*x696))+(((0.159936)*gclwh9_13*rxp0_2))+(((-1.632)*gclwh13_10*x689)));
op[68]=((-2.55816e-6)+((gclwh2_1*r21*x722))+(((0.488)*gclwh15_15*x708))+(((-1.0)*gclwh15_1*x693))+(((-4.87152e-6)*gclwh13_1*x689))+((x685*x701))+(((-0.007644784)*x723))+((x713*x728))+(((1.592)*gclwh2_0*x689))+(((0.008028944)*x713))+(((0.156016)*gclwh11_0*rxp2_2))+(((4.87152e-6)*gclwh5_1*x720))+(((-1.0)*x709*x723))+(((0.007644784)*x712))+(((0.007644784)*x711))+(((0.007644784)*x710))+(((0.002343376)*x690))+(((-1.0)*x702*x703))+(((-1.0)*x694*x728))+(((1.592)*gclwh13_0*x689))+((x685*x686))+(((-1.0)*x709*x711))+(((-1.0)*x709*x710))+(((-1.0)*x692*x728))+(((-1.0)*gclwh2_1*x700))+(((-1.0)*x703*x719))+(((-0.156016)*gclwh9_0*rxp0_2))+((x690*x703))+(((-1.0)*gclwh13_10*npy*x685))+(((-1.0)*gclwh15_1*r20*x722))+((x709*x712))+(((-0.002343376)*x702))+(((-0.002343376)*x719))+(((-4.87152e-6)*gclwh2_1*x689))+(((-0.008028944)*x692))+(((-0.008028944)*x694))+((gclwh13_1*r21*x722))+(((-1.592)*gclwh5_0*x720))+(((0.488)*gclwh5_15*x720))+((gclwh0_1*r20*x722))+(((-4.87152e-6)*gclwh0_1*x708))+(((0.156016)*gclwh7_0*rxp1_2))+(((4.87152e-6)*gclwh15_1*x708))+(((1.592)*gclwh0_0*x708))+(((-1.0)*gclwh0_1*x693))+((x698*x709))+(((0.007644784)*x698))+(((-1.0)*x688*x722))+(((-2.339303904e-8)*x688))+(((-0.488)*gclwh13_15*x689))+(((-1.592)*gclwh15_0*x708))+((gclwh13_1*x700)));
op[69]=((0.0624079999953182)+((x713*x725))+(((-6.12e-6)*gclwh13_10*x689))+((x701*x715))+(((-1.0)*x694*x725))+(((2.938824e-8)*x713))+(((-2.938824e-8)*x694))+(((-2.938824e-8)*x692))+(((-1.0)*x692*x725))+(((-4.0)*gclwh15_9*x708))+(((-4.0)*gclwh5_9*x720))+(((0.019208)*x687))+(((4.0)*gclwh13_9*x689))+(((0.392)*gclwh7_9*rxp1_2))+(((-1.0)*x721*x731))+((x705*x731))+(((-0.392)*gclwh9_9*rxp0_2))+((x686*x715))+(((-0.019208)*x721))+(((0.392)*gclwh11_9*rxp2_2))+((x687*x731))+(((0.019208)*x705)));
op[70]=((0.0152839999976591)+(((-0.009604)*gclwh13_9*r21))+(((0.0039239999976591)*gclwh15_1*pp*r20))+(((0.196)*gclwh9_0*pz*rxp0_2))+(((2.0)*gclwh2_1*npy*pp*pz))+(((-5.4550720022482e-5)*gclwh5_1*r22))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((-0.0039239999976591)*gclwh13_1*pp*r21))+(((3.06e-6)*gclwh0_0*npx*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-5.4550720022482e-5)*gclwh2_1*r21))+(((-3.06e-6)*gclwh5_0*npz*pz))+(((0.0113600000046818)*gclwh5_1*npz*pz))+(((2.0)*gclwh13_9*npy*pz))+(((0.0152840000023409)*gclwh2_1*pp*r21))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((0.196)*pz))+(((-0.19599694)*gclwh5_10*npz*pz))+(((2.0)*gclwh5_0*npz*(pz*pz)))+((gclwh15_1*r20*(pp*pp)))+(((0.0113600000046818)*gclwh15_1*npx*pz))+(((0.09799847)*gclwh5_10*pp*r22))+(((0.009604)*gclwh5_9*r22))+(((0.09799847)*gclwh15_10*pp*r20))+(((1.53e-6)*gclwh5_0*pp*r22))+(((-0.009604)*gclwh5_0*pz*r22))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((-0.0113600000046818)*gclwh2_1*npy*pz))+(((-5.4550720022482e-5)*gclwh15_1*r20))+(((-0.0113600000046818)*gclwh13_1*npy*pz))+(((1.53e-6)*gclwh15_0*pp*r20))+(((5.4550720022482e-5)*gclwh13_1*r21))+((gclwh13_0*pp*pz*r21))+(((-1.53e-6)*gclwh2_0*pp*r21))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((0.009604)*gclwh15_9*r20))+((gclwh15_9*pp*r20))+(((1.469412e-8)*gclwh2_0*r21))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-1.53e-6)*gclwh13_0*pp*r21))+(((0.19599694)*gclwh13_10*npy*pz))+(((2.9988e-7)*gclwh11_0*rxp2_2))+(((-1.53e-6)*gclwh0_0*pp*r20))+(((2.0)*gclwh13_1*npy*pp*pz))+(((2.9988e-7)*gclwh7_0*rxp1_2))+(((-0.009604)*gclwh0_0*pz*r20))+(((0.196)*gclwh7_9*rxp1_2))+(((1.469412e-8)*gclwh15_0*r20))+(((-0.19599694)*gclwh15_10*npx*pz))+(((-0.009604)*gclwh2_0*pz*r21))+(((-2.0)*gclwh15_9*npx*pz))+(((-1.469412e-8)*gclwh13_0*r21))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh5_9*npz*pz))+(((-2.9988e-7)*gclwh9_0*rxp0_2))+(((-0.196)*gclwh9_9*rxp0_2))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((3.06e-6)*gclwh13_0*npy*pz))+(((-0.196)*gclwh7_0*pz*rxp1_2))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((3.06e-6)*gclwh2_0*npy*pz))+(((0.009604)*gclwh13_0*pz*r21))+(((0.00094117730588)*gclwh15_10*r20))+(((0.00094117730588)*gclwh5_10*r22))+(((0.0152840000023409)*gclwh0_1*pp*r20))+(((0.196)*gclwh11_9*rxp2_2))+(((-0.009604)*gclwh15_0*pz*r20))+(((-3.06e-6)*gclwh15_0*npx*pz))+(((-5.4550720022482e-5)*gclwh0_1*r20))+(((-1.0)*gclwh13_9*pp*r21))+((gclwh5_1*r22*(pp*pp)))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.09799847)*gclwh13_10*pp*r21))+(((1.469412e-8)*gclwh0_0*r20))+(((-0.196)*gclwh11_0*pz*rxp2_2))+(((0.0039239999976591)*gclwh5_1*pp*r22))+((gclwh5_9*pp*r22))+(((-0.00094117730588)*gclwh13_10*r21))+(((1.469412e-8)*gclwh5_0*r22))+(((-0.0113600000046818)*gclwh0_1*npx*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[71]=((6.12e-8)+(((-0.00019208)*x713))+(((-1.0)*x701*x726))+(((0.04)*gclwh13_10*x689))+(((-1.0)*x686*x726))+(((-1.0)*x691*x713))+((x691*x692))+((x691*x694))+(((0.00019208)*x692))+(((0.00019208)*x694))+(((-1.0)*x737))+(((-0.00392)*x696))+x746+x744+(((-0.00392)*x717))+(((-1.0)*x745))+((gclwh9_13*x707)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x747=htj1*htj1;
CheckValue<IkReal> x748=IKPowWithIntegerCheck(((1.0)+x747),-1);
if(!x748.valid){
continue;
}
cj1array[numsolutions]=((x748.value)*(((1.0)+(((-1.0)*x747)))));
CheckValue<IkReal> x749=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x749.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x749.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x750=htj2*htj2;
CheckValue<IkReal> x751=IKPowWithIntegerCheck(((1.0)+x750),-1);
if(!x751.valid){
continue;
}
cj2array[numsolutions]=((x751.value)*(((1.0)+(((-1.0)*x750)))));
CheckValue<IkReal> x752=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x752.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x752.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x753=htj3*htj3;
CheckValue<IkReal> x754=IKPowWithIntegerCheck(((1.0)+x753),-1);
if(!x754.valid){
continue;
}
cj3array[numsolutions]=((x754.value)*(((1.0)+(((-1.0)*x753)))));
CheckValue<IkReal> x755=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x755.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x755.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x756=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x756);
rxp1_0=(pz*r11);
rxp1_1=(r01*x756);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x757=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x757);
rxp1_0=(pz*r11);
rxp1_1=(r01*x757);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x758=IKPowWithIntegerCheck(r22,-1);
if(!x758.valid){
continue;
}
CheckValue<IkReal> x759=IKPowWithIntegerCheck(sj3,-1);
if(!x759.valid){
continue;
}
sj4array[0]=((-1.0)*(x758.value)*(x759.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x760=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x760);
rxp1_0=(pz*r11);
rxp1_1=(r01*x760);
IkReal x761=((8.0)*r11);
IkReal x762=((4.0)*r10);
IkReal x763=((8.0)*r01);
IkReal x764=(cj4*sj3);
IkReal x765=((4.0)*cj3);
IkReal x766=(sj3*sj4);
IkReal x767=((12.0)*r02);
IkReal x768=(cj1*sj2);
IkReal x769=((16.0)*r01);
IkReal x770=(cj4*r12);
IkReal x771=(cj3*r00);
IkReal x772=((16.0)*r11);
IkReal x773=((4.0)*r02);
IkReal x774=((4.0)*r00);
IkReal x775=(cj2*sj1);
IkReal x776=(cj3*r10);
IkReal x777=(r01*x765);
IkReal x778=(r11*x765);
IkReal x779=(sj4*x775);
IkReal x780=((4.0)*x764);
IkReal x781=(x764*x774);
IkReal x782=(x766*x767);
IkReal x783=(x762*x764);
IkReal x784=((12.0)*r12*x766);
IkReal x785=((12.0)*x770*x775);
IkReal x786=((12.0)*x768*x770);
IkReal x787=(sj4*x762*x768);
IkReal x788=(x762*x779);
IkReal x789=(sj4*x768*x774);
IkReal x790=(x774*x779);
IkReal x791=(cj4*x767*x775);
IkReal x792=(cj4*x767*x768);
IkReal x793=(x791+x792);
IkReal x794=(x777+x787+x788);
IkReal x795=(x782+x786+x785);
IkReal x796=(x790+x783+x789);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x794))+(((-4.0)*x768*x770))+(((-1.0)*x766*x773))+(((-4.0)*x770*x775))+x781)))))+(IKabs(((((8.0)*x771))+((x763*x764))+(((-1.0)*x761*x779))+(((-1.0)*sj4*x761*x768)))))+(((0.5)*(IKabs(((((-1.0)*x796))+(((-1.0)*x784))+x778+x793)))))+(((0.5)*(IKabs(((((-1.0)*x794))+(((-1.0)*x795))+x781)))))+(((0.5)*(IKabs((((x764*x772))+((x769*x779))+(((16.0)*x776))+((sj4*x768*x769)))))))+(((0.5)*(IKabs(((((-4.0)*r12*x766))+((cj4*x773*x775))+x796+(((-1.0)*x778))+((cj4*x768*x773)))))))+(((0.5)*(IKabs(((((-1.0)*x784))+x793+x796+(((-1.0)*x778)))))))+(((0.5)*(IKabs(((((-1.0)*x795))+(((-1.0)*x781))+x794)))))+(((0.5)*(IKabs(((((-1.0)*x772*x779))+(((16.0)*x771))+((x764*x769))+(((-1.0)*sj4*x768*x772)))))))+(IKabs(((((8.0)*x776))+((sj4*x763*x768))+((x761*x764))+((x763*x779))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x797=((4.0)*cj4);
IkReal x798=((4.0)*sj4);
IkReal x799=(r12*sj3);
IkReal x800=((12.0)*cj4);
IkReal x801=(cj1*sj2);
IkReal x802=(cj3*r10);
IkReal x803=(cj2*sj1);
IkReal x804=(r01*sj4);
IkReal x805=((4.0)*cj3*r11);
IkReal x806=(r02*x801);
IkReal x807=(cj4*r11*sj3);
IkReal x808=(r10*sj3*x797);
IkReal x809=((12.0)*sj4*x799);
IkReal x810=(x798*x799);
IkReal x811=(r00*x798*x801);
IkReal x812=(r00*x798*x803);
IkReal x813=(r02*x800*x803);
IkReal x814=(x800*x806);
IkReal x815=(r02*x797*x803);
IkReal x816=(x797*x806);
IkReal x817=(x814+x813);
IkReal x818=(x816+x815);
IkReal x819=(x812+x811+x808);
IkReal x820=((((8.0)*x802))+(((8.0)*x807))+(((8.0)*x803*x804))+(((8.0)*x801*x804)));
op[0]=((((-1.0)*x810))+x818+x819+(((-1.0)*x805)));
op[1]=x820;
op[2]=(x819+x817+(((-1.0)*x809))+(((-1.0)*x805)));
op[3]=((((16.0)*x802))+(((16.0)*x807))+(((16.0)*x803*x804))+(((16.0)*x801*x804)));
op[4]=((((-1.0)*x819))+x817+x805+(((-1.0)*x809)));
op[5]=x820;
op[6]=((((-1.0)*x819))+(((-1.0)*x810))+x818+x805);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x821=(cj2*sj1);
IkReal x822=(cj4*sj3);
IkReal x823=(cj3*r00);
IkReal x824=(cj1*sj2);
IkReal x825=(cj4*r12);
IkReal x826=(r11*sj4);
IkReal x827=((4.0)*cj3*r01);
IkReal x828=(r02*sj3*sj4);
IkReal x829=((4.0)*r10*sj4);
IkReal x830=((4.0)*r00*x822);
IkReal x831=((12.0)*x828);
IkReal x832=((4.0)*x828);
IkReal x833=(x821*x826);
IkReal x834=(x824*x825);
IkReal x835=(x824*x829);
IkReal x836=(x821*x829);
IkReal x837=((12.0)*x821*x825);
IkReal x838=((12.0)*x834);
IkReal x839=((4.0)*x834);
IkReal x840=((4.0)*x821*x825);
IkReal x841=(x827+x835+x836);
IkReal x842=(x837+x831+x838);
IkReal x843=(x832+x839+x840);
IkReal x844=((((-8.0)*x824*x826))+(((8.0)*x823))+(((8.0)*r01*x822))+(((-8.0)*x833)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((-1.0)*x842))+(((-1.0)*x841))+x830))))+(((htj5*htj5*htj5)*(((((-16.0)*x824*x826))+(((-16.0)*x833))+(((16.0)*r01*x822))+(((16.0)*x823))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x843))+(((-1.0)*x841))+x830))))+((x844*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x843))+(((-1.0)*x830))+(((htj5*htj5)*(((((-1.0)*x842))+(((-1.0)*x830))+x841))))+x841+((htj5*x844)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x845=(cj5*sj4);
IkReal x846=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x845))+((r01*x846))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x845))+(((-1.0)*r11*x846))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x845))+((r01*x846))+((cj4*r02))))+IKsqr((((r10*x845))+(((-1.0)*r11*x846))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x845))+((r01*x846))+((cj4*r02))), (((r10*x845))+(((-1.0)*r11*x846))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x847=IKcos(j0);
IkReal x848=IKsin(j0);
IkReal x849=((1.0)*cj3);
IkReal x850=(r02*sj4);
IkReal x851=(r12*sj4);
IkReal x852=(r11*sj5);
IkReal x853=(r10*sj5);
IkReal x854=(cj5*r01);
IkReal x855=(r01*sj5);
IkReal x856=((1.0)*cj2);
IkReal x857=(cj5*r11);
IkReal x858=(cj3*cj4);
IkReal x859=((0.398)*sj2);
IkReal x860=((1.0)*sj3);
IkReal x861=(r00*sj5);
IkReal x862=((0.398)*cj2);
IkReal x863=(cj4*cj5*r00);
IkReal x864=((1.0)*cj1*sj2);
IkReal x865=(cj4*cj5*r10);
IkReal x866=(cj4*x860);
IkReal x867=(sj1*x847);
IkReal x868=(cj1*x848);
IkReal x869=(sj1*x848);
IkReal x870=((1.0)*cj5*sj4);
IkReal x871=(cj1*x847);
evalcond[0]=(x847+((sj4*x852))+((cj4*r12))+(((-1.0)*r10*x870)));
evalcond[1]=((((-1.0)*r00*x870))+(((-1.0)*x848))+((sj4*x855))+((cj4*r02)));
evalcond[2]=(((sj3*x863))+((sj3*x850))+(((-1.0)*x849*x854))+(((-1.0)*x847*x864))+(((-1.0)*x849*x861))+(((-1.0)*x856*x867))+(((-1.0)*x855*x866)));
evalcond[3]=((((-1.0)*x854*x860))+((sj2*x867))+((x855*x858))+(((-1.0)*x849*x850))+(((-1.0)*x860*x861))+(((-1.0)*x849*x863))+(((-1.0)*x856*x871)));
evalcond[4]=(((sj3*x865))+(((-1.0)*x848*x864))+((sj3*x851))+(((-1.0)*x849*x857))+(((-1.0)*x849*x853))+(((-1.0)*x852*x866))+(((-1.0)*x856*x869)));
evalcond[5]=(((sj2*x869))+(((-1.0)*x849*x851))+(((-1.0)*x853*x860))+(((-1.0)*x849*x865))+(((-1.0)*x856*x868))+((x852*x858))+(((-1.0)*x857*x860)));
evalcond[6]=((((0.098)*x854))+(((-0.122)*x848))+(((-1.0)*px))+(((-1.53e-6)*x867))+((x862*x871))+(((-1.0)*x859*x867))+(((0.098)*x861))+(((0.418)*x871)));
evalcond[7]=((((0.098)*x853))+(((0.098)*x857))+(((0.122)*x847))+(((-1.0)*py))+(((-1.53e-6)*x869))+((x862*x868))+(((-1.0)*x859*x869))+(((0.418)*x868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x872=IKPowWithIntegerCheck(cj3,-1);
if(!x872.valid){
continue;
}
CheckValue<IkReal> x873=IKPowWithIntegerCheck(r22,-1);
if(!x873.valid){
continue;
}
sj4array[0]=((x872.value)*(x873.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x874=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x874);
rxp1_0=(pz*r11);
rxp1_1=(r01*x874);
IkReal x875=((8.0)*r11);
IkReal x876=((4.0)*r10);
IkReal x877=((8.0)*r01);
IkReal x878=(cj4*sj3);
IkReal x879=((4.0)*cj3);
IkReal x880=(sj3*sj4);
IkReal x881=((12.0)*r02);
IkReal x882=(cj1*sj2);
IkReal x883=((16.0)*r01);
IkReal x884=(cj4*r12);
IkReal x885=(cj3*r00);
IkReal x886=((16.0)*r11);
IkReal x887=((4.0)*r02);
IkReal x888=((4.0)*r00);
IkReal x889=(cj2*sj1);
IkReal x890=(cj3*r10);
IkReal x891=(r01*x879);
IkReal x892=(r11*x879);
IkReal x893=(sj4*x889);
IkReal x894=((4.0)*x878);
IkReal x895=(x878*x888);
IkReal x896=(x880*x881);
IkReal x897=(x876*x878);
IkReal x898=((12.0)*r12*x880);
IkReal x899=((12.0)*x884*x889);
IkReal x900=((12.0)*x882*x884);
IkReal x901=(sj4*x876*x882);
IkReal x902=(x876*x893);
IkReal x903=(sj4*x882*x888);
IkReal x904=(x888*x893);
IkReal x905=(cj4*x881*x889);
IkReal x906=(cj4*x881*x882);
IkReal x907=(x905+x906);
IkReal x908=(x891+x901+x902);
IkReal x909=(x896+x899+x900);
IkReal x910=(x897+x904+x903);
j5eval[0]=((IKabs(((((8.0)*x890))+((sj4*x877*x882))+((x877*x893))+((x875*x878)))))+(((0.5)*(IKabs((((x883*x893))+((sj4*x882*x883))+((x878*x886))+(((16.0)*x890)))))))+(((0.5)*(IKabs(((((-1.0)*x909))+(((-1.0)*x908))+x895)))))+(((0.5)*(IKabs(((((-1.0)*x892))+(((-1.0)*x898))+x910+x907)))))+(((0.5)*(IKabs((((cj4*x887*x889))+((cj4*x882*x887))+(((-1.0)*x892))+(((-4.0)*r12*x880))+x910)))))+(((0.5)*(IKabs(((((-1.0)*x909))+(((-1.0)*x895))+x908)))))+(IKabs(((((8.0)*x885))+(((-1.0)*sj4*x875*x882))+(((-1.0)*x875*x893))+((x877*x878)))))+(((0.5)*(IKabs(((((-4.0)*x882*x884))+(((-1.0)*x908))+x895+(((-4.0)*x884*x889))+(((-1.0)*x880*x887)))))))+(((0.5)*(IKabs(((((-1.0)*sj4*x882*x886))+((x878*x883))+(((16.0)*x885))+(((-1.0)*x886*x893)))))))+(((0.5)*(IKabs(((((-1.0)*x898))+(((-1.0)*x910))+x892+x907))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x911=((4.0)*cj4);
IkReal x912=((4.0)*sj4);
IkReal x913=(r12*sj3);
IkReal x914=((12.0)*cj4);
IkReal x915=(cj1*sj2);
IkReal x916=(cj3*r10);
IkReal x917=(cj2*sj1);
IkReal x918=(r01*sj4);
IkReal x919=((4.0)*cj3*r11);
IkReal x920=(r02*x915);
IkReal x921=(cj4*r11*sj3);
IkReal x922=(r10*sj3*x911);
IkReal x923=((12.0)*sj4*x913);
IkReal x924=(x912*x913);
IkReal x925=(r00*x912*x915);
IkReal x926=(r00*x912*x917);
IkReal x927=(r02*x914*x917);
IkReal x928=(x914*x920);
IkReal x929=(r02*x911*x917);
IkReal x930=(x911*x920);
IkReal x931=(x928+x927);
IkReal x932=(x930+x929);
IkReal x933=(x926+x925+x922);
IkReal x934=((((8.0)*x917*x918))+(((8.0)*x915*x918))+(((8.0)*x921))+(((8.0)*x916)));
op[0]=((((-1.0)*x924))+(((-1.0)*x919))+x933+x932);
op[1]=x934;
op[2]=((((-1.0)*x923))+(((-1.0)*x919))+x931+x933);
op[3]=((((16.0)*x915*x918))+(((16.0)*x917*x918))+(((16.0)*x921))+(((16.0)*x916)));
op[4]=((((-1.0)*x923))+x931+x919+(((-1.0)*x933)));
op[5]=x934;
op[6]=((((-1.0)*x924))+x932+x919+(((-1.0)*x933)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x935=(cj2*sj1);
IkReal x936=(cj4*sj3);
IkReal x937=(cj3*r00);
IkReal x938=(cj1*sj2);
IkReal x939=(cj4*r12);
IkReal x940=(r11*sj4);
IkReal x941=((4.0)*cj3*r01);
IkReal x942=(r02*sj3*sj4);
IkReal x943=((4.0)*r10*sj4);
IkReal x944=((4.0)*r00*x936);
IkReal x945=((12.0)*x942);
IkReal x946=((4.0)*x942);
IkReal x947=(x935*x940);
IkReal x948=(x938*x939);
IkReal x949=(x938*x943);
IkReal x950=(x935*x943);
IkReal x951=((12.0)*x935*x939);
IkReal x952=((12.0)*x948);
IkReal x953=((4.0)*x948);
IkReal x954=((4.0)*x935*x939);
IkReal x955=(x950+x949+x941);
IkReal x956=(x952+x951+x945);
IkReal x957=(x954+x953+x946);
IkReal x958=((((8.0)*r01*x936))+(((8.0)*x937))+(((-8.0)*x938*x940))+(((-8.0)*x947)));
j5evalpoly[0]=((((htj5*htj5)*(((((-1.0)*x944))+(((-1.0)*x956))+x955))))+((htj5*x958))+(((-1.0)*x944))+((x958*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x955))+(((-1.0)*x957))+x944))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x955))+(((-1.0)*x956))+x944))))+(((-1.0)*x957))+x955+(((htj5*htj5*htj5)*(((((-16.0)*x938*x940))+(((16.0)*x937))+(((-16.0)*x947))+(((16.0)*r01*x936)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x959=(cj5*sj4);
IkReal x960=(sj4*sj5);
if( IKabs((((r01*x960))+(((-1.0)*r00*x959))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x960))+(((-1.0)*cj4*r12))+((r10*x959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x960))+(((-1.0)*r00*x959))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x960))+(((-1.0)*cj4*r12))+((r10*x959))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x960))+(((-1.0)*r00*x959))+((cj4*r02))), ((((-1.0)*r11*x960))+(((-1.0)*cj4*r12))+((r10*x959))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x961=IKcos(j0);
IkReal x962=IKsin(j0);
IkReal x963=((1.0)*cj3);
IkReal x964=(r02*sj4);
IkReal x965=(r12*sj4);
IkReal x966=(r11*sj5);
IkReal x967=(r10*sj5);
IkReal x968=(cj5*r01);
IkReal x969=(r01*sj5);
IkReal x970=((1.0)*cj2);
IkReal x971=(cj5*r11);
IkReal x972=(cj3*cj4);
IkReal x973=((0.398)*sj2);
IkReal x974=((1.0)*sj3);
IkReal x975=(r00*sj5);
IkReal x976=((0.398)*cj2);
IkReal x977=(cj4*cj5*r00);
IkReal x978=((1.0)*cj1*sj2);
IkReal x979=(cj4*cj5*r10);
IkReal x980=(cj4*x974);
IkReal x981=(sj1*x961);
IkReal x982=(cj1*x962);
IkReal x983=(sj1*x962);
IkReal x984=((1.0)*cj5*sj4);
IkReal x985=(cj1*x961);
evalcond[0]=((((-1.0)*r10*x984))+((sj4*x966))+x961+((cj4*r12)));
evalcond[1]=((((-1.0)*r00*x984))+((sj4*x969))+(((-1.0)*x962))+((cj4*r02)));
evalcond[2]=((((-1.0)*x963*x975))+(((-1.0)*x969*x980))+(((-1.0)*x963*x968))+(((-1.0)*x970*x981))+((sj3*x964))+(((-1.0)*x961*x978))+((sj3*x977)));
evalcond[3]=(((x969*x972))+(((-1.0)*x963*x977))+(((-1.0)*x963*x964))+(((-1.0)*x974*x975))+(((-1.0)*x970*x985))+((sj2*x981))+(((-1.0)*x968*x974)));
evalcond[4]=((((-1.0)*x963*x971))+(((-1.0)*x963*x967))+(((-1.0)*x962*x978))+(((-1.0)*x966*x980))+(((-1.0)*x970*x983))+((sj3*x965))+((sj3*x979)));
evalcond[5]=((((-1.0)*x963*x979))+(((-1.0)*x963*x965))+(((-1.0)*x971*x974))+(((-1.0)*x970*x982))+(((-1.0)*x967*x974))+((x966*x972))+((sj2*x983)));
evalcond[6]=((((0.098)*x975))+(((-0.122)*x962))+((x976*x985))+(((-1.0)*px))+(((0.418)*x985))+(((-1.0)*x973*x981))+(((-1.53e-6)*x981))+(((0.098)*x968)));
evalcond[7]=((((0.098)*x971))+((x976*x982))+(((0.122)*x961))+(((-1.0)*py))+(((0.418)*x982))+(((-1.0)*x973*x983))+(((-1.53e-6)*x983))+(((0.098)*x967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x986=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x986);
rxp1_0=(pz*r11);
rxp1_1=(r01*x986);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x987=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x987);
rxp1_0=(pz*r11);
rxp1_1=(r01*x987);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x988=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x988);
rxp1_0=(pz*r11);
rxp1_1=(r01*x988);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x989=IKPowWithIntegerCheck(r22,-1);
if(!x989.valid){
continue;
}
sj4array[0]=((x989.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x990=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x990);
rxp1_0=(pz*r11);
rxp1_1=(r01*x990);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
IkReal x991=x992.value;
j5array[0]=((-1.0)*x991);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x991)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x993=(cj5*sj4);
IkReal x994=(sj4*sj5);
if( IKabs((((r01*x994))+(((-1.0)*r00*x993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x993))+(((-1.0)*r11*x994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x994))+(((-1.0)*r00*x993))))+IKsqr((((r10*x993))+(((-1.0)*r11*x994))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x994))+(((-1.0)*r00*x993))), (((r10*x993))+(((-1.0)*r11*x994))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x995=IKcos(j0);
IkReal x996=IKsin(j0);
IkReal x997=(sj4*sj5);
IkReal x998=(r10*sj5);
IkReal x999=(cj5*r01);
IkReal x1000=(r00*sj5);
IkReal x1001=((1.0)*cj5);
IkReal x1002=((1.0)*cj2);
IkReal x1003=((0.418)*cj1);
IkReal x1004=((1.0)*cj1*sj2);
IkReal x1005=(sj1*x995);
IkReal x1006=(sj1*x996);
evalcond[0]=((((-1.0)*r10*sj4*x1001))+x995+((r11*x997)));
evalcond[1]=((((-1.0)*x996))+((r01*x997))+(((-1.0)*r00*sj4*x1001)));
evalcond[2]=((((-1.0)*x999))+(((-1.0)*x1000))+(((-1.0)*x1002*x1005))+(((-1.0)*x1004*x995)));
evalcond[3]=((((-1.0)*x998))+(((-1.0)*r11*x1001))+(((-1.0)*x1002*x1006))+(((-1.0)*x1004*x996)));
evalcond[4]=(((x1003*x995))+(((-1.0)*px))+(((0.098)*x1000))+(((0.098)*x999))+(((-1.53e-6)*x1005))+(((-0.122)*x996)));
evalcond[5]=((((0.122)*x995))+((x1003*x996))+(((0.098)*cj5*r11))+(((-1.0)*py))+(((0.098)*x998))+(((-1.53e-6)*x1006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1007=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1007);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1007);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1008=IKPowWithIntegerCheck(r22,-1);
if(!x1008.valid){
continue;
}
sj4array[0]=((-1.0)*(x1008.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1009=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1009);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1009);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1011 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1011.valid){
continue;
}
IkReal x1010=x1011.value;
j5array[0]=((-1.0)*x1010);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1010)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1012=(cj5*sj4);
IkReal x1013=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1012))+((r01*x1013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1012))+(((-1.0)*r11*x1013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1012))+((r01*x1013))))+IKsqr((((r10*x1012))+(((-1.0)*r11*x1013))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1012))+((r01*x1013))), (((r10*x1012))+(((-1.0)*r11*x1013))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1014=IKcos(j0);
IkReal x1015=IKsin(j0);
IkReal x1016=(cj5*r01);
IkReal x1017=(sj4*sj5);
IkReal x1018=((0.098)*sj5);
IkReal x1019=((1.0)*cj2);
IkReal x1020=((0.418)*cj1);
IkReal x1021=(cj5*r11);
IkReal x1022=((1.0)*cj1*sj2);
IkReal x1023=(sj1*x1014);
IkReal x1024=((1.0)*cj5*sj4);
IkReal x1025=(sj1*x1015);
evalcond[0]=(x1014+(((-1.0)*r10*x1024))+((r11*x1017)));
evalcond[1]=((((-1.0)*r00*x1024))+((r01*x1017))+(((-1.0)*x1015)));
evalcond[2]=(((r00*sj5))+x1016+(((-1.0)*x1019*x1023))+(((-1.0)*x1014*x1022)));
evalcond[3]=(x1021+((r10*sj5))+(((-1.0)*x1019*x1025))+(((-1.0)*x1015*x1022)));
evalcond[4]=((((-0.122)*x1015))+(((-1.53e-6)*x1023))+((x1014*x1020))+(((-1.0)*px))+(((0.098)*x1016))+((r00*x1018)));
evalcond[5]=((((-1.53e-6)*x1025))+((x1015*x1020))+(((0.122)*x1014))+(((-1.0)*py))+((r10*x1018))+(((0.098)*x1021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1026=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1026);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1026);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1027=IKPowWithIntegerCheck(r22,-1);
if(!x1027.valid){
continue;
}
sj4array[0]=((-1.0)*(x1027.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1028=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1028);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1028);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1030 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1030.valid){
continue;
}
IkReal x1029=x1030.value;
j5array[0]=((-1.0)*x1029);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1029)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1031=(cj5*sj4);
IkReal x1032=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1031))+((r01*x1032)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1031))+(((-1.0)*r11*x1032)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1031))+((r01*x1032))))+IKsqr((((r10*x1031))+(((-1.0)*r11*x1032))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1031))+((r01*x1032))), (((r10*x1031))+(((-1.0)*r11*x1032))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1033=IKcos(j0);
IkReal x1034=IKsin(j0);
IkReal x1035=(sj4*sj5);
IkReal x1036=(r10*sj5);
IkReal x1037=(cj5*r01);
IkReal x1038=((1.0)*cj5);
IkReal x1039=(r00*sj5);
IkReal x1040=((0.418)*cj1);
IkReal x1041=((1.53e-6)*sj1);
IkReal x1042=(cj1*cj2);
IkReal x1043=((0.398)*x1042);
IkReal x1044=((1.0)*x1034);
IkReal x1045=(sj1*sj2*x1033);
IkReal x1046=(sj1*sj2*x1034);
evalcond[0]=(x1033+(((-1.0)*r10*sj4*x1038))+((r11*x1035)));
evalcond[1]=((((-1.0)*r00*sj4*x1038))+(((-1.0)*x1044))+((r01*x1035)));
evalcond[2]=((((-1.0)*x1033*x1042))+x1045+(((-1.0)*x1037))+(((-1.0)*x1039)));
evalcond[3]=(x1046+(((-1.0)*x1036))+(((-1.0)*r11*x1038))+(((-1.0)*x1042*x1044)));
evalcond[4]=((((-0.398)*x1045))+(((-0.122)*x1034))+(((-1.0)*x1033*x1041))+(((-1.0)*px))+(((0.098)*x1039))+(((0.098)*x1037))+((x1033*x1040))+((x1033*x1043)));
evalcond[5]=((((-0.398)*x1046))+((x1034*x1043))+((x1034*x1040))+(((0.098)*cj5*r11))+(((0.122)*x1033))+(((-1.0)*py))+(((0.098)*x1036))+(((-1.0)*x1034*x1041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1047=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1047);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1047);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1048=IKPowWithIntegerCheck(r22,-1);
if(!x1048.valid){
continue;
}
sj4array[0]=((x1048.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1049=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1049);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1049);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1051 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1051.valid){
continue;
}
IkReal x1050=x1051.value;
j5array[0]=((-1.0)*x1050);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1050)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1052=(cj5*sj4);
IkReal x1053=(sj4*sj5);
if( IKabs((((r01*x1053))+(((-1.0)*r00*x1052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1053))+((r10*x1052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1053))+(((-1.0)*r00*x1052))))+IKsqr(((((-1.0)*r11*x1053))+((r10*x1052))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1053))+(((-1.0)*r00*x1052))), ((((-1.0)*r11*x1053))+((r10*x1052))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1054=IKcos(j0);
IkReal x1055=IKsin(j0);
IkReal x1056=(cj5*r01);
IkReal x1057=(sj4*sj5);
IkReal x1058=((0.098)*sj5);
IkReal x1059=((0.418)*cj1);
IkReal x1060=(cj5*r11);
IkReal x1061=((1.53e-6)*sj1);
IkReal x1062=(cj1*cj2);
IkReal x1063=((0.398)*x1062);
IkReal x1064=((1.0)*x1055);
IkReal x1065=((1.0)*cj5*sj4);
IkReal x1066=(sj1*sj2*x1054);
IkReal x1067=(sj1*sj2*x1055);
evalcond[0]=(((r11*x1057))+x1054+(((-1.0)*r10*x1065)));
evalcond[1]=((((-1.0)*r00*x1065))+((r01*x1057))+(((-1.0)*x1064)));
evalcond[2]=(((r00*sj5))+x1056+x1066+(((-1.0)*x1054*x1062)));
evalcond[3]=(x1060+x1067+((r10*sj5))+(((-1.0)*x1062*x1064)));
evalcond[4]=(((x1054*x1059))+((x1054*x1063))+(((-0.398)*x1066))+(((0.098)*x1056))+(((-1.0)*px))+((r00*x1058))+(((-1.0)*x1054*x1061))+(((-0.122)*x1055)));
evalcond[5]=((((0.122)*x1054))+((x1055*x1063))+((x1055*x1059))+(((-0.398)*x1067))+(((0.098)*x1060))+(((-1.0)*py))+((r10*x1058))+(((-1.0)*x1055*x1061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1068=IKPowWithIntegerCheck(r22,-1);
if(!x1068.valid){
continue;
}
CheckValue<IkReal> x1069=IKPowWithIntegerCheck(sj3,-1);
if(!x1069.valid){
continue;
}
sj4array[0]=((-1.0)*(x1068.value)*(x1069.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1070=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1070);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1070);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj3*r00*sj1*sj2)))))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj2*r11*sj1*sj3)))))+(IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(((0.5)*(IKabs(((((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*cj2*cj3*r00))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1071=(r00*sj2);
IkReal x1072=((8.0)*cj1);
IkReal x1073=((16.0)*sj1);
IkReal x1074=(cj2*r00);
IkReal x1075=(cj1*sj2);
IkReal x1076=((8.0)*sj1);
IkReal x1077=((4.0)*cj3);
IkReal x1078=(cj1*cj4);
IkReal x1079=(r01*sj1);
IkReal x1080=(r01*sj3);
IkReal x1081=((16.0)*cj1);
IkReal x1082=((4.0)*sj3);
IkReal x1083=(cj4*sj1);
IkReal x1084=(cj4*sj2);
IkReal x1085=(cj3*cj4*r01);
IkReal x1086=(((x1071*x1082*x1083))+((cj1*cj2*r01*x1077)));
IkReal x1087=((((4.0)*x1075*x1080))+((x1071*x1077*x1078))+((x1074*x1077*x1083))+((cj2*x1079*x1082))+((sj2*x1077*x1079))+((x1074*x1078*x1082)));
IkReal x1088=(x1086+(((-1.0)*x1087)));
IkReal x1089=(((cj3*x1071*x1076))+((x1076*x1080*x1084))+((sj3*x1074*x1076))+(((-1.0)*cj3*x1072*x1074))+(((-1.0)*cj2*x1076*x1085))+(((-1.0)*cj3*r01*x1072*x1084))+(((-1.0)*cj2*cj4*x1072*x1080))+((sj3*x1071*x1072)));
IkReal x1090=(x1087+(((-1.0)*x1086)));
op[0]=x1088;
op[1]=x1089;
op[2]=x1088;
op[3]=(((x1073*x1080*x1084))+(((-16.0)*cj2*x1078*x1080))+((cj3*x1071*x1073))+(((-1.0)*cj3*x1074*x1081))+((sj3*x1071*x1081))+(((-1.0)*cj2*x1073*x1085))+(((-16.0)*x1075*x1085))+((sj3*x1073*x1074)));
op[4]=x1090;
op[5]=x1089;
op[6]=x1090;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((htj5*htj5*htj5)*(((((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))))))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1091=(cj5*sj4);
IkReal x1092=(sj4*sj5);
if( IKabs((((r01*x1092))+(((-1.0)*r00*x1091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1091))+(((-1.0)*r11*x1092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1092))+(((-1.0)*r00*x1091))))+IKsqr((((r10*x1091))+(((-1.0)*r11*x1092))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1092))+(((-1.0)*r00*x1091))), (((r10*x1091))+(((-1.0)*r11*x1092))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1093=IKcos(j0);
IkReal x1094=IKsin(j0);
IkReal x1095=((1.0)*cj3);
IkReal x1096=(r11*sj5);
IkReal x1097=(r10*sj5);
IkReal x1098=(cj5*r01);
IkReal x1099=(r01*sj5);
IkReal x1100=((0.398)*sj2);
IkReal x1101=(cj5*r11);
IkReal x1102=(cj3*cj4);
IkReal x1103=((1.0)*sj3);
IkReal x1104=((1.0)*cj2);
IkReal x1105=(r00*sj5);
IkReal x1106=((0.398)*cj2);
IkReal x1107=(cj4*cj5*r00);
IkReal x1108=((1.0)*cj1*sj2);
IkReal x1109=(cj4*cj5*r10);
IkReal x1110=(cj4*x1103);
IkReal x1111=(sj1*x1093);
IkReal x1112=(cj1*x1094);
IkReal x1113=(sj1*x1094);
IkReal x1114=((1.0)*cj5*sj4);
IkReal x1115=(cj1*x1093);
evalcond[0]=(x1093+((sj4*x1096))+(((-1.0)*r10*x1114)));
evalcond[1]=((((-1.0)*r00*x1114))+(((-1.0)*x1094))+((sj4*x1099)));
evalcond[2]=((((-1.0)*x1103*x1105))+((sj2*x1111))+(((-1.0)*x1098*x1103))+((x1099*x1102))+(((-1.0)*x1104*x1115))+(((-1.0)*x1095*x1107)));
evalcond[3]=(((sj2*x1113))+((x1096*x1102))+(((-1.0)*x1104*x1112))+(((-1.0)*x1095*x1109))+(((-1.0)*x1097*x1103))+(((-1.0)*x1101*x1103)));
evalcond[4]=(((sj3*x1107))+(((-1.0)*x1093*x1108))+(((-1.0)*x1095*x1098))+(((-1.0)*x1099*x1110))+(((-1.0)*x1104*x1111))+(((-1.0)*x1095*x1105)));
evalcond[5]=(((sj3*x1109))+(((-1.0)*x1095*x1097))+(((-1.0)*x1094*x1108))+(((-1.0)*x1104*x1113))+(((-1.0)*x1095*x1101))+(((-1.0)*x1096*x1110)));
evalcond[6]=((((-0.122)*x1094))+(((-1.0)*px))+(((0.418)*x1115))+(((-1.0)*x1100*x1111))+(((-1.53e-6)*x1111))+(((0.098)*x1098))+((x1106*x1115))+(((0.098)*x1105)));
evalcond[7]=((((-1.0)*py))+(((0.122)*x1093))+(((0.418)*x1112))+(((-1.0)*x1100*x1113))+(((-1.53e-6)*x1113))+(((0.098)*x1097))+((x1106*x1112))+(((0.098)*x1101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1116=IKPowWithIntegerCheck(cj3,-1);
if(!x1116.valid){
continue;
}
CheckValue<IkReal> x1117=IKPowWithIntegerCheck(r22,-1);
if(!x1117.valid){
continue;
}
sj4array[0]=((x1116.value)*(x1117.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1118=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1118);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1118);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj4*r01*sj1*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj3*r00*sj1*sj2)))))))+(((0.5)*(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj2*r11*sj1*sj3)))))+(IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2)))))+(((0.5)*(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))))+(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))+(((0.5)*(IKabs(((((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1)))))))+(IKabs(((((8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj1*cj2*cj4*r01*sj3))+(((-8.0)*cj1*cj2*cj3*r00))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1119=(r00*sj2);
IkReal x1120=((8.0)*cj1);
IkReal x1121=((16.0)*sj1);
IkReal x1122=(cj2*r00);
IkReal x1123=(cj1*sj2);
IkReal x1124=((8.0)*sj1);
IkReal x1125=((4.0)*cj3);
IkReal x1126=(cj1*cj4);
IkReal x1127=(r01*sj1);
IkReal x1128=(r01*sj3);
IkReal x1129=((16.0)*cj1);
IkReal x1130=((4.0)*sj3);
IkReal x1131=(cj4*sj1);
IkReal x1132=(cj4*sj2);
IkReal x1133=(cj3*cj4*r01);
IkReal x1134=(((cj1*cj2*r01*x1125))+((x1119*x1130*x1131)));
IkReal x1135=((((4.0)*x1123*x1128))+((cj2*x1127*x1130))+((x1119*x1125*x1126))+((x1122*x1125*x1131))+((x1122*x1126*x1130))+((sj2*x1125*x1127)));
IkReal x1136=(x1134+(((-1.0)*x1135)));
IkReal x1137=(((sj3*x1119*x1120))+(((-1.0)*cj2*cj4*x1120*x1128))+(((-1.0)*cj3*x1120*x1122))+((sj3*x1122*x1124))+(((-1.0)*cj3*r01*x1120*x1132))+(((-1.0)*cj2*x1124*x1133))+((x1124*x1128*x1132))+((cj3*x1119*x1124)));
IkReal x1138=(x1135+(((-1.0)*x1134)));
op[0]=x1136;
op[1]=x1137;
op[2]=x1136;
op[3]=(((sj3*x1119*x1129))+(((-1.0)*cj2*x1121*x1133))+((x1121*x1128*x1132))+((sj3*x1121*x1122))+(((-1.0)*cj3*x1122*x1129))+(((-16.0)*cj2*x1126*x1128))+(((-16.0)*x1123*x1133))+((cj3*x1119*x1121)));
op[4]=x1138;
op[5]=x1137;
op[6]=x1138;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((htj5*htj5*htj5)*(((((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((-16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))))))+(((htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))))))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))))))+(((4.0)*cj1*cj2*cj4*r10*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1139=(cj5*sj4);
IkReal x1140=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1139))+((r01*x1140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1139))+(((-1.0)*r11*x1140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1139))+((r01*x1140))))+IKsqr((((r10*x1139))+(((-1.0)*r11*x1140))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1139))+((r01*x1140))), (((r10*x1139))+(((-1.0)*r11*x1140))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1141=IKcos(j0);
IkReal x1142=IKsin(j0);
IkReal x1143=((1.0)*cj3);
IkReal x1144=(r11*sj5);
IkReal x1145=(r10*sj5);
IkReal x1146=(cj5*r01);
IkReal x1147=(r01*sj5);
IkReal x1148=((0.398)*sj2);
IkReal x1149=(cj5*r11);
IkReal x1150=(cj3*cj4);
IkReal x1151=((1.0)*sj3);
IkReal x1152=((1.0)*cj2);
IkReal x1153=(r00*sj5);
IkReal x1154=((0.398)*cj2);
IkReal x1155=(cj4*cj5*r00);
IkReal x1156=((1.0)*cj1*sj2);
IkReal x1157=(cj4*cj5*r10);
IkReal x1158=(cj4*x1151);
IkReal x1159=(sj1*x1141);
IkReal x1160=(cj1*x1142);
IkReal x1161=(sj1*x1142);
IkReal x1162=((1.0)*cj5*sj4);
IkReal x1163=(cj1*x1141);
evalcond[0]=((((-1.0)*r10*x1162))+((sj4*x1144))+x1141);
evalcond[1]=(((sj4*x1147))+(((-1.0)*x1142))+(((-1.0)*r00*x1162)));
evalcond[2]=(((sj2*x1159))+(((-1.0)*x1152*x1163))+(((-1.0)*x1143*x1155))+((x1147*x1150))+(((-1.0)*x1146*x1151))+(((-1.0)*x1151*x1153)));
evalcond[3]=(((sj2*x1161))+(((-1.0)*x1149*x1151))+(((-1.0)*x1152*x1160))+(((-1.0)*x1143*x1157))+(((-1.0)*x1145*x1151))+((x1144*x1150)));
evalcond[4]=((((-1.0)*x1141*x1156))+(((-1.0)*x1143*x1146))+(((-1.0)*x1143*x1153))+((sj3*x1155))+(((-1.0)*x1147*x1158))+(((-1.0)*x1152*x1159)));
evalcond[5]=((((-1.0)*x1144*x1158))+(((-1.0)*x1143*x1149))+(((-1.0)*x1143*x1145))+(((-1.0)*x1152*x1161))+((sj3*x1157))+(((-1.0)*x1142*x1156)));
evalcond[6]=((((-0.122)*x1142))+(((-1.53e-6)*x1159))+((x1154*x1163))+(((0.418)*x1163))+(((-1.0)*px))+(((0.098)*x1153))+(((-1.0)*x1148*x1159))+(((0.098)*x1146)));
evalcond[7]=((((-1.0)*x1148*x1161))+((x1154*x1160))+(((0.418)*x1160))+(((-1.0)*py))+(((0.098)*x1145))+(((0.098)*x1149))+(((0.122)*x1141))+(((-1.53e-6)*x1161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1166 = IKatan2WithCheck(IkReal(((0.098)*r21)),IkReal(((0.098)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1166.valid){
continue;
}
IkReal x1164=((1.0)*(x1166.value));
if((((((0.009604)*(r21*r21)))+(((0.009604)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1167=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.009604)*(r21*r21)))+(((0.009604)*(r20*r20)))))),-1);
if(!x1167.valid){
continue;
}
if( (((-1.0)*(x1167.value)*(((((-0.398)*cj2*sj1))+(((-1.53e-6)*cj1))+(((-1.0)*pz))+(((-0.398)*cj1*sj2))+(((-0.418)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1167.value)*(((((-0.398)*cj2*sj1))+(((-1.53e-6)*cj1))+(((-1.0)*pz))+(((-0.398)*cj1*sj2))+(((-0.418)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1165=((-1.0)*(IKasin(((-1.0)*(x1167.value)*(((((-0.398)*cj2*sj1))+(((-1.53e-6)*cj1))+(((-1.0)*pz))+(((-0.398)*cj1*sj2))+(((-0.418)*sj1))))))));
j5array[0]=((((-1.0)*x1165))+(((-1.0)*x1164)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1164))+(((1.0)*x1165)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1168=cj5*cj5;
IkReal x1169=r21*r21;
IkReal x1170=(cj3*x1168);
IkReal x1171=((((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*(r22*r22)))+((x1170*(r20*r20)))+((cj3*x1169))+(((-1.0)*x1169*x1170)));
j4eval[0]=x1171;
j4eval[1]=IKsign(x1171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1172=r21*r21;
IkReal x1173=cj5*cj5;
IkReal x1174=((1.0)*sj3);
IkReal x1175=(sj3*x1173);
IkReal x1176=((((-1.0)*x1173*x1174*(r20*r20)))+(((-1.0)*x1172*x1174))+(((-1.0)*x1174*(r22*r22)))+((x1172*x1175))+(((2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1176;
j4eval[1]=IKsign(x1176);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1177=cj1*cj1;
IkReal x1178=cj2*cj2;
IkReal x1179=((0.30447)*sj2);
IkReal x1180=(cj1*sj1);
IkReal x1181=(cj2*sj2);
IkReal x1182=(cj2*x1177);
IkReal x1183=(x1177*x1178);
j0eval[0]=((142286.596382518)+(((-260130.718954248)*x1180*x1181))+(((-130065.359477124)*x1178))+(((13400.3350064531)*x1177))+(((-1.05025125628141)*x1180))+sj2+(((273202.614379085)*x1182))+(((-1.0)*cj2*x1180))+(((-1.0)*sj2*x1177))+(((-273202.614379085)*sj2*x1180))+(((260130.718954248)*x1183)));
j0eval[1]=IKsign(((43322.0000005852)+x1179+(((83182.0)*x1182))+(((-39601.0)*x1178))+(((79202.0)*x1183))+(((-0.31977)*x1180))+(((-79202.0)*x1180*x1181))+(((-0.30447)*cj2*x1180))+(((-1.0)*x1177*x1179))+(((-83182.0)*sj2*x1180))+(((4079.99999941478)*x1177))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1184=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1184;
j0eval[1]=IKsign(x1184);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1185=cj5*cj5;
IkReal x1186=r21*r21;
IkReal x1187=(cj1*sj2);
IkReal x1188=(cj5*r20);
IkReal x1189=(r21*sj5);
IkReal x1190=(cj2*sj1);
IkReal x1191=(x1186+((x1185*(r20*r20)))+(r22*r22)+(((-1.0)*x1185*x1186))+(((-2.0)*x1188*x1189)));
j4eval[0]=x1191;
j4eval[1]=IKsign(x1191);
j4eval[2]=((IKabs((((x1187*x1188))+((x1188*x1190))+(((-1.0)*x1187*x1189))+(((-1.0)*x1189*x1190)))))+(IKabs((((r22*x1187))+((r22*x1190))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19869553720951)*py))+(((-0.179216734729853)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19869553720951)*px))+(((0.179216734729853)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19869553720951)*py))+(((-0.179216734729853)*px))))+IKsqr(((((1.19869553720951)*px))+(((0.179216734729853)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19869553720951)*py))+(((-0.179216734729853)*px))), ((((1.19869553720951)*px))+(((0.179216734729853)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1192=IKcos(j0);
IkReal x1193=IKsin(j0);
evalcond[0]=((((0.816)*x1192))+(((-1.0)*px))+(((-0.122)*x1193)));
evalcond[1]=((((0.122)*x1192))+(((0.816)*x1193))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1194=((1.0)*sj5);
IkReal x1195=((((-1.0)*r00*x1194))+(((-1.0)*cj5*r01)));
j4eval[0]=x1195;
j4eval[1]=IKsign(x1195);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1194))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1196=((1.0)*sj5);
IkReal x1197=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1196)));
j4eval[0]=x1197;
j4eval[1]=IKsign(x1197);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1196))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1198=cj5*cj5;
IkReal x1199=(r11*r21);
IkReal x1200=((1.0)*r20);
IkReal x1201=(cj5*sj5);
IkReal x1202=((((-1.0)*r12*r22))+((r11*r20*x1201))+((x1198*x1199))+(((-1.0)*r10*x1198*x1200))+((r10*r21*x1201))+(((-1.0)*x1199)));
j4eval[0]=x1202;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1200)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1203=cj5*cj5;
IkReal x1204=(r11*r21);
IkReal x1205=(r21*sj5);
IkReal x1206=(cj5*r20);
CheckValue<IkReal> x1207 = IKatan2WithCheck(IkReal((((cj0*x1205))+(((-1.0)*cj0*x1206)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1207.valid){
continue;
}
CheckValue<IkReal> x1208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x1203))+(((-1.0)*r12*r22))+((r11*sj5*x1206))+((cj5*r10*x1205))+((x1203*x1204))+(((-1.0)*x1204)))),-1);
if(!x1208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1207.value)+(((1.5707963267949)*(x1208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1209=IKsin(j4);
IkReal x1210=IKcos(j4);
IkReal x1211=((1.0)*sj0);
IkReal x1212=(cj5*r00);
IkReal x1213=(cj5*r20);
IkReal x1214=(cj5*r10);
IkReal x1215=((1.0)*x1209);
IkReal x1216=((1.0)*x1210);
IkReal x1217=(sj5*x1210);
IkReal x1218=(sj5*x1209);
evalcond[0]=(((r22*x1210))+(((-1.0)*x1213*x1215))+((r21*x1218)));
evalcond[1]=(((r12*x1210))+((r11*x1218))+cj0+(((-1.0)*x1214*x1215)));
evalcond[2]=((((-1.0)*r22*x1215))+(((-1.0)*x1213*x1216))+((r21*x1217)));
evalcond[3]=(((r02*x1210))+(((-1.0)*x1212*x1215))+((r01*x1218))+(((-1.0)*x1211)));
evalcond[4]=((((-1.0)*r02*x1215))+(((-1.0)*x1212*x1216))+((r01*x1217))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x1217))+(((-1.0)*x1214*x1216))+(((-1.0)*r12*x1215))+(((-1.0)*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1219=((1.0)*sj5);
CheckValue<IkReal> x1220 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1220.valid){
continue;
}
CheckValue<IkReal> x1221=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1219)))),-1);
if(!x1221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1220.value)+(((1.5707963267949)*(x1221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1222=IKsin(j4);
IkReal x1223=IKcos(j4);
IkReal x1224=((1.0)*sj0);
IkReal x1225=(cj5*r00);
IkReal x1226=(cj5*r20);
IkReal x1227=(cj5*r10);
IkReal x1228=((1.0)*x1222);
IkReal x1229=((1.0)*x1223);
IkReal x1230=(sj5*x1223);
IkReal x1231=(sj5*x1222);
evalcond[0]=((((-1.0)*x1226*x1228))+((r22*x1223))+((r21*x1231)));
evalcond[1]=(cj0+(((-1.0)*x1227*x1228))+((r11*x1231))+((r12*x1223)));
evalcond[2]=((((-1.0)*x1226*x1229))+(((-1.0)*r22*x1228))+((r21*x1230)));
evalcond[3]=((((-1.0)*x1225*x1228))+(((-1.0)*x1224))+((r01*x1231))+((r02*x1223)));
evalcond[4]=((((-1.0)*x1225*x1229))+((r01*x1230))+(((-1.0)*r02*x1228))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1224))+(((-1.0)*x1227*x1229))+(((-1.0)*r12*x1228))+((r11*x1230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1232=((1.0)*sj5);
CheckValue<IkReal> x1233 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1232))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1233.valid){
continue;
}
CheckValue<IkReal> x1234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1232))+(((-1.0)*cj5*r01)))),-1);
if(!x1234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1233.value)+(((1.5707963267949)*(x1234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1235=IKsin(j4);
IkReal x1236=IKcos(j4);
IkReal x1237=((1.0)*sj0);
IkReal x1238=(cj5*r00);
IkReal x1239=(cj5*r20);
IkReal x1240=(cj5*r10);
IkReal x1241=((1.0)*x1235);
IkReal x1242=((1.0)*x1236);
IkReal x1243=(sj5*x1236);
IkReal x1244=(sj5*x1235);
evalcond[0]=((((-1.0)*x1239*x1241))+((r22*x1236))+((r21*x1244)));
evalcond[1]=(cj0+(((-1.0)*x1240*x1241))+((r11*x1244))+((r12*x1236)));
evalcond[2]=((((-1.0)*x1239*x1242))+(((-1.0)*r22*x1241))+((r21*x1243)));
evalcond[3]=((((-1.0)*x1237))+((r01*x1244))+((r02*x1236))+(((-1.0)*x1238*x1241)));
evalcond[4]=((((-1.0)*r02*x1241))+((r01*x1243))+(((-1.0)*x1238*x1242))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1237))+(((-1.0)*r12*x1241))+(((-1.0)*x1240*x1242))+((r11*x1243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.30855796911803)*py))+(((-7.98220361161999)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.98220361161999)*py))+(((1.30855796911803)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.30855796911803)*py))+(((-7.98220361161999)*px))))+IKsqr(((((7.98220361161999)*py))+(((1.30855796911803)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.30855796911803)*py))+(((-7.98220361161999)*px))), ((((7.98220361161999)*py))+(((1.30855796911803)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1245=IKcos(j0);
IkReal x1246=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.02)*x1245))+(((-0.122)*x1246)));
evalcond[1]=((((-1.0)*py))+(((0.02)*x1246))+(((0.122)*x1245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1247=((1.0)*sj5);
IkReal x1248=((((-1.0)*r00*x1247))+(((-1.0)*cj5*r01)));
j4eval[0]=x1248;
j4eval[1]=IKsign(x1248);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1247)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1249=cj5*cj5;
IkReal x1250=((1.0)*r21);
IkReal x1251=(cj5*sj5);
IkReal x1252=((((-1.0)*r01*x1249*x1250))+((r01*r21))+(((-1.0)*r00*x1250*x1251))+((r00*r20*x1249))+((r02*r22))+(((-1.0)*r01*r20*x1251)));
j4eval[0]=x1252;
j4eval[1]=IKsign(x1252);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1250))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1253=cj5*cj5;
IkReal x1254=(cj5*r20);
IkReal x1255=((1.0)*sj5);
IkReal x1256=(r11*r21);
IkReal x1257=((((-1.0)*r11*x1254*x1255))+x1256+(((-1.0)*cj5*r10*r21*x1255))+((r10*r20*x1253))+((r12*r22))+(((-1.0)*x1253*x1256)));
j4eval[0]=x1257;
j4eval[1]=IKsign(x1257);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1254))+(((-1.0)*r21*sj0*x1255))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1258=cj5*cj5;
IkReal x1259=(cj5*r20);
IkReal x1260=((1.0)*sj5);
IkReal x1261=(r11*r21);
CheckValue<IkReal> x1262 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1259))+(((-1.0)*r21*sj0*x1260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1262.valid){
continue;
}
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(IKsign((x1261+(((-1.0)*cj5*r10*r21*x1260))+((r10*r20*x1258))+((r12*r22))+(((-1.0)*r11*x1259*x1260))+(((-1.0)*x1258*x1261)))),-1);
if(!x1263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1262.value)+(((1.5707963267949)*(x1263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1264=IKsin(j4);
IkReal x1265=IKcos(j4);
IkReal x1266=(cj5*r00);
IkReal x1267=(cj5*r20);
IkReal x1268=(cj5*r10);
IkReal x1269=((1.0)*x1264);
IkReal x1270=((1.0)*x1265);
IkReal x1271=(sj5*x1265);
IkReal x1272=(sj5*x1264);
evalcond[0]=(((r21*x1272))+((r22*x1265))+(((-1.0)*x1267*x1269)));
evalcond[1]=(cj0+(((-1.0)*x1268*x1269))+((r11*x1272))+((r12*x1265)));
evalcond[2]=(((r21*x1271))+(((-1.0)*x1267*x1270))+(((-1.0)*r22*x1269)));
evalcond[3]=(cj0+(((-1.0)*x1266*x1270))+(((-1.0)*r02*x1269))+((r01*x1271)));
evalcond[4]=((((-1.0)*x1268*x1270))+(((-1.0)*r12*x1269))+sj0+((r11*x1271)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1265))+(((-1.0)*x1266*x1269))+((r01*x1272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1273=cj5*cj5;
IkReal x1274=((1.0)*r21);
IkReal x1275=(cj5*sj5);
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x1275))+(((-1.0)*r00*x1274*x1275))+((r01*r21))+((r00*r20*x1273))+((r02*r22))+(((-1.0)*r01*x1273*x1274)))),-1);
if(!x1276.valid){
continue;
}
CheckValue<IkReal> x1277 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1274))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1276.value)))+(x1277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1278=IKsin(j4);
IkReal x1279=IKcos(j4);
IkReal x1280=(cj5*r00);
IkReal x1281=(cj5*r20);
IkReal x1282=(cj5*r10);
IkReal x1283=((1.0)*x1278);
IkReal x1284=((1.0)*x1279);
IkReal x1285=(sj5*x1279);
IkReal x1286=(sj5*x1278);
evalcond[0]=(((r22*x1279))+((r21*x1286))+(((-1.0)*x1281*x1283)));
evalcond[1]=(((r12*x1279))+((r11*x1286))+cj0+(((-1.0)*x1282*x1283)));
evalcond[2]=((((-1.0)*r22*x1283))+((r21*x1285))+(((-1.0)*x1281*x1284)));
evalcond[3]=((((-1.0)*r02*x1283))+cj0+((r01*x1285))+(((-1.0)*x1280*x1284)));
evalcond[4]=(sj0+((r11*x1285))+(((-1.0)*r12*x1283))+(((-1.0)*x1282*x1284)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1279))+((r01*x1286))+(((-1.0)*x1280*x1283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1287=((1.0)*sj5);
CheckValue<IkReal> x1288 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1288.valid){
continue;
}
CheckValue<IkReal> x1289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1287))+(((-1.0)*cj5*r01)))),-1);
if(!x1289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1288.value)+(((1.5707963267949)*(x1289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1290=IKsin(j4);
IkReal x1291=IKcos(j4);
IkReal x1292=(cj5*r00);
IkReal x1293=(cj5*r20);
IkReal x1294=(cj5*r10);
IkReal x1295=((1.0)*x1290);
IkReal x1296=((1.0)*x1291);
IkReal x1297=(sj5*x1291);
IkReal x1298=(sj5*x1290);
evalcond[0]=(((r21*x1298))+(((-1.0)*x1293*x1295))+((r22*x1291)));
evalcond[1]=(cj0+((r12*x1291))+((r11*x1298))+(((-1.0)*x1294*x1295)));
evalcond[2]=(((r21*x1297))+(((-1.0)*x1293*x1296))+(((-1.0)*r22*x1295)));
evalcond[3]=(cj0+(((-1.0)*x1292*x1296))+(((-1.0)*r02*x1295))+((r01*x1297)));
evalcond[4]=(sj0+(((-1.0)*r12*x1295))+((r11*x1297))+(((-1.0)*x1294*x1296)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1292*x1295))+((r02*x1291))+((r01*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.29674722330522)*py))+(((-0.704025336895657)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.29674722330522)*px))+(((0.704025336895657)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.29674722330522)*py))+(((-0.704025336895657)*px))))+IKsqr(((((-2.29674722330522)*px))+(((0.704025336895657)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.29674722330522)*py))+(((-0.704025336895657)*px))), ((((-2.29674722330522)*px))+(((0.704025336895657)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1299=IKcos(j0);
IkReal x1300=IKsin(j0);
evalcond[0]=((((-0.39800153)*x1299))+(((-1.0)*px))+(((-0.122)*x1300)));
evalcond[1]=((((0.122)*x1299))+(((-1.0)*py))+(((-0.39800153)*x1300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1301=((1.0)*sj5);
IkReal x1302=((((-1.0)*r00*x1301))+(((-1.0)*cj5*r01)));
j4eval[0]=x1302;
j4eval[1]=IKsign(x1302);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1301))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1303=cj5*cj5;
IkReal x1304=((1.0)*r21);
IkReal x1305=(cj5*sj5);
IkReal x1306=(((r00*r20*x1303))+(((-1.0)*r01*x1303*x1304))+((r01*r21))+(((-1.0)*r01*r20*x1305))+(((-1.0)*r00*x1304*x1305))+((r02*r22)));
j4eval[0]=x1306;
j4eval[1]=IKsign(x1306);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1304))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1307=cj5*cj5;
IkReal x1308=(cj5*r20);
IkReal x1309=((1.0)*sj5);
IkReal x1310=(r11*r21);
IkReal x1311=(x1310+((r10*r20*x1307))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1309))+(((-1.0)*x1307*x1310))+(((-1.0)*r11*x1308*x1309)));
j4eval[0]=x1311;
j4eval[1]=IKsign(x1311);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1309))+((sj0*x1308))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1312=cj5*cj5;
IkReal x1313=(cj5*r20);
IkReal x1314=((1.0)*sj5);
IkReal x1315=(r11*r21);
CheckValue<IkReal> x1316=IKPowWithIntegerCheck(IKsign((x1315+((r12*r22))+(((-1.0)*r11*x1313*x1314))+(((-1.0)*cj5*r10*r21*x1314))+(((-1.0)*x1312*x1315))+((r10*r20*x1312)))),-1);
if(!x1316.valid){
continue;
}
CheckValue<IkReal> x1317 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1314))+((sj0*x1313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1316.value)))+(x1317.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1318=IKsin(j4);
IkReal x1319=IKcos(j4);
IkReal x1320=(cj5*r00);
IkReal x1321=(cj5*r20);
IkReal x1322=(cj5*r10);
IkReal x1323=((1.0)*x1318);
IkReal x1324=((1.0)*x1319);
IkReal x1325=(sj5*x1319);
IkReal x1326=(sj5*x1318);
evalcond[0]=(((r22*x1319))+(((-1.0)*x1321*x1323))+((r21*x1326)));
evalcond[1]=(cj0+(((-1.0)*x1322*x1323))+((r11*x1326))+((r12*x1319)));
evalcond[2]=((((-1.0)*r22*x1323))+(((-1.0)*x1321*x1324))+((r21*x1325)));
evalcond[3]=(((r01*x1325))+cj0+(((-1.0)*r02*x1323))+(((-1.0)*x1320*x1324)));
evalcond[4]=(sj0+(((-1.0)*x1322*x1324))+((r11*x1325))+(((-1.0)*r12*x1323)));
evalcond[5]=(((r01*x1326))+(((-1.0)*sj0))+((r02*x1319))+(((-1.0)*x1320*x1323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1327=cj5*cj5;
IkReal x1328=((1.0)*r21);
IkReal x1329=(cj5*sj5);
CheckValue<IkReal> x1330 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1328))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1330.valid){
continue;
}
CheckValue<IkReal> x1331=IKPowWithIntegerCheck(IKsign((((r00*r20*x1327))+(((-1.0)*r01*x1327*x1328))+(((-1.0)*r01*r20*x1329))+((r01*r21))+(((-1.0)*r00*x1328*x1329))+((r02*r22)))),-1);
if(!x1331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1330.value)+(((1.5707963267949)*(x1331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1332=IKsin(j4);
IkReal x1333=IKcos(j4);
IkReal x1334=(cj5*r00);
IkReal x1335=(cj5*r20);
IkReal x1336=(cj5*r10);
IkReal x1337=((1.0)*x1332);
IkReal x1338=((1.0)*x1333);
IkReal x1339=(sj5*x1333);
IkReal x1340=(sj5*x1332);
evalcond[0]=((((-1.0)*x1335*x1337))+((r22*x1333))+((r21*x1340)));
evalcond[1]=(((r12*x1333))+cj0+(((-1.0)*x1336*x1337))+((r11*x1340)));
evalcond[2]=((((-1.0)*x1335*x1338))+(((-1.0)*r22*x1337))+((r21*x1339)));
evalcond[3]=(cj0+(((-1.0)*x1334*x1338))+((r01*x1339))+(((-1.0)*r02*x1337)));
evalcond[4]=(sj0+((r11*x1339))+(((-1.0)*x1336*x1338))+(((-1.0)*r12*x1337)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1334*x1337))+((r01*x1340))+((r02*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1341=((1.0)*sj5);
CheckValue<IkReal> x1342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1341))+(((-1.0)*cj5*r01)))),-1);
if(!x1342.valid){
continue;
}
CheckValue<IkReal> x1343 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1342.value)))+(x1343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1344=IKsin(j4);
IkReal x1345=IKcos(j4);
IkReal x1346=(cj5*r00);
IkReal x1347=(cj5*r20);
IkReal x1348=(cj5*r10);
IkReal x1349=((1.0)*x1344);
IkReal x1350=((1.0)*x1345);
IkReal x1351=(sj5*x1345);
IkReal x1352=(sj5*x1344);
evalcond[0]=((((-1.0)*x1347*x1349))+((r22*x1345))+((r21*x1352)));
evalcond[1]=(cj0+(((-1.0)*x1348*x1349))+((r11*x1352))+((r12*x1345)));
evalcond[2]=((((-1.0)*x1347*x1350))+(((-1.0)*r22*x1349))+((r21*x1351)));
evalcond[3]=((((-1.0)*r02*x1349))+cj0+(((-1.0)*x1346*x1350))+((r01*x1351)));
evalcond[4]=(sj0+(((-1.0)*r12*x1349))+((r11*x1351))+(((-1.0)*x1348*x1350)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1346*x1349))+((r02*x1345))+((r01*x1352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.704035232842328)*px))+(((2.29676184833885)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.704035232842328)*py))+(((2.29676184833885)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.704035232842328)*px))+(((2.29676184833885)*py))))+IKsqr(((((0.704035232842328)*py))+(((2.29676184833885)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.704035232842328)*px))+(((2.29676184833885)*py))), ((((0.704035232842328)*py))+(((2.29676184833885)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1353=IKcos(j0);
IkReal x1354=IKsin(j0);
evalcond[0]=((((0.39799847)*x1353))+(((-1.0)*px))+(((-0.122)*x1354)));
evalcond[1]=((((0.39799847)*x1354))+(((0.122)*x1353))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1355=((1.0)*sj5);
IkReal x1356=((((-1.0)*r00*x1355))+(((-1.0)*cj5*r01)));
j4eval[0]=x1356;
j4eval[1]=IKsign(x1356);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1355))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1357=((1.0)*sj5);
IkReal x1358=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1357)));
j4eval[0]=x1358;
j4eval[1]=IKsign(x1358);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1357))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1359=cj5*cj5;
IkReal x1360=(r11*r21);
IkReal x1361=((1.0)*r20);
IkReal x1362=(cj5*sj5);
IkReal x1363=(((r11*r20*x1362))+(((-1.0)*r10*x1359*x1361))+(((-1.0)*x1360))+(((-1.0)*r12*r22))+((r10*r21*x1362))+((x1359*x1360)));
j4eval[0]=x1363;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1361))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1364=cj5*cj5;
IkReal x1365=(r11*r21);
IkReal x1366=(r21*sj5);
IkReal x1367=(cj5*r20);
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x1367))+((cj0*x1366)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1365))+((cj5*r10*x1366))+(((-1.0)*r12*r22))+((r11*sj5*x1367))+((x1364*x1365))+(((-1.0)*r10*r20*x1364)))),-1);
if(!x1369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1368.value)+(((1.5707963267949)*(x1369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1370=IKsin(j4);
IkReal x1371=IKcos(j4);
IkReal x1372=((1.0)*sj0);
IkReal x1373=(cj5*r00);
IkReal x1374=(cj5*r20);
IkReal x1375=(cj5*r10);
IkReal x1376=((1.0)*x1370);
IkReal x1377=((1.0)*x1371);
IkReal x1378=(sj5*x1371);
IkReal x1379=(sj5*x1370);
evalcond[0]=((((-1.0)*x1374*x1376))+((r22*x1371))+((r21*x1379)));
evalcond[1]=(cj0+((r12*x1371))+((r11*x1379))+(((-1.0)*x1375*x1376)));
evalcond[2]=((((-1.0)*r22*x1376))+(((-1.0)*x1374*x1377))+((r21*x1378)));
evalcond[3]=((((-1.0)*x1372))+((r02*x1371))+(((-1.0)*x1373*x1376))+((r01*x1379)));
evalcond[4]=((((-1.0)*r02*x1376))+(((-1.0)*x1373*x1377))+(((-1.0)*cj0))+((r01*x1378)));
evalcond[5]=(((r11*x1378))+(((-1.0)*x1375*x1377))+(((-1.0)*x1372))+(((-1.0)*r12*x1376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1380=((1.0)*sj5);
CheckValue<IkReal> x1381=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1380)))),-1);
if(!x1381.valid){
continue;
}
CheckValue<IkReal> x1382 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1380))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1381.value)))+(x1382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1383=IKsin(j4);
IkReal x1384=IKcos(j4);
IkReal x1385=((1.0)*sj0);
IkReal x1386=(cj5*r00);
IkReal x1387=(cj5*r20);
IkReal x1388=(cj5*r10);
IkReal x1389=((1.0)*x1383);
IkReal x1390=((1.0)*x1384);
IkReal x1391=(sj5*x1384);
IkReal x1392=(sj5*x1383);
evalcond[0]=(((r21*x1392))+((r22*x1384))+(((-1.0)*x1387*x1389)));
evalcond[1]=(cj0+((r11*x1392))+(((-1.0)*x1388*x1389))+((r12*x1384)));
evalcond[2]=(((r21*x1391))+(((-1.0)*r22*x1389))+(((-1.0)*x1387*x1390)));
evalcond[3]=((((-1.0)*x1385))+((r01*x1392))+(((-1.0)*x1386*x1389))+((r02*x1384)));
evalcond[4]=((((-1.0)*r02*x1389))+((r01*x1391))+(((-1.0)*x1386*x1390))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1389))+(((-1.0)*x1385))+(((-1.0)*x1388*x1390))+((r11*x1391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1393=((1.0)*sj5);
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1393))+(((-1.0)*cj5*r01)))),-1);
if(!x1394.valid){
continue;
}
CheckValue<IkReal> x1395 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1393))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1394.value)))+(x1395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1396=IKsin(j4);
IkReal x1397=IKcos(j4);
IkReal x1398=((1.0)*sj0);
IkReal x1399=(cj5*r00);
IkReal x1400=(cj5*r20);
IkReal x1401=(cj5*r10);
IkReal x1402=((1.0)*x1396);
IkReal x1403=((1.0)*x1397);
IkReal x1404=(sj5*x1397);
IkReal x1405=(sj5*x1396);
evalcond[0]=(((r21*x1405))+(((-1.0)*x1400*x1402))+((r22*x1397)));
evalcond[1]=(cj0+((r11*x1405))+(((-1.0)*x1401*x1402))+((r12*x1397)));
evalcond[2]=((((-1.0)*r22*x1402))+((r21*x1404))+(((-1.0)*x1400*x1403)));
evalcond[3]=((((-1.0)*x1399*x1402))+((r01*x1405))+((r02*x1397))+(((-1.0)*x1398)));
evalcond[4]=((((-1.0)*x1399*x1403))+(((-1.0)*r02*x1402))+((r01*x1404))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1402))+((r11*x1404))+(((-1.0)*x1401*x1403))+(((-1.0)*x1398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.19869553720951)*py))+(((-0.179216734729853)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.19869553720951)*px))+(((0.179216734729853)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.19869553720951)*py))+(((-0.179216734729853)*px))))+IKsqr(((((-1.19869553720951)*px))+(((0.179216734729853)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.19869553720951)*py))+(((-0.179216734729853)*px))), ((((-1.19869553720951)*px))+(((0.179216734729853)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1406=IKcos(j0);
IkReal x1407=IKsin(j0);
evalcond[0]=((((-0.816)*x1406))+(((-1.0)*px))+(((-0.122)*x1407)));
evalcond[1]=((((-0.816)*x1407))+(((-1.0)*py))+(((0.122)*x1406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1408=((1.0)*sj5);
IkReal x1409=((((-1.0)*r00*x1408))+(((-1.0)*cj5*r01)));
j4eval[0]=x1409;
j4eval[1]=IKsign(x1409);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1408))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1410=cj5*cj5;
IkReal x1411=((1.0)*r21);
IkReal x1412=(cj5*sj5);
IkReal x1413=(((r01*r21))+(((-1.0)*r01*x1410*x1411))+((r00*r20*x1410))+(((-1.0)*r01*r20*x1412))+((r02*r22))+(((-1.0)*r00*x1411*x1412)));
j4eval[0]=x1413;
j4eval[1]=IKsign(x1413);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1411))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1414=cj5*cj5;
IkReal x1415=(cj5*r20);
IkReal x1416=((1.0)*sj5);
IkReal x1417=(r11*r21);
IkReal x1418=((((-1.0)*x1414*x1417))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1416))+((r10*r20*x1414))+x1417+(((-1.0)*r11*x1415*x1416)));
j4eval[0]=x1418;
j4eval[1]=IKsign(x1418);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1416))+((sj0*x1415))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1419=cj5*cj5;
IkReal x1420=(cj5*r20);
IkReal x1421=((1.0)*sj5);
IkReal x1422=(r11*r21);
CheckValue<IkReal> x1423 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1421))+((sj0*x1420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1423.valid){
continue;
}
CheckValue<IkReal> x1424=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1421))+(((-1.0)*x1419*x1422))+((r12*r22))+((r10*r20*x1419))+(((-1.0)*r11*x1420*x1421))+x1422)),-1);
if(!x1424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1423.value)+(((1.5707963267949)*(x1424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1425=IKsin(j4);
IkReal x1426=IKcos(j4);
IkReal x1427=(cj5*r00);
IkReal x1428=(cj5*r20);
IkReal x1429=(cj5*r10);
IkReal x1430=((1.0)*x1425);
IkReal x1431=((1.0)*x1426);
IkReal x1432=(sj5*x1426);
IkReal x1433=(sj5*x1425);
evalcond[0]=(((r22*x1426))+(((-1.0)*x1428*x1430))+((r21*x1433)));
evalcond[1]=(cj0+(((-1.0)*x1429*x1430))+((r11*x1433))+((r12*x1426)));
evalcond[2]=((((-1.0)*r22*x1430))+(((-1.0)*x1428*x1431))+((r21*x1432)));
evalcond[3]=(cj0+(((-1.0)*r02*x1430))+((r01*x1432))+(((-1.0)*x1427*x1431)));
evalcond[4]=((((-1.0)*r12*x1430))+sj0+(((-1.0)*x1429*x1431))+((r11*x1432)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1433))+((r02*x1426))+(((-1.0)*x1427*x1430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1434=cj5*cj5;
IkReal x1435=((1.0)*r21);
IkReal x1436=(cj5*sj5);
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1435))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1435*x1436))+((r01*r21))+(((-1.0)*r01*r20*x1436))+((r00*r20*x1434))+((r02*r22))+(((-1.0)*r01*x1434*x1435)))),-1);
if(!x1438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1437.value)+(((1.5707963267949)*(x1438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1439=IKsin(j4);
IkReal x1440=IKcos(j4);
IkReal x1441=(cj5*r00);
IkReal x1442=(cj5*r20);
IkReal x1443=(cj5*r10);
IkReal x1444=((1.0)*x1439);
IkReal x1445=((1.0)*x1440);
IkReal x1446=(sj5*x1440);
IkReal x1447=(sj5*x1439);
evalcond[0]=(((r22*x1440))+((r21*x1447))+(((-1.0)*x1442*x1444)));
evalcond[1]=(((r12*x1440))+((r11*x1447))+cj0+(((-1.0)*x1443*x1444)));
evalcond[2]=((((-1.0)*r22*x1444))+((r21*x1446))+(((-1.0)*x1442*x1445)));
evalcond[3]=(cj0+(((-1.0)*x1441*x1445))+(((-1.0)*r02*x1444))+((r01*x1446)));
evalcond[4]=(sj0+((r11*x1446))+(((-1.0)*r12*x1444))+(((-1.0)*x1443*x1445)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1441*x1444))+((r02*x1440))+((r01*x1447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1448=((1.0)*sj5);
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1448))+(((-1.0)*cj5*r01)))),-1);
if(!x1449.valid){
continue;
}
CheckValue<IkReal> x1450 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1449.value)))+(x1450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1451=IKsin(j4);
IkReal x1452=IKcos(j4);
IkReal x1453=(cj5*r00);
IkReal x1454=(cj5*r20);
IkReal x1455=(cj5*r10);
IkReal x1456=((1.0)*x1451);
IkReal x1457=((1.0)*x1452);
IkReal x1458=(sj5*x1452);
IkReal x1459=(sj5*x1451);
evalcond[0]=((((-1.0)*x1454*x1456))+((r21*x1459))+((r22*x1452)));
evalcond[1]=(cj0+(((-1.0)*x1455*x1456))+((r11*x1459))+((r12*x1452)));
evalcond[2]=((((-1.0)*r22*x1456))+(((-1.0)*x1454*x1457))+((r21*x1458)));
evalcond[3]=(cj0+(((-1.0)*r02*x1456))+((r01*x1458))+(((-1.0)*x1453*x1457)));
evalcond[4]=(sj0+(((-1.0)*x1455*x1457))+((r11*x1458))+(((-1.0)*r12*x1456)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1459))+(((-1.0)*x1453*x1456))+((r02*x1452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.98220361161999)*px))+(((-1.30855796911803)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.98220361161999)*py))+(((-1.30855796911803)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.98220361161999)*px))+(((-1.30855796911803)*py))))+IKsqr(((((7.98220361161999)*py))+(((-1.30855796911803)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.98220361161999)*px))+(((-1.30855796911803)*py))), ((((7.98220361161999)*py))+(((-1.30855796911803)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1460=IKcos(j0);
IkReal x1461=IKsin(j0);
evalcond[0]=((((-0.122)*x1461))+(((-1.0)*px))+(((-0.02)*x1460)));
evalcond[1]=((((-1.0)*py))+(((0.122)*x1460))+(((-0.02)*x1461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1462=((1.0)*sj5);
IkReal x1463=((((-1.0)*r00*x1462))+(((-1.0)*cj5*r01)));
j4eval[0]=x1463;
j4eval[1]=IKsign(x1463);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1462))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1464=((1.0)*sj5);
IkReal x1465=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1464)));
j4eval[0]=x1465;
j4eval[1]=IKsign(x1465);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x1464))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1466=cj5*cj5;
IkReal x1467=(r11*r21);
IkReal x1468=((1.0)*r20);
IkReal x1469=(cj5*sj5);
IkReal x1470=((((-1.0)*r10*x1466*x1468))+(((-1.0)*r12*r22))+((x1466*x1467))+((r11*r20*x1469))+((r10*r21*x1469))+(((-1.0)*x1467)));
j4eval[0]=x1470;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1468))))));
j4eval[2]=IKsign(x1470);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1471=cj5*cj5;
IkReal x1472=(r11*r21);
IkReal x1473=(r21*sj5);
IkReal x1474=(cj5*r20);
CheckValue<IkReal> x1475=IKPowWithIntegerCheck(IKsign((((x1471*x1472))+(((-1.0)*r12*r22))+((r11*sj5*x1474))+(((-1.0)*x1472))+(((-1.0)*r10*r20*x1471))+((cj5*r10*x1473)))),-1);
if(!x1475.valid){
continue;
}
CheckValue<IkReal> x1476 = IKatan2WithCheck(IkReal((((cj0*x1473))+(((-1.0)*cj0*x1474)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1475.value)))+(x1476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1477=IKsin(j4);
IkReal x1478=IKcos(j4);
IkReal x1479=((1.0)*sj0);
IkReal x1480=(cj5*r00);
IkReal x1481=(cj5*r20);
IkReal x1482=(cj5*r10);
IkReal x1483=((1.0)*x1477);
IkReal x1484=((1.0)*x1478);
IkReal x1485=(sj5*x1478);
IkReal x1486=(sj5*x1477);
evalcond[0]=(((r22*x1478))+(((-1.0)*x1481*x1483))+((r21*x1486)));
evalcond[1]=(((r12*x1478))+(((-1.0)*x1482*x1483))+cj0+((r11*x1486)));
evalcond[2]=((((-1.0)*x1481*x1484))+((r21*x1485))+(((-1.0)*r22*x1483)));
evalcond[3]=(((r01*x1486))+(((-1.0)*x1480*x1483))+((r02*x1478))+(((-1.0)*x1479)));
evalcond[4]=(((r01*x1485))+(((-1.0)*x1480*x1484))+(((-1.0)*r02*x1483))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1482*x1484))+(((-1.0)*r12*x1483))+((r11*x1485))+(((-1.0)*x1479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1487=((1.0)*sj5);
CheckValue<IkReal> x1488 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1488.valid){
continue;
}
CheckValue<IkReal> x1489=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1487)))),-1);
if(!x1489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1488.value)+(((1.5707963267949)*(x1489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1490=IKsin(j4);
IkReal x1491=IKcos(j4);
IkReal x1492=((1.0)*sj0);
IkReal x1493=(cj5*r00);
IkReal x1494=(cj5*r20);
IkReal x1495=(cj5*r10);
IkReal x1496=((1.0)*x1490);
IkReal x1497=((1.0)*x1491);
IkReal x1498=(sj5*x1491);
IkReal x1499=(sj5*x1490);
evalcond[0]=((((-1.0)*x1494*x1496))+((r21*x1499))+((r22*x1491)));
evalcond[1]=(cj0+(((-1.0)*x1495*x1496))+((r12*x1491))+((r11*x1499)));
evalcond[2]=((((-1.0)*x1494*x1497))+((r21*x1498))+(((-1.0)*r22*x1496)));
evalcond[3]=((((-1.0)*x1492))+((r01*x1499))+(((-1.0)*x1493*x1496))+((r02*x1491)));
evalcond[4]=(((r01*x1498))+(((-1.0)*x1493*x1497))+(((-1.0)*r02*x1496))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1496))+(((-1.0)*x1492))+(((-1.0)*x1495*x1497))+((r11*x1498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1500=((1.0)*sj5);
CheckValue<IkReal> x1501 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1500))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1501.valid){
continue;
}
CheckValue<IkReal> x1502=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1500))+(((-1.0)*cj5*r01)))),-1);
if(!x1502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1501.value)+(((1.5707963267949)*(x1502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1503=IKsin(j4);
IkReal x1504=IKcos(j4);
IkReal x1505=((1.0)*sj0);
IkReal x1506=(cj5*r00);
IkReal x1507=(cj5*r20);
IkReal x1508=(cj5*r10);
IkReal x1509=((1.0)*x1503);
IkReal x1510=((1.0)*x1504);
IkReal x1511=(sj5*x1504);
IkReal x1512=(sj5*x1503);
evalcond[0]=((((-1.0)*x1507*x1509))+((r22*x1504))+((r21*x1512)));
evalcond[1]=(((r11*x1512))+cj0+((r12*x1504))+(((-1.0)*x1508*x1509)));
evalcond[2]=((((-1.0)*r22*x1509))+(((-1.0)*x1507*x1510))+((r21*x1511)));
evalcond[3]=((((-1.0)*x1505))+(((-1.0)*x1506*x1509))+((r01*x1512))+((r02*x1504)));
evalcond[4]=((((-1.0)*x1506*x1510))+((r01*x1511))+(((-1.0)*r02*x1509))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1505))+((r11*x1511))+(((-1.0)*x1508*x1510))+(((-1.0)*r12*x1509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.29674722330522)*py))+(((-0.704025336895657)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.704025336895657)*py))+(((2.29674722330522)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.29674722330522)*py))+(((-0.704025336895657)*px))))+IKsqr(((((0.704025336895657)*py))+(((2.29674722330522)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.29674722330522)*py))+(((-0.704025336895657)*px))), ((((0.704025336895657)*py))+(((2.29674722330522)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1513=IKcos(j0);
IkReal x1514=IKsin(j0);
evalcond[0]=((((0.39800153)*x1513))+(((-1.0)*px))+(((-0.122)*x1514)));
evalcond[1]=((((0.39800153)*x1514))+(((0.122)*x1513))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1515=((1.0)*sj5);
IkReal x1516=((((-1.0)*r00*x1515))+(((-1.0)*cj5*r01)));
j4eval[0]=x1516;
j4eval[1]=IKsign(x1516);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1515))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1517=((1.0)*sj5);
IkReal x1518=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1517)));
j4eval[0]=x1518;
j4eval[1]=IKsign(x1518);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1517))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1519=cj5*cj5;
IkReal x1520=(r11*r21);
IkReal x1521=((1.0)*r20);
IkReal x1522=(cj5*sj5);
IkReal x1523=(((x1519*x1520))+(((-1.0)*r12*r22))+(((-1.0)*r10*x1519*x1521))+((r10*r21*x1522))+((r11*r20*x1522))+(((-1.0)*x1520)));
j4eval[0]=x1523;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1521)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1524=cj5*cj5;
IkReal x1525=(r11*r21);
IkReal x1526=(r21*sj5);
IkReal x1527=(cj5*r20);
CheckValue<IkReal> x1528=IKPowWithIntegerCheck(IKsign((((x1524*x1525))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x1524))+((r11*sj5*x1527))+(((-1.0)*x1525))+((cj5*r10*x1526)))),-1);
if(!x1528.valid){
continue;
}
CheckValue<IkReal> x1529 = IKatan2WithCheck(IkReal((((cj0*x1526))+(((-1.0)*cj0*x1527)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1528.value)))+(x1529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1530=IKsin(j4);
IkReal x1531=IKcos(j4);
IkReal x1532=((1.0)*sj0);
IkReal x1533=(cj5*r00);
IkReal x1534=(cj5*r20);
IkReal x1535=(cj5*r10);
IkReal x1536=((1.0)*x1530);
IkReal x1537=((1.0)*x1531);
IkReal x1538=(sj5*x1531);
IkReal x1539=(sj5*x1530);
evalcond[0]=(((r21*x1539))+(((-1.0)*x1534*x1536))+((r22*x1531)));
evalcond[1]=(((r12*x1531))+cj0+((r11*x1539))+(((-1.0)*x1535*x1536)));
evalcond[2]=((((-1.0)*r22*x1536))+((r21*x1538))+(((-1.0)*x1534*x1537)));
evalcond[3]=((((-1.0)*x1532))+((r01*x1539))+(((-1.0)*x1533*x1536))+((r02*x1531)));
evalcond[4]=(((r01*x1538))+(((-1.0)*r02*x1536))+(((-1.0)*x1533*x1537))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1536))+(((-1.0)*x1532))+((r11*x1538))+(((-1.0)*x1535*x1537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1540=((1.0)*sj5);
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x1540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1540)))),-1);
if(!x1542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1541.value)+(((1.5707963267949)*(x1542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1543=IKsin(j4);
IkReal x1544=IKcos(j4);
IkReal x1545=((1.0)*sj0);
IkReal x1546=(cj5*r00);
IkReal x1547=(cj5*r20);
IkReal x1548=(cj5*r10);
IkReal x1549=((1.0)*x1543);
IkReal x1550=((1.0)*x1544);
IkReal x1551=(sj5*x1544);
IkReal x1552=(sj5*x1543);
evalcond[0]=((((-1.0)*x1547*x1549))+((r22*x1544))+((r21*x1552)));
evalcond[1]=(cj0+(((-1.0)*x1548*x1549))+((r11*x1552))+((r12*x1544)));
evalcond[2]=((((-1.0)*r22*x1549))+((r21*x1551))+(((-1.0)*x1547*x1550)));
evalcond[3]=((((-1.0)*x1546*x1549))+((r01*x1552))+((r02*x1544))+(((-1.0)*x1545)));
evalcond[4]=(((r01*x1551))+(((-1.0)*r02*x1549))+(((-1.0)*x1546*x1550))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x1551))+(((-1.0)*x1548*x1550))+(((-1.0)*x1545))+(((-1.0)*r12*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1553=((1.0)*sj5);
CheckValue<IkReal> x1554 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1553))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1554.valid){
continue;
}
CheckValue<IkReal> x1555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1553))+(((-1.0)*cj5*r01)))),-1);
if(!x1555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1554.value)+(((1.5707963267949)*(x1555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1556=IKsin(j4);
IkReal x1557=IKcos(j4);
IkReal x1558=((1.0)*sj0);
IkReal x1559=(cj5*r00);
IkReal x1560=(cj5*r20);
IkReal x1561=(cj5*r10);
IkReal x1562=((1.0)*x1556);
IkReal x1563=((1.0)*x1557);
IkReal x1564=(sj5*x1557);
IkReal x1565=(sj5*x1556);
evalcond[0]=((((-1.0)*x1560*x1562))+((r22*x1557))+((r21*x1565)));
evalcond[1]=(cj0+((r11*x1565))+((r12*x1557))+(((-1.0)*x1561*x1562)));
evalcond[2]=((((-1.0)*x1560*x1563))+(((-1.0)*r22*x1562))+((r21*x1564)));
evalcond[3]=((((-1.0)*x1559*x1562))+((r02*x1557))+(((-1.0)*x1558))+((r01*x1565)));
evalcond[4]=((((-1.0)*x1559*x1563))+(((-1.0)*r02*x1562))+(((-1.0)*cj0))+((r01*x1564)));
evalcond[5]=(((r11*x1564))+(((-1.0)*r12*x1562))+(((-1.0)*x1558))+(((-1.0)*x1561*x1563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.29676184833885)*py))+(((-0.704035232842328)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.704035232842328)*py))+(((-2.29676184833885)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.29676184833885)*py))+(((-0.704035232842328)*px))))+IKsqr(((((0.704035232842328)*py))+(((-2.29676184833885)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.29676184833885)*py))+(((-0.704035232842328)*px))), ((((0.704035232842328)*py))+(((-2.29676184833885)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1566=IKcos(j0);
IkReal x1567=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.122)*x1567))+(((-0.39799847)*x1566)));
evalcond[1]=((((0.122)*x1566))+(((-1.0)*py))+(((-0.39799847)*x1567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1568=((1.0)*sj5);
IkReal x1569=((((-1.0)*r00*x1568))+(((-1.0)*cj5*r01)));
j4eval[0]=x1569;
j4eval[1]=IKsign(x1569);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1568)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1570=cj5*cj5;
IkReal x1571=((1.0)*r21);
IkReal x1572=(cj5*sj5);
IkReal x1573=((((-1.0)*r01*x1570*x1571))+((r01*r21))+((r00*r20*x1570))+(((-1.0)*r00*x1571*x1572))+(((-1.0)*r01*r20*x1572))+((r02*r22)));
j4eval[0]=x1573;
j4eval[1]=IKsign(x1573);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1571))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1574=cj5*cj5;
IkReal x1575=(cj5*r20);
IkReal x1576=((1.0)*sj5);
IkReal x1577=(r11*r21);
IkReal x1578=((((-1.0)*x1574*x1577))+(((-1.0)*cj5*r10*r21*x1576))+((r12*r22))+x1577+((r10*r20*x1574))+(((-1.0)*r11*x1575*x1576)));
j4eval[0]=x1578;
j4eval[1]=IKsign(x1578);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1575))+(((-1.0)*r21*sj0*x1576))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1579=cj5*cj5;
IkReal x1580=(cj5*r20);
IkReal x1581=((1.0)*sj5);
IkReal x1582=(r11*r21);
CheckValue<IkReal> x1583=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1579*x1582))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1581))+x1582+((r10*r20*x1579))+(((-1.0)*r11*x1580*x1581)))),-1);
if(!x1583.valid){
continue;
}
CheckValue<IkReal> x1584 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1581))+((sj0*x1580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1583.value)))+(x1584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1585=IKsin(j4);
IkReal x1586=IKcos(j4);
IkReal x1587=(cj5*r00);
IkReal x1588=(cj5*r20);
IkReal x1589=(cj5*r10);
IkReal x1590=((1.0)*x1585);
IkReal x1591=((1.0)*x1586);
IkReal x1592=(sj5*x1586);
IkReal x1593=(sj5*x1585);
evalcond[0]=((((-1.0)*x1588*x1590))+((r22*x1586))+((r21*x1593)));
evalcond[1]=(cj0+((r12*x1586))+((r11*x1593))+(((-1.0)*x1589*x1590)));
evalcond[2]=((((-1.0)*x1588*x1591))+(((-1.0)*r22*x1590))+((r21*x1592)));
evalcond[3]=(((r01*x1592))+cj0+(((-1.0)*r02*x1590))+(((-1.0)*x1587*x1591)));
evalcond[4]=(sj0+((r11*x1592))+(((-1.0)*x1589*x1591))+(((-1.0)*r12*x1590)));
evalcond[5]=(((r01*x1593))+(((-1.0)*sj0))+((r02*x1586))+(((-1.0)*x1587*x1590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1594=cj5*cj5;
IkReal x1595=((1.0)*r21);
IkReal x1596=(cj5*sj5);
CheckValue<IkReal> x1597 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1595))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1597.valid){
continue;
}
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1594*x1595))+(((-1.0)*r00*x1595*x1596))+((r01*r21))+(((-1.0)*r01*r20*x1596))+((r00*r20*x1594))+((r02*r22)))),-1);
if(!x1598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1597.value)+(((1.5707963267949)*(x1598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1599=IKsin(j4);
IkReal x1600=IKcos(j4);
IkReal x1601=(cj5*r00);
IkReal x1602=(cj5*r20);
IkReal x1603=(cj5*r10);
IkReal x1604=((1.0)*x1599);
IkReal x1605=((1.0)*x1600);
IkReal x1606=(sj5*x1600);
IkReal x1607=(sj5*x1599);
evalcond[0]=(((r21*x1607))+((r22*x1600))+(((-1.0)*x1602*x1604)));
evalcond[1]=(cj0+((r11*x1607))+((r12*x1600))+(((-1.0)*x1603*x1604)));
evalcond[2]=(((r21*x1606))+(((-1.0)*r22*x1604))+(((-1.0)*x1602*x1605)));
evalcond[3]=(cj0+((r01*x1606))+(((-1.0)*x1601*x1605))+(((-1.0)*r02*x1604)));
evalcond[4]=(sj0+((r11*x1606))+(((-1.0)*x1603*x1605))+(((-1.0)*r12*x1604)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1607))+(((-1.0)*x1601*x1604))+((r02*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1608=((1.0)*sj5);
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1608))+(((-1.0)*cj5*r01)))),-1);
if(!x1609.valid){
continue;
}
CheckValue<IkReal> x1610 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x1608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1609.value)))+(x1610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1611=IKsin(j4);
IkReal x1612=IKcos(j4);
IkReal x1613=(cj5*r00);
IkReal x1614=(cj5*r20);
IkReal x1615=(cj5*r10);
IkReal x1616=((1.0)*x1611);
IkReal x1617=((1.0)*x1612);
IkReal x1618=(sj5*x1612);
IkReal x1619=(sj5*x1611);
evalcond[0]=(((r21*x1619))+(((-1.0)*x1614*x1616))+((r22*x1612)));
evalcond[1]=(cj0+((r12*x1612))+((r11*x1619))+(((-1.0)*x1615*x1616)));
evalcond[2]=(((r21*x1618))+(((-1.0)*r22*x1616))+(((-1.0)*x1614*x1617)));
evalcond[3]=(((r01*x1618))+cj0+(((-1.0)*r02*x1616))+(((-1.0)*x1613*x1617)));
evalcond[4]=((((-1.0)*r12*x1616))+sj0+((r11*x1618))+(((-1.0)*x1615*x1617)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1619))+(((-1.0)*x1613*x1616))+((r02*x1612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1620=((199.0)*sj1);
IkReal x1621=((49.0)*cj1);
IkReal x1622=(cj5*r01);
IkReal x1623=(cj2*sj1);
IkReal x1624=(cj1*sj2);
IkReal x1625=((500.0)*px);
IkReal x1626=(r00*sj5);
IkReal x1627=((209.0)*cj1);
IkReal x1628=((0.000765)*sj1);
IkReal x1629=(sj2*x1626);
IkReal x1630=((199.0)*cj1*cj2);
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(((((-61.0)*x1624))+(((-61.0)*x1623))),-1);
if(!x1631.valid){
continue;
}
CheckValue<IkReal> x1632=IKPowWithIntegerCheck(((((-1.0)*x1624))+(((-1.0)*x1623))),-1);
if(!x1632.valid){
continue;
}
if( IKabs(((x1631.value)*(((((-49.0)*x1622*x1623))+(((-49.0)*x1623*x1626))+((x1626*x1627))+((x1623*x1625))+((x1622*x1627))+(((-1.0)*x1621*x1629))+(((-1.0)*x1622*x1628))+((x1622*x1630))+(((-1.0)*sj2*x1621*x1622))+(((-1.0)*x1620*x1629))+(((-1.0)*sj2*x1620*x1622))+(((-1.0)*x1626*x1628))+((x1624*x1625))+((x1626*x1630)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1632.value)*((x1622+x1626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1631.value)*(((((-49.0)*x1622*x1623))+(((-49.0)*x1623*x1626))+((x1626*x1627))+((x1623*x1625))+((x1622*x1627))+(((-1.0)*x1621*x1629))+(((-1.0)*x1622*x1628))+((x1622*x1630))+(((-1.0)*sj2*x1621*x1622))+(((-1.0)*x1620*x1629))+(((-1.0)*sj2*x1620*x1622))+(((-1.0)*x1626*x1628))+((x1624*x1625))+((x1626*x1630))))))+IKsqr(((x1632.value)*((x1622+x1626))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1631.value)*(((((-49.0)*x1622*x1623))+(((-49.0)*x1623*x1626))+((x1626*x1627))+((x1623*x1625))+((x1622*x1627))+(((-1.0)*x1621*x1629))+(((-1.0)*x1622*x1628))+((x1622*x1630))+(((-1.0)*sj2*x1621*x1622))+(((-1.0)*x1620*x1629))+(((-1.0)*sj2*x1620*x1622))+(((-1.0)*x1626*x1628))+((x1624*x1625))+((x1626*x1630))))), ((x1632.value)*((x1622+x1626))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1633=IKcos(j0);
IkReal x1634=IKsin(j0);
IkReal x1635=((1.53e-6)*sj1);
IkReal x1636=(r10*sj5);
IkReal x1637=(cj5*r01);
IkReal x1638=((0.398)*sj2);
IkReal x1639=(cj5*r11);
IkReal x1640=((1.0)*cj2);
IkReal x1641=((1.0)*sj2);
IkReal x1642=(r00*sj5);
IkReal x1643=((0.398)*cj1*cj2);
IkReal x1644=(sj1*x1633);
IkReal x1645=(cj1*x1634);
IkReal x1646=(cj1*x1633);
IkReal x1647=(sj1*x1634);
evalcond[0]=((((-1.0)*x1641*x1646))+(((-1.0)*x1640*x1644))+(((-1.0)*x1642))+(((-1.0)*x1637)));
evalcond[1]=((((-1.0)*x1641*x1645))+(((-1.0)*x1640*x1647))+(((-1.0)*x1636))+(((-1.0)*x1639)));
evalcond[2]=((((-0.122)*x1634))+(((-1.0)*x1638*x1644))+(((-1.0)*x1633*x1635))+(((-1.0)*px))+(((0.098)*x1642))+(((0.098)*x1637))+((x1633*x1643))+(((0.418)*x1646)));
evalcond[3]=((((-1.0)*x1634*x1635))+(((-1.0)*x1638*x1647))+(((-1.0)*py))+(((0.122)*x1633))+(((0.098)*x1639))+(((0.098)*x1636))+((x1634*x1643))+(((0.418)*x1645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1648=((1.0)*sj5);
IkReal x1649=((((-1.0)*r00*x1648))+(((-1.0)*cj5*r01)));
j4eval[0]=x1649;
j4eval[1]=IKsign(x1649);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1648))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1650=((1.0)*sj5);
IkReal x1651=((((-1.0)*cj5*r11))+(((-1.0)*r10*x1650)));
j4eval[0]=x1651;
j4eval[1]=IKsign(x1651);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x1650))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1652=((1.0)*sj0);
IkReal x1653=((1.0)*cj0);
IkReal x1654=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1654;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x1652))+(((-1.0)*cj5*r00*x1653))+((cj0*r01*sj5)))))+(IKabs(((((-1.0)*r12*x1652))+(((-1.0)*r02*x1653))))));
j4eval[2]=IKsign(x1654);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1655=((-1.0)*r20);
IkReal x1657 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1657)==0){
continue;
}
IkReal x1656=pow(x1657,-0.5);
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1655),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1658.value));
IkReal gconst79=(r21*x1656);
IkReal gconst80=(x1655*x1656);
CheckValue<IkReal> x1659 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1659.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1659.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1660=((-1.0)*r20);
IkReal x1661=x1656;
CheckValue<IkReal> x1663 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1660),IKFAST_ATAN2_MAGTHRESH);
if(!x1663.valid){
continue;
}
IkReal x1662=((-1.0)*(x1663.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1662;
IkReal gconst78=x1662;
IkReal gconst79=(r21*x1661);
IkReal gconst80=(x1660*x1661);
IkReal x1664=r22*r22;
IkReal x1665=((1.0)*x1664);
CheckValue<IkReal> x1669=IKPowWithIntegerCheck(((-1.0)+x1664),-1);
if(!x1669.valid){
continue;
}
IkReal x1666=x1669.value;
if((((1.0)+(((-1.0)*x1665)))) < -0.00001)
continue;
IkReal x1667=IKsqrt(((1.0)+(((-1.0)*x1665))));
IkReal x1668=(cj0*x1666*x1667);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x1668+(((-1.0)*x1665*x1668))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1670=((-1.0)*r20);
IkReal x1671=x1656;
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1670),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
IkReal x1672=((-1.0)*(x1673.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1672;
IkReal gconst78=x1672;
IkReal gconst79=(r21*x1671);
IkReal gconst80=(x1670*x1671);
IkReal x1674=r22*r22;
IkReal x1675=((1.0)*x1674);
CheckValue<IkReal> x1679=IKPowWithIntegerCheck(((-1.0)+x1674),-1);
if(!x1679.valid){
continue;
}
IkReal x1676=x1679.value;
if((((1.0)+(((-1.0)*x1675)))) < -0.00001)
continue;
IkReal x1677=IKsqrt(((1.0)+(((-1.0)*x1675))));
IkReal x1678=(sj0*x1676*x1677);
j4eval[0]=((IKabs((x1678+(((-1.0)*x1675*x1678)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1680=((-1.0)*r20);
IkReal x1681=x1656;
CheckValue<IkReal> x1683 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1680),IKFAST_ATAN2_MAGTHRESH);
if(!x1683.valid){
continue;
}
IkReal x1682=((-1.0)*(x1683.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1682;
IkReal gconst78=x1682;
IkReal gconst79=(r21*x1681);
IkReal gconst80=(x1680*x1681);
IkReal x1684=r22*r22;
CheckValue<IkReal> x1687=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1684))),-1);
if(!x1687.valid){
continue;
}
IkReal x1685=x1687.value;
IkReal x1686=(x1684+((x1685*(r21*r21*r21*r21)))+(((2.0)*x1685*(r20*r20)*(r21*r21)))+((x1685*(r20*r20*r20*r20))));
j4eval[0]=x1686;
j4eval[1]=IKsign(x1686);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1688=(gconst80*r20);
IkReal x1689=(cj1*sj2);
IkReal x1690=(cj2*sj1);
IkReal x1691=((1.0)*gconst79*r21);
CheckValue<IkReal> x1692 = IKatan2WithCheck(IkReal((((r22*x1689))+((r22*x1690)))),IkReal(((((-1.0)*x1690*x1691))+((x1688*x1689))+((x1688*x1690))+(((-1.0)*x1689*x1691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1692.valid){
continue;
}
CheckValue<IkReal> x1693=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst79*r21*x1688))+(x1688*x1688)+(((gconst79*gconst79)*(r21*r21))))),-1);
if(!x1693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1692.value)+(((1.5707963267949)*(x1693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1694=IKsin(j4);
IkReal x1695=IKcos(j4);
IkReal x1696=((1.0)*gconst80);
IkReal x1697=(sj1*sj2);
IkReal x1698=((1.0)*cj1*cj2);
IkReal x1699=(gconst79*x1694);
IkReal x1700=((1.0)*x1694);
IkReal x1701=(gconst79*x1695);
evalcond[0]=((((-1.0)*r20*x1694*x1696))+((r21*x1699))+((r22*x1695)));
evalcond[1]=(((r12*x1695))+cj0+((r11*x1699))+(((-1.0)*r10*x1694*x1696)));
evalcond[2]=(((r01*x1699))+(((-1.0)*sj0))+(((-1.0)*r00*x1694*x1696))+((r02*x1695)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x1695*x1696))+((r21*x1701))+(((-1.0)*r22*x1700)));
evalcond[4]=((((-1.0)*r00*x1695*x1696))+((r01*x1701))+(((-1.0)*cj0*x1698))+(((-1.0)*r02*x1700))+((cj0*x1697)));
evalcond[5]=((((-1.0)*sj0*x1698))+((sj0*x1697))+((r11*x1701))+(((-1.0)*r10*x1695*x1696))+(((-1.0)*r12*x1700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1702=((1.0)*gconst79);
CheckValue<IkReal> x1703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1702))+(((-1.0)*gconst80*r11)))),-1);
if(!x1703.valid){
continue;
}
CheckValue<IkReal> x1704 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1702))+((gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1703.value)))+(x1704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1705=IKsin(j4);
IkReal x1706=IKcos(j4);
IkReal x1707=((1.0)*gconst80);
IkReal x1708=(sj1*sj2);
IkReal x1709=((1.0)*cj1*cj2);
IkReal x1710=(gconst79*x1705);
IkReal x1711=((1.0)*x1705);
IkReal x1712=(gconst79*x1706);
evalcond[0]=(((r22*x1706))+(((-1.0)*r20*x1705*x1707))+((r21*x1710)));
evalcond[1]=(((r12*x1706))+cj0+((r11*x1710))+(((-1.0)*r10*x1705*x1707)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1706))+((r01*x1710))+(((-1.0)*r00*x1705*x1707)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x1706*x1707))+(((-1.0)*r22*x1711))+((r21*x1712)));
evalcond[4]=(((cj0*x1708))+((r01*x1712))+(((-1.0)*r02*x1711))+(((-1.0)*r00*x1706*x1707))+(((-1.0)*cj0*x1709)));
evalcond[5]=(((r11*x1712))+(((-1.0)*r10*x1706*x1707))+(((-1.0)*sj0*x1709))+((sj0*x1708))+(((-1.0)*r12*x1711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1713=((1.0)*gconst79);
CheckValue<IkReal> x1714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1713))+(((-1.0)*gconst80*r01)))),-1);
if(!x1714.valid){
continue;
}
CheckValue<IkReal> x1715 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst80*r20))+(((-1.0)*cj0*r21*x1713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1714.value)))+(x1715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1716=IKsin(j4);
IkReal x1717=IKcos(j4);
IkReal x1718=((1.0)*gconst80);
IkReal x1719=(sj1*sj2);
IkReal x1720=((1.0)*cj1*cj2);
IkReal x1721=(gconst79*x1716);
IkReal x1722=((1.0)*x1716);
IkReal x1723=(gconst79*x1717);
evalcond[0]=(((r22*x1717))+((r21*x1721))+(((-1.0)*r20*x1716*x1718)));
evalcond[1]=((((-1.0)*r10*x1716*x1718))+cj0+((r12*x1717))+((r11*x1721)));
evalcond[2]=(((r02*x1717))+((r01*x1721))+(((-1.0)*sj0))+(((-1.0)*r00*x1716*x1718)));
evalcond[3]=((((-1.0)*r22*x1722))+((cj2*sj1))+((r21*x1723))+((cj1*sj2))+(((-1.0)*r20*x1717*x1718)));
evalcond[4]=(((r01*x1723))+(((-1.0)*cj0*x1720))+(((-1.0)*r00*x1717*x1718))+((cj0*x1719))+(((-1.0)*r02*x1722)));
evalcond[5]=((((-1.0)*r12*x1722))+(((-1.0)*sj0*x1720))+(((-1.0)*r10*x1717*x1718))+((r11*x1723))+((sj0*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1724=((-1.0)*r21);
IkReal x1726 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1726)==0){
continue;
}
IkReal x1725=pow(x1726,-0.5);
CheckValue<IkReal> x1727 = IKatan2WithCheck(IkReal(x1724),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1727.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1727.value))));
IkReal gconst82=(x1724*x1725);
IkReal gconst83=((1.0)*r20*x1725);
CheckValue<IkReal> x1728 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1728.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1728.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1729=((-1.0)*r21);
CheckValue<IkReal> x1732 = IKatan2WithCheck(IkReal(x1729),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1732.valid){
continue;
}
IkReal x1730=((1.0)*(x1732.value));
IkReal x1731=x1725;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1730)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1730)));
IkReal gconst82=(x1729*x1731);
IkReal gconst83=((1.0)*r20*x1731);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1733=((-1.0)*r21);
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal(x1733),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
IkReal x1734=((1.0)*(x1736.value));
IkReal x1735=x1725;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1734)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1734)));
IkReal gconst82=(x1733*x1735);
IkReal gconst83=((1.0)*r20*x1735);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1737=((-1.0)*r21);
CheckValue<IkReal> x1740 = IKatan2WithCheck(IkReal(x1737),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1740.valid){
continue;
}
IkReal x1738=((1.0)*(x1740.value));
IkReal x1739=x1725;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1738)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1738)));
IkReal gconst82=(x1737*x1739);
IkReal gconst83=((1.0)*r20*x1739);
IkReal x1741=r22*r22;
IkReal x1742=((1.0)*r12*sj0);
IkReal x1743=((1.0)*cj0*r02);
CheckValue<IkReal> x1747=IKPowWithIntegerCheck(((-1.0)+x1741),-1);
if(!x1747.valid){
continue;
}
IkReal x1744=x1747.value;
if((((1.0)+(((-1.0)*x1741)))) < -0.00001)
continue;
IkReal x1745=IKsqrt(((1.0)+(((-1.0)*x1741))));
IkReal x1746=(r22*x1744*x1745);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1742*x1746))+(((-1.0)*x1743*x1746)))))+(IKabs(((((-1.0)*x1743))+(((-1.0)*x1742))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1748=((1.0)*sj0);
IkReal x1749=((1.0)*cj0);
CheckValue<IkReal> x1750=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1750.valid){
continue;
}
CheckValue<IkReal> x1751 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1748))+(((-1.0)*r02*x1749)))),IkReal(((((-1.0)*gconst83*r00*x1749))+(((-1.0)*gconst83*r10*x1748))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1750.value)))+(x1751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1752=IKsin(j4);
IkReal x1753=IKcos(j4);
IkReal x1754=(gconst82*r21);
IkReal x1755=(sj1*sj2);
IkReal x1756=((1.0)*cj1*cj2);
IkReal x1757=(gconst82*x1752);
IkReal x1758=((1.0)*gconst83*r00);
IkReal x1759=((1.0)*x1752);
IkReal x1760=(gconst82*x1753);
IkReal x1761=((1.0)*gconst83*x1753);
evalcond[0]=(((x1752*x1754))+((r22*x1753))+(((-1.0)*gconst83*r20*x1759)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1759))+((r11*x1757))+((r12*x1753)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1753))+(((-1.0)*x1752*x1758))+((r01*x1757)));
evalcond[3]=(((cj2*sj1))+((x1753*x1754))+(((-1.0)*r20*x1761))+(((-1.0)*r22*x1759))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x1756))+((r01*x1760))+(((-1.0)*x1753*x1758))+((cj0*x1755))+(((-1.0)*r02*x1759)));
evalcond[5]=((((-1.0)*r12*x1759))+(((-1.0)*sj0*x1756))+((r11*x1760))+((sj0*x1755))+(((-1.0)*r10*x1761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1762=((1.0)*gconst82);
CheckValue<IkReal> x1763=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r11))+(((-1.0)*r10*x1762)))),-1);
if(!x1763.valid){
continue;
}
CheckValue<IkReal> x1764 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst83*r20*sj0))+(((-1.0)*r21*sj0*x1762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1763.value)))+(x1764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1765=IKsin(j4);
IkReal x1766=IKcos(j4);
IkReal x1767=(gconst82*r21);
IkReal x1768=(sj1*sj2);
IkReal x1769=((1.0)*cj1*cj2);
IkReal x1770=(gconst82*x1765);
IkReal x1771=((1.0)*gconst83*r00);
IkReal x1772=((1.0)*x1765);
IkReal x1773=(gconst82*x1766);
IkReal x1774=((1.0)*gconst83*x1766);
evalcond[0]=(((x1765*x1767))+(((-1.0)*gconst83*r20*x1772))+((r22*x1766)));
evalcond[1]=((((-1.0)*gconst83*r10*x1772))+cj0+((r11*x1770))+((r12*x1766)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1770))+(((-1.0)*x1765*x1771))+((r02*x1766)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x1774))+(((-1.0)*r22*x1772))+((x1766*x1767)));
evalcond[4]=(((cj0*x1768))+((r01*x1773))+(((-1.0)*r02*x1772))+(((-1.0)*cj0*x1769))+(((-1.0)*x1766*x1771)));
evalcond[5]=(((sj0*x1768))+((r11*x1773))+(((-1.0)*r10*x1774))+(((-1.0)*r12*x1772))+(((-1.0)*sj0*x1769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1775=((1.0)*gconst82);
CheckValue<IkReal> x1776=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r01))+(((-1.0)*r00*x1775)))),-1);
if(!x1776.valid){
continue;
}
CheckValue<IkReal> x1777 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x1775))+((cj0*gconst83*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1776.value)))+(x1777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1778=IKsin(j4);
IkReal x1779=IKcos(j4);
IkReal x1780=(gconst82*r21);
IkReal x1781=(sj1*sj2);
IkReal x1782=((1.0)*cj1*cj2);
IkReal x1783=(gconst82*x1778);
IkReal x1784=((1.0)*gconst83*r00);
IkReal x1785=((1.0)*x1778);
IkReal x1786=(gconst82*x1779);
IkReal x1787=((1.0)*gconst83*x1779);
evalcond[0]=(((r22*x1779))+(((-1.0)*gconst83*r20*x1785))+((x1778*x1780)));
evalcond[1]=(((r12*x1779))+cj0+(((-1.0)*gconst83*r10*x1785))+((r11*x1783)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1779))+(((-1.0)*x1778*x1784))+((r01*x1783)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x1785))+((cj1*sj2))+((x1779*x1780))+(((-1.0)*r20*x1787)));
evalcond[4]=((((-1.0)*cj0*x1782))+(((-1.0)*x1779*x1784))+(((-1.0)*r02*x1785))+((cj0*x1781))+((r01*x1786)));
evalcond[5]=((((-1.0)*r10*x1787))+(((-1.0)*sj0*x1782))+((sj0*x1781))+(((-1.0)*r12*x1785))+((r11*x1786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1788=((-1.0)*r10);
IkReal x1790 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1790)==0){
continue;
}
IkReal x1789=pow(x1790,-0.5);
CheckValue<IkReal> x1791 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1788),IKFAST_ATAN2_MAGTHRESH);
if(!x1791.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1791.value));
IkReal gconst85=(r11*x1789);
IkReal gconst86=(x1788*x1789);
CheckValue<IkReal> x1792 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1792.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1792.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1793=((-1.0)*r10);
IkReal x1794=x1789;
CheckValue<IkReal> x1796 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1793),IKFAST_ATAN2_MAGTHRESH);
if(!x1796.valid){
continue;
}
IkReal x1795=((-1.0)*(x1796.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x1795;
IkReal gconst84=x1795;
IkReal gconst85=(r11*x1794);
IkReal gconst86=(x1793*x1794);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1797=((-1.0)*r10);
IkReal x1798=x1789;
CheckValue<IkReal> x1800 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1797),IKFAST_ATAN2_MAGTHRESH);
if(!x1800.valid){
continue;
}
IkReal x1799=((-1.0)*(x1800.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x1799;
IkReal gconst84=x1799;
IkReal gconst85=(r11*x1798);
IkReal gconst86=(x1797*x1798);
IkReal x1801=r12*r12;
IkReal x1802=((1.0)*sj0);
IkReal x1803=(cj0*r02);
IkReal x1804=x1789;
j4eval[0]=((IKabs(((((-1.0)*r12*x1802))+(((-1.0)*x1803)))))+(IKabs((((r12*x1803*x1804))+(((-1.0)*x1802*x1804))+((sj0*x1801*x1804))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1805=((-1.0)*r10);
IkReal x1806=x1789;
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1805),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
IkReal x1807=((-1.0)*(x1808.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x1807;
IkReal gconst84=x1807;
IkReal gconst85=(r11*x1806);
IkReal gconst86=(x1805*x1806);
IkReal x1809=r12*r12;
IkReal x1810=(cj1*r22*sj2);
IkReal x1811=(cj2*r22*sj1);
CheckValue<IkReal> x1815=IKPowWithIntegerCheck(((-1.0)+x1809),-1);
if(!x1815.valid){
continue;
}
IkReal x1812=x1815.value;
if((((1.0)+(((-1.0)*x1809)))) < -0.00001)
continue;
IkReal x1813=IKsqrt(((1.0)+(((-1.0)*x1809))));
IkReal x1814=((1.0)*r12*x1812*x1813);
j4eval[0]=((IKabs((x1810+x1811)))+(IKabs(((((-1.0)*x1811*x1814))+(((-1.0)*x1810*x1814))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1816=(gconst85*r21);
IkReal x1817=(cj1*sj2);
IkReal x1818=(cj2*sj1);
IkReal x1819=(gconst86*r20);
CheckValue<IkReal> x1820=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1819*x1819)+(x1816*x1816)+(((-2.0)*x1816*x1819)))),-1);
if(!x1820.valid){
continue;
}
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal((((r22*x1817))+((r22*x1818)))),IkReal((((x1818*x1819))+(((-1.0)*x1816*x1817))+(((-1.0)*x1816*x1818))+((x1817*x1819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1820.value)))+(x1821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1822=IKsin(j4);
IkReal x1823=IKcos(j4);
IkReal x1824=(gconst86*r00);
IkReal x1825=(gconst86*r10);
IkReal x1826=(sj1*sj2);
IkReal x1827=(gconst86*r20);
IkReal x1828=((1.0)*cj1*cj2);
IkReal x1829=((1.0)*x1822);
IkReal x1830=(gconst85*x1823);
IkReal x1831=(gconst85*x1822);
IkReal x1832=((1.0)*x1823);
evalcond[0]=(((r22*x1823))+(((-1.0)*x1827*x1829))+((r21*x1831)));
evalcond[1]=(cj0+(((-1.0)*x1825*x1829))+((r11*x1831))+((r12*x1823)));
evalcond[2]=(((r01*x1831))+(((-1.0)*sj0))+((r02*x1823))+(((-1.0)*x1824*x1829)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1829))+(((-1.0)*x1827*x1832))+((r21*x1830)));
evalcond[4]=(((r01*x1830))+((cj0*x1826))+(((-1.0)*cj0*x1828))+(((-1.0)*r02*x1829))+(((-1.0)*x1824*x1832)));
evalcond[5]=((((-1.0)*x1825*x1832))+((r11*x1830))+(((-1.0)*r12*x1829))+((sj0*x1826))+(((-1.0)*sj0*x1828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1833=((1.0)*sj0);
IkReal x1834=((1.0)*gconst86);
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1833)))),IkReal((((gconst85*r11*sj0))+(((-1.0)*cj0*r00*x1834))+((cj0*gconst85*r01))+(((-1.0)*gconst86*r10*x1833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1834)))),-1);
if(!x1836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1835.value)+(((1.5707963267949)*(x1836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1837=IKsin(j4);
IkReal x1838=IKcos(j4);
IkReal x1839=(gconst86*r00);
IkReal x1840=(gconst86*r10);
IkReal x1841=(sj1*sj2);
IkReal x1842=(gconst86*r20);
IkReal x1843=((1.0)*cj1*cj2);
IkReal x1844=((1.0)*x1837);
IkReal x1845=(gconst85*x1838);
IkReal x1846=(gconst85*x1837);
IkReal x1847=((1.0)*x1838);
evalcond[0]=((((-1.0)*x1842*x1844))+((r22*x1838))+((r21*x1846)));
evalcond[1]=(cj0+(((-1.0)*x1840*x1844))+((r12*x1838))+((r11*x1846)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1839*x1844))+((r02*x1838))+((r01*x1846)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x1842*x1847))+(((-1.0)*r22*x1844))+((cj1*sj2))+((r21*x1845)));
evalcond[4]=(((cj0*x1841))+(((-1.0)*r02*x1844))+(((-1.0)*x1839*x1847))+((r01*x1845))+(((-1.0)*cj0*x1843)));
evalcond[5]=(((sj0*x1841))+(((-1.0)*sj0*x1843))+(((-1.0)*r12*x1844))+(((-1.0)*x1840*x1847))+((r11*x1845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1848=((1.0)*gconst85);
CheckValue<IkReal> x1849 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst86*r20))+(((-1.0)*cj0*r21*x1848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1849.valid){
continue;
}
CheckValue<IkReal> x1850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1848))+(((-1.0)*gconst86*r01)))),-1);
if(!x1850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1849.value)+(((1.5707963267949)*(x1850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1851=IKsin(j4);
IkReal x1852=IKcos(j4);
IkReal x1853=(gconst86*r00);
IkReal x1854=(gconst86*r10);
IkReal x1855=(sj1*sj2);
IkReal x1856=(gconst86*r20);
IkReal x1857=((1.0)*cj1*cj2);
IkReal x1858=((1.0)*x1851);
IkReal x1859=(gconst85*x1852);
IkReal x1860=(gconst85*x1851);
IkReal x1861=((1.0)*x1852);
evalcond[0]=(((r22*x1852))+(((-1.0)*x1856*x1858))+((r21*x1860)));
evalcond[1]=(cj0+((r11*x1860))+((r12*x1852))+(((-1.0)*x1854*x1858)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1852))+((r01*x1860))+(((-1.0)*x1853*x1858)));
evalcond[3]=((((-1.0)*x1856*x1861))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1858))+((r21*x1859)));
evalcond[4]=((((-1.0)*x1853*x1861))+((r01*x1859))+(((-1.0)*cj0*x1857))+(((-1.0)*r02*x1858))+((cj0*x1855)));
evalcond[5]=((((-1.0)*x1854*x1861))+((sj0*x1855))+(((-1.0)*r12*x1858))+(((-1.0)*sj0*x1857))+((r11*x1859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1862=((-1.0)*r11);
IkReal x1864 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1864)==0){
continue;
}
IkReal x1863=pow(x1864,-0.5);
CheckValue<IkReal> x1865 = IKatan2WithCheck(IkReal(x1862),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1865.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1865.value))));
IkReal gconst88=(x1862*x1863);
IkReal gconst89=((1.0)*r10*x1863);
CheckValue<IkReal> x1866 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1866.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1866.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1867=((-1.0)*r11);
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal(x1867),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
IkReal x1868=((1.0)*(x1870.value));
IkReal x1869=x1863;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1868)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1868)));
IkReal gconst88=(x1867*x1869);
IkReal gconst89=((1.0)*r10*x1869);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1871=((1.0)*sj0);
IkReal x1872=((1.0)*gconst89);
CheckValue<IkReal> x1873 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1871)))),IkReal(((((-1.0)*gconst89*r10*x1871))+((cj0*gconst88*r01))+(((-1.0)*cj0*r00*x1872))+((gconst88*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1873.valid){
continue;
}
CheckValue<IkReal> x1874=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x1872)))),-1);
if(!x1874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1873.value)+(((1.5707963267949)*(x1874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1875=IKsin(j4);
IkReal x1876=IKcos(j4);
IkReal x1877=(gconst89*r10);
IkReal x1878=(sj1*sj2);
IkReal x1879=(gconst89*r20);
IkReal x1880=(gconst89*r00);
IkReal x1881=((1.0)*x1875);
IkReal x1882=((1.0)*cj1*cj2);
IkReal x1883=((1.0)*x1876);
IkReal x1884=(gconst88*x1876);
IkReal x1885=(gconst88*x1875);
evalcond[0]=(((r21*x1885))+(((-1.0)*x1879*x1881))+((r22*x1876)));
evalcond[1]=(cj0+((r12*x1876))+((r11*x1885))+(((-1.0)*x1877*x1881)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1880*x1881))+((r02*x1876))+((r01*x1885)));
evalcond[3]=(((cj2*sj1))+((r21*x1884))+(((-1.0)*x1879*x1883))+((cj1*sj2))+(((-1.0)*r22*x1881)));
evalcond[4]=((((-1.0)*cj0*x1882))+(((-1.0)*x1880*x1883))+(((-1.0)*r02*x1881))+((r01*x1884))+((cj0*x1878)));
evalcond[5]=((((-1.0)*r12*x1881))+((sj0*x1878))+(((-1.0)*sj0*x1882))+((r11*x1884))+(((-1.0)*x1877*x1883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1886=((1.0)*gconst88);
CheckValue<IkReal> x1887=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r01))+(((-1.0)*r00*x1886)))),-1);
if(!x1887.valid){
continue;
}
CheckValue<IkReal> x1888 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x1886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1887.value)))+(x1888.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1889=IKsin(j4);
IkReal x1890=IKcos(j4);
IkReal x1891=(gconst89*r10);
IkReal x1892=(sj1*sj2);
IkReal x1893=(gconst89*r20);
IkReal x1894=(gconst89*r00);
IkReal x1895=((1.0)*x1889);
IkReal x1896=((1.0)*cj1*cj2);
IkReal x1897=((1.0)*x1890);
IkReal x1898=(gconst88*x1890);
IkReal x1899=(gconst88*x1889);
evalcond[0]=((((-1.0)*x1893*x1895))+((r22*x1890))+((r21*x1899)));
evalcond[1]=(cj0+((r11*x1899))+(((-1.0)*x1891*x1895))+((r12*x1890)));
evalcond[2]=(((r02*x1890))+(((-1.0)*sj0))+((r01*x1899))+(((-1.0)*x1894*x1895)));
evalcond[3]=((((-1.0)*x1893*x1897))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1895))+((r21*x1898)));
evalcond[4]=((((-1.0)*r02*x1895))+((r01*x1898))+(((-1.0)*x1894*x1897))+((cj0*x1892))+(((-1.0)*cj0*x1896)));
evalcond[5]=(((r11*x1898))+(((-1.0)*x1891*x1897))+(((-1.0)*r12*x1895))+(((-1.0)*sj0*x1896))+((sj0*x1892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1900=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1900;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x1900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1901=((1.0)*sj5);
IkReal x1902=((((-1.0)*cj5*r01))+(((-1.0)*r00*x1901)));
j4eval[0]=x1902;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x1901)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1903=cj5*cj5;
IkReal x1904=r11*r11;
IkReal x1905=(cj5*r10);
IkReal x1906=(r11*sj5);
IkReal x1907=(((x1903*x1904))+(((-1.0)*x1904))+(((-1.0)*(r12*r12)))+(((2.0)*x1905*x1906))+(((-1.0)*x1903*(r10*r10))));
j4eval[0]=x1907;
j4eval[1]=((IKabs(((((-1.0)*x1905))+x1906)))+(IKabs(r12)));
j4eval[2]=IKsign(x1907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1908=cj5*cj5;
IkReal x1909=r11*r11;
IkReal x1910=(cj5*r10);
IkReal x1911=(r11*sj5);
CheckValue<IkReal> x1912 = IKatan2WithCheck(IkReal(((((-1.0)*x1910))+x1911)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1912.valid){
continue;
}
CheckValue<IkReal> x1913=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1908*(r10*r10)))+(((2.0)*x1910*x1911))+(((-1.0)*x1909))+(((-1.0)*(r12*r12)))+((x1908*x1909)))),-1);
if(!x1913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1912.value)+(((1.5707963267949)*(x1913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1914=IKsin(j4);
IkReal x1915=IKcos(j4);
IkReal x1916=((1.0)*cj5);
IkReal x1917=(r21*sj5);
IkReal x1918=(sj5*x1914);
IkReal x1919=((1.0)*x1914);
IkReal x1920=(sj5*x1915);
evalcond[0]=(((x1914*x1917))+((r22*x1915))+(((-1.0)*r20*x1914*x1916)));
evalcond[1]=(((r01*x1918))+((r02*x1915))+(((-1.0)*r00*x1914*x1916)));
evalcond[2]=((1.0)+((r11*x1918))+((r12*x1915))+(((-1.0)*r10*x1914*x1916)));
evalcond[3]=((((-1.0)*r10*x1915*x1916))+(((-1.0)*r12*x1919))+((r11*x1920)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r20*x1915*x1916))+(((-1.0)*r22*x1919))+((cj1*sj2))+((x1915*x1917)));
evalcond[5]=(((r01*x1920))+(((-1.0)*r02*x1919))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x1915*x1916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1921=((1.0)*sj5);
CheckValue<IkReal> x1922 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x1921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1922.valid){
continue;
}
CheckValue<IkReal> x1923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1921))+(((-1.0)*cj5*r01)))),-1);
if(!x1923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1922.value)+(((1.5707963267949)*(x1923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1924=IKsin(j4);
IkReal x1925=IKcos(j4);
IkReal x1926=((1.0)*cj5);
IkReal x1927=(r21*sj5);
IkReal x1928=(sj5*x1924);
IkReal x1929=((1.0)*x1924);
IkReal x1930=(sj5*x1925);
evalcond[0]=(((r22*x1925))+(((-1.0)*r20*x1924*x1926))+((x1924*x1927)));
evalcond[1]=(((r01*x1928))+((r02*x1925))+(((-1.0)*r00*x1924*x1926)));
evalcond[2]=((1.0)+(((-1.0)*r10*x1924*x1926))+((r11*x1928))+((r12*x1925)));
evalcond[3]=((((-1.0)*r12*x1929))+((r11*x1930))+(((-1.0)*r10*x1925*x1926)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1929))+(((-1.0)*r20*x1925*x1926))+((x1925*x1927)));
evalcond[5]=(((r01*x1930))+(((-1.0)*cj1*cj2))+(((-1.0)*r00*x1925*x1926))+((sj1*sj2))+(((-1.0)*r02*x1929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1931=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1931.valid){
continue;
}
CheckValue<IkReal> x1932 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1931.value)))+(x1932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1933=IKsin(j4);
IkReal x1934=IKcos(j4);
IkReal x1935=((1.0)*cj5);
IkReal x1936=(r21*sj5);
IkReal x1937=(sj5*x1933);
IkReal x1938=((1.0)*x1933);
IkReal x1939=(sj5*x1934);
evalcond[0]=((((-1.0)*r20*x1933*x1935))+((r22*x1934))+((x1933*x1936)));
evalcond[1]=(((r02*x1934))+((r01*x1937))+(((-1.0)*r00*x1933*x1935)));
evalcond[2]=((1.0)+((r12*x1934))+((r11*x1937))+(((-1.0)*r10*x1933*x1935)));
evalcond[3]=((((-1.0)*r10*x1934*x1935))+(((-1.0)*r12*x1938))+((r11*x1939)));
evalcond[4]=(((cj2*sj1))+((x1934*x1936))+(((-1.0)*r20*x1934*x1935))+((cj1*sj2))+(((-1.0)*r22*x1938)));
evalcond[5]=((((-1.0)*r00*x1934*x1935))+((r01*x1939))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x1938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1940=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1940;
j4eval[1]=IKsign(x1940);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1941=((1.0)*sj5);
IkReal x1942=((((-1.0)*cj5*r21))+(((-1.0)*r20*x1941)));
j4eval[0]=x1942;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x1941))+((cj5*r00))))));
j4eval[2]=IKsign(x1942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1943=cj5*cj5;
IkReal x1944=r11*r11;
IkReal x1945=(r11*sj5);
IkReal x1946=(cj5*r10);
IkReal x1947=((r12*r12)+(((-1.0)*x1943*x1944))+x1944+((x1943*(r10*r10)))+(((-2.0)*x1945*x1946)));
j4eval[0]=x1947;
j4eval[1]=IKsign(x1947);
j4eval[2]=((IKabs(r12))+(IKabs((x1945+(((-1.0)*x1946))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1948=cj5*cj5;
IkReal x1949=r11*r11;
IkReal x1950=(cj5*r10);
IkReal x1951=(r11*sj5);
CheckValue<IkReal> x1952=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x1950*x1951))+((x1948*(r10*r10)))+(((-1.0)*x1948*x1949))+x1949)),-1);
if(!x1952.valid){
continue;
}
CheckValue<IkReal> x1953 = IKatan2WithCheck(IkReal((x1951+(((-1.0)*x1950)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1952.value)))+(x1953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1954=IKsin(j4);
IkReal x1955=IKcos(j4);
IkReal x1956=((1.0)*cj5);
IkReal x1957=(r21*sj5);
IkReal x1958=(sj5*x1954);
IkReal x1959=((1.0)*x1954);
IkReal x1960=(sj5*x1955);
evalcond[0]=((((-1.0)*r20*x1954*x1956))+((x1954*x1957))+((r22*x1955)));
evalcond[1]=((((-1.0)*r00*x1954*x1956))+((r01*x1958))+((r02*x1955)));
evalcond[2]=((-1.0)+((r11*x1958))+((r12*x1955))+(((-1.0)*r10*x1954*x1956)));
evalcond[3]=((((-1.0)*r10*x1955*x1956))+((r11*x1960))+(((-1.0)*r12*x1959)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x1959))+((cj1*sj2))+((x1955*x1957))+(((-1.0)*r20*x1955*x1956)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x1959))+((r01*x1960))+(((-1.0)*r00*x1955*x1956))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1961=((1.0)*sj5);
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x1961))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
CheckValue<IkReal> x1963=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x1961)))),-1);
if(!x1963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1962.value)+(((1.5707963267949)*(x1963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1964=IKsin(j4);
IkReal x1965=IKcos(j4);
IkReal x1966=((1.0)*cj5);
IkReal x1967=(r21*sj5);
IkReal x1968=(sj5*x1964);
IkReal x1969=((1.0)*x1964);
IkReal x1970=(sj5*x1965);
evalcond[0]=((((-1.0)*r20*x1964*x1966))+((x1964*x1967))+((r22*x1965)));
evalcond[1]=(((r02*x1965))+((r01*x1968))+(((-1.0)*r00*x1964*x1966)));
evalcond[2]=((-1.0)+((r12*x1965))+(((-1.0)*r10*x1964*x1966))+((r11*x1968)));
evalcond[3]=(((r11*x1970))+(((-1.0)*r12*x1969))+(((-1.0)*r10*x1965*x1966)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r20*x1965*x1966))+((cj1*sj2))+(((-1.0)*r22*x1969))+((x1965*x1967)));
evalcond[5]=((((-1.0)*r02*x1969))+(((-1.0)*sj1*sj2))+((r01*x1970))+(((-1.0)*r00*x1965*x1966))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1971.valid){
continue;
}
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1971.value)))+(x1972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1973=IKsin(j4);
IkReal x1974=IKcos(j4);
IkReal x1975=((1.0)*cj5);
IkReal x1976=(r21*sj5);
IkReal x1977=(sj5*x1973);
IkReal x1978=((1.0)*x1973);
IkReal x1979=(sj5*x1974);
evalcond[0]=((((-1.0)*r20*x1973*x1975))+((r22*x1974))+((x1973*x1976)));
evalcond[1]=(((r02*x1974))+(((-1.0)*r00*x1973*x1975))+((r01*x1977)));
evalcond[2]=((-1.0)+((r12*x1974))+((r11*x1977))+(((-1.0)*r10*x1973*x1975)));
evalcond[3]=((((-1.0)*r10*x1974*x1975))+((r11*x1979))+(((-1.0)*r12*x1978)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x1978))+((x1974*x1976))+(((-1.0)*r20*x1974*x1975)));
evalcond[5]=((((-1.0)*r00*x1974*x1975))+(((-1.0)*r02*x1978))+(((-1.0)*sj1*sj2))+((r01*x1979))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1980=((-1.0)*r00);
IkReal x1982 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1982)==0){
continue;
}
IkReal x1981=pow(x1982,-0.5);
CheckValue<IkReal> x1983 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1980),IKFAST_ATAN2_MAGTHRESH);
if(!x1983.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1983.value));
IkReal gconst91=(r01*x1981);
IkReal gconst92=(x1980*x1981);
CheckValue<IkReal> x1984 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1984.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1984.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1985=((-1.0)*r00);
IkReal x1986=x1981;
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1985),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
IkReal x1987=((-1.0)*(x1988.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x1987;
IkReal gconst90=x1987;
IkReal gconst91=(r01*x1986);
IkReal gconst92=(x1985*x1986);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1989=((-1.0)*r00);
IkReal x1990=x1981;
CheckValue<IkReal> x1992 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1989),IKFAST_ATAN2_MAGTHRESH);
if(!x1992.valid){
continue;
}
IkReal x1991=((-1.0)*(x1992.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x1991;
IkReal gconst90=x1991;
IkReal gconst91=(r01*x1990);
IkReal gconst92=(x1989*x1990);
IkReal x1993=r02*r02;
IkReal x1994=(r12*sj0);
IkReal x1995=((1.0)*cj0);
IkReal x1996=x1981;
j4eval[0]=((IKabs(((((-1.0)*x1995*x1996))+((r02*x1994*x1996))+((cj0*x1993*x1996)))))+(IKabs(((((-1.0)*r02*x1995))+(((-1.0)*x1994))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1997=((-1.0)*r00);
IkReal x1998=x1981;
CheckValue<IkReal> x2000 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1997),IKFAST_ATAN2_MAGTHRESH);
if(!x2000.valid){
continue;
}
IkReal x1999=((-1.0)*(x2000.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x1999;
IkReal gconst90=x1999;
IkReal gconst91=(r01*x1998);
IkReal gconst92=(x1997*x1998);
IkReal x2001=r02*r02;
IkReal x2002=(cj1*r22*sj2);
IkReal x2003=(cj2*r22*sj1);
CheckValue<IkReal> x2007=IKPowWithIntegerCheck(((-1.0)+x2001),-1);
if(!x2007.valid){
continue;
}
IkReal x2004=x2007.value;
if((((1.0)+(((-1.0)*x2001)))) < -0.00001)
continue;
IkReal x2005=IKsqrt(((1.0)+(((-1.0)*x2001))));
IkReal x2006=((1.0)*r02*x2004*x2005);
j4eval[0]=((IKabs(((((-1.0)*x2003*x2006))+(((-1.0)*x2002*x2006)))))+(IKabs((x2002+x2003))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2008=(gconst91*r21);
IkReal x2009=(gconst92*r20);
IkReal x2010=(cj2*sj1);
IkReal x2011=(cj1*sj2);
CheckValue<IkReal> x2012=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2009*x2009)+(x2008*x2008)+(((-2.0)*x2008*x2009)))),-1);
if(!x2012.valid){
continue;
}
CheckValue<IkReal> x2013 = IKatan2WithCheck(IkReal((((r22*x2011))+((r22*x2010)))),IkReal(((((-1.0)*x2008*x2010))+(((-1.0)*x2008*x2011))+((x2009*x2010))+((x2009*x2011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2012.value)))+(x2013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2014=IKsin(j4);
IkReal x2015=IKcos(j4);
IkReal x2016=(sj1*sj2);
IkReal x2017=((1.0)*gconst92);
IkReal x2018=((1.0)*cj1*cj2);
IkReal x2019=(gconst91*x2014);
IkReal x2020=(gconst91*x2015);
IkReal x2021=((1.0)*x2014);
evalcond[0]=((((-1.0)*r20*x2014*x2017))+((r22*x2015))+((r21*x2019)));
evalcond[1]=((((-1.0)*r10*x2014*x2017))+cj0+((r12*x2015))+((r11*x2019)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2019))+(((-1.0)*r00*x2014*x2017))+((r02*x2015)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2021))+((cj1*sj2))+(((-1.0)*r20*x2015*x2017))+((r21*x2020)));
evalcond[4]=(((r01*x2020))+(((-1.0)*r02*x2021))+(((-1.0)*r00*x2015*x2017))+((cj0*x2016))+(((-1.0)*cj0*x2018)));
evalcond[5]=((((-1.0)*r10*x2015*x2017))+((r11*x2020))+((sj0*x2016))+(((-1.0)*sj0*x2018))+(((-1.0)*r12*x2021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2022=((1.0)*sj0);
IkReal x2023=((1.0)*cj0);
CheckValue<IkReal> x2024=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2024.valid){
continue;
}
CheckValue<IkReal> x2025 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2023))+(((-1.0)*r12*x2022)))),IkReal(((((-1.0)*gconst92*r10*x2022))+(((-1.0)*gconst92*r00*x2023))+((gconst91*r11*sj0))+((cj0*gconst91*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2024.value)))+(x2025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2026=IKsin(j4);
IkReal x2027=IKcos(j4);
IkReal x2028=(sj1*sj2);
IkReal x2029=((1.0)*gconst92);
IkReal x2030=((1.0)*cj1*cj2);
IkReal x2031=(gconst91*x2026);
IkReal x2032=(gconst91*x2027);
IkReal x2033=((1.0)*x2026);
evalcond[0]=((((-1.0)*r20*x2026*x2029))+((r21*x2031))+((r22*x2027)));
evalcond[1]=(cj0+(((-1.0)*r10*x2026*x2029))+((r11*x2031))+((r12*x2027)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2031))+((r02*x2027))+(((-1.0)*r00*x2026*x2029)));
evalcond[3]=(((cj2*sj1))+((r21*x2032))+(((-1.0)*r22*x2033))+(((-1.0)*r20*x2027*x2029))+((cj1*sj2)));
evalcond[4]=(((r01*x2032))+((cj0*x2028))+(((-1.0)*r02*x2033))+(((-1.0)*r00*x2027*x2029))+(((-1.0)*cj0*x2030)));
evalcond[5]=((((-1.0)*r12*x2033))+((sj0*x2028))+(((-1.0)*sj0*x2030))+(((-1.0)*r10*x2027*x2029))+((r11*x2032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2034=((1.0)*gconst91);
CheckValue<IkReal> x2035 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2034))+((gconst92*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2035.valid){
continue;
}
CheckValue<IkReal> x2036=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2034))+(((-1.0)*gconst92*r11)))),-1);
if(!x2036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2035.value)+(((1.5707963267949)*(x2036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2037=IKsin(j4);
IkReal x2038=IKcos(j4);
IkReal x2039=(sj1*sj2);
IkReal x2040=((1.0)*gconst92);
IkReal x2041=((1.0)*cj1*cj2);
IkReal x2042=(gconst91*x2037);
IkReal x2043=(gconst91*x2038);
IkReal x2044=((1.0)*x2037);
evalcond[0]=(((r22*x2038))+((r21*x2042))+(((-1.0)*r20*x2037*x2040)));
evalcond[1]=(cj0+((r12*x2038))+((r11*x2042))+(((-1.0)*r10*x2037*x2040)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2038))+(((-1.0)*r00*x2037*x2040))+((r01*x2042)));
evalcond[3]=(((cj2*sj1))+((r21*x2043))+(((-1.0)*r22*x2044))+((cj1*sj2))+(((-1.0)*r20*x2038*x2040)));
evalcond[4]=((((-1.0)*r02*x2044))+(((-1.0)*cj0*x2041))+(((-1.0)*r00*x2038*x2040))+((cj0*x2039))+((r01*x2043)));
evalcond[5]=((((-1.0)*sj0*x2041))+((r11*x2043))+((sj0*x2039))+(((-1.0)*r10*x2038*x2040))+(((-1.0)*r12*x2044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2045=((-1.0)*r01);
IkReal x2047 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2047)==0){
continue;
}
IkReal x2046=pow(x2047,-0.5);
CheckValue<IkReal> x2048 = IKatan2WithCheck(IkReal(x2045),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2048.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2048.value))));
IkReal gconst94=(x2045*x2046);
IkReal gconst95=((1.0)*r00*x2046);
CheckValue<IkReal> x2049 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2049.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2049.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2050=((-1.0)*r01);
CheckValue<IkReal> x2053 = IKatan2WithCheck(IkReal(x2050),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2053.valid){
continue;
}
IkReal x2051=((1.0)*(x2053.value));
IkReal x2052=x2046;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2051)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2051)));
IkReal gconst94=(x2050*x2052);
IkReal gconst95=((1.0)*r00*x2052);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2054=((-1.0)*r01);
CheckValue<IkReal> x2057 = IKatan2WithCheck(IkReal(x2054),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2057.valid){
continue;
}
IkReal x2055=((1.0)*(x2057.value));
IkReal x2056=x2046;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2055)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2055)));
IkReal gconst94=(x2054*x2056);
IkReal gconst95=((1.0)*r00*x2056);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2058=((1.0)*sj0);
IkReal x2059=((1.0)*gconst95);
CheckValue<IkReal> x2060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2059))+(((-1.0)*gconst94*r20)))),-1);
if(!x2060.valid){
continue;
}
CheckValue<IkReal> x2061 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2058))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst95*r10*x2058))+((gconst94*r11*sj0))+(((-1.0)*cj0*r00*x2059))+((cj0*gconst94*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2060.value)))+(x2061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2062=IKsin(j4);
IkReal x2063=IKcos(j4);
IkReal x2064=(sj1*sj2);
IkReal x2065=(gconst95*r00);
IkReal x2066=((1.0)*cj1*cj2);
IkReal x2067=((1.0)*gconst95*r10);
IkReal x2068=((1.0)*gconst95*r20);
IkReal x2069=(gconst94*x2063);
IkReal x2070=((1.0)*x2062);
IkReal x2071=(gconst94*x2062);
evalcond[0]=(((r22*x2063))+(((-1.0)*x2062*x2068))+((r21*x2071)));
evalcond[1]=(cj0+((r12*x2063))+((r11*x2071))+(((-1.0)*x2062*x2067)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2063))+((r01*x2071))+(((-1.0)*x2065*x2070)));
evalcond[3]=(((r21*x2069))+((cj2*sj1))+(((-1.0)*x2063*x2068))+(((-1.0)*r22*x2070))+((cj1*sj2)));
evalcond[4]=(((cj0*x2064))+(((-1.0)*r02*x2070))+(((-1.0)*cj0*x2066))+(((-1.0)*x2063*x2065))+((r01*x2069)));
evalcond[5]=((((-1.0)*sj0*x2066))+(((-1.0)*r12*x2070))+(((-1.0)*x2063*x2067))+((r11*x2069))+((sj0*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2072=((1.0)*gconst94);
CheckValue<IkReal> x2073 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst95*r20*sj0))+(((-1.0)*r21*sj0*x2072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2073.valid){
continue;
}
CheckValue<IkReal> x2074=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2072))+(((-1.0)*gconst95*r11)))),-1);
if(!x2074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2073.value)+(((1.5707963267949)*(x2074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2075=IKsin(j4);
IkReal x2076=IKcos(j4);
IkReal x2077=(sj1*sj2);
IkReal x2078=(gconst95*r00);
IkReal x2079=((1.0)*cj1*cj2);
IkReal x2080=((1.0)*gconst95*r10);
IkReal x2081=((1.0)*gconst95*r20);
IkReal x2082=(gconst94*x2076);
IkReal x2083=((1.0)*x2075);
IkReal x2084=(gconst94*x2075);
evalcond[0]=(((r22*x2076))+((r21*x2084))+(((-1.0)*x2075*x2081)));
evalcond[1]=(cj0+((r12*x2076))+(((-1.0)*x2075*x2080))+((r11*x2084)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2078*x2083))+((r02*x2076))+((r01*x2084)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x2083))+((cj1*sj2))+(((-1.0)*x2076*x2081))+((r21*x2082)));
evalcond[4]=((((-1.0)*r02*x2083))+(((-1.0)*cj0*x2079))+(((-1.0)*x2076*x2078))+((r01*x2082))+((cj0*x2077)));
evalcond[5]=((((-1.0)*x2076*x2080))+((sj0*x2077))+(((-1.0)*r12*x2083))+((r11*x2082))+(((-1.0)*sj0*x2079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2085=((1.0)*gconst94);
CheckValue<IkReal> x2086 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2085))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2086.valid){
continue;
}
CheckValue<IkReal> x2087=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r01))+(((-1.0)*r00*x2085)))),-1);
if(!x2087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2086.value)+(((1.5707963267949)*(x2087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2088=IKsin(j4);
IkReal x2089=IKcos(j4);
IkReal x2090=(sj1*sj2);
IkReal x2091=(gconst95*r00);
IkReal x2092=((1.0)*cj1*cj2);
IkReal x2093=((1.0)*gconst95*r10);
IkReal x2094=((1.0)*gconst95*r20);
IkReal x2095=(gconst94*x2089);
IkReal x2096=((1.0)*x2088);
IkReal x2097=(gconst94*x2088);
evalcond[0]=((((-1.0)*x2088*x2094))+((r21*x2097))+((r22*x2089)));
evalcond[1]=(cj0+(((-1.0)*x2088*x2093))+((r11*x2097))+((r12*x2089)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2089))+(((-1.0)*x2091*x2096))+((r01*x2097)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2089*x2094))+((r21*x2095))+(((-1.0)*r22*x2096)));
evalcond[4]=(((r01*x2095))+(((-1.0)*x2089*x2091))+((cj0*x2090))+(((-1.0)*r02*x2096))+(((-1.0)*cj0*x2092)));
evalcond[5]=(((sj0*x2090))+(((-1.0)*sj0*x2092))+(((-1.0)*x2089*x2093))+(((-1.0)*r12*x2096))+((r11*x2095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2098=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2098;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2098);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2099=((1.0)*sj5);
IkReal x2100=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2099)));
j4eval[0]=x2100;
j4eval[1]=IKsign(x2100);
j4eval[2]=((IKabs(((((-1.0)*r21*x2099))+((cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2101=cj5*cj5;
IkReal x2102=r01*r01;
IkReal x2103=(cj5*r00);
IkReal x2104=(r01*sj5);
IkReal x2105=(x2102+(((-2.0)*x2103*x2104))+(r02*r02)+(((-1.0)*x2101*x2102))+((x2101*(r00*r00))));
j4eval[0]=x2105;
j4eval[1]=((IKabs(r02))+(IKabs((x2104+(((-1.0)*x2103))))));
j4eval[2]=IKsign(x2105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2106=cj5*cj5;
IkReal x2107=r01*r01;
IkReal x2108=(r01*sj5);
IkReal x2109=(cj5*r00);
CheckValue<IkReal> x2110 = IKatan2WithCheck(IkReal((x2108+(((-1.0)*x2109)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2110.valid){
continue;
}
CheckValue<IkReal> x2111=IKPowWithIntegerCheck(IKsign((((x2106*(r00*r00)))+(((-2.0)*x2108*x2109))+(((-1.0)*x2106*x2107))+x2107+(r02*r02))),-1);
if(!x2111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2110.value)+(((1.5707963267949)*(x2111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2112=IKsin(j4);
IkReal x2113=IKcos(j4);
IkReal x2114=((1.0)*cj5);
IkReal x2115=(r21*sj5);
IkReal x2116=(sj5*x2112);
IkReal x2117=((1.0)*x2112);
IkReal x2118=(sj5*x2113);
evalcond[0]=((((-1.0)*r20*x2112*x2114))+((x2112*x2115))+((r22*x2113)));
evalcond[1]=(((r12*x2113))+(((-1.0)*r10*x2112*x2114))+((r11*x2116)));
evalcond[2]=((-1.0)+((r01*x2116))+(((-1.0)*r00*x2112*x2114))+((r02*x2113)));
evalcond[3]=(((r01*x2118))+(((-1.0)*r00*x2113*x2114))+(((-1.0)*r02*x2117)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2117))+((x2113*x2115))+(((-1.0)*r20*x2113*x2114)));
evalcond[5]=((((-1.0)*r10*x2113*x2114))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x2117))+((r11*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2119=((1.0)*sj5);
CheckValue<IkReal> x2120 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2120.valid){
continue;
}
CheckValue<IkReal> x2121=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2119))+(((-1.0)*cj5*r11)))),-1);
if(!x2121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2120.value)+(((1.5707963267949)*(x2121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2122=IKsin(j4);
IkReal x2123=IKcos(j4);
IkReal x2124=((1.0)*cj5);
IkReal x2125=(r21*sj5);
IkReal x2126=(sj5*x2122);
IkReal x2127=((1.0)*x2122);
IkReal x2128=(sj5*x2123);
evalcond[0]=((((-1.0)*r20*x2122*x2124))+((x2122*x2125))+((r22*x2123)));
evalcond[1]=(((r12*x2123))+(((-1.0)*r10*x2122*x2124))+((r11*x2126)));
evalcond[2]=((-1.0)+((r02*x2123))+((r01*x2126))+(((-1.0)*r00*x2122*x2124)));
evalcond[3]=((((-1.0)*r02*x2127))+((r01*x2128))+(((-1.0)*r00*x2123*x2124)));
evalcond[4]=(((cj2*sj1))+((x2123*x2125))+(((-1.0)*r22*x2127))+((cj1*sj2))+(((-1.0)*r20*x2123*x2124)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x2128))+(((-1.0)*r10*x2123*x2124))+(((-1.0)*r12*x2127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2129 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2129.valid){
continue;
}
CheckValue<IkReal> x2130=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2129.value)+(((1.5707963267949)*(x2130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2131=IKsin(j4);
IkReal x2132=IKcos(j4);
IkReal x2133=((1.0)*cj5);
IkReal x2134=(r21*sj5);
IkReal x2135=(sj5*x2131);
IkReal x2136=((1.0)*x2131);
IkReal x2137=(sj5*x2132);
evalcond[0]=(((x2131*x2134))+((r22*x2132))+(((-1.0)*r20*x2131*x2133)));
evalcond[1]=(((r12*x2132))+((r11*x2135))+(((-1.0)*r10*x2131*x2133)));
evalcond[2]=((-1.0)+((r02*x2132))+((r01*x2135))+(((-1.0)*r00*x2131*x2133)));
evalcond[3]=((((-1.0)*r00*x2132*x2133))+((r01*x2137))+(((-1.0)*r02*x2136)));
evalcond[4]=((((-1.0)*r22*x2136))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2132*x2133))+((x2132*x2134)));
evalcond[5]=((((-1.0)*r12*x2136))+((r11*x2137))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r10*x2132*x2133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2138=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2138;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2139=((1.0)*sj5);
IkReal x2140=((((-1.0)*r20*x2139))+(((-1.0)*cj5*r21)));
j4eval[0]=x2140;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2139))))));
j4eval[2]=IKsign(x2140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2141=cj5*cj5;
IkReal x2142=r01*r01;
IkReal x2143=(r01*sj5);
IkReal x2144=(cj5*r00);
IkReal x2145=((((-1.0)*x2142))+(((2.0)*x2143*x2144))+(((-1.0)*(r02*r02)))+(((-1.0)*x2141*(r00*r00)))+((x2141*x2142)));
j4eval[0]=x2145;
j4eval[1]=IKsign(x2145);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2144))+x2143))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2146=cj5*cj5;
IkReal x2147=r01*r01;
IkReal x2148=(r01*sj5);
IkReal x2149=(cj5*r00);
CheckValue<IkReal> x2150=IKPowWithIntegerCheck(IKsign((((x2146*x2147))+(((-1.0)*x2147))+(((-1.0)*x2146*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x2148*x2149)))),-1);
if(!x2150.valid){
continue;
}
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(((((-1.0)*x2149))+x2148)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2150.value)))+(x2151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2152=IKsin(j4);
IkReal x2153=IKcos(j4);
IkReal x2154=((1.0)*cj5);
IkReal x2155=(r21*sj5);
IkReal x2156=(sj5*x2152);
IkReal x2157=((1.0)*x2152);
IkReal x2158=(sj5*x2153);
evalcond[0]=((((-1.0)*r20*x2152*x2154))+((x2152*x2155))+((r22*x2153)));
evalcond[1]=(((r12*x2153))+((r11*x2156))+(((-1.0)*r10*x2152*x2154)));
evalcond[2]=((1.0)+((r02*x2153))+((r01*x2156))+(((-1.0)*r00*x2152*x2154)));
evalcond[3]=((((-1.0)*r02*x2157))+((r01*x2158))+(((-1.0)*r00*x2153*x2154)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2153*x2154))+(((-1.0)*r22*x2157))+((x2153*x2155)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x2157))+((cj1*cj2))+(((-1.0)*r10*x2153*x2154))+((r11*x2158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2159=((1.0)*sj5);
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
CheckValue<IkReal> x2161=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2159)))),-1);
if(!x2161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2160.value)+(((1.5707963267949)*(x2161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2162=IKsin(j4);
IkReal x2163=IKcos(j4);
IkReal x2164=((1.0)*cj5);
IkReal x2165=(r21*sj5);
IkReal x2166=(sj5*x2162);
IkReal x2167=((1.0)*x2162);
IkReal x2168=(sj5*x2163);
evalcond[0]=((((-1.0)*r20*x2162*x2164))+((x2162*x2165))+((r22*x2163)));
evalcond[1]=(((r12*x2163))+((r11*x2166))+(((-1.0)*r10*x2162*x2164)));
evalcond[2]=((1.0)+((r01*x2166))+((r02*x2163))+(((-1.0)*r00*x2162*x2164)));
evalcond[3]=(((r01*x2168))+(((-1.0)*r00*x2163*x2164))+(((-1.0)*r02*x2167)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r20*x2163*x2164))+((cj1*sj2))+(((-1.0)*r22*x2167))+((x2163*x2165)));
evalcond[5]=((((-1.0)*r10*x2163*x2164))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x2167))+((r11*x2168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2169=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2169.valid){
continue;
}
CheckValue<IkReal> x2170 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2169.value)))+(x2170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2171=IKsin(j4);
IkReal x2172=IKcos(j4);
IkReal x2173=((1.0)*cj5);
IkReal x2174=(r21*sj5);
IkReal x2175=(sj5*x2171);
IkReal x2176=((1.0)*x2171);
IkReal x2177=(sj5*x2172);
evalcond[0]=(((r22*x2172))+(((-1.0)*r20*x2171*x2173))+((x2171*x2174)));
evalcond[1]=(((r11*x2175))+(((-1.0)*r10*x2171*x2173))+((r12*x2172)));
evalcond[2]=((1.0)+((r01*x2175))+(((-1.0)*r00*x2171*x2173))+((r02*x2172)));
evalcond[3]=(((r01*x2177))+(((-1.0)*r02*x2176))+(((-1.0)*r00*x2172*x2173)));
evalcond[4]=(((cj2*sj1))+((x2172*x2174))+((cj1*sj2))+(((-1.0)*r22*x2176))+(((-1.0)*r20*x2172*x2173)));
evalcond[5]=(((r11*x2177))+(((-1.0)*r10*x2172*x2173))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x2176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2178=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2178);
rxp1_1=(px*r21);
rxp1_2=(r11*x2178);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2179=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2179);
rxp1_1=(px*r21);
rxp1_2=(r11*x2179);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2180=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2180);
rxp1_1=(px*r21);
rxp1_2=(r11*x2180);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2183=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x2183.valid){
continue;
}
IkReal x2181=x2183.value;
IkReal x2182=(sj0*x2181);
cj4array[0]=((((-1.0)*sj1*sj2*x2182))+((cj1*cj2*x2182)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2184=IKsin(j4);
IkReal x2185=IKcos(j4);
IkReal x2186=(r21*sj5);
IkReal x2187=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x2184);
evalcond[1]=((((-1.0)*sj0))+((r02*x2185)));
evalcond[2]=((((-1.0)*x2184*x2187))+((x2184*x2186)));
evalcond[3]=((((-1.0)*cj5*r10*x2184))+((r11*sj5*x2184)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2185*x2187))+((x2185*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2190=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2190.valid){
continue;
}
IkReal x2188=x2190.value;
IkReal x2189=((1.0)*x2188);
cj4array[0]=((((-1.0)*cj2*sj1*x2189))+(((-1.0)*cj1*sj2*x2189)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2191=IKsin(j4);
IkReal x2192=IKcos(j4);
IkReal x2193=((1.0)*sj0);
IkReal x2194=((1.0)*cj5);
IkReal x2195=(sj5*x2191);
evalcond[0]=((-1.0)*r02*x2191);
evalcond[1]=((((-1.0)*x2193))+((r02*x2192)));
evalcond[2]=(((r21*x2195))+(((-1.0)*r20*x2191*x2194)));
evalcond[3]=((((-1.0)*r10*x2191*x2194))+((r11*x2195)));
evalcond[4]=(((r11*sj5*x2192))+(((-1.0)*r10*x2192*x2194))+(((-1.0)*cj1*cj2*x2193))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2196=IKPowWithIntegerCheck(r02,-1);
if(!x2196.valid){
continue;
}
cj4array[0]=(sj0*(x2196.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2197=IKsin(j4);
IkReal x2198=IKcos(j4);
IkReal x2199=(r21*sj5);
IkReal x2200=((1.0)*cj5);
IkReal x2201=(r11*sj5);
evalcond[0]=((-1.0)*r02*x2197);
evalcond[1]=((((-1.0)*r20*x2197*x2200))+((x2197*x2199)));
evalcond[2]=((((-1.0)*r10*x2197*x2200))+((x2197*x2201)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x2198*x2200))+((cj1*sj2))+((x2198*x2199)));
evalcond[4]=(((x2198*x2201))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x2198*x2200))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2202=((1.0)*sj0);
IkReal x2203=((1.0)*cj0);
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2202))+(((-1.0)*r02*x2203)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x2203))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x2202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
CheckValue<IkReal> x2205=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2204.value)+(((1.5707963267949)*(x2205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2206=IKsin(j4);
IkReal x2207=IKcos(j4);
IkReal x2208=((1.0)*cj5);
IkReal x2209=(r21*sj5);
IkReal x2210=(sj1*sj2);
IkReal x2211=((1.0)*cj1*cj2);
IkReal x2212=(sj5*x2206);
IkReal x2213=((1.0)*x2206);
IkReal x2214=(sj5*x2207);
evalcond[0]=(((x2206*x2209))+(((-1.0)*r20*x2206*x2208))+((r22*x2207)));
evalcond[1]=(cj0+(((-1.0)*r10*x2206*x2208))+((r12*x2207))+((r11*x2212)));
evalcond[2]=(((r02*x2207))+(((-1.0)*sj0))+((r01*x2212))+(((-1.0)*r00*x2206*x2208)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2213))+(((-1.0)*r20*x2207*x2208))+((x2207*x2209)));
evalcond[4]=(((r01*x2214))+((cj0*x2210))+(((-1.0)*r02*x2213))+(((-1.0)*cj0*x2211))+(((-1.0)*r00*x2207*x2208)));
evalcond[5]=((((-1.0)*r10*x2207*x2208))+(((-1.0)*r12*x2213))+((r11*x2214))+(((-1.0)*sj0*x2211))+((sj0*x2210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2215=((1.0)*sj5);
CheckValue<IkReal> x2216=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2215)))),-1);
if(!x2216.valid){
continue;
}
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2215))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2216.value)))+(x2217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2218=IKsin(j4);
IkReal x2219=IKcos(j4);
IkReal x2220=((1.0)*cj5);
IkReal x2221=(r21*sj5);
IkReal x2222=(sj1*sj2);
IkReal x2223=((1.0)*cj1*cj2);
IkReal x2224=(sj5*x2218);
IkReal x2225=((1.0)*x2218);
IkReal x2226=(sj5*x2219);
evalcond[0]=(((x2218*x2221))+(((-1.0)*r20*x2218*x2220))+((r22*x2219)));
evalcond[1]=(cj0+((r12*x2219))+(((-1.0)*r10*x2218*x2220))+((r11*x2224)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2218*x2220))+((r01*x2224))+((r02*x2219)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x2219*x2221))+(((-1.0)*r22*x2225))+(((-1.0)*r20*x2219*x2220)));
evalcond[4]=(((cj0*x2222))+(((-1.0)*cj0*x2223))+(((-1.0)*r02*x2225))+(((-1.0)*r00*x2219*x2220))+((r01*x2226)));
evalcond[5]=(((sj0*x2222))+(((-1.0)*sj0*x2223))+(((-1.0)*r12*x2225))+(((-1.0)*r10*x2219*x2220))+((r11*x2226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2227=((1.0)*sj5);
CheckValue<IkReal> x2228=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2227))+(((-1.0)*cj5*r01)))),-1);
if(!x2228.valid){
continue;
}
CheckValue<IkReal> x2229 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2227))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2228.value)))+(x2229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2230=IKsin(j4);
IkReal x2231=IKcos(j4);
IkReal x2232=((1.0)*cj5);
IkReal x2233=(r21*sj5);
IkReal x2234=(sj1*sj2);
IkReal x2235=((1.0)*cj1*cj2);
IkReal x2236=(sj5*x2230);
IkReal x2237=((1.0)*x2230);
IkReal x2238=(sj5*x2231);
evalcond[0]=(((r22*x2231))+((x2230*x2233))+(((-1.0)*r20*x2230*x2232)));
evalcond[1]=(cj0+(((-1.0)*r10*x2230*x2232))+((r11*x2236))+((r12*x2231)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2231))+(((-1.0)*r00*x2230*x2232))+((r01*x2236)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2237))+((x2231*x2233))+(((-1.0)*r20*x2231*x2232)));
evalcond[4]=(((cj0*x2234))+(((-1.0)*r00*x2231*x2232))+(((-1.0)*r02*x2237))+(((-1.0)*cj0*x2235))+((r01*x2238)));
evalcond[5]=(((sj0*x2234))+(((-1.0)*sj0*x2235))+(((-1.0)*r12*x2237))+(((-1.0)*r10*x2231*x2232))+((r11*x2238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2239=cj5*cj5;
IkReal x2240=r21*r21;
IkReal x2241=(cj1*sj2);
IkReal x2242=(cj5*r20);
IkReal x2243=(r21*sj5);
IkReal x2244=(cj2*sj1);
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal((((r22*x2241))+((r22*x2244)))),IkReal((((x2241*x2242))+(((-1.0)*x2241*x2243))+(((-1.0)*x2243*x2244))+((x2242*x2244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
CheckValue<IkReal> x2246=IKPowWithIntegerCheck(IKsign((x2240+(r22*r22)+(((-2.0)*x2242*x2243))+(((-1.0)*x2239*x2240))+((x2239*(r20*r20))))),-1);
if(!x2246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2245.value)+(((1.5707963267949)*(x2246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2247=IKsin(j4);
IkReal x2248=IKcos(j4);
IkReal x2249=(r21*sj5);
IkReal x2250=(cj5*r20);
IkReal x2251=((1.0)*x2247);
evalcond[0]=(((x2247*x2249))+((r22*x2248))+(((-1.0)*x2250*x2251)));
evalcond[1]=((((-1.0)*x2248*x2250))+((cj2*sj1))+(((-1.0)*r22*x2251))+((cj1*sj2))+((x2248*x2249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2252=(cj5*sj4);
IkReal x2253=(sj4*sj5);
if( IKabs((((r01*x2253))+(((-1.0)*r00*x2252))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2252))+(((-1.0)*r11*x2253))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2253))+(((-1.0)*r00*x2252))+((cj4*r02))))+IKsqr((((r10*x2252))+(((-1.0)*r11*x2253))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2253))+(((-1.0)*r00*x2252))+((cj4*r02))), (((r10*x2252))+(((-1.0)*r11*x2253))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2254=IKcos(j0);
IkReal x2255=IKsin(j0);
IkReal x2256=((1.53e-6)*sj1);
IkReal x2257=(r11*sj5);
IkReal x2258=(r10*sj5);
IkReal x2259=(cj5*r01);
IkReal x2260=((1.0)*r00);
IkReal x2261=(cj4*cj5);
IkReal x2262=((1.0)*cj5);
IkReal x2263=((1.0)*sj4);
IkReal x2264=((0.398)*sj2);
IkReal x2265=((1.0)*cj2);
IkReal x2266=((0.398)*cj2);
IkReal x2267=(r01*sj5);
IkReal x2268=((1.0)*cj1*sj2);
IkReal x2269=(sj1*x2254);
IkReal x2270=(cj1*x2255);
IkReal x2271=(cj1*x2254);
IkReal x2272=(sj1*x2255);
evalcond[0]=(x2254+((sj4*x2257))+(((-1.0)*r10*sj4*x2262))+((cj4*r12)));
evalcond[1]=(((sj4*x2267))+(((-1.0)*x2255))+(((-1.0)*cj5*sj4*x2260))+((cj4*r02)));
evalcond[2]=((((-1.0)*x2254*x2268))+(((-1.0)*x2259))+(((-1.0)*sj5*x2260))+(((-1.0)*x2265*x2269)));
evalcond[3]=((((-1.0)*x2258))+(((-1.0)*x2255*x2268))+(((-1.0)*x2265*x2272))+(((-1.0)*r11*x2262)));
evalcond[4]=(((cj4*x2267))+(((-1.0)*x2260*x2261))+((sj2*x2269))+(((-1.0)*r02*x2263))+(((-1.0)*x2265*x2271)));
evalcond[5]=((((-1.0)*r10*x2261))+((sj2*x2272))+((cj4*x2257))+(((-1.0)*x2265*x2270))+(((-1.0)*r12*x2263)));
evalcond[6]=((((0.098)*x2259))+(((0.418)*x2271))+(((-0.122)*x2255))+(((-1.0)*px))+(((0.098)*r00*sj5))+((x2266*x2271))+(((-1.0)*x2264*x2269))+(((-1.0)*x2254*x2256)));
evalcond[7]=((((-1.0)*x2255*x2256))+(((0.122)*x2254))+(((0.098)*x2258))+(((0.418)*x2270))+(((0.098)*cj5*r11))+(((-1.0)*py))+((x2266*x2270))+(((-1.0)*x2264*x2272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2273 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2273.valid){
continue;
}
CheckValue<IkReal> x2274=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x2274.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2273.value)+(((1.5707963267949)*(x2274.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2275=IKcos(j0);
IkReal x2276=IKsin(j0);
IkReal x2277=((1.53e-6)*sj1);
IkReal x2278=(r10*sj5);
IkReal x2279=(cj5*r01);
IkReal x2280=((0.398)*sj2);
IkReal x2281=(cj5*r11);
IkReal x2282=((1.0)*cj2);
IkReal x2283=((1.0)*sj2);
IkReal x2284=(r00*sj5);
IkReal x2285=((0.398)*cj1*cj2);
IkReal x2286=(sj1*x2275);
IkReal x2287=(cj1*x2276);
IkReal x2288=(cj1*x2275);
IkReal x2289=(sj1*x2276);
evalcond[0]=((((-1.0)*x2282*x2286))+(((-1.0)*x2284))+(((-1.0)*x2279))+(((-1.0)*x2283*x2288)));
evalcond[1]=((((-1.0)*x2282*x2289))+(((-1.0)*x2281))+(((-1.0)*x2278))+(((-1.0)*x2283*x2287)));
evalcond[2]=((((-1.0)*x2280*x2286))+(((-1.0)*x2275*x2277))+(((0.098)*x2284))+((x2275*x2285))+(((-1.0)*px))+(((-0.122)*x2276))+(((0.098)*x2279))+(((0.418)*x2288)));
evalcond[3]=((((-1.0)*x2280*x2289))+(((0.098)*x2281))+(((0.122)*x2275))+(((-1.0)*py))+(((-1.0)*x2276*x2277))+(((0.098)*x2278))+(((0.418)*x2287))+((x2276*x2285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2290=((1.0)*sj5);
IkReal x2291=((((-1.0)*r00*x2290))+(((-1.0)*cj5*r01)));
j4eval[0]=x2291;
j4eval[1]=IKsign(x2291);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x2290))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2292=((1.0)*sj5);
IkReal x2293=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2292)));
j4eval[0]=x2293;
j4eval[1]=IKsign(x2293);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2292))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2294=((1.0)*sj0);
IkReal x2295=((1.0)*cj0);
IkReal x2296=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2296;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x2294))+(((-1.0)*cj5*r00*x2295))+((cj0*r01*sj5)))))+(IKabs(((((-1.0)*r02*x2295))+(((-1.0)*r12*x2294))))));
j4eval[2]=IKsign(x2296);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2297=((-1.0)*r20);
IkReal x2299 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2299)==0){
continue;
}
IkReal x2298=pow(x2299,-0.5);
CheckValue<IkReal> x2300 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2297),IKFAST_ATAN2_MAGTHRESH);
if(!x2300.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2300.value));
IkReal gconst79=(r21*x2298);
IkReal gconst80=(x2297*x2298);
CheckValue<IkReal> x2301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2301.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2301.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2302=((-1.0)*r20);
IkReal x2303=x2298;
CheckValue<IkReal> x2305 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2302),IKFAST_ATAN2_MAGTHRESH);
if(!x2305.valid){
continue;
}
IkReal x2304=((-1.0)*(x2305.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2304;
IkReal gconst78=x2304;
IkReal gconst79=(r21*x2303);
IkReal gconst80=(x2302*x2303);
IkReal x2306=r22*r22;
IkReal x2307=((1.0)*x2306);
CheckValue<IkReal> x2311=IKPowWithIntegerCheck(((-1.0)+x2306),-1);
if(!x2311.valid){
continue;
}
IkReal x2308=x2311.value;
if((((1.0)+(((-1.0)*x2307)))) < -0.00001)
continue;
IkReal x2309=IKsqrt(((1.0)+(((-1.0)*x2307))));
IkReal x2310=(cj0*x2308*x2309);
j4eval[0]=((IKabs((x2310+(((-1.0)*x2307*x2310)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2312=((-1.0)*r20);
IkReal x2313=x2298;
CheckValue<IkReal> x2315 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2312),IKFAST_ATAN2_MAGTHRESH);
if(!x2315.valid){
continue;
}
IkReal x2314=((-1.0)*(x2315.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2314;
IkReal gconst78=x2314;
IkReal gconst79=(r21*x2313);
IkReal gconst80=(x2312*x2313);
IkReal x2316=r22*r22;
IkReal x2317=((1.0)*x2316);
CheckValue<IkReal> x2321=IKPowWithIntegerCheck(((-1.0)+x2316),-1);
if(!x2321.valid){
continue;
}
IkReal x2318=x2321.value;
if((((1.0)+(((-1.0)*x2317)))) < -0.00001)
continue;
IkReal x2319=IKsqrt(((1.0)+(((-1.0)*x2317))));
IkReal x2320=(sj0*x2318*x2319);
j4eval[0]=((IKabs((x2320+(((-1.0)*x2317*x2320)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2322=((-1.0)*r20);
IkReal x2323=x2298;
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2322),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
IkReal x2324=((-1.0)*(x2325.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2324;
IkReal gconst78=x2324;
IkReal gconst79=(r21*x2323);
IkReal gconst80=(x2322*x2323);
IkReal x2326=r22*r22;
CheckValue<IkReal> x2329=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2326))),-1);
if(!x2329.valid){
continue;
}
IkReal x2327=x2329.value;
IkReal x2328=((((2.0)*x2327*(r20*r20)*(r21*r21)))+x2326+((x2327*(r20*r20*r20*r20)))+((x2327*(r21*r21*r21*r21))));
j4eval[0]=x2328;
j4eval[1]=IKsign(x2328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2330=(gconst80*r20);
IkReal x2331=(cj1*sj2);
IkReal x2332=(cj2*sj1);
IkReal x2333=((1.0)*gconst79*r21);
CheckValue<IkReal> x2334 = IKatan2WithCheck(IkReal((((r22*x2331))+((r22*x2332)))),IkReal(((((-1.0)*x2332*x2333))+(((-1.0)*x2331*x2333))+((x2330*x2332))+((x2330*x2331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2334.valid){
continue;
}
CheckValue<IkReal> x2335=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2330*x2330)+(((gconst79*gconst79)*(r21*r21)))+(((-2.0)*gconst79*r21*x2330)))),-1);
if(!x2335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2334.value)+(((1.5707963267949)*(x2335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2336=IKsin(j4);
IkReal x2337=IKcos(j4);
IkReal x2338=((1.0)*gconst80);
IkReal x2339=(sj1*sj2);
IkReal x2340=((1.0)*cj1*cj2);
IkReal x2341=(gconst79*x2336);
IkReal x2342=((1.0)*x2336);
IkReal x2343=(gconst79*x2337);
evalcond[0]=(((r22*x2337))+((r21*x2341))+(((-1.0)*r20*x2336*x2338)));
evalcond[1]=(cj0+((r12*x2337))+((r11*x2341))+(((-1.0)*r10*x2336*x2338)));
evalcond[2]=(((r02*x2337))+(((-1.0)*sj0))+((r01*x2341))+(((-1.0)*r00*x2336*x2338)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2342))+(((-1.0)*r20*x2337*x2338))+((r21*x2343)));
evalcond[4]=(((r01*x2343))+(((-1.0)*r02*x2342))+(((-1.0)*r00*x2337*x2338))+((cj0*x2339))+(((-1.0)*cj0*x2340)));
evalcond[5]=(((sj0*x2339))+(((-1.0)*r10*x2337*x2338))+((r11*x2343))+(((-1.0)*sj0*x2340))+(((-1.0)*r12*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2344=((1.0)*gconst79);
CheckValue<IkReal> x2345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2344))+(((-1.0)*gconst80*r11)))),-1);
if(!x2345.valid){
continue;
}
CheckValue<IkReal> x2346 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2344))+((gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2345.value)))+(x2346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2347=IKsin(j4);
IkReal x2348=IKcos(j4);
IkReal x2349=((1.0)*gconst80);
IkReal x2350=(sj1*sj2);
IkReal x2351=((1.0)*cj1*cj2);
IkReal x2352=(gconst79*x2347);
IkReal x2353=((1.0)*x2347);
IkReal x2354=(gconst79*x2348);
evalcond[0]=((((-1.0)*r20*x2347*x2349))+((r22*x2348))+((r21*x2352)));
evalcond[1]=(cj0+((r12*x2348))+((r11*x2352))+(((-1.0)*r10*x2347*x2349)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2352))+((r02*x2348))+(((-1.0)*r00*x2347*x2349)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2348*x2349))+(((-1.0)*r22*x2353))+((r21*x2354)));
evalcond[4]=(((cj0*x2350))+((r01*x2354))+(((-1.0)*r00*x2348*x2349))+(((-1.0)*r02*x2353))+(((-1.0)*cj0*x2351)));
evalcond[5]=(((sj0*x2350))+((r11*x2354))+(((-1.0)*r10*x2348*x2349))+(((-1.0)*sj0*x2351))+(((-1.0)*r12*x2353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2355=((1.0)*gconst79);
CheckValue<IkReal> x2356 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2355))+((cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2356.valid){
continue;
}
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*r01))+(((-1.0)*r00*x2355)))),-1);
if(!x2357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2356.value)+(((1.5707963267949)*(x2357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2358=IKsin(j4);
IkReal x2359=IKcos(j4);
IkReal x2360=((1.0)*gconst80);
IkReal x2361=(sj1*sj2);
IkReal x2362=((1.0)*cj1*cj2);
IkReal x2363=(gconst79*x2358);
IkReal x2364=((1.0)*x2358);
IkReal x2365=(gconst79*x2359);
evalcond[0]=(((r22*x2359))+(((-1.0)*r20*x2358*x2360))+((r21*x2363)));
evalcond[1]=((((-1.0)*r10*x2358*x2360))+((r11*x2363))+cj0+((r12*x2359)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2358*x2360))+((r01*x2363))+((r02*x2359)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2359*x2360))+(((-1.0)*r22*x2364))+((r21*x2365)));
evalcond[4]=((((-1.0)*r00*x2359*x2360))+((cj0*x2361))+(((-1.0)*cj0*x2362))+((r01*x2365))+(((-1.0)*r02*x2364)));
evalcond[5]=(((r11*x2365))+((sj0*x2361))+(((-1.0)*sj0*x2362))+(((-1.0)*r10*x2359*x2360))+(((-1.0)*r12*x2364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2366=((-1.0)*r21);
IkReal x2368 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2368)==0){
continue;
}
IkReal x2367=pow(x2368,-0.5);
CheckValue<IkReal> x2369 = IKatan2WithCheck(IkReal(x2366),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2369.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2369.value))));
IkReal gconst82=(x2366*x2367);
IkReal gconst83=((1.0)*r20*x2367);
CheckValue<IkReal> x2370 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2370.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2370.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2371=((-1.0)*r21);
CheckValue<IkReal> x2374 = IKatan2WithCheck(IkReal(x2371),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2374.valid){
continue;
}
IkReal x2372=((1.0)*(x2374.value));
IkReal x2373=x2367;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2372)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2372)));
IkReal gconst82=(x2371*x2373);
IkReal gconst83=((1.0)*r20*x2373);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2375=((-1.0)*r21);
CheckValue<IkReal> x2378 = IKatan2WithCheck(IkReal(x2375),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2378.valid){
continue;
}
IkReal x2376=((1.0)*(x2378.value));
IkReal x2377=x2367;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2376)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2376)));
IkReal gconst82=(x2375*x2377);
IkReal gconst83=((1.0)*r20*x2377);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2379=((-1.0)*r21);
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal(x2379),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
IkReal x2380=((1.0)*(x2382.value));
IkReal x2381=x2367;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2380)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2380)));
IkReal gconst82=(x2379*x2381);
IkReal gconst83=((1.0)*r20*x2381);
IkReal x2383=r22*r22;
IkReal x2384=((1.0)*r12*sj0);
IkReal x2385=((1.0)*cj0*r02);
CheckValue<IkReal> x2389=IKPowWithIntegerCheck(((-1.0)+x2383),-1);
if(!x2389.valid){
continue;
}
IkReal x2386=x2389.value;
if((((1.0)+(((-1.0)*x2383)))) < -0.00001)
continue;
IkReal x2387=IKsqrt(((1.0)+(((-1.0)*x2383))));
IkReal x2388=(r22*x2386*x2387);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2384*x2388))+(((-1.0)*x2385*x2388)))))+(IKabs(((((-1.0)*x2384))+(((-1.0)*x2385))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2390=((1.0)*sj0);
IkReal x2391=((1.0)*cj0);
CheckValue<IkReal> x2392=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2392.valid){
continue;
}
CheckValue<IkReal> x2393 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2391))+(((-1.0)*r12*x2390)))),IkReal(((((-1.0)*gconst83*r10*x2390))+(((-1.0)*gconst83*r00*x2391))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2392.value)))+(x2393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2394=IKsin(j4);
IkReal x2395=IKcos(j4);
IkReal x2396=(gconst82*r21);
IkReal x2397=(sj1*sj2);
IkReal x2398=((1.0)*cj1*cj2);
IkReal x2399=(gconst82*x2394);
IkReal x2400=((1.0)*gconst83*r00);
IkReal x2401=((1.0)*x2394);
IkReal x2402=(gconst82*x2395);
IkReal x2403=((1.0)*gconst83*x2395);
evalcond[0]=(((x2394*x2396))+(((-1.0)*gconst83*r20*x2401))+((r22*x2395)));
evalcond[1]=(((r12*x2395))+cj0+(((-1.0)*gconst83*r10*x2401))+((r11*x2399)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2394*x2400))+((r01*x2399))+((r02*x2395)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2403))+(((-1.0)*r22*x2401))+((x2395*x2396)));
evalcond[4]=(((r01*x2402))+(((-1.0)*r02*x2401))+(((-1.0)*x2395*x2400))+((cj0*x2397))+(((-1.0)*cj0*x2398)));
evalcond[5]=(((r11*x2402))+(((-1.0)*sj0*x2398))+(((-1.0)*r10*x2403))+(((-1.0)*r12*x2401))+((sj0*x2397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2404=((1.0)*gconst82);
CheckValue<IkReal> x2405=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r11))+(((-1.0)*r10*x2404)))),-1);
if(!x2405.valid){
continue;
}
CheckValue<IkReal> x2406 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2404))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2405.value)))+(x2406.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2407=IKsin(j4);
IkReal x2408=IKcos(j4);
IkReal x2409=(gconst82*r21);
IkReal x2410=(sj1*sj2);
IkReal x2411=((1.0)*cj1*cj2);
IkReal x2412=(gconst82*x2407);
IkReal x2413=((1.0)*gconst83*r00);
IkReal x2414=((1.0)*x2407);
IkReal x2415=(gconst82*x2408);
IkReal x2416=((1.0)*gconst83*x2408);
evalcond[0]=(((r22*x2408))+((x2407*x2409))+(((-1.0)*gconst83*r20*x2414)));
evalcond[1]=(((r11*x2412))+cj0+((r12*x2408))+(((-1.0)*gconst83*r10*x2414)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2407*x2413))+((r01*x2412))+((r02*x2408)));
evalcond[3]=((((-1.0)*r20*x2416))+((cj2*sj1))+((x2408*x2409))+((cj1*sj2))+(((-1.0)*r22*x2414)));
evalcond[4]=((((-1.0)*cj0*x2411))+(((-1.0)*x2408*x2413))+((r01*x2415))+((cj0*x2410))+(((-1.0)*r02*x2414)));
evalcond[5]=(((r11*x2415))+(((-1.0)*r12*x2414))+((sj0*x2410))+(((-1.0)*sj0*x2411))+(((-1.0)*r10*x2416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2417=((1.0)*gconst82);
CheckValue<IkReal> x2418 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*r21*x2417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2418.valid){
continue;
}
CheckValue<IkReal> x2419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2417))+(((-1.0)*gconst83*r01)))),-1);
if(!x2419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2418.value)+(((1.5707963267949)*(x2419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2420=IKsin(j4);
IkReal x2421=IKcos(j4);
IkReal x2422=(gconst82*r21);
IkReal x2423=(sj1*sj2);
IkReal x2424=((1.0)*cj1*cj2);
IkReal x2425=(gconst82*x2420);
IkReal x2426=((1.0)*gconst83*r00);
IkReal x2427=((1.0)*x2420);
IkReal x2428=(gconst82*x2421);
IkReal x2429=((1.0)*gconst83*x2421);
evalcond[0]=(((r22*x2421))+((x2420*x2422))+(((-1.0)*gconst83*r20*x2427)));
evalcond[1]=((((-1.0)*gconst83*r10*x2427))+cj0+((r11*x2425))+((r12*x2421)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2420*x2426))+((r01*x2425))+((r02*x2421)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2429))+(((-1.0)*r22*x2427))+((x2421*x2422)));
evalcond[4]=((((-1.0)*r02*x2427))+(((-1.0)*x2421*x2426))+(((-1.0)*cj0*x2424))+((r01*x2428))+((cj0*x2423)));
evalcond[5]=((((-1.0)*sj0*x2424))+(((-1.0)*r10*x2429))+((sj0*x2423))+(((-1.0)*r12*x2427))+((r11*x2428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2430=((-1.0)*r10);
IkReal x2432 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2432)==0){
continue;
}
IkReal x2431=pow(x2432,-0.5);
CheckValue<IkReal> x2433 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2430),IKFAST_ATAN2_MAGTHRESH);
if(!x2433.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2433.value));
IkReal gconst85=(r11*x2431);
IkReal gconst86=(x2430*x2431);
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2434.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2435=((-1.0)*r10);
IkReal x2436=x2431;
CheckValue<IkReal> x2438 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2435),IKFAST_ATAN2_MAGTHRESH);
if(!x2438.valid){
continue;
}
IkReal x2437=((-1.0)*(x2438.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2437;
IkReal gconst84=x2437;
IkReal gconst85=(r11*x2436);
IkReal gconst86=(x2435*x2436);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2439=((-1.0)*r10);
IkReal x2440=x2431;
CheckValue<IkReal> x2442 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2439),IKFAST_ATAN2_MAGTHRESH);
if(!x2442.valid){
continue;
}
IkReal x2441=((-1.0)*(x2442.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2441;
IkReal gconst84=x2441;
IkReal gconst85=(r11*x2440);
IkReal gconst86=(x2439*x2440);
IkReal x2443=r12*r12;
IkReal x2444=((1.0)*sj0);
IkReal x2445=(cj0*r02);
IkReal x2446=x2431;
j4eval[0]=((IKabs((((r12*x2445*x2446))+((sj0*x2443*x2446))+(((-1.0)*x2444*x2446)))))+(IKabs(((((-1.0)*x2445))+(((-1.0)*r12*x2444))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2447=((-1.0)*r10);
IkReal x2448=x2431;
CheckValue<IkReal> x2450 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2447),IKFAST_ATAN2_MAGTHRESH);
if(!x2450.valid){
continue;
}
IkReal x2449=((-1.0)*(x2450.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2449;
IkReal gconst84=x2449;
IkReal gconst85=(r11*x2448);
IkReal gconst86=(x2447*x2448);
IkReal x2451=r12*r12;
IkReal x2452=(cj1*r22*sj2);
IkReal x2453=(cj2*r22*sj1);
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(((-1.0)+x2451),-1);
if(!x2457.valid){
continue;
}
IkReal x2454=x2457.value;
if((((1.0)+(((-1.0)*x2451)))) < -0.00001)
continue;
IkReal x2455=IKsqrt(((1.0)+(((-1.0)*x2451))));
IkReal x2456=((1.0)*r12*x2454*x2455);
j4eval[0]=((IKabs((x2453+x2452)))+(IKabs(((((-1.0)*x2453*x2456))+(((-1.0)*x2452*x2456))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2458=(gconst85*r21);
IkReal x2459=(cj1*sj2);
IkReal x2460=(cj2*sj1);
IkReal x2461=(gconst86*r20);
CheckValue<IkReal> x2462 = IKatan2WithCheck(IkReal((((r22*x2459))+((r22*x2460)))),IkReal((((x2459*x2461))+((x2460*x2461))+(((-1.0)*x2458*x2460))+(((-1.0)*x2458*x2459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2462.valid){
continue;
}
CheckValue<IkReal> x2463=IKPowWithIntegerCheck(IKsign(((x2458*x2458)+(r22*r22)+(((-2.0)*x2458*x2461))+(x2461*x2461))),-1);
if(!x2463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2462.value)+(((1.5707963267949)*(x2463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2464=IKsin(j4);
IkReal x2465=IKcos(j4);
IkReal x2466=(gconst86*r00);
IkReal x2467=(gconst86*r10);
IkReal x2468=(sj1*sj2);
IkReal x2469=(gconst86*r20);
IkReal x2470=((1.0)*cj1*cj2);
IkReal x2471=((1.0)*x2464);
IkReal x2472=(gconst85*x2465);
IkReal x2473=(gconst85*x2464);
IkReal x2474=((1.0)*x2465);
evalcond[0]=(((r21*x2473))+(((-1.0)*x2469*x2471))+((r22*x2465)));
evalcond[1]=((((-1.0)*x2467*x2471))+cj0+((r12*x2465))+((r11*x2473)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2473))+((r02*x2465))+(((-1.0)*x2466*x2471)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x2472))+(((-1.0)*x2469*x2474))+(((-1.0)*r22*x2471)));
evalcond[4]=((((-1.0)*cj0*x2470))+((r01*x2472))+(((-1.0)*r02*x2471))+(((-1.0)*x2466*x2474))+((cj0*x2468)));
evalcond[5]=((((-1.0)*x2467*x2474))+(((-1.0)*r12*x2471))+(((-1.0)*sj0*x2470))+((sj0*x2468))+((r11*x2472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2475=((1.0)*sj0);
IkReal x2476=((1.0)*gconst86);
CheckValue<IkReal> x2477=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2476)))),-1);
if(!x2477.valid){
continue;
}
CheckValue<IkReal> x2478 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2475))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst86*r10*x2475))+(((-1.0)*cj0*r00*x2476))+((gconst85*r11*sj0))+((cj0*gconst85*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2477.value)))+(x2478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2479=IKsin(j4);
IkReal x2480=IKcos(j4);
IkReal x2481=(gconst86*r00);
IkReal x2482=(gconst86*r10);
IkReal x2483=(sj1*sj2);
IkReal x2484=(gconst86*r20);
IkReal x2485=((1.0)*cj1*cj2);
IkReal x2486=((1.0)*x2479);
IkReal x2487=(gconst85*x2480);
IkReal x2488=(gconst85*x2479);
IkReal x2489=((1.0)*x2480);
evalcond[0]=(((r22*x2480))+(((-1.0)*x2484*x2486))+((r21*x2488)));
evalcond[1]=(cj0+((r11*x2488))+(((-1.0)*x2482*x2486))+((r12*x2480)));
evalcond[2]=(((r01*x2488))+(((-1.0)*sj0))+((r02*x2480))+(((-1.0)*x2481*x2486)));
evalcond[3]=((((-1.0)*r22*x2486))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2484*x2489))+((r21*x2487)));
evalcond[4]=(((r01*x2487))+(((-1.0)*cj0*x2485))+(((-1.0)*r02*x2486))+(((-1.0)*x2481*x2489))+((cj0*x2483)));
evalcond[5]=(((sj0*x2483))+(((-1.0)*sj0*x2485))+((r11*x2487))+(((-1.0)*x2482*x2489))+(((-1.0)*r12*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2490=((1.0)*gconst85);
CheckValue<IkReal> x2491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2490))+(((-1.0)*gconst86*r01)))),-1);
if(!x2491.valid){
continue;
}
CheckValue<IkReal> x2492 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst86*r20))+(((-1.0)*cj0*r21*x2490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2491.value)))+(x2492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2493=IKsin(j4);
IkReal x2494=IKcos(j4);
IkReal x2495=(gconst86*r00);
IkReal x2496=(gconst86*r10);
IkReal x2497=(sj1*sj2);
IkReal x2498=(gconst86*r20);
IkReal x2499=((1.0)*cj1*cj2);
IkReal x2500=((1.0)*x2493);
IkReal x2501=(gconst85*x2494);
IkReal x2502=(gconst85*x2493);
IkReal x2503=((1.0)*x2494);
evalcond[0]=((((-1.0)*x2498*x2500))+((r22*x2494))+((r21*x2502)));
evalcond[1]=(cj0+(((-1.0)*x2496*x2500))+((r12*x2494))+((r11*x2502)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2494))+(((-1.0)*x2495*x2500))+((r01*x2502)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x2498*x2503))+((cj1*sj2))+(((-1.0)*r22*x2500))+((r21*x2501)));
evalcond[4]=((((-1.0)*cj0*x2499))+(((-1.0)*r02*x2500))+(((-1.0)*x2495*x2503))+((cj0*x2497))+((r01*x2501)));
evalcond[5]=((((-1.0)*x2496*x2503))+(((-1.0)*r12*x2500))+(((-1.0)*sj0*x2499))+((r11*x2501))+((sj0*x2497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2504=((-1.0)*r11);
IkReal x2506 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2506)==0){
continue;
}
IkReal x2505=pow(x2506,-0.5);
CheckValue<IkReal> x2507 = IKatan2WithCheck(IkReal(x2504),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2507.value))));
IkReal gconst88=(x2504*x2505);
IkReal gconst89=((1.0)*r10*x2505);
CheckValue<IkReal> x2508 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2508.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2508.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2509=((-1.0)*r11);
CheckValue<IkReal> x2512 = IKatan2WithCheck(IkReal(x2509),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2512.valid){
continue;
}
IkReal x2510=((1.0)*(x2512.value));
IkReal x2511=x2505;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2510)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2510)));
IkReal gconst88=(x2509*x2511);
IkReal gconst89=((1.0)*r10*x2511);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2513=((1.0)*sj0);
IkReal x2514=((1.0)*gconst89);
CheckValue<IkReal> x2515 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2513)))),IkReal(((((-1.0)*gconst89*r10*x2513))+((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x2514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2515.valid){
continue;
}
CheckValue<IkReal> x2516=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x2514)))),-1);
if(!x2516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2515.value)+(((1.5707963267949)*(x2516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2517=IKsin(j4);
IkReal x2518=IKcos(j4);
IkReal x2519=(gconst89*r10);
IkReal x2520=(sj1*sj2);
IkReal x2521=(gconst89*r20);
IkReal x2522=(gconst89*r00);
IkReal x2523=((1.0)*x2517);
IkReal x2524=((1.0)*cj1*cj2);
IkReal x2525=((1.0)*x2518);
IkReal x2526=(gconst88*x2518);
IkReal x2527=(gconst88*x2517);
evalcond[0]=(((r22*x2518))+(((-1.0)*x2521*x2523))+((r21*x2527)));
evalcond[1]=(cj0+((r11*x2527))+(((-1.0)*x2519*x2523))+((r12*x2518)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2518))+((r01*x2527))+(((-1.0)*x2522*x2523)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2521*x2525))+((r21*x2526))+(((-1.0)*r22*x2523)));
evalcond[4]=((((-1.0)*cj0*x2524))+((r01*x2526))+(((-1.0)*x2522*x2525))+(((-1.0)*r02*x2523))+((cj0*x2520)));
evalcond[5]=((((-1.0)*sj0*x2524))+(((-1.0)*r12*x2523))+((r11*x2526))+((sj0*x2520))+(((-1.0)*x2519*x2525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2528=((1.0)*gconst88);
CheckValue<IkReal> x2529 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*r21*x2528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2529.valid){
continue;
}
CheckValue<IkReal> x2530=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r01))+(((-1.0)*r00*x2528)))),-1);
if(!x2530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2529.value)+(((1.5707963267949)*(x2530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2531=IKsin(j4);
IkReal x2532=IKcos(j4);
IkReal x2533=(gconst89*r10);
IkReal x2534=(sj1*sj2);
IkReal x2535=(gconst89*r20);
IkReal x2536=(gconst89*r00);
IkReal x2537=((1.0)*x2531);
IkReal x2538=((1.0)*cj1*cj2);
IkReal x2539=((1.0)*x2532);
IkReal x2540=(gconst88*x2532);
IkReal x2541=(gconst88*x2531);
evalcond[0]=(((r21*x2541))+(((-1.0)*x2535*x2537))+((r22*x2532)));
evalcond[1]=((((-1.0)*x2533*x2537))+cj0+((r11*x2541))+((r12*x2532)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2532))+(((-1.0)*x2536*x2537))+((r01*x2541)));
evalcond[3]=(((cj2*sj1))+((r21*x2540))+((cj1*sj2))+(((-1.0)*x2535*x2539))+(((-1.0)*r22*x2537)));
evalcond[4]=((((-1.0)*r02*x2537))+((cj0*x2534))+(((-1.0)*cj0*x2538))+(((-1.0)*x2536*x2539))+((r01*x2540)));
evalcond[5]=((((-1.0)*x2533*x2539))+((r11*x2540))+((sj0*x2534))+(((-1.0)*sj0*x2538))+(((-1.0)*r12*x2537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2542=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2542;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x2542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2543=((1.0)*sj5);
IkReal x2544=((((-1.0)*r00*x2543))+(((-1.0)*cj5*r01)));
j4eval[0]=x2544;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2543)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2545=cj5*cj5;
IkReal x2546=r11*r11;
IkReal x2547=(cj5*r10);
IkReal x2548=(r11*sj5);
IkReal x2549=((((-1.0)*x2545*(r10*r10)))+(((-1.0)*x2546))+(((-1.0)*(r12*r12)))+(((2.0)*x2547*x2548))+((x2545*x2546)));
j4eval[0]=x2549;
j4eval[1]=((IKabs(r12))+(IKabs((x2548+(((-1.0)*x2547))))));
j4eval[2]=IKsign(x2549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2550=cj5*cj5;
IkReal x2551=r11*r11;
IkReal x2552=(cj5*r10);
IkReal x2553=(r11*sj5);
CheckValue<IkReal> x2554=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2550*(r10*r10)))+((x2550*x2551))+(((-1.0)*x2551))+(((-1.0)*(r12*r12)))+(((2.0)*x2552*x2553)))),-1);
if(!x2554.valid){
continue;
}
CheckValue<IkReal> x2555 = IKatan2WithCheck(IkReal((x2553+(((-1.0)*x2552)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2554.value)))+(x2555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2556=IKsin(j4);
IkReal x2557=IKcos(j4);
IkReal x2558=((1.0)*cj5);
IkReal x2559=(r21*sj5);
IkReal x2560=(sj5*x2556);
IkReal x2561=((1.0)*x2556);
IkReal x2562=(sj5*x2557);
evalcond[0]=((((-1.0)*r20*x2556*x2558))+((r22*x2557))+((x2556*x2559)));
evalcond[1]=(((r01*x2560))+(((-1.0)*r00*x2556*x2558))+((r02*x2557)));
evalcond[2]=((1.0)+((r12*x2557))+(((-1.0)*r10*x2556*x2558))+((r11*x2560)));
evalcond[3]=(((r11*x2562))+(((-1.0)*r12*x2561))+(((-1.0)*r10*x2557*x2558)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x2561))+((cj1*sj2))+(((-1.0)*r20*x2557*x2558))+((x2557*x2559)));
evalcond[5]=(((r01*x2562))+(((-1.0)*r02*x2561))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x2557*x2558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2563=((1.0)*sj5);
CheckValue<IkReal> x2564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2563))+(((-1.0)*cj5*r01)))),-1);
if(!x2564.valid){
continue;
}
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2564.value)))+(x2565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2566=IKsin(j4);
IkReal x2567=IKcos(j4);
IkReal x2568=((1.0)*cj5);
IkReal x2569=(r21*sj5);
IkReal x2570=(sj5*x2566);
IkReal x2571=((1.0)*x2566);
IkReal x2572=(sj5*x2567);
evalcond[0]=(((r22*x2567))+((x2566*x2569))+(((-1.0)*r20*x2566*x2568)));
evalcond[1]=((((-1.0)*r00*x2566*x2568))+((r01*x2570))+((r02*x2567)));
evalcond[2]=((1.0)+((r11*x2570))+((r12*x2567))+(((-1.0)*r10*x2566*x2568)));
evalcond[3]=((((-1.0)*r12*x2571))+((r11*x2572))+(((-1.0)*r10*x2567*x2568)));
evalcond[4]=(((x2567*x2569))+((cj2*sj1))+(((-1.0)*r20*x2567*x2568))+((cj1*sj2))+(((-1.0)*r22*x2571)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x2567*x2568))+((r01*x2572))+(((-1.0)*r02*x2571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2573=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2573.valid){
continue;
}
CheckValue<IkReal> x2574 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2573.value)))+(x2574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2575=IKsin(j4);
IkReal x2576=IKcos(j4);
IkReal x2577=((1.0)*cj5);
IkReal x2578=(r21*sj5);
IkReal x2579=(sj5*x2575);
IkReal x2580=((1.0)*x2575);
IkReal x2581=(sj5*x2576);
evalcond[0]=(((x2575*x2578))+(((-1.0)*r20*x2575*x2577))+((r22*x2576)));
evalcond[1]=(((r01*x2579))+((r02*x2576))+(((-1.0)*r00*x2575*x2577)));
evalcond[2]=((1.0)+((r11*x2579))+((r12*x2576))+(((-1.0)*r10*x2575*x2577)));
evalcond[3]=(((r11*x2581))+(((-1.0)*r10*x2576*x2577))+(((-1.0)*r12*x2580)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2576*x2578))+(((-1.0)*r20*x2576*x2577))+(((-1.0)*r22*x2580)));
evalcond[5]=(((r01*x2581))+(((-1.0)*r00*x2576*x2577))+(((-1.0)*r02*x2580))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2582=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2582;
j4eval[1]=IKsign(x2582);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2583=((1.0)*sj5);
IkReal x2584=((((-1.0)*r20*x2583))+(((-1.0)*cj5*r21)));
j4eval[0]=x2584;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x2583))+((cj5*r00))))));
j4eval[2]=IKsign(x2584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2585=cj5*cj5;
IkReal x2586=r11*r11;
IkReal x2587=(r11*sj5);
IkReal x2588=(cj5*r10);
IkReal x2589=((r12*r12)+x2586+((x2585*(r10*r10)))+(((-1.0)*x2585*x2586))+(((-2.0)*x2587*x2588)));
j4eval[0]=x2589;
j4eval[1]=IKsign(x2589);
j4eval[2]=((IKabs(r12))+(IKabs((x2587+(((-1.0)*x2588))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2590=cj5*cj5;
IkReal x2591=r11*r11;
IkReal x2592=(cj5*r10);
IkReal x2593=(r11*sj5);
CheckValue<IkReal> x2594=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2591+(((-2.0)*x2592*x2593))+(((-1.0)*x2590*x2591))+((x2590*(r10*r10))))),-1);
if(!x2594.valid){
continue;
}
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal((x2593+(((-1.0)*x2592)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2594.value)))+(x2595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2596=IKsin(j4);
IkReal x2597=IKcos(j4);
IkReal x2598=((1.0)*cj5);
IkReal x2599=(r21*sj5);
IkReal x2600=(sj5*x2596);
IkReal x2601=((1.0)*x2596);
IkReal x2602=(sj5*x2597);
evalcond[0]=(((r22*x2597))+(((-1.0)*r20*x2596*x2598))+((x2596*x2599)));
evalcond[1]=((((-1.0)*r00*x2596*x2598))+((r01*x2600))+((r02*x2597)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x2596*x2598))+((r12*x2597))+((r11*x2600)));
evalcond[3]=((((-1.0)*r12*x2601))+((r11*x2602))+(((-1.0)*r10*x2597*x2598)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2597*x2598))+(((-1.0)*r22*x2601))+((x2597*x2599)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x2601))+((cj1*cj2))+((r01*x2602))+(((-1.0)*r00*x2597*x2598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2603=((1.0)*sj5);
CheckValue<IkReal> x2604=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2603)))),-1);
if(!x2604.valid){
continue;
}
CheckValue<IkReal> x2605 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x2603))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2604.value)))+(x2605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2606=IKsin(j4);
IkReal x2607=IKcos(j4);
IkReal x2608=((1.0)*cj5);
IkReal x2609=(r21*sj5);
IkReal x2610=(sj5*x2606);
IkReal x2611=((1.0)*x2606);
IkReal x2612=(sj5*x2607);
evalcond[0]=((((-1.0)*r20*x2606*x2608))+((x2606*x2609))+((r22*x2607)));
evalcond[1]=(((r01*x2610))+(((-1.0)*r00*x2606*x2608))+((r02*x2607)));
evalcond[2]=((-1.0)+((r12*x2607))+((r11*x2610))+(((-1.0)*r10*x2606*x2608)));
evalcond[3]=((((-1.0)*r12*x2611))+((r11*x2612))+(((-1.0)*r10*x2607*x2608)));
evalcond[4]=(((x2607*x2609))+((cj2*sj1))+(((-1.0)*r20*x2607*x2608))+((cj1*sj2))+(((-1.0)*r22*x2611)));
evalcond[5]=(((r01*x2612))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x2611))+(((-1.0)*r00*x2607*x2608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2613=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2613.valid){
continue;
}
CheckValue<IkReal> x2614 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2613.value)))+(x2614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2615=IKsin(j4);
IkReal x2616=IKcos(j4);
IkReal x2617=((1.0)*cj5);
IkReal x2618=(r21*sj5);
IkReal x2619=(sj5*x2615);
IkReal x2620=((1.0)*x2615);
IkReal x2621=(sj5*x2616);
evalcond[0]=((((-1.0)*r20*x2615*x2617))+((x2615*x2618))+((r22*x2616)));
evalcond[1]=((((-1.0)*r00*x2615*x2617))+((r01*x2619))+((r02*x2616)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x2615*x2617))+((r11*x2619))+((r12*x2616)));
evalcond[3]=((((-1.0)*r12*x2620))+(((-1.0)*r10*x2616*x2617))+((r11*x2621)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2620))+((x2616*x2618))+(((-1.0)*r20*x2616*x2617)));
evalcond[5]=(((r01*x2621))+(((-1.0)*r00*x2616*x2617))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x2620))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2622=((-1.0)*r00);
IkReal x2624 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2624)==0){
continue;
}
IkReal x2623=pow(x2624,-0.5);
CheckValue<IkReal> x2625 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2622),IKFAST_ATAN2_MAGTHRESH);
if(!x2625.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2625.value));
IkReal gconst91=(r01*x2623);
IkReal gconst92=(x2622*x2623);
CheckValue<IkReal> x2626 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2627=((-1.0)*r00);
IkReal x2628=x2623;
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2627),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
IkReal x2629=((-1.0)*(x2630.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2629;
IkReal gconst90=x2629;
IkReal gconst91=(r01*x2628);
IkReal gconst92=(x2627*x2628);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2631=((-1.0)*r00);
IkReal x2632=x2623;
CheckValue<IkReal> x2634 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2631),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
IkReal x2633=((-1.0)*(x2634.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2633;
IkReal gconst90=x2633;
IkReal gconst91=(r01*x2632);
IkReal gconst92=(x2631*x2632);
IkReal x2635=r02*r02;
IkReal x2636=(r12*sj0);
IkReal x2637=((1.0)*cj0);
IkReal x2638=x2623;
j4eval[0]=((IKabs((((r02*x2636*x2638))+(((-1.0)*x2637*x2638))+((cj0*x2635*x2638)))))+(IKabs(((((-1.0)*r02*x2637))+(((-1.0)*x2636))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2639=((-1.0)*r00);
IkReal x2640=x2623;
CheckValue<IkReal> x2642 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2639),IKFAST_ATAN2_MAGTHRESH);
if(!x2642.valid){
continue;
}
IkReal x2641=((-1.0)*(x2642.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2641;
IkReal gconst90=x2641;
IkReal gconst91=(r01*x2640);
IkReal gconst92=(x2639*x2640);
IkReal x2643=r02*r02;
IkReal x2644=(cj1*r22*sj2);
IkReal x2645=(cj2*r22*sj1);
CheckValue<IkReal> x2649=IKPowWithIntegerCheck(((-1.0)+x2643),-1);
if(!x2649.valid){
continue;
}
IkReal x2646=x2649.value;
if((((1.0)+(((-1.0)*x2643)))) < -0.00001)
continue;
IkReal x2647=IKsqrt(((1.0)+(((-1.0)*x2643))));
IkReal x2648=((1.0)*r02*x2646*x2647);
j4eval[0]=((IKabs((x2644+x2645)))+(IKabs(((((-1.0)*x2644*x2648))+(((-1.0)*x2645*x2648))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2650=(gconst91*r21);
IkReal x2651=(gconst92*r20);
IkReal x2652=(cj2*sj1);
IkReal x2653=(cj1*sj2);
CheckValue<IkReal> x2654=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2650*x2651))+(r22*r22)+(x2650*x2650)+(x2651*x2651))),-1);
if(!x2654.valid){
continue;
}
CheckValue<IkReal> x2655 = IKatan2WithCheck(IkReal((((r22*x2653))+((r22*x2652)))),IkReal(((((-1.0)*x2650*x2652))+(((-1.0)*x2650*x2653))+((x2651*x2653))+((x2651*x2652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2654.value)))+(x2655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2656=IKsin(j4);
IkReal x2657=IKcos(j4);
IkReal x2658=(sj1*sj2);
IkReal x2659=((1.0)*gconst92);
IkReal x2660=((1.0)*cj1*cj2);
IkReal x2661=(gconst91*x2656);
IkReal x2662=(gconst91*x2657);
IkReal x2663=((1.0)*x2656);
evalcond[0]=(((r21*x2661))+(((-1.0)*r20*x2656*x2659))+((r22*x2657)));
evalcond[1]=(((r12*x2657))+cj0+(((-1.0)*r10*x2656*x2659))+((r11*x2661)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2657))+(((-1.0)*r00*x2656*x2659))+((r01*x2661)));
evalcond[3]=(((cj2*sj1))+((r21*x2662))+((cj1*sj2))+(((-1.0)*r20*x2657*x2659))+(((-1.0)*r22*x2663)));
evalcond[4]=((((-1.0)*cj0*x2660))+(((-1.0)*r00*x2657*x2659))+(((-1.0)*r02*x2663))+((cj0*x2658))+((r01*x2662)));
evalcond[5]=((((-1.0)*r12*x2663))+((sj0*x2658))+(((-1.0)*sj0*x2660))+(((-1.0)*r10*x2657*x2659))+((r11*x2662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2664=((1.0)*sj0);
IkReal x2665=((1.0)*cj0);
CheckValue<IkReal> x2666=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2666.valid){
continue;
}
CheckValue<IkReal> x2667 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2664))+(((-1.0)*r02*x2665)))),IkReal((((gconst91*r11*sj0))+(((-1.0)*gconst92*r10*x2664))+((cj0*gconst91*r01))+(((-1.0)*gconst92*r00*x2665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2666.value)))+(x2667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2668=IKsin(j4);
IkReal x2669=IKcos(j4);
IkReal x2670=(sj1*sj2);
IkReal x2671=((1.0)*gconst92);
IkReal x2672=((1.0)*cj1*cj2);
IkReal x2673=(gconst91*x2668);
IkReal x2674=(gconst91*x2669);
IkReal x2675=((1.0)*x2668);
evalcond[0]=((((-1.0)*r20*x2668*x2671))+((r21*x2673))+((r22*x2669)));
evalcond[1]=(((r12*x2669))+cj0+(((-1.0)*r10*x2668*x2671))+((r11*x2673)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2668*x2671))+((r02*x2669))+((r01*x2673)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x2674))+(((-1.0)*r20*x2669*x2671))+(((-1.0)*r22*x2675)));
evalcond[4]=((((-1.0)*r00*x2669*x2671))+(((-1.0)*cj0*x2672))+(((-1.0)*r02*x2675))+((cj0*x2670))+((r01*x2674)));
evalcond[5]=((((-1.0)*r12*x2675))+((sj0*x2670))+(((-1.0)*sj0*x2672))+(((-1.0)*r10*x2669*x2671))+((r11*x2674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2676=((1.0)*gconst91);
CheckValue<IkReal> x2677=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst92*r11))+(((-1.0)*r10*x2676)))),-1);
if(!x2677.valid){
continue;
}
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2676))+((gconst92*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2677.value)))+(x2678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2679=IKsin(j4);
IkReal x2680=IKcos(j4);
IkReal x2681=(sj1*sj2);
IkReal x2682=((1.0)*gconst92);
IkReal x2683=((1.0)*cj1*cj2);
IkReal x2684=(gconst91*x2679);
IkReal x2685=(gconst91*x2680);
IkReal x2686=((1.0)*x2679);
evalcond[0]=((((-1.0)*r20*x2679*x2682))+((r22*x2680))+((r21*x2684)));
evalcond[1]=(((r11*x2684))+cj0+(((-1.0)*r10*x2679*x2682))+((r12*x2680)));
evalcond[2]=(((r02*x2680))+(((-1.0)*r00*x2679*x2682))+(((-1.0)*sj0))+((r01*x2684)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x2685))+(((-1.0)*r20*x2680*x2682))+(((-1.0)*r22*x2686)));
evalcond[4]=((((-1.0)*r02*x2686))+((cj0*x2681))+((r01*x2685))+(((-1.0)*cj0*x2683))+(((-1.0)*r00*x2680*x2682)));
evalcond[5]=((((-1.0)*r12*x2686))+((r11*x2685))+(((-1.0)*r10*x2680*x2682))+((sj0*x2681))+(((-1.0)*sj0*x2683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2687=((-1.0)*r01);
IkReal x2689 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2689)==0){
continue;
}
IkReal x2688=pow(x2689,-0.5);
CheckValue<IkReal> x2690 = IKatan2WithCheck(IkReal(x2687),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2690.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2690.value))));
IkReal gconst94=(x2687*x2688);
IkReal gconst95=((1.0)*r00*x2688);
CheckValue<IkReal> x2691 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2691.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2691.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2692=((-1.0)*r01);
CheckValue<IkReal> x2695 = IKatan2WithCheck(IkReal(x2692),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2695.valid){
continue;
}
IkReal x2693=((1.0)*(x2695.value));
IkReal x2694=x2688;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2693)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2693)));
IkReal gconst94=(x2692*x2694);
IkReal gconst95=((1.0)*r00*x2694);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2696=((-1.0)*r01);
CheckValue<IkReal> x2699 = IKatan2WithCheck(IkReal(x2696),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2699.valid){
continue;
}
IkReal x2697=((1.0)*(x2699.value));
IkReal x2698=x2688;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2697)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2697)));
IkReal gconst94=(x2696*x2698);
IkReal gconst95=((1.0)*r00*x2698);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2700=((1.0)*sj0);
IkReal x2701=((1.0)*gconst95);
CheckValue<IkReal> x2702 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2700))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x2701))+((gconst94*r11*sj0))+(((-1.0)*gconst95*r10*x2700))+((cj0*gconst94*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2702.valid){
continue;
}
CheckValue<IkReal> x2703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2701))+(((-1.0)*gconst94*r20)))),-1);
if(!x2703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2702.value)+(((1.5707963267949)*(x2703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2704=IKsin(j4);
IkReal x2705=IKcos(j4);
IkReal x2706=(sj1*sj2);
IkReal x2707=(gconst95*r00);
IkReal x2708=((1.0)*cj1*cj2);
IkReal x2709=((1.0)*gconst95*r10);
IkReal x2710=((1.0)*gconst95*r20);
IkReal x2711=(gconst94*x2705);
IkReal x2712=((1.0)*x2704);
IkReal x2713=(gconst94*x2704);
evalcond[0]=(((r22*x2705))+(((-1.0)*x2704*x2710))+((r21*x2713)));
evalcond[1]=(((r12*x2705))+cj0+(((-1.0)*x2704*x2709))+((r11*x2713)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2705))+(((-1.0)*x2707*x2712))+((r01*x2713)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2712))+((r21*x2711))+(((-1.0)*x2705*x2710)));
evalcond[4]=((((-1.0)*cj0*x2708))+(((-1.0)*r02*x2712))+((cj0*x2706))+(((-1.0)*x2705*x2707))+((r01*x2711)));
evalcond[5]=(((sj0*x2706))+(((-1.0)*sj0*x2708))+(((-1.0)*x2705*x2709))+((r11*x2711))+(((-1.0)*r12*x2712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2714=((1.0)*gconst94);
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r11))+(((-1.0)*r10*x2714)))),-1);
if(!x2715.valid){
continue;
}
CheckValue<IkReal> x2716 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2714))+((gconst95*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2715.value)))+(x2716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2717=IKsin(j4);
IkReal x2718=IKcos(j4);
IkReal x2719=(sj1*sj2);
IkReal x2720=(gconst95*r00);
IkReal x2721=((1.0)*cj1*cj2);
IkReal x2722=((1.0)*gconst95*r10);
IkReal x2723=((1.0)*gconst95*r20);
IkReal x2724=(gconst94*x2718);
IkReal x2725=((1.0)*x2717);
IkReal x2726=(gconst94*x2717);
evalcond[0]=(((r22*x2718))+((r21*x2726))+(((-1.0)*x2717*x2723)));
evalcond[1]=(((r12*x2718))+cj0+((r11*x2726))+(((-1.0)*x2717*x2722)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2718))+(((-1.0)*x2720*x2725))+((r01*x2726)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x2718*x2723))+((cj1*sj2))+((r21*x2724))+(((-1.0)*r22*x2725)));
evalcond[4]=((((-1.0)*cj0*x2721))+((r01*x2724))+((cj0*x2719))+(((-1.0)*x2718*x2720))+(((-1.0)*r02*x2725)));
evalcond[5]=((((-1.0)*x2718*x2722))+((sj0*x2719))+(((-1.0)*r12*x2725))+((r11*x2724))+(((-1.0)*sj0*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2727=((1.0)*gconst94);
CheckValue<IkReal> x2728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2727))+(((-1.0)*gconst95*r01)))),-1);
if(!x2728.valid){
continue;
}
CheckValue<IkReal> x2729 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2727))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2728.value)))+(x2729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2730=IKsin(j4);
IkReal x2731=IKcos(j4);
IkReal x2732=(sj1*sj2);
IkReal x2733=(gconst95*r00);
IkReal x2734=((1.0)*cj1*cj2);
IkReal x2735=((1.0)*gconst95*r10);
IkReal x2736=((1.0)*gconst95*r20);
IkReal x2737=(gconst94*x2731);
IkReal x2738=((1.0)*x2730);
IkReal x2739=(gconst94*x2730);
evalcond[0]=((((-1.0)*x2730*x2736))+((r21*x2739))+((r22*x2731)));
evalcond[1]=((((-1.0)*x2730*x2735))+cj0+((r12*x2731))+((r11*x2739)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2731))+(((-1.0)*x2733*x2738))+((r01*x2739)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x2731*x2736))+((cj1*sj2))+((r21*x2737))+(((-1.0)*r22*x2738)));
evalcond[4]=((((-1.0)*cj0*x2734))+(((-1.0)*x2731*x2733))+((r01*x2737))+((cj0*x2732))+(((-1.0)*r02*x2738)));
evalcond[5]=((((-1.0)*x2731*x2735))+(((-1.0)*sj0*x2734))+(((-1.0)*r12*x2738))+((sj0*x2732))+((r11*x2737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2740=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2740;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2740);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2741=((1.0)*sj5);
IkReal x2742=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2741)));
j4eval[0]=x2742;
j4eval[1]=IKsign(x2742);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x2741))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2743=cj5*cj5;
IkReal x2744=r01*r01;
IkReal x2745=(cj5*r00);
IkReal x2746=(r01*sj5);
IkReal x2747=(x2744+(((-2.0)*x2745*x2746))+(((-1.0)*x2743*x2744))+((x2743*(r00*r00)))+(r02*r02));
j4eval[0]=x2747;
j4eval[1]=((IKabs(r02))+(IKabs((x2746+(((-1.0)*x2745))))));
j4eval[2]=IKsign(x2747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2748=cj5*cj5;
IkReal x2749=r01*r01;
IkReal x2750=(r01*sj5);
IkReal x2751=(cj5*r00);
CheckValue<IkReal> x2752=IKPowWithIntegerCheck(IKsign((x2749+(((-2.0)*x2750*x2751))+(((-1.0)*x2748*x2749))+(r02*r02)+((x2748*(r00*r00))))),-1);
if(!x2752.valid){
continue;
}
CheckValue<IkReal> x2753 = IKatan2WithCheck(IkReal((x2750+(((-1.0)*x2751)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2752.value)))+(x2753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2754=IKsin(j4);
IkReal x2755=IKcos(j4);
IkReal x2756=((1.0)*cj5);
IkReal x2757=(r21*sj5);
IkReal x2758=(sj5*x2754);
IkReal x2759=((1.0)*x2754);
IkReal x2760=(sj5*x2755);
evalcond[0]=(((r22*x2755))+((x2754*x2757))+(((-1.0)*r20*x2754*x2756)));
evalcond[1]=(((r11*x2758))+((r12*x2755))+(((-1.0)*r10*x2754*x2756)));
evalcond[2]=((-1.0)+((r01*x2758))+(((-1.0)*r00*x2754*x2756))+((r02*x2755)));
evalcond[3]=((((-1.0)*r00*x2755*x2756))+((r01*x2760))+(((-1.0)*r02*x2759)));
evalcond[4]=((((-1.0)*r22*x2759))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2755*x2756))+((x2755*x2757)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x2759))+(((-1.0)*r10*x2755*x2756))+((r11*x2760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2761=((1.0)*sj5);
CheckValue<IkReal> x2762 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2762.valid){
continue;
}
CheckValue<IkReal> x2763=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2761)))),-1);
if(!x2763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2762.value)+(((1.5707963267949)*(x2763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2764=IKsin(j4);
IkReal x2765=IKcos(j4);
IkReal x2766=((1.0)*cj5);
IkReal x2767=(r21*sj5);
IkReal x2768=(sj5*x2764);
IkReal x2769=((1.0)*x2764);
IkReal x2770=(sj5*x2765);
evalcond[0]=((((-1.0)*r20*x2764*x2766))+((x2764*x2767))+((r22*x2765)));
evalcond[1]=((((-1.0)*r10*x2764*x2766))+((r12*x2765))+((r11*x2768)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x2764*x2766))+((r01*x2768))+((r02*x2765)));
evalcond[3]=(((r01*x2770))+(((-1.0)*r02*x2769))+(((-1.0)*r00*x2765*x2766)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2765*x2767))+(((-1.0)*r20*x2765*x2766))+(((-1.0)*r22*x2769)));
evalcond[5]=(((r11*x2770))+(((-1.0)*r12*x2769))+(((-1.0)*r10*x2765*x2766))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2771 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2771.valid){
continue;
}
CheckValue<IkReal> x2772=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2771.value)+(((1.5707963267949)*(x2772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2773=IKsin(j4);
IkReal x2774=IKcos(j4);
IkReal x2775=((1.0)*cj5);
IkReal x2776=(r21*sj5);
IkReal x2777=(sj5*x2773);
IkReal x2778=((1.0)*x2773);
IkReal x2779=(sj5*x2774);
evalcond[0]=(((r22*x2774))+(((-1.0)*r20*x2773*x2775))+((x2773*x2776)));
evalcond[1]=(((r11*x2777))+(((-1.0)*r10*x2773*x2775))+((r12*x2774)));
evalcond[2]=((-1.0)+((r01*x2777))+((r02*x2774))+(((-1.0)*r00*x2773*x2775)));
evalcond[3]=(((r01*x2779))+(((-1.0)*r00*x2774*x2775))+(((-1.0)*r02*x2778)));
evalcond[4]=(((x2774*x2776))+((cj2*sj1))+(((-1.0)*r20*x2774*x2775))+((cj1*sj2))+(((-1.0)*r22*x2778)));
evalcond[5]=(((r11*x2779))+(((-1.0)*r10*x2774*x2775))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x2778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2780=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2780;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2781=((1.0)*sj5);
IkReal x2782=((((-1.0)*r20*x2781))+(((-1.0)*cj5*r21)));
j4eval[0]=x2782;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2781))))));
j4eval[2]=IKsign(x2782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2783=cj5*cj5;
IkReal x2784=r01*r01;
IkReal x2785=(r01*sj5);
IkReal x2786=(cj5*r00);
IkReal x2787=((((-1.0)*x2783*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2783*x2784))+(((-1.0)*x2784))+(((2.0)*x2785*x2786)));
j4eval[0]=x2787;
j4eval[1]=IKsign(x2787);
j4eval[2]=((IKabs(r02))+(IKabs((x2785+(((-1.0)*x2786))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2788=cj5*cj5;
IkReal x2789=r01*r01;
IkReal x2790=(r01*sj5);
IkReal x2791=(cj5*r00);
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x2790*x2791))+(((-1.0)*x2788*(r00*r00)))+(((-1.0)*x2789))+((x2788*x2789)))),-1);
if(!x2792.valid){
continue;
}
CheckValue<IkReal> x2793 = IKatan2WithCheck(IkReal((x2790+(((-1.0)*x2791)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2792.value)))+(x2793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2794=IKsin(j4);
IkReal x2795=IKcos(j4);
IkReal x2796=((1.0)*cj5);
IkReal x2797=(r21*sj5);
IkReal x2798=(sj5*x2794);
IkReal x2799=((1.0)*x2794);
IkReal x2800=(sj5*x2795);
evalcond[0]=(((x2794*x2797))+(((-1.0)*r20*x2794*x2796))+((r22*x2795)));
evalcond[1]=((((-1.0)*r10*x2794*x2796))+((r12*x2795))+((r11*x2798)));
evalcond[2]=((1.0)+((r02*x2795))+((r01*x2798))+(((-1.0)*r00*x2794*x2796)));
evalcond[3]=(((r01*x2800))+(((-1.0)*r00*x2795*x2796))+(((-1.0)*r02*x2799)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2795*x2797))+(((-1.0)*r22*x2799))+(((-1.0)*r20*x2795*x2796)));
evalcond[5]=((((-1.0)*r10*x2795*x2796))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x2799))+((r11*x2800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2801=((1.0)*sj5);
CheckValue<IkReal> x2802=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2801))+(((-1.0)*cj5*r21)))),-1);
if(!x2802.valid){
continue;
}
CheckValue<IkReal> x2803 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2802.value)))+(x2803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2804=IKsin(j4);
IkReal x2805=IKcos(j4);
IkReal x2806=((1.0)*cj5);
IkReal x2807=(r21*sj5);
IkReal x2808=(sj5*x2804);
IkReal x2809=((1.0)*x2804);
IkReal x2810=(sj5*x2805);
evalcond[0]=((((-1.0)*r20*x2804*x2806))+((x2804*x2807))+((r22*x2805)));
evalcond[1]=(((r12*x2805))+(((-1.0)*r10*x2804*x2806))+((r11*x2808)));
evalcond[2]=((1.0)+((r02*x2805))+(((-1.0)*r00*x2804*x2806))+((r01*x2808)));
evalcond[3]=(((r01*x2810))+(((-1.0)*r00*x2805*x2806))+(((-1.0)*r02*x2809)));
evalcond[4]=(((cj2*sj1))+((x2805*x2807))+((cj1*sj2))+(((-1.0)*r22*x2809))+(((-1.0)*r20*x2805*x2806)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x2809))+((r11*x2810))+((cj1*cj2))+(((-1.0)*r10*x2805*x2806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2811=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2811.valid){
continue;
}
CheckValue<IkReal> x2812 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2811.value)))+(x2812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2813=IKsin(j4);
IkReal x2814=IKcos(j4);
IkReal x2815=((1.0)*cj5);
IkReal x2816=(r21*sj5);
IkReal x2817=(sj5*x2813);
IkReal x2818=((1.0)*x2813);
IkReal x2819=(sj5*x2814);
evalcond[0]=(((x2813*x2816))+((r22*x2814))+(((-1.0)*r20*x2813*x2815)));
evalcond[1]=(((r12*x2814))+((r11*x2817))+(((-1.0)*r10*x2813*x2815)));
evalcond[2]=((1.0)+((r01*x2817))+(((-1.0)*r00*x2813*x2815))+((r02*x2814)));
evalcond[3]=(((r01*x2819))+(((-1.0)*r02*x2818))+(((-1.0)*r00*x2814*x2815)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2814*x2815))+(((-1.0)*r22*x2818))+((x2814*x2816)));
evalcond[5]=((((-1.0)*r12*x2818))+(((-1.0)*sj1*sj2))+(((-1.0)*r10*x2814*x2815))+((r11*x2819))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2820=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2820);
rxp1_1=(px*r21);
rxp1_2=(r11*x2820);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2821=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2821);
rxp1_1=(px*r21);
rxp1_2=(r11*x2821);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2822=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2822);
rxp1_1=(px*r21);
rxp1_2=(r11*x2822);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2825=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x2825.valid){
continue;
}
IkReal x2823=x2825.value;
IkReal x2824=(sj0*x2823);
cj4array[0]=(((cj1*cj2*x2824))+(((-1.0)*sj1*sj2*x2824)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2826=IKsin(j4);
IkReal x2827=IKcos(j4);
IkReal x2828=(r21*sj5);
IkReal x2829=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x2826);
evalcond[1]=(((r02*x2827))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x2826*x2829))+((x2826*x2828)));
evalcond[3]=((((-1.0)*cj5*r10*x2826))+((r11*sj5*x2826)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2827*x2828))+(((-1.0)*x2827*x2829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2832=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2832.valid){
continue;
}
IkReal x2830=x2832.value;
IkReal x2831=((1.0)*x2830);
cj4array[0]=((((-1.0)*cj2*sj1*x2831))+(((-1.0)*cj1*sj2*x2831)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2833=IKsin(j4);
IkReal x2834=IKcos(j4);
IkReal x2835=((1.0)*sj0);
IkReal x2836=((1.0)*cj5);
IkReal x2837=(sj5*x2833);
evalcond[0]=((-1.0)*r02*x2833);
evalcond[1]=((((-1.0)*x2835))+((r02*x2834)));
evalcond[2]=((((-1.0)*r20*x2833*x2836))+((r21*x2837)));
evalcond[3]=((((-1.0)*r10*x2833*x2836))+((r11*x2837)));
evalcond[4]=((((-1.0)*r10*x2834*x2836))+((r11*sj5*x2834))+(((-1.0)*cj1*cj2*x2835))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2838=IKPowWithIntegerCheck(r02,-1);
if(!x2838.valid){
continue;
}
cj4array[0]=(sj0*(x2838.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2839=IKsin(j4);
IkReal x2840=IKcos(j4);
IkReal x2841=(r21*sj5);
IkReal x2842=((1.0)*cj5);
IkReal x2843=(r11*sj5);
evalcond[0]=((-1.0)*r02*x2839);
evalcond[1]=(((x2839*x2841))+(((-1.0)*r20*x2839*x2842)));
evalcond[2]=((((-1.0)*r10*x2839*x2842))+((x2839*x2843)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2840*x2842))+((x2840*x2841)));
evalcond[4]=((((-1.0)*r10*x2840*x2842))+(((-1.0)*cj1*cj2*sj0))+((x2840*x2843))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2844=((1.0)*sj0);
IkReal x2845=((1.0)*cj0);
CheckValue<IkReal> x2846 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2844))+(((-1.0)*r02*x2845)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x2845))+(((-1.0)*cj5*r10*x2844))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2846.valid){
continue;
}
CheckValue<IkReal> x2847=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2846.value)+(((1.5707963267949)*(x2847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2848=IKsin(j4);
IkReal x2849=IKcos(j4);
IkReal x2850=((1.0)*cj5);
IkReal x2851=(r21*sj5);
IkReal x2852=(sj1*sj2);
IkReal x2853=((1.0)*cj1*cj2);
IkReal x2854=(sj5*x2848);
IkReal x2855=((1.0)*x2848);
IkReal x2856=(sj5*x2849);
evalcond[0]=(((x2848*x2851))+((r22*x2849))+(((-1.0)*r20*x2848*x2850)));
evalcond[1]=((((-1.0)*r10*x2848*x2850))+cj0+((r11*x2854))+((r12*x2849)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2854))+(((-1.0)*r00*x2848*x2850))+((r02*x2849)));
evalcond[3]=(((cj2*sj1))+((x2849*x2851))+((cj1*sj2))+(((-1.0)*r22*x2855))+(((-1.0)*r20*x2849*x2850)));
evalcond[4]=((((-1.0)*cj0*x2853))+(((-1.0)*r02*x2855))+((cj0*x2852))+(((-1.0)*r00*x2849*x2850))+((r01*x2856)));
evalcond[5]=((((-1.0)*r10*x2849*x2850))+((sj0*x2852))+((r11*x2856))+(((-1.0)*r12*x2855))+(((-1.0)*sj0*x2853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2857=((1.0)*sj5);
CheckValue<IkReal> x2858=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2857)))),-1);
if(!x2858.valid){
continue;
}
CheckValue<IkReal> x2859 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2858.value)))+(x2859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2860=IKsin(j4);
IkReal x2861=IKcos(j4);
IkReal x2862=((1.0)*cj5);
IkReal x2863=(r21*sj5);
IkReal x2864=(sj1*sj2);
IkReal x2865=((1.0)*cj1*cj2);
IkReal x2866=(sj5*x2860);
IkReal x2867=((1.0)*x2860);
IkReal x2868=(sj5*x2861);
evalcond[0]=((((-1.0)*r20*x2860*x2862))+((r22*x2861))+((x2860*x2863)));
evalcond[1]=(cj0+(((-1.0)*r10*x2860*x2862))+((r12*x2861))+((r11*x2866)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2861))+(((-1.0)*r00*x2860*x2862))+((r01*x2866)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x2867))+(((-1.0)*r20*x2861*x2862))+((x2861*x2863)));
evalcond[4]=((((-1.0)*r02*x2867))+(((-1.0)*r00*x2861*x2862))+((cj0*x2864))+(((-1.0)*cj0*x2865))+((r01*x2868)));
evalcond[5]=((((-1.0)*r12*x2867))+(((-1.0)*sj0*x2865))+(((-1.0)*r10*x2861*x2862))+((sj0*x2864))+((r11*x2868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2869=((1.0)*sj5);
CheckValue<IkReal> x2870 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x2869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2870.valid){
continue;
}
CheckValue<IkReal> x2871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2869))+(((-1.0)*cj5*r01)))),-1);
if(!x2871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2870.value)+(((1.5707963267949)*(x2871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2872=IKsin(j4);
IkReal x2873=IKcos(j4);
IkReal x2874=((1.0)*cj5);
IkReal x2875=(r21*sj5);
IkReal x2876=(sj1*sj2);
IkReal x2877=((1.0)*cj1*cj2);
IkReal x2878=(sj5*x2872);
IkReal x2879=((1.0)*x2872);
IkReal x2880=(sj5*x2873);
evalcond[0]=(((r22*x2873))+((x2872*x2875))+(((-1.0)*r20*x2872*x2874)));
evalcond[1]=(cj0+((r11*x2878))+((r12*x2873))+(((-1.0)*r10*x2872*x2874)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2878))+(((-1.0)*r00*x2872*x2874))+((r02*x2873)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x2873*x2874))+(((-1.0)*r22*x2879))+((x2873*x2875)));
evalcond[4]=((((-1.0)*cj0*x2877))+((cj0*x2876))+(((-1.0)*r02*x2879))+((r01*x2880))+(((-1.0)*r00*x2873*x2874)));
evalcond[5]=((((-1.0)*sj0*x2877))+(((-1.0)*r10*x2873*x2874))+((r11*x2880))+((sj0*x2876))+(((-1.0)*r12*x2879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2881=((1.0)*cj5);
IkReal x2882=((1.0)*sj5);
IkReal x2883=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x2883;
j0eval[1]=((IKabs(((((-1.0)*r11*x2881))+(((-1.0)*r10*x2882)))))+(IKabs(((((-1.0)*r00*x2882))+(((-1.0)*r01*x2881))))));
j0eval[2]=IKsign(x2883);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2884=r21*r21;
IkReal x2885=cj5*cj5;
IkReal x2886=(cj1*sj2);
IkReal x2887=(cj5*r20);
IkReal x2888=(r21*sj5);
IkReal x2889=(cj2*sj1);
IkReal x2890=(((x2884*x2885))+(((-1.0)*x2884))+(((-1.0)*x2885*(r20*r20)))+(((2.0)*x2887*x2888))+(((-1.0)*(r22*r22))));
j4eval[0]=x2890;
j4eval[1]=((IKabs(((((-1.0)*x2886*x2888))+(((-1.0)*x2888*x2889))+((x2887*x2889))+((x2886*x2887)))))+(IKabs((((r22*x2886))+((r22*x2889))))));
j4eval[2]=IKsign(x2890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19869553720951)*py))+(((-0.179216734729853)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19869553720951)*px))+(((0.179216734729853)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19869553720951)*py))+(((-0.179216734729853)*px))))+IKsqr(((((1.19869553720951)*px))+(((0.179216734729853)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19869553720951)*py))+(((-0.179216734729853)*px))), ((((1.19869553720951)*px))+(((0.179216734729853)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2891=IKcos(j0);
IkReal x2892=IKsin(j0);
evalcond[0]=((((-0.122)*x2892))+(((-1.0)*px))+(((0.816)*x2891)));
evalcond[1]=((((0.122)*x2891))+(((-1.0)*py))+(((0.816)*x2892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2893=((1.0)*sj5);
IkReal x2894=((((-1.0)*r00*x2893))+(((-1.0)*cj5*r01)));
j4eval[0]=x2894;
j4eval[1]=IKsign(x2894);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x2893))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2895=((1.0)*sj5);
IkReal x2896=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2895)));
j4eval[0]=x2896;
j4eval[1]=IKsign(x2896);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2895))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2897=cj5*cj5;
IkReal x2898=((1.0)*r21);
IkReal x2899=(cj5*sj5);
IkReal x2900=((((-1.0)*r01*r20*x2899))+(((-1.0)*r00*x2898*x2899))+(((-1.0)*r01*x2897*x2898))+((r01*r21))+((r00*r20*x2897))+((r02*r22)));
j4eval[0]=x2900;
j4eval[1]=IKsign(x2900);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x2898))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2901=cj5*cj5;
IkReal x2902=((1.0)*r21);
IkReal x2903=(cj5*sj5);
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2902*x2903))+((r00*r20*x2901))+(((-1.0)*r01*r20*x2903))+((r01*r21))+(((-1.0)*r01*x2901*x2902))+((r02*r22)))),-1);
if(!x2904.valid){
continue;
}
CheckValue<IkReal> x2905 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x2902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2904.value)))+(x2905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2906=IKsin(j4);
IkReal x2907=IKcos(j4);
IkReal x2908=((1.0)*sj0);
IkReal x2909=(cj5*r00);
IkReal x2910=(cj5*r10);
IkReal x2911=(cj5*r20);
IkReal x2912=((1.0)*x2906);
IkReal x2913=(sj5*x2906);
IkReal x2914=((1.0)*sj5*x2907);
evalcond[0]=(((r22*x2907))+((r21*x2913))+(((-1.0)*x2911*x2912)));
evalcond[1]=(((r22*x2906))+((x2907*x2911))+(((-1.0)*r21*x2914)));
evalcond[2]=(((r11*x2913))+cj0+(((-1.0)*x2910*x2912))+((r12*x2907)));
evalcond[3]=(((r02*x2907))+((r01*x2913))+(((-1.0)*x2908))+(((-1.0)*x2909*x2912)));
evalcond[4]=(((r02*x2906))+((x2907*x2909))+(((-1.0)*r01*x2914))+(((-1.0)*cj0)));
evalcond[5]=(((x2907*x2910))+(((-1.0)*r11*x2914))+(((-1.0)*x2908))+((r12*x2906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2915=((1.0)*sj5);
CheckValue<IkReal> x2916 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x2915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2916.valid){
continue;
}
CheckValue<IkReal> x2917=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2915)))),-1);
if(!x2917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2916.value)+(((1.5707963267949)*(x2917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2918=IKsin(j4);
IkReal x2919=IKcos(j4);
IkReal x2920=((1.0)*sj0);
IkReal x2921=(cj5*r00);
IkReal x2922=(cj5*r10);
IkReal x2923=(cj5*r20);
IkReal x2924=((1.0)*x2918);
IkReal x2925=(sj5*x2918);
IkReal x2926=((1.0)*sj5*x2919);
evalcond[0]=((((-1.0)*x2923*x2924))+((r21*x2925))+((r22*x2919)));
evalcond[1]=((((-1.0)*r21*x2926))+((x2919*x2923))+((r22*x2918)));
evalcond[2]=(((r12*x2919))+cj0+((r11*x2925))+(((-1.0)*x2922*x2924)));
evalcond[3]=((((-1.0)*x2921*x2924))+(((-1.0)*x2920))+((r01*x2925))+((r02*x2919)));
evalcond[4]=(((x2919*x2921))+((r02*x2918))+(((-1.0)*r01*x2926))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x2918))+((x2919*x2922))+(((-1.0)*x2920))+(((-1.0)*r11*x2926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2927=((1.0)*sj5);
CheckValue<IkReal> x2928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2927))+(((-1.0)*cj5*r01)))),-1);
if(!x2928.valid){
continue;
}
CheckValue<IkReal> x2929 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2927))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2928.value)))+(x2929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2930=IKsin(j4);
IkReal x2931=IKcos(j4);
IkReal x2932=((1.0)*sj0);
IkReal x2933=(cj5*r00);
IkReal x2934=(cj5*r10);
IkReal x2935=(cj5*r20);
IkReal x2936=((1.0)*x2930);
IkReal x2937=(sj5*x2930);
IkReal x2938=((1.0)*sj5*x2931);
evalcond[0]=(((r21*x2937))+((r22*x2931))+(((-1.0)*x2935*x2936)));
evalcond[1]=(((r22*x2930))+(((-1.0)*r21*x2938))+((x2931*x2935)));
evalcond[2]=(cj0+((r12*x2931))+(((-1.0)*x2934*x2936))+((r11*x2937)));
evalcond[3]=(((r02*x2931))+(((-1.0)*x2933*x2936))+((r01*x2937))+(((-1.0)*x2932)));
evalcond[4]=(((r02*x2930))+(((-1.0)*r01*x2938))+(((-1.0)*cj0))+((x2931*x2933)));
evalcond[5]=((((-1.0)*x2932))+((r12*x2930))+(((-1.0)*r11*x2938))+((x2931*x2934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.30855796911803)*py))+(((-7.98220361161999)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.98220361161999)*py))+(((1.30855796911803)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.30855796911803)*py))+(((-7.98220361161999)*px))))+IKsqr(((((7.98220361161999)*py))+(((1.30855796911803)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.30855796911803)*py))+(((-7.98220361161999)*px))), ((((7.98220361161999)*py))+(((1.30855796911803)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2939=IKcos(j0);
IkReal x2940=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.02)*x2939))+(((-0.122)*x2940)));
evalcond[1]=((((0.02)*x2940))+(((0.122)*x2939))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2941=((1.0)*sj5);
IkReal x2942=((((-1.0)*r00*x2941))+(((-1.0)*cj5*r01)));
j4eval[0]=x2942;
j4eval[1]=IKsign(x2942);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x2941))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2943=cj5*cj5;
IkReal x2944=((1.0)*r21);
IkReal x2945=(cj5*r20);
IkReal x2946=((((-1.0)*r02*r22))+((r01*sj5*x2945))+(((-1.0)*r01*x2944))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x2943))+((r01*r21*x2943)));
j4eval[0]=x2946;
j4eval[1]=IKsign(x2946);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x2944))+((cj0*x2945))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2947=cj5*cj5;
IkReal x2948=(r11*r21);
IkReal x2949=(cj5*r20);
IkReal x2950=(r21*sj5);
IkReal x2951=((((-1.0)*x2948))+(((-1.0)*r12*r22))+((r11*sj5*x2949))+(((-1.0)*r10*r20*x2947))+((cj5*r10*x2950))+((x2947*x2948)));
j4eval[0]=x2951;
j4eval[1]=IKsign(x2951);
j4eval[2]=((IKabs(((((-1.0)*sj0*x2950))+((sj0*x2949)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2952=cj5*cj5;
IkReal x2953=(r11*r21);
IkReal x2954=(cj5*r20);
IkReal x2955=(r21*sj5);
CheckValue<IkReal> x2956 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x2954))+(((-1.0)*sj0*x2955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2956.valid){
continue;
}
CheckValue<IkReal> x2957=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2953))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x2952))+((x2952*x2953))+((cj5*r10*x2955))+((r11*sj5*x2954)))),-1);
if(!x2957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2956.value)+(((1.5707963267949)*(x2957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2958=IKsin(j4);
IkReal x2959=IKcos(j4);
IkReal x2960=(cj5*r00);
IkReal x2961=(cj5*r10);
IkReal x2962=(cj5*r20);
IkReal x2963=((1.0)*x2958);
IkReal x2964=(sj5*x2958);
IkReal x2965=((1.0)*sj5*x2959);
evalcond[0]=(((r22*x2959))+((r21*x2964))+(((-1.0)*x2962*x2963)));
evalcond[1]=(((r22*x2958))+(((-1.0)*r21*x2965))+((x2959*x2962)));
evalcond[2]=(cj0+((r11*x2964))+(((-1.0)*x2961*x2963))+((r12*x2959)));
evalcond[3]=(cj0+(((-1.0)*r01*x2965))+((x2959*x2960))+((r02*x2958)));
evalcond[4]=((((-1.0)*r11*x2965))+sj0+((x2959*x2961))+((r12*x2958)));
evalcond[5]=((((-1.0)*sj0))+((r01*x2964))+(((-1.0)*x2960*x2963))+((r02*x2959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2966=cj5*cj5;
IkReal x2967=((1.0)*r21);
IkReal x2968=(cj5*r20);
CheckValue<IkReal> x2969 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x2967))+((cj0*x2968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2969.valid){
continue;
}
CheckValue<IkReal> x2970=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x2966))+(((-1.0)*r01*x2967))+((r01*sj5*x2968))+((cj5*r00*r21*sj5))+((r01*r21*x2966)))),-1);
if(!x2970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2969.value)+(((1.5707963267949)*(x2970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2971=IKsin(j4);
IkReal x2972=IKcos(j4);
IkReal x2973=(cj5*r00);
IkReal x2974=(cj5*r10);
IkReal x2975=(cj5*r20);
IkReal x2976=((1.0)*x2971);
IkReal x2977=(sj5*x2971);
IkReal x2978=((1.0)*sj5*x2972);
evalcond[0]=((((-1.0)*x2975*x2976))+((r22*x2972))+((r21*x2977)));
evalcond[1]=((((-1.0)*r21*x2978))+((r22*x2971))+((x2972*x2975)));
evalcond[2]=(cj0+((r12*x2972))+(((-1.0)*x2974*x2976))+((r11*x2977)));
evalcond[3]=(cj0+((r02*x2971))+(((-1.0)*r01*x2978))+((x2972*x2973)));
evalcond[4]=((((-1.0)*r11*x2978))+sj0+((r12*x2971))+((x2972*x2974)));
evalcond[5]=((((-1.0)*sj0))+((r02*x2972))+((r01*x2977))+(((-1.0)*x2973*x2976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2979=((1.0)*sj5);
CheckValue<IkReal> x2980=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2979))+(((-1.0)*cj5*r01)))),-1);
if(!x2980.valid){
continue;
}
CheckValue<IkReal> x2981 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x2979))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2980.value)))+(x2981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2982=IKsin(j4);
IkReal x2983=IKcos(j4);
IkReal x2984=(cj5*r00);
IkReal x2985=(cj5*r10);
IkReal x2986=(cj5*r20);
IkReal x2987=((1.0)*x2982);
IkReal x2988=(sj5*x2982);
IkReal x2989=((1.0)*sj5*x2983);
evalcond[0]=((((-1.0)*x2986*x2987))+((r22*x2983))+((r21*x2988)));
evalcond[1]=(((x2983*x2986))+(((-1.0)*r21*x2989))+((r22*x2982)));
evalcond[2]=((((-1.0)*x2985*x2987))+cj0+((r11*x2988))+((r12*x2983)));
evalcond[3]=(((x2983*x2984))+cj0+(((-1.0)*r01*x2989))+((r02*x2982)));
evalcond[4]=(((x2983*x2985))+sj0+(((-1.0)*r11*x2989))+((r12*x2982)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2984*x2987))+((r01*x2988))+((r02*x2983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.29674722330522)*py))+(((-0.704025336895657)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.29674722330522)*px))+(((0.704025336895657)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.29674722330522)*py))+(((-0.704025336895657)*px))))+IKsqr(((((-2.29674722330522)*px))+(((0.704025336895657)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.29674722330522)*py))+(((-0.704025336895657)*px))), ((((-2.29674722330522)*px))+(((0.704025336895657)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2990=IKcos(j0);
IkReal x2991=IKsin(j0);
evalcond[0]=((((-0.122)*x2991))+(((-1.0)*px))+(((-0.39800153)*x2990)));
evalcond[1]=((((-1.0)*py))+(((0.122)*x2990))+(((-0.39800153)*x2991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2992=((1.0)*sj5);
IkReal x2993=((((-1.0)*r00*x2992))+(((-1.0)*cj5*r01)));
j4eval[0]=x2993;
j4eval[1]=IKsign(x2993);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x2992)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2994=cj5*cj5;
IkReal x2995=((1.0)*r21);
IkReal x2996=(cj5*r20);
IkReal x2997=((((-1.0)*r00*r20*x2994))+(((-1.0)*r02*r22))+((cj5*r00*r21*sj5))+((r01*r21*x2994))+((r01*sj5*x2996))+(((-1.0)*r01*x2995)));
j4eval[0]=x2997;
j4eval[1]=IKsign(x2997);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x2996))+(((-1.0)*cj0*sj5*x2995))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2998=cj5*cj5;
IkReal x2999=(r11*r21);
IkReal x3000=(cj5*r20);
IkReal x3001=(r21*sj5);
IkReal x3002=((((-1.0)*r12*r22))+((x2998*x2999))+(((-1.0)*x2999))+((r11*sj5*x3000))+(((-1.0)*r10*r20*x2998))+((cj5*r10*x3001)));
j4eval[0]=x3002;
j4eval[1]=IKsign(x3002);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x3000))+(((-1.0)*sj0*x3001))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3003=cj5*cj5;
IkReal x3004=(r11*r21);
IkReal x3005=(cj5*r20);
IkReal x3006=(r21*sj5);
CheckValue<IkReal> x3007=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3004))+(((-1.0)*r12*r22))+((x3003*x3004))+(((-1.0)*r10*r20*x3003))+((r11*sj5*x3005))+((cj5*r10*x3006)))),-1);
if(!x3007.valid){
continue;
}
CheckValue<IkReal> x3008 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x3005))+(((-1.0)*sj0*x3006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3007.value)))+(x3008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3009=IKsin(j4);
IkReal x3010=IKcos(j4);
IkReal x3011=(cj5*r00);
IkReal x3012=(cj5*r10);
IkReal x3013=(cj5*r20);
IkReal x3014=((1.0)*x3009);
IkReal x3015=(sj5*x3009);
IkReal x3016=((1.0)*sj5*x3010);
evalcond[0]=(((r22*x3010))+((r21*x3015))+(((-1.0)*x3013*x3014)));
evalcond[1]=(((x3010*x3013))+((r22*x3009))+(((-1.0)*r21*x3016)));
evalcond[2]=(cj0+((r12*x3010))+((r11*x3015))+(((-1.0)*x3012*x3014)));
evalcond[3]=(((x3010*x3011))+cj0+(((-1.0)*r01*x3016))+((r02*x3009)));
evalcond[4]=(((x3010*x3012))+sj0+((r12*x3009))+(((-1.0)*r11*x3016)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3015))+(((-1.0)*x3011*x3014))+((r02*x3010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3017=cj5*cj5;
IkReal x3018=((1.0)*r21);
IkReal x3019=(cj5*r20);
CheckValue<IkReal> x3020=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3017))+(((-1.0)*r01*x3018))+((cj5*r00*r21*sj5))+((r01*sj5*x3019))+((r01*r21*x3017)))),-1);
if(!x3020.valid){
continue;
}
CheckValue<IkReal> x3021 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3018))+((cj0*x3019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3020.value)))+(x3021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3022=IKsin(j4);
IkReal x3023=IKcos(j4);
IkReal x3024=(cj5*r00);
IkReal x3025=(cj5*r10);
IkReal x3026=(cj5*r20);
IkReal x3027=((1.0)*x3022);
IkReal x3028=(sj5*x3022);
IkReal x3029=((1.0)*sj5*x3023);
evalcond[0]=((((-1.0)*x3026*x3027))+((r21*x3028))+((r22*x3023)));
evalcond[1]=((((-1.0)*r21*x3029))+((r22*x3022))+((x3023*x3026)));
evalcond[2]=(((r12*x3023))+((r11*x3028))+cj0+(((-1.0)*x3025*x3027)));
evalcond[3]=(cj0+((r02*x3022))+(((-1.0)*r01*x3029))+((x3023*x3024)));
evalcond[4]=(((r12*x3022))+sj0+(((-1.0)*r11*x3029))+((x3023*x3025)));
evalcond[5]=((((-1.0)*sj0))+((r02*x3023))+(((-1.0)*x3024*x3027))+((r01*x3028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3030=((1.0)*sj5);
CheckValue<IkReal> x3031 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3031.valid){
continue;
}
CheckValue<IkReal> x3032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3030))+(((-1.0)*cj5*r01)))),-1);
if(!x3032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3031.value)+(((1.5707963267949)*(x3032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3033=IKsin(j4);
IkReal x3034=IKcos(j4);
IkReal x3035=(cj5*r00);
IkReal x3036=(cj5*r10);
IkReal x3037=(cj5*r20);
IkReal x3038=((1.0)*x3033);
IkReal x3039=(sj5*x3033);
IkReal x3040=((1.0)*sj5*x3034);
evalcond[0]=((((-1.0)*x3037*x3038))+((r22*x3034))+((r21*x3039)));
evalcond[1]=(((x3034*x3037))+(((-1.0)*r21*x3040))+((r22*x3033)));
evalcond[2]=(cj0+((r11*x3039))+(((-1.0)*x3036*x3038))+((r12*x3034)));
evalcond[3]=(((r02*x3033))+cj0+((x3034*x3035))+(((-1.0)*r01*x3040)));
evalcond[4]=(sj0+(((-1.0)*r11*x3040))+((x3034*x3036))+((r12*x3033)));
evalcond[5]=(((r02*x3034))+(((-1.0)*sj0))+(((-1.0)*x3035*x3038))+((r01*x3039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.704035232842328)*px))+(((2.29676184833885)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.704035232842328)*py))+(((2.29676184833885)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.704035232842328)*px))+(((2.29676184833885)*py))))+IKsqr(((((0.704035232842328)*py))+(((2.29676184833885)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.704035232842328)*px))+(((2.29676184833885)*py))), ((((0.704035232842328)*py))+(((2.29676184833885)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3041=IKcos(j0);
IkReal x3042=IKsin(j0);
evalcond[0]=((((0.39799847)*x3041))+(((-1.0)*px))+(((-0.122)*x3042)));
evalcond[1]=((((0.39799847)*x3042))+(((-1.0)*py))+(((0.122)*x3041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3043=((1.0)*sj5);
IkReal x3044=((((-1.0)*r00*x3043))+(((-1.0)*cj5*r01)));
j4eval[0]=x3044;
j4eval[1]=IKsign(x3044);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3043)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3045=((1.0)*sj5);
IkReal x3046=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3045)));
j4eval[0]=x3046;
j4eval[1]=IKsign(x3046);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3045))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3047=cj5*cj5;
IkReal x3048=((1.0)*r21);
IkReal x3049=(cj5*sj5);
IkReal x3050=(((r01*r21))+((r00*r20*x3047))+(((-1.0)*r01*x3047*x3048))+(((-1.0)*r01*r20*x3049))+(((-1.0)*r00*x3048*x3049))+((r02*r22)));
j4eval[0]=x3050;
j4eval[1]=IKsign(x3050);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x3048))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3051=cj5*cj5;
IkReal x3052=((1.0)*r21);
IkReal x3053=(cj5*sj5);
CheckValue<IkReal> x3054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x3053))+(((-1.0)*r01*x3051*x3052))+((r01*r21))+(((-1.0)*r00*x3052*x3053))+((r02*r22))+((r00*r20*x3051)))),-1);
if(!x3054.valid){
continue;
}
CheckValue<IkReal> x3055 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3052))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3054.value)))+(x3055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3056=IKsin(j4);
IkReal x3057=IKcos(j4);
IkReal x3058=((1.0)*sj0);
IkReal x3059=(cj5*r00);
IkReal x3060=(cj5*r10);
IkReal x3061=(cj5*r20);
IkReal x3062=((1.0)*x3056);
IkReal x3063=(sj5*x3056);
IkReal x3064=((1.0)*sj5*x3057);
evalcond[0]=((((-1.0)*x3061*x3062))+((r22*x3057))+((r21*x3063)));
evalcond[1]=(((r22*x3056))+((x3057*x3061))+(((-1.0)*r21*x3064)));
evalcond[2]=((((-1.0)*x3060*x3062))+cj0+((r12*x3057))+((r11*x3063)));
evalcond[3]=(((r02*x3057))+((r01*x3063))+(((-1.0)*x3058))+(((-1.0)*x3059*x3062)));
evalcond[4]=(((r02*x3056))+((x3057*x3059))+(((-1.0)*r01*x3064))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x3056))+(((-1.0)*r11*x3064))+((x3057*x3060))+(((-1.0)*x3058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3065=((1.0)*sj5);
CheckValue<IkReal> x3066 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3065)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3066.valid){
continue;
}
CheckValue<IkReal> x3067=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3065)))),-1);
if(!x3067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3066.value)+(((1.5707963267949)*(x3067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3068=IKsin(j4);
IkReal x3069=IKcos(j4);
IkReal x3070=((1.0)*sj0);
IkReal x3071=(cj5*r00);
IkReal x3072=(cj5*r10);
IkReal x3073=(cj5*r20);
IkReal x3074=((1.0)*x3068);
IkReal x3075=(sj5*x3068);
IkReal x3076=((1.0)*sj5*x3069);
evalcond[0]=(((r22*x3069))+(((-1.0)*x3073*x3074))+((r21*x3075)));
evalcond[1]=(((r22*x3068))+(((-1.0)*r21*x3076))+((x3069*x3073)));
evalcond[2]=((((-1.0)*x3072*x3074))+cj0+((r11*x3075))+((r12*x3069)));
evalcond[3]=(((r01*x3075))+(((-1.0)*x3070))+(((-1.0)*x3071*x3074))+((r02*x3069)));
evalcond[4]=((((-1.0)*r01*x3076))+((x3069*x3071))+((r02*x3068))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x3076))+(((-1.0)*x3070))+((r12*x3068))+((x3069*x3072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3077=((1.0)*sj5);
CheckValue<IkReal> x3078 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3077))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3078.valid){
continue;
}
CheckValue<IkReal> x3079=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3077))+(((-1.0)*cj5*r01)))),-1);
if(!x3079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3078.value)+(((1.5707963267949)*(x3079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3080=IKsin(j4);
IkReal x3081=IKcos(j4);
IkReal x3082=((1.0)*sj0);
IkReal x3083=(cj5*r00);
IkReal x3084=(cj5*r10);
IkReal x3085=(cj5*r20);
IkReal x3086=((1.0)*x3080);
IkReal x3087=(sj5*x3080);
IkReal x3088=((1.0)*sj5*x3081);
evalcond[0]=(((r21*x3087))+(((-1.0)*x3085*x3086))+((r22*x3081)));
evalcond[1]=(((x3081*x3085))+(((-1.0)*r21*x3088))+((r22*x3080)));
evalcond[2]=(cj0+((r12*x3081))+((r11*x3087))+(((-1.0)*x3084*x3086)));
evalcond[3]=((((-1.0)*x3082))+(((-1.0)*x3083*x3086))+((r02*x3081))+((r01*x3087)));
evalcond[4]=(((x3081*x3083))+((r02*x3080))+(((-1.0)*r01*x3088))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3082))+((x3081*x3084))+((r12*x3080))+(((-1.0)*r11*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.19869553720951)*py))+(((-0.179216734729853)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.19869553720951)*px))+(((0.179216734729853)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.19869553720951)*py))+(((-0.179216734729853)*px))))+IKsqr(((((-1.19869553720951)*px))+(((0.179216734729853)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.19869553720951)*py))+(((-0.179216734729853)*px))), ((((-1.19869553720951)*px))+(((0.179216734729853)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3089=IKcos(j0);
IkReal x3090=IKsin(j0);
evalcond[0]=((((-0.816)*x3089))+(((-1.0)*px))+(((-0.122)*x3090)));
evalcond[1]=((((-0.816)*x3090))+(((-1.0)*py))+(((0.122)*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3091=((1.0)*sj5);
IkReal x3092=((((-1.0)*r00*x3091))+(((-1.0)*cj5*r01)));
j4eval[0]=x3092;
j4eval[1]=IKsign(x3092);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3091))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3093=cj5*cj5;
IkReal x3094=((1.0)*r21);
IkReal x3095=(cj5*r20);
IkReal x3096=(((r01*sj5*x3095))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3093))+((r01*r21*x3093))+(((-1.0)*r01*x3094))+((cj5*r00*r21*sj5)));
j4eval[0]=x3096;
j4eval[1]=IKsign(x3096);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3095))+(((-1.0)*cj0*sj5*x3094))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3097=cj5*cj5;
IkReal x3098=(r11*r21);
IkReal x3099=(cj5*r20);
IkReal x3100=(r21*sj5);
IkReal x3101=(((r11*sj5*x3099))+((cj5*r10*x3100))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3097))+(((-1.0)*x3098))+((x3097*x3098)));
j4eval[0]=x3101;
j4eval[1]=IKsign(x3101);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x3100))+((sj0*x3099))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3102=cj5*cj5;
IkReal x3103=(r11*r21);
IkReal x3104=(cj5*r20);
IkReal x3105=(r21*sj5);
CheckValue<IkReal> x3106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x3102))+((cj5*r10*x3105))+(((-1.0)*r12*r22))+(((-1.0)*x3103))+((r11*sj5*x3104))+((x3102*x3103)))),-1);
if(!x3106.valid){
continue;
}
CheckValue<IkReal> x3107 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x3104))+(((-1.0)*sj0*x3105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3106.value)))+(x3107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3108=IKsin(j4);
IkReal x3109=IKcos(j4);
IkReal x3110=(cj5*r00);
IkReal x3111=(cj5*r10);
IkReal x3112=(cj5*r20);
IkReal x3113=((1.0)*x3108);
IkReal x3114=(sj5*x3108);
IkReal x3115=((1.0)*sj5*x3109);
evalcond[0]=(((r22*x3109))+((r21*x3114))+(((-1.0)*x3112*x3113)));
evalcond[1]=((((-1.0)*r21*x3115))+((r22*x3108))+((x3109*x3112)));
evalcond[2]=(cj0+(((-1.0)*x3111*x3113))+((r12*x3109))+((r11*x3114)));
evalcond[3]=(cj0+((r02*x3108))+((x3109*x3110))+(((-1.0)*r01*x3115)));
evalcond[4]=(sj0+(((-1.0)*r11*x3115))+((x3109*x3111))+((r12*x3108)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3110*x3113))+((r02*x3109))+((r01*x3114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3116=cj5*cj5;
IkReal x3117=((1.0)*r21);
IkReal x3118=(cj5*r20);
CheckValue<IkReal> x3119=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3116))+((r01*sj5*x3118))+(((-1.0)*r01*x3117))+((cj5*r00*r21*sj5))+((r01*r21*x3116)))),-1);
if(!x3119.valid){
continue;
}
CheckValue<IkReal> x3120 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3117))+((cj0*x3118)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3119.value)))+(x3120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3121=IKsin(j4);
IkReal x3122=IKcos(j4);
IkReal x3123=(cj5*r00);
IkReal x3124=(cj5*r10);
IkReal x3125=(cj5*r20);
IkReal x3126=((1.0)*x3121);
IkReal x3127=(sj5*x3121);
IkReal x3128=((1.0)*sj5*x3122);
evalcond[0]=((((-1.0)*x3125*x3126))+((r21*x3127))+((r22*x3122)));
evalcond[1]=((((-1.0)*r21*x3128))+((r22*x3121))+((x3122*x3125)));
evalcond[2]=(cj0+(((-1.0)*x3124*x3126))+((r12*x3122))+((r11*x3127)));
evalcond[3]=(cj0+((r02*x3121))+((x3122*x3123))+(((-1.0)*r01*x3128)));
evalcond[4]=(sj0+((r12*x3121))+(((-1.0)*r11*x3128))+((x3122*x3124)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3127))+(((-1.0)*x3123*x3126))+((r02*x3122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3129=((1.0)*sj5);
CheckValue<IkReal> x3130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3129))+(((-1.0)*cj5*r01)))),-1);
if(!x3130.valid){
continue;
}
CheckValue<IkReal> x3131 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3129))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3130.value)))+(x3131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3132=IKsin(j4);
IkReal x3133=IKcos(j4);
IkReal x3134=(cj5*r00);
IkReal x3135=(cj5*r10);
IkReal x3136=(cj5*r20);
IkReal x3137=((1.0)*x3132);
IkReal x3138=(sj5*x3132);
IkReal x3139=((1.0)*sj5*x3133);
evalcond[0]=((((-1.0)*x3136*x3137))+((r21*x3138))+((r22*x3133)));
evalcond[1]=(((x3133*x3136))+(((-1.0)*r21*x3139))+((r22*x3132)));
evalcond[2]=(cj0+(((-1.0)*x3135*x3137))+((r12*x3133))+((r11*x3138)));
evalcond[3]=(cj0+((x3133*x3134))+((r02*x3132))+(((-1.0)*r01*x3139)));
evalcond[4]=(sj0+((x3133*x3135))+((r12*x3132))+(((-1.0)*r11*x3139)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3138))+(((-1.0)*x3134*x3137))+((r02*x3133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-7.98220361161999)*px))+(((-1.30855796911803)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.98220361161999)*py))+(((-1.30855796911803)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-7.98220361161999)*px))+(((-1.30855796911803)*py))))+IKsqr(((((7.98220361161999)*py))+(((-1.30855796911803)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-7.98220361161999)*px))+(((-1.30855796911803)*py))), ((((7.98220361161999)*py))+(((-1.30855796911803)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3140=IKcos(j0);
IkReal x3141=IKsin(j0);
evalcond[0]=((((-0.122)*x3141))+(((-1.0)*px))+(((-0.02)*x3140)));
evalcond[1]=((((0.122)*x3140))+(((-1.0)*py))+(((-0.02)*x3141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3142=((1.0)*sj5);
IkReal x3143=((((-1.0)*r00*x3142))+(((-1.0)*cj5*r01)));
j4eval[0]=x3143;
j4eval[1]=IKsign(x3143);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3142)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3144=((1.0)*sj5);
IkReal x3145=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3144)));
j4eval[0]=x3145;
j4eval[1]=IKsign(x3145);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3144))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3146=cj5*cj5;
IkReal x3147=((1.0)*r21);
IkReal x3148=(cj5*sj5);
IkReal x3149=((((-1.0)*r01*r20*x3148))+((r01*r21))+((r00*r20*x3146))+(((-1.0)*r01*x3146*x3147))+(((-1.0)*r00*x3147*x3148))+((r02*r22)));
j4eval[0]=x3149;
j4eval[1]=IKsign(x3149);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x3147)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3150=cj5*cj5;
IkReal x3151=((1.0)*r21);
IkReal x3152=(cj5*sj5);
CheckValue<IkReal> x3153 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x3151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3153.valid){
continue;
}
CheckValue<IkReal> x3154=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x3152))+((r00*r20*x3150))+(((-1.0)*r00*x3151*x3152))+((r01*r21))+(((-1.0)*r01*x3150*x3151))+((r02*r22)))),-1);
if(!x3154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3153.value)+(((1.5707963267949)*(x3154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3155=IKsin(j4);
IkReal x3156=IKcos(j4);
IkReal x3157=((1.0)*sj0);
IkReal x3158=(cj5*r00);
IkReal x3159=(cj5*r10);
IkReal x3160=(cj5*r20);
IkReal x3161=((1.0)*x3155);
IkReal x3162=(sj5*x3155);
IkReal x3163=((1.0)*sj5*x3156);
evalcond[0]=(((r22*x3156))+(((-1.0)*x3160*x3161))+((r21*x3162)));
evalcond[1]=(((r22*x3155))+((x3156*x3160))+(((-1.0)*r21*x3163)));
evalcond[2]=(cj0+((r11*x3162))+((r12*x3156))+(((-1.0)*x3159*x3161)));
evalcond[3]=((((-1.0)*x3157))+((r02*x3156))+(((-1.0)*x3158*x3161))+((r01*x3162)));
evalcond[4]=(((r02*x3155))+((x3156*x3158))+(((-1.0)*r01*x3163))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3157))+((r12*x3155))+((x3156*x3159))+(((-1.0)*r11*x3163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3164=((1.0)*sj5);
CheckValue<IkReal> x3165=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3164)))),-1);
if(!x3165.valid){
continue;
}
CheckValue<IkReal> x3166 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3165.value)))+(x3166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3167=IKsin(j4);
IkReal x3168=IKcos(j4);
IkReal x3169=((1.0)*sj0);
IkReal x3170=(cj5*r00);
IkReal x3171=(cj5*r10);
IkReal x3172=(cj5*r20);
IkReal x3173=((1.0)*x3167);
IkReal x3174=(sj5*x3167);
IkReal x3175=((1.0)*sj5*x3168);
evalcond[0]=(((r22*x3168))+((r21*x3174))+(((-1.0)*x3172*x3173)));
evalcond[1]=((((-1.0)*r21*x3175))+((r22*x3167))+((x3168*x3172)));
evalcond[2]=(((r11*x3174))+cj0+((r12*x3168))+(((-1.0)*x3171*x3173)));
evalcond[3]=(((r02*x3168))+((r01*x3174))+(((-1.0)*x3170*x3173))+(((-1.0)*x3169)));
evalcond[4]=(((r02*x3167))+((x3168*x3170))+(((-1.0)*r01*x3175))+(((-1.0)*cj0)));
evalcond[5]=(((x3168*x3171))+((r12*x3167))+(((-1.0)*r11*x3175))+(((-1.0)*x3169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3176=((1.0)*sj5);
CheckValue<IkReal> x3177=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3176))+(((-1.0)*cj5*r01)))),-1);
if(!x3177.valid){
continue;
}
CheckValue<IkReal> x3178 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3176))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3177.value)))+(x3178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3179=IKsin(j4);
IkReal x3180=IKcos(j4);
IkReal x3181=((1.0)*sj0);
IkReal x3182=(cj5*r00);
IkReal x3183=(cj5*r10);
IkReal x3184=(cj5*r20);
IkReal x3185=((1.0)*x3179);
IkReal x3186=(sj5*x3179);
IkReal x3187=((1.0)*sj5*x3180);
evalcond[0]=(((r22*x3180))+(((-1.0)*x3184*x3185))+((r21*x3186)));
evalcond[1]=((((-1.0)*r21*x3187))+((r22*x3179))+((x3180*x3184)));
evalcond[2]=((((-1.0)*x3183*x3185))+cj0+((r12*x3180))+((r11*x3186)));
evalcond[3]=(((r01*x3186))+(((-1.0)*x3182*x3185))+(((-1.0)*x3181))+((r02*x3180)));
evalcond[4]=(((r02*x3179))+((x3180*x3182))+(((-1.0)*r01*x3187))+(((-1.0)*cj0)));
evalcond[5]=(((x3180*x3183))+(((-1.0)*r11*x3187))+(((-1.0)*x3181))+((r12*x3179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.29674722330522)*py))+(((-0.704025336895657)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.704025336895657)*py))+(((2.29674722330522)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.29674722330522)*py))+(((-0.704025336895657)*px))))+IKsqr(((((0.704025336895657)*py))+(((2.29674722330522)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.29674722330522)*py))+(((-0.704025336895657)*px))), ((((0.704025336895657)*py))+(((2.29674722330522)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3188=IKcos(j0);
IkReal x3189=IKsin(j0);
evalcond[0]=((((0.39800153)*x3188))+(((-1.0)*px))+(((-0.122)*x3189)));
evalcond[1]=((((0.39800153)*x3189))+(((-1.0)*py))+(((0.122)*x3188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3190=((1.0)*sj5);
IkReal x3191=((((-1.0)*cj5*r01))+(((-1.0)*r00*x3190)));
j4eval[0]=x3191;
j4eval[1]=IKsign(x3191);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3190))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3192=((1.0)*sj5);
IkReal x3193=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3192)));
j4eval[0]=x3193;
j4eval[1]=IKsign(x3193);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3192))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3194=cj5*cj5;
IkReal x3195=((1.0)*r21);
IkReal x3196=(cj5*sj5);
IkReal x3197=((((-1.0)*r01*r20*x3196))+(((-1.0)*r01*x3194*x3195))+((r00*r20*x3194))+((r01*r21))+(((-1.0)*r00*x3195*x3196))+((r02*r22)));
j4eval[0]=x3197;
j4eval[1]=IKsign(x3197);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x3195)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3198=cj5*cj5;
IkReal x3199=((1.0)*r21);
IkReal x3200=(cj5*sj5);
CheckValue<IkReal> x3201=IKPowWithIntegerCheck(IKsign((((r00*r20*x3198))+(((-1.0)*r01*r20*x3200))+((r01*r21))+(((-1.0)*r01*x3198*x3199))+(((-1.0)*r00*x3199*x3200))+((r02*r22)))),-1);
if(!x3201.valid){
continue;
}
CheckValue<IkReal> x3202 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x3199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3201.value)))+(x3202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3203=IKsin(j4);
IkReal x3204=IKcos(j4);
IkReal x3205=((1.0)*sj0);
IkReal x3206=(cj5*r00);
IkReal x3207=(cj5*r10);
IkReal x3208=(cj5*r20);
IkReal x3209=((1.0)*x3203);
IkReal x3210=(sj5*x3203);
IkReal x3211=((1.0)*sj5*x3204);
evalcond[0]=(((r22*x3204))+(((-1.0)*x3208*x3209))+((r21*x3210)));
evalcond[1]=(((r22*x3203))+((x3204*x3208))+(((-1.0)*r21*x3211)));
evalcond[2]=((((-1.0)*x3207*x3209))+cj0+((r12*x3204))+((r11*x3210)));
evalcond[3]=(((r01*x3210))+(((-1.0)*x3205))+(((-1.0)*x3206*x3209))+((r02*x3204)));
evalcond[4]=(((x3204*x3206))+(((-1.0)*r01*x3211))+((r02*x3203))+(((-1.0)*cj0)));
evalcond[5]=(((x3204*x3207))+((r12*x3203))+(((-1.0)*r11*x3211))+(((-1.0)*x3205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3212=((1.0)*sj5);
CheckValue<IkReal> x3213 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3213.valid){
continue;
}
CheckValue<IkReal> x3214=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3212)))),-1);
if(!x3214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3213.value)+(((1.5707963267949)*(x3214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3215=IKsin(j4);
IkReal x3216=IKcos(j4);
IkReal x3217=((1.0)*sj0);
IkReal x3218=(cj5*r00);
IkReal x3219=(cj5*r10);
IkReal x3220=(cj5*r20);
IkReal x3221=((1.0)*x3215);
IkReal x3222=(sj5*x3215);
IkReal x3223=((1.0)*sj5*x3216);
evalcond[0]=(((r22*x3216))+((r21*x3222))+(((-1.0)*x3220*x3221)));
evalcond[1]=(((x3216*x3220))+((r22*x3215))+(((-1.0)*r21*x3223)));
evalcond[2]=(cj0+((r11*x3222))+((r12*x3216))+(((-1.0)*x3219*x3221)));
evalcond[3]=(((r01*x3222))+(((-1.0)*x3217))+(((-1.0)*x3218*x3221))+((r02*x3216)));
evalcond[4]=(((x3216*x3218))+(((-1.0)*r01*x3223))+(((-1.0)*cj0))+((r02*x3215)));
evalcond[5]=(((r12*x3215))+((x3216*x3219))+(((-1.0)*x3217))+(((-1.0)*r11*x3223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3224=((1.0)*sj5);
CheckValue<IkReal> x3225=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x3224)))),-1);
if(!x3225.valid){
continue;
}
CheckValue<IkReal> x3226 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3224))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3225.value)))+(x3226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3227=IKsin(j4);
IkReal x3228=IKcos(j4);
IkReal x3229=((1.0)*sj0);
IkReal x3230=(cj5*r00);
IkReal x3231=(cj5*r10);
IkReal x3232=(cj5*r20);
IkReal x3233=((1.0)*x3227);
IkReal x3234=(sj5*x3227);
IkReal x3235=((1.0)*sj5*x3228);
evalcond[0]=((((-1.0)*x3232*x3233))+((r22*x3228))+((r21*x3234)));
evalcond[1]=((((-1.0)*r21*x3235))+((r22*x3227))+((x3228*x3232)));
evalcond[2]=(((r12*x3228))+cj0+(((-1.0)*x3231*x3233))+((r11*x3234)));
evalcond[3]=(((r02*x3228))+((r01*x3234))+(((-1.0)*x3230*x3233))+(((-1.0)*x3229)));
evalcond[4]=(((r02*x3227))+(((-1.0)*r01*x3235))+((x3228*x3230))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x3227))+(((-1.0)*r11*x3235))+((x3228*x3231))+(((-1.0)*x3229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.29676184833885)*py))+(((-0.704035232842328)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.704035232842328)*py))+(((-2.29676184833885)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.29676184833885)*py))+(((-0.704035232842328)*px))))+IKsqr(((((0.704035232842328)*py))+(((-2.29676184833885)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.29676184833885)*py))+(((-0.704035232842328)*px))), ((((0.704035232842328)*py))+(((-2.29676184833885)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3236=IKcos(j0);
IkReal x3237=IKsin(j0);
evalcond[0]=((((-0.122)*x3237))+(((-1.0)*px))+(((-0.39799847)*x3236)));
evalcond[1]=((((-1.0)*py))+(((-0.39799847)*x3237))+(((0.122)*x3236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3238=((1.0)*sj5);
IkReal x3239=((((-1.0)*r00*x3238))+(((-1.0)*cj5*r01)));
j4eval[0]=x3239;
j4eval[1]=IKsign(x3239);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3238)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3240=cj5*cj5;
IkReal x3241=((1.0)*r21);
IkReal x3242=(cj5*r20);
IkReal x3243=((((-1.0)*r00*r20*x3240))+(((-1.0)*r02*r22))+((r01*r21*x3240))+(((-1.0)*r01*x3241))+((cj5*r00*r21*sj5))+((r01*sj5*x3242)));
j4eval[0]=x3243;
j4eval[1]=IKsign(x3243);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x3241))+((cj0*x3242))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3244=cj5*cj5;
IkReal x3245=(r11*r21);
IkReal x3246=(cj5*r20);
IkReal x3247=(r21*sj5);
IkReal x3248=((((-1.0)*x3245))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3244))+((r11*sj5*x3246))+((cj5*r10*x3247))+((x3244*x3245)));
j4eval[0]=x3248;
j4eval[1]=IKsign(x3248);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x3247))+((sj0*x3246))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3249=cj5*cj5;
IkReal x3250=(r11*r21);
IkReal x3251=(cj5*r20);
IkReal x3252=(r21*sj5);
CheckValue<IkReal> x3253=IKPowWithIntegerCheck(IKsign((((x3249*x3250))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3249))+(((-1.0)*x3250))+((r11*sj5*x3251))+((cj5*r10*x3252)))),-1);
if(!x3253.valid){
continue;
}
CheckValue<IkReal> x3254 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x3252))+((sj0*x3251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3253.value)))+(x3254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3255=IKsin(j4);
IkReal x3256=IKcos(j4);
IkReal x3257=(cj5*r00);
IkReal x3258=(cj5*r10);
IkReal x3259=(cj5*r20);
IkReal x3260=((1.0)*x3255);
IkReal x3261=(sj5*x3255);
IkReal x3262=((1.0)*sj5*x3256);
evalcond[0]=(((r21*x3261))+((r22*x3256))+(((-1.0)*x3259*x3260)));
evalcond[1]=((((-1.0)*r21*x3262))+((x3256*x3259))+((r22*x3255)));
evalcond[2]=(((r12*x3256))+cj0+((r11*x3261))+(((-1.0)*x3258*x3260)));
evalcond[3]=(cj0+((r02*x3255))+(((-1.0)*r01*x3262))+((x3256*x3257)));
evalcond[4]=(((r12*x3255))+(((-1.0)*r11*x3262))+sj0+((x3256*x3258)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3257*x3260))+((r01*x3261))+((r02*x3256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3263=cj5*cj5;
IkReal x3264=((1.0)*r21);
IkReal x3265=(cj5*r20);
CheckValue<IkReal> x3266=IKPowWithIntegerCheck(IKsign((((r01*sj5*x3265))+(((-1.0)*r02*r22))+((r01*r21*x3263))+(((-1.0)*r01*x3264))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x3263)))),-1);
if(!x3266.valid){
continue;
}
CheckValue<IkReal> x3267 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3264))+((cj0*x3265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3266.value)))+(x3267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3268=IKsin(j4);
IkReal x3269=IKcos(j4);
IkReal x3270=(cj5*r00);
IkReal x3271=(cj5*r10);
IkReal x3272=(cj5*r20);
IkReal x3273=((1.0)*x3268);
IkReal x3274=(sj5*x3268);
IkReal x3275=((1.0)*sj5*x3269);
evalcond[0]=((((-1.0)*x3272*x3273))+((r21*x3274))+((r22*x3269)));
evalcond[1]=((((-1.0)*r21*x3275))+((x3269*x3272))+((r22*x3268)));
evalcond[2]=(cj0+((r11*x3274))+((r12*x3269))+(((-1.0)*x3271*x3273)));
evalcond[3]=(cj0+(((-1.0)*r01*x3275))+((r02*x3268))+((x3269*x3270)));
evalcond[4]=(sj0+(((-1.0)*r11*x3275))+((r12*x3268))+((x3269*x3271)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3274))+((r02*x3269))+(((-1.0)*x3270*x3273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3276=((1.0)*sj5);
CheckValue<IkReal> x3277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3276))+(((-1.0)*cj5*r01)))),-1);
if(!x3277.valid){
continue;
}
CheckValue<IkReal> x3278 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3276))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3277.value)))+(x3278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3279=IKsin(j4);
IkReal x3280=IKcos(j4);
IkReal x3281=(cj5*r00);
IkReal x3282=(cj5*r10);
IkReal x3283=(cj5*r20);
IkReal x3284=((1.0)*x3279);
IkReal x3285=(sj5*x3279);
IkReal x3286=((1.0)*sj5*x3280);
evalcond[0]=((((-1.0)*x3283*x3284))+((r22*x3280))+((r21*x3285)));
evalcond[1]=((((-1.0)*r21*x3286))+((x3280*x3283))+((r22*x3279)));
evalcond[2]=(cj0+(((-1.0)*x3282*x3284))+((r11*x3285))+((r12*x3280)));
evalcond[3]=(cj0+((x3280*x3281))+(((-1.0)*r01*x3286))+((r02*x3279)));
evalcond[4]=(sj0+((x3280*x3282))+((r12*x3279))+(((-1.0)*r11*x3286)));
evalcond[5]=((((-1.0)*sj0))+((r02*x3280))+(((-1.0)*x3281*x3284))+((r01*x3285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3287=((199.0)*sj1);
IkReal x3288=((49.0)*cj1);
IkReal x3289=(cj5*r01);
IkReal x3290=(cj2*sj1);
IkReal x3291=(cj1*sj2);
IkReal x3292=((500.0)*px);
IkReal x3293=(r00*sj5);
IkReal x3294=((209.0)*cj1);
IkReal x3295=((0.000765)*sj1);
IkReal x3296=(sj2*x3293);
IkReal x3297=((199.0)*cj1*cj2);
CheckValue<IkReal> x3298=IKPowWithIntegerCheck(((((-61.0)*x3291))+(((-61.0)*x3290))),-1);
if(!x3298.valid){
continue;
}
CheckValue<IkReal> x3299=IKPowWithIntegerCheck(((((-1.0)*x3290))+(((-1.0)*x3291))),-1);
if(!x3299.valid){
continue;
}
if( IKabs(((x3298.value)*((((x3287*x3296))+((x3293*x3295))+((x3289*x3295))+((sj2*x3287*x3289))+((x3291*x3292))+(((-49.0)*x3290*x3293))+((x3290*x3292))+(((-1.0)*x3293*x3297))+(((-1.0)*x3293*x3294))+(((-1.0)*sj2*x3288*x3289))+(((-49.0)*x3289*x3290))+(((-1.0)*x3288*x3296))+(((-1.0)*x3289*x3294))+(((-1.0)*x3289*x3297)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3299.value)*(((((-1.0)*x3293))+(((-1.0)*x3289)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3298.value)*((((x3287*x3296))+((x3293*x3295))+((x3289*x3295))+((sj2*x3287*x3289))+((x3291*x3292))+(((-49.0)*x3290*x3293))+((x3290*x3292))+(((-1.0)*x3293*x3297))+(((-1.0)*x3293*x3294))+(((-1.0)*sj2*x3288*x3289))+(((-49.0)*x3289*x3290))+(((-1.0)*x3288*x3296))+(((-1.0)*x3289*x3294))+(((-1.0)*x3289*x3297))))))+IKsqr(((x3299.value)*(((((-1.0)*x3293))+(((-1.0)*x3289))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3298.value)*((((x3287*x3296))+((x3293*x3295))+((x3289*x3295))+((sj2*x3287*x3289))+((x3291*x3292))+(((-49.0)*x3290*x3293))+((x3290*x3292))+(((-1.0)*x3293*x3297))+(((-1.0)*x3293*x3294))+(((-1.0)*sj2*x3288*x3289))+(((-49.0)*x3289*x3290))+(((-1.0)*x3288*x3296))+(((-1.0)*x3289*x3294))+(((-1.0)*x3289*x3297))))), ((x3299.value)*(((((-1.0)*x3293))+(((-1.0)*x3289))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3300=IKcos(j0);
IkReal x3301=IKsin(j0);
IkReal x3302=(cj5*r01);
IkReal x3303=((1.0)*cj1);
IkReal x3304=((0.098)*sj5);
IkReal x3305=((0.398)*cj2);
IkReal x3306=((0.398)*sj1);
IkReal x3307=((1.0)*cj2);
IkReal x3308=(cj5*r11);
IkReal x3309=(sj2*x3300);
IkReal x3310=(cj1*x3301);
IkReal x3311=(sj1*x3300);
IkReal x3312=(sj2*x3301);
IkReal x3313=(sj1*x3301);
IkReal x3314=(cj1*x3300);
evalcond[0]=(((r00*sj5))+x3302+(((-1.0)*x3307*x3311))+(((-1.0)*x3303*x3309)));
evalcond[1]=(((r10*sj5))+x3308+(((-1.0)*x3303*x3312))+(((-1.0)*x3307*x3313)));
evalcond[2]=((((0.098)*x3302))+(((0.418)*x3314))+(((-1.0)*px))+(((-1.53e-6)*x3311))+(((-0.122)*x3301))+(((-1.0)*x3306*x3309))+((r00*x3304))+((x3305*x3314)));
evalcond[3]=((((0.098)*x3308))+(((0.418)*x3310))+((r10*x3304))+(((0.122)*x3300))+(((-1.0)*py))+(((-1.0)*x3306*x3312))+(((-1.53e-6)*x3313))+((x3305*x3310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3315=((1.0)*sj5);
IkReal x3316=((((-1.0)*r00*x3315))+(((-1.0)*cj5*r01)));
j4eval[0]=x3316;
j4eval[1]=IKsign(x3316);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x3315))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3317=((1.0)*sj5);
IkReal x3318=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3317)));
j4eval[0]=x3318;
j4eval[1]=IKsign(x3318);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3317)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3319=((1.0)*sj0);
IkReal x3320=((1.0)*cj0);
IkReal x3321=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3321;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x3320))+(((-1.0)*cj5*r10*x3319))+((cj0*r01*sj5)))))+(IKabs(((((-1.0)*r02*x3320))+(((-1.0)*r12*x3319))))));
j4eval[2]=IKsign(x3321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3322=((-1.0)*r20);
IkReal x3324 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3324)==0){
continue;
}
IkReal x3323=pow(x3324,-0.5);
CheckValue<IkReal> x3325 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3322),IKFAST_ATAN2_MAGTHRESH);
if(!x3325.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3325.value));
IkReal gconst97=(r21*x3323);
IkReal gconst98=(x3322*x3323);
CheckValue<IkReal> x3326 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3326.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3326.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3327=((-1.0)*r20);
IkReal x3328=x3323;
CheckValue<IkReal> x3330 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3327),IKFAST_ATAN2_MAGTHRESH);
if(!x3330.valid){
continue;
}
IkReal x3329=((-1.0)*(x3330.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3329;
IkReal gconst96=x3329;
IkReal gconst97=(r21*x3328);
IkReal gconst98=(x3327*x3328);
IkReal x3331=r22*r22;
IkReal x3332=((1.0)*x3331);
CheckValue<IkReal> x3336=IKPowWithIntegerCheck(((-1.0)+x3331),-1);
if(!x3336.valid){
continue;
}
IkReal x3333=x3336.value;
if((((1.0)+(((-1.0)*x3332)))) < -0.00001)
continue;
IkReal x3334=IKsqrt(((1.0)+(((-1.0)*x3332))));
IkReal x3335=(cj0*x3333*x3334);
j4eval[0]=((IKabs((x3335+(((-1.0)*x3332*x3335)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3337=((-1.0)*r20);
IkReal x3338=x3323;
CheckValue<IkReal> x3340 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3337),IKFAST_ATAN2_MAGTHRESH);
if(!x3340.valid){
continue;
}
IkReal x3339=((-1.0)*(x3340.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3339;
IkReal gconst96=x3339;
IkReal gconst97=(r21*x3338);
IkReal gconst98=(x3337*x3338);
IkReal x3341=r22*r22;
IkReal x3342=((1.0)*x3341);
CheckValue<IkReal> x3346=IKPowWithIntegerCheck(((-1.0)+x3341),-1);
if(!x3346.valid){
continue;
}
IkReal x3343=x3346.value;
if((((1.0)+(((-1.0)*x3342)))) < -0.00001)
continue;
IkReal x3344=IKsqrt(((1.0)+(((-1.0)*x3342))));
IkReal x3345=(sj0*x3343*x3344);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3345+(((-1.0)*x3342*x3345))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3347=((-1.0)*r20);
IkReal x3348=x3323;
CheckValue<IkReal> x3350 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3347),IKFAST_ATAN2_MAGTHRESH);
if(!x3350.valid){
continue;
}
IkReal x3349=((-1.0)*(x3350.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3349;
IkReal gconst96=x3349;
IkReal gconst97=(r21*x3348);
IkReal gconst98=(x3347*x3348);
IkReal x3351=((1.0)*(r22*r22));
CheckValue<IkReal> x3355=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3351))),-1);
if(!x3355.valid){
continue;
}
IkReal x3352=x3355.value;
IkReal x3353=((1.0)*x3352);
IkReal x3354=((((-2.0)*x3352*(r20*r20)*(r21*r21)))+(((-1.0)*x3351))+(((-1.0)*x3353*(r20*r20*r20*r20)))+(((-1.0)*x3353*(r21*r21*r21*r21))));
j4eval[0]=x3354;
j4eval[1]=IKsign(x3354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3356=(cj2*sj1);
IkReal x3357=(gconst98*r20);
IkReal x3358=(cj1*sj2);
IkReal x3359=((1.0)*gconst97*r21);
CheckValue<IkReal> x3360 = IKatan2WithCheck(IkReal((((r22*x3356))+((r22*x3358)))),IkReal(((((-1.0)*x3358*x3359))+(((-1.0)*x3356*x3359))+((x3356*x3357))+((x3357*x3358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3360.valid){
continue;
}
CheckValue<IkReal> x3361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r21*x3359))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3357*x3357)))+(((2.0)*gconst97*r21*x3357)))),-1);
if(!x3361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3360.value)+(((1.5707963267949)*(x3361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3362=IKsin(j4);
IkReal x3363=IKcos(j4);
IkReal x3364=(sj1*sj2);
IkReal x3365=(gconst98*x3363);
IkReal x3366=((1.0)*cj1*cj2);
IkReal x3367=(gconst97*x3362);
IkReal x3368=((1.0)*gconst98*x3362);
IkReal x3369=((1.0)*gconst97*x3363);
evalcond[0]=(((r22*x3363))+((r21*x3367))+(((-1.0)*r20*x3368)));
evalcond[1]=((((-1.0)*r10*x3368))+cj0+((r12*x3363))+((r11*x3367)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3363))+((r01*x3367))+(((-1.0)*r00*x3368)));
evalcond[3]=(((cj2*sj1))+((r22*x3362))+((cj1*sj2))+(((-1.0)*r21*x3369))+((r20*x3365)));
evalcond[4]=(((cj0*x3364))+((r02*x3362))+(((-1.0)*cj0*x3366))+(((-1.0)*r01*x3369))+((r00*x3365)));
evalcond[5]=(((r10*x3365))+(((-1.0)*sj0*x3366))+((r12*x3362))+((sj0*x3364))+(((-1.0)*r11*x3369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3370=((1.0)*gconst97);
CheckValue<IkReal> x3371 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3370))+((gconst98*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3371.valid){
continue;
}
CheckValue<IkReal> x3372=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3370))+(((-1.0)*gconst98*r11)))),-1);
if(!x3372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3371.value)+(((1.5707963267949)*(x3372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3373=IKsin(j4);
IkReal x3374=IKcos(j4);
IkReal x3375=(sj1*sj2);
IkReal x3376=(gconst98*x3374);
IkReal x3377=((1.0)*cj1*cj2);
IkReal x3378=(gconst97*x3373);
IkReal x3379=((1.0)*gconst98*x3373);
IkReal x3380=((1.0)*gconst97*x3374);
evalcond[0]=(((r22*x3374))+(((-1.0)*r20*x3379))+((r21*x3378)));
evalcond[1]=(((r12*x3374))+(((-1.0)*r10*x3379))+cj0+((r11*x3378)));
evalcond[2]=(((r01*x3378))+(((-1.0)*sj0))+((r02*x3374))+(((-1.0)*r00*x3379)));
evalcond[3]=(((cj2*sj1))+((r22*x3373))+((cj1*sj2))+(((-1.0)*r21*x3380))+((r20*x3376)));
evalcond[4]=(((cj0*x3375))+((r02*x3373))+(((-1.0)*cj0*x3377))+(((-1.0)*r01*x3380))+((r00*x3376)));
evalcond[5]=(((r12*x3373))+((r10*x3376))+((sj0*x3375))+(((-1.0)*r11*x3380))+(((-1.0)*sj0*x3377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3381=((1.0)*gconst97);
CheckValue<IkReal> x3382 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3381))+((cj0*gconst98*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3382.valid){
continue;
}
CheckValue<IkReal> x3383=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3381))+(((-1.0)*gconst98*r01)))),-1);
if(!x3383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3382.value)+(((1.5707963267949)*(x3383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3384=IKsin(j4);
IkReal x3385=IKcos(j4);
IkReal x3386=(sj1*sj2);
IkReal x3387=(gconst98*x3385);
IkReal x3388=((1.0)*cj1*cj2);
IkReal x3389=(gconst97*x3384);
IkReal x3390=((1.0)*gconst98*x3384);
IkReal x3391=((1.0)*gconst97*x3385);
evalcond[0]=(((r21*x3389))+((r22*x3385))+(((-1.0)*r20*x3390)));
evalcond[1]=(cj0+(((-1.0)*r10*x3390))+((r12*x3385))+((r11*x3389)));
evalcond[2]=(((r01*x3389))+(((-1.0)*sj0))+((r02*x3385))+(((-1.0)*r00*x3390)));
evalcond[3]=(((cj2*sj1))+((r20*x3387))+((cj1*sj2))+((r22*x3384))+(((-1.0)*r21*x3391)));
evalcond[4]=((((-1.0)*r01*x3391))+((cj0*x3386))+(((-1.0)*cj0*x3388))+((r02*x3384))+((r00*x3387)));
evalcond[5]=(((sj0*x3386))+((r10*x3387))+(((-1.0)*sj0*x3388))+((r12*x3384))+(((-1.0)*r11*x3391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3392=((-1.0)*r21);
IkReal x3394 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3394)==0){
continue;
}
IkReal x3393=pow(x3394,-0.5);
CheckValue<IkReal> x3395 = IKatan2WithCheck(IkReal(x3392),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3395.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3395.value))));
IkReal gconst100=(x3392*x3393);
IkReal gconst101=((1.0)*r20*x3393);
CheckValue<IkReal> x3396 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3396.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3396.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3397=((-1.0)*r21);
CheckValue<IkReal> x3400 = IKatan2WithCheck(IkReal(x3397),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3400.valid){
continue;
}
IkReal x3398=((1.0)*(x3400.value));
IkReal x3399=x3393;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3398)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3398)));
IkReal gconst100=(x3397*x3399);
IkReal gconst101=((1.0)*r20*x3399);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3401=((-1.0)*r21);
CheckValue<IkReal> x3404 = IKatan2WithCheck(IkReal(x3401),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
IkReal x3402=((1.0)*(x3404.value));
IkReal x3403=x3393;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3402)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3402)));
IkReal gconst100=(x3401*x3403);
IkReal gconst101=((1.0)*r20*x3403);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3405=((-1.0)*r21);
CheckValue<IkReal> x3408 = IKatan2WithCheck(IkReal(x3405),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3408.valid){
continue;
}
IkReal x3406=((1.0)*(x3408.value));
IkReal x3407=x3393;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3406)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3406)));
IkReal gconst100=(x3405*x3407);
IkReal gconst101=((1.0)*r20*x3407);
IkReal x3409=r22*r22;
IkReal x3410=((1.0)*r12*sj0);
IkReal x3411=((1.0)*cj0*r02);
CheckValue<IkReal> x3415=IKPowWithIntegerCheck(((-1.0)+x3409),-1);
if(!x3415.valid){
continue;
}
IkReal x3412=x3415.value;
if((((1.0)+(((-1.0)*x3409)))) < -0.00001)
continue;
IkReal x3413=IKsqrt(((1.0)+(((-1.0)*x3409))));
IkReal x3414=(r22*x3412*x3413);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3411*x3414))+(((-1.0)*x3410*x3414)))))+(IKabs(((((-1.0)*x3411))+(((-1.0)*x3410))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3416=((1.0)*sj0);
IkReal x3417=((1.0)*cj0);
CheckValue<IkReal> x3418=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*gconst101*r21)))),-1);
if(!x3418.valid){
continue;
}
CheckValue<IkReal> x3419 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3417))+(((-1.0)*r12*x3416)))),IkReal(((((-1.0)*gconst101*r00*x3417))+((cj0*gconst100*r01))+(((-1.0)*gconst101*r10*x3416))+((gconst100*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3418.value)))+(x3419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3420=IKsin(j4);
IkReal x3421=IKcos(j4);
IkReal x3422=(sj1*sj2);
IkReal x3423=((1.0)*cj1*cj2);
IkReal x3424=(gconst100*x3420);
IkReal x3425=(gconst101*x3421);
IkReal x3426=((1.0)*gconst101*x3420);
IkReal x3427=((1.0)*gconst100*x3421);
evalcond[0]=(((r21*x3424))+(((-1.0)*r20*x3426))+((r22*x3421)));
evalcond[1]=((((-1.0)*r10*x3426))+cj0+((r12*x3421))+((r11*x3424)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x3426))+((r02*x3421))+((r01*x3424)));
evalcond[3]=(((cj2*sj1))+((r20*x3425))+((cj1*sj2))+(((-1.0)*r21*x3427))+((r22*x3420)));
evalcond[4]=(((r00*x3425))+(((-1.0)*cj0*x3423))+(((-1.0)*r01*x3427))+((r02*x3420))+((cj0*x3422)));
evalcond[5]=((((-1.0)*r11*x3427))+((r10*x3425))+(((-1.0)*sj0*x3423))+((sj0*x3422))+((r12*x3420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3428=((1.0)*gconst100);
CheckValue<IkReal> x3429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3428))+(((-1.0)*gconst101*r11)))),-1);
if(!x3429.valid){
continue;
}
CheckValue<IkReal> x3430 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3428))+((gconst101*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3429.value)))+(x3430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3431=IKsin(j4);
IkReal x3432=IKcos(j4);
IkReal x3433=(sj1*sj2);
IkReal x3434=((1.0)*cj1*cj2);
IkReal x3435=(gconst100*x3431);
IkReal x3436=(gconst101*x3432);
IkReal x3437=((1.0)*gconst101*x3431);
IkReal x3438=((1.0)*gconst100*x3432);
evalcond[0]=((((-1.0)*r20*x3437))+((r21*x3435))+((r22*x3432)));
evalcond[1]=(cj0+(((-1.0)*r10*x3437))+((r12*x3432))+((r11*x3435)));
evalcond[2]=(((r01*x3435))+(((-1.0)*sj0))+(((-1.0)*r00*x3437))+((r02*x3432)));
evalcond[3]=(((cj2*sj1))+((r20*x3436))+((cj1*sj2))+((r22*x3431))+(((-1.0)*r21*x3438)));
evalcond[4]=(((cj0*x3433))+(((-1.0)*cj0*x3434))+(((-1.0)*r01*x3438))+((r02*x3431))+((r00*x3436)));
evalcond[5]=(((r10*x3436))+(((-1.0)*r11*x3438))+(((-1.0)*sj0*x3434))+((sj0*x3433))+((r12*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3439=((1.0)*gconst100);
CheckValue<IkReal> x3440 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3439))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3440.valid){
continue;
}
CheckValue<IkReal> x3441=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3439))+(((-1.0)*gconst101*r01)))),-1);
if(!x3441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3440.value)+(((1.5707963267949)*(x3441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3442=IKsin(j4);
IkReal x3443=IKcos(j4);
IkReal x3444=(sj1*sj2);
IkReal x3445=((1.0)*cj1*cj2);
IkReal x3446=(gconst100*x3442);
IkReal x3447=(gconst101*x3443);
IkReal x3448=((1.0)*gconst101*x3442);
IkReal x3449=((1.0)*gconst100*x3443);
evalcond[0]=(((r21*x3446))+((r22*x3443))+(((-1.0)*r20*x3448)));
evalcond[1]=(((r11*x3446))+((r12*x3443))+cj0+(((-1.0)*r10*x3448)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3443))+((r01*x3446))+(((-1.0)*r00*x3448)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x3442))+(((-1.0)*r21*x3449))+((r20*x3447)));
evalcond[4]=((((-1.0)*cj0*x3445))+((r02*x3442))+((cj0*x3444))+((r00*x3447))+(((-1.0)*r01*x3449)));
evalcond[5]=(((r10*x3447))+((sj0*x3444))+((r12*x3442))+(((-1.0)*sj0*x3445))+(((-1.0)*r11*x3449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3450=((-1.0)*r10);
IkReal x3452 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3452)==0){
continue;
}
IkReal x3451=pow(x3452,-0.5);
CheckValue<IkReal> x3453 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3450),IKFAST_ATAN2_MAGTHRESH);
if(!x3453.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3453.value));
IkReal gconst103=(r11*x3451);
IkReal gconst104=(x3450*x3451);
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3454.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3455=((-1.0)*r10);
IkReal x3456=x3451;
CheckValue<IkReal> x3458 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3455),IKFAST_ATAN2_MAGTHRESH);
if(!x3458.valid){
continue;
}
IkReal x3457=((-1.0)*(x3458.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3457;
IkReal gconst102=x3457;
IkReal gconst103=(r11*x3456);
IkReal gconst104=(x3455*x3456);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3459=((-1.0)*r10);
IkReal x3460=x3451;
CheckValue<IkReal> x3462 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3459),IKFAST_ATAN2_MAGTHRESH);
if(!x3462.valid){
continue;
}
IkReal x3461=((-1.0)*(x3462.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3461;
IkReal gconst102=x3461;
IkReal gconst103=(r11*x3460);
IkReal gconst104=(x3459*x3460);
IkReal x3463=r12*r12;
IkReal x3464=((1.0)*sj0);
IkReal x3465=(cj0*r02);
IkReal x3466=x3451;
j4eval[0]=((IKabs(((((-1.0)*r12*x3464))+(((-1.0)*x3465)))))+(IKabs((((sj0*x3463*x3466))+(((-1.0)*x3464*x3466))+((r12*x3465*x3466))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3467=((-1.0)*r10);
IkReal x3468=x3451;
CheckValue<IkReal> x3470 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3467),IKFAST_ATAN2_MAGTHRESH);
if(!x3470.valid){
continue;
}
IkReal x3469=((-1.0)*(x3470.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3469;
IkReal gconst102=x3469;
IkReal gconst103=(r11*x3468);
IkReal gconst104=(x3467*x3468);
IkReal x3471=r12*r12;
IkReal x3472=((1.0)+(((-1.0)*x3471)));
IkReal x3473=(cj2*r22*sj1);
IkReal x3474=(cj1*r22*sj2);
CheckValue<IkReal> x3481=IKPowWithIntegerCheck(x3472,-1);
if(!x3481.valid){
continue;
}
IkReal x3475=x3481.value;
CheckValue<IkReal> x3482=IKPowWithIntegerCheck(((-1.0)+x3471),-1);
if(!x3482.valid){
continue;
}
IkReal x3476=x3482.value;
IkReal x3477=((1.0)*x3475);
if((x3472) < -0.00001)
continue;
IkReal x3478=IKsqrt(x3472);
IkReal x3479=((1.0)*r12*x3476*x3478);
IkReal x3480=((((-1.0)*x3477*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x3475))+(((-1.0)*x3477*(r10*r10)*(r20*r20))));
j4eval[0]=x3480;
j4eval[1]=IKsign(x3480);
j4eval[2]=((IKabs((x3474+x3473)))+(IKabs(((((-1.0)*x3473*x3479))+(((-1.0)*x3474*x3479))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3483=(cj2*sj1);
IkReal x3484=(gconst103*r21);
IkReal x3485=(gconst104*r20);
IkReal x3486=(cj1*sj2);
CheckValue<IkReal> x3487=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3484*x3484)))+(((2.0)*x3484*x3485))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3485*x3485))))),-1);
if(!x3487.valid){
continue;
}
CheckValue<IkReal> x3488 = IKatan2WithCheck(IkReal((((r22*x3483))+((r22*x3486)))),IkReal(((((-1.0)*x3483*x3484))+((x3483*x3485))+(((-1.0)*x3484*x3486))+((x3485*x3486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3487.value)))+(x3488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3489=IKsin(j4);
IkReal x3490=IKcos(j4);
IkReal x3491=(gconst103*r11);
IkReal x3492=(sj1*sj2);
IkReal x3493=(gconst103*r01);
IkReal x3494=(gconst103*r21);
IkReal x3495=(gconst104*x3490);
IkReal x3496=((1.0)*cj1*cj2);
IkReal x3497=((1.0)*x3490);
IkReal x3498=((1.0)*gconst104*x3489);
evalcond[0]=(((r22*x3490))+((x3489*x3494))+(((-1.0)*r20*x3498)));
evalcond[1]=(cj0+(((-1.0)*r10*x3498))+((r12*x3490))+((x3489*x3491)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3490))+(((-1.0)*r00*x3498))+((x3489*x3493)));
evalcond[3]=(((r20*x3495))+((cj2*sj1))+(((-1.0)*x3494*x3497))+((cj1*sj2))+((r22*x3489)));
evalcond[4]=(((cj0*x3492))+((r00*x3495))+(((-1.0)*cj0*x3496))+(((-1.0)*x3493*x3497))+((r02*x3489)));
evalcond[5]=(((r10*x3495))+(((-1.0)*sj0*x3496))+((r12*x3489))+((sj0*x3492))+(((-1.0)*x3491*x3497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3499=((1.0)*sj0);
IkReal x3500=((1.0)*cj0);
CheckValue<IkReal> x3501=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*gconst104*r21)))),-1);
if(!x3501.valid){
continue;
}
CheckValue<IkReal> x3502 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3499))+(((-1.0)*r02*x3500)))),IkReal(((((-1.0)*gconst104*r10*x3499))+((cj0*gconst103*r01))+(((-1.0)*gconst104*r00*x3500))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3501.value)))+(x3502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3503=IKsin(j4);
IkReal x3504=IKcos(j4);
IkReal x3505=(gconst103*r11);
IkReal x3506=(sj1*sj2);
IkReal x3507=(gconst103*r01);
IkReal x3508=(gconst103*r21);
IkReal x3509=(gconst104*x3504);
IkReal x3510=((1.0)*cj1*cj2);
IkReal x3511=((1.0)*x3504);
IkReal x3512=((1.0)*gconst104*x3503);
evalcond[0]=(((r22*x3504))+((x3503*x3508))+(((-1.0)*r20*x3512)));
evalcond[1]=(cj0+(((-1.0)*r10*x3512))+((r12*x3504))+((x3503*x3505)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3504))+(((-1.0)*r00*x3512))+((x3503*x3507)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x3509))+(((-1.0)*x3508*x3511))+((r22*x3503)));
evalcond[4]=(((cj0*x3506))+((r00*x3509))+(((-1.0)*cj0*x3510))+((r02*x3503))+(((-1.0)*x3507*x3511)));
evalcond[5]=(((r10*x3509))+(((-1.0)*sj0*x3510))+((r12*x3503))+((sj0*x3506))+(((-1.0)*x3505*x3511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3513=((1.0)*gconst103);
CheckValue<IkReal> x3514 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x3513))+((cj0*gconst104*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3514.valid){
continue;
}
CheckValue<IkReal> x3515=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r01))+(((-1.0)*r00*x3513)))),-1);
if(!x3515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3514.value)+(((1.5707963267949)*(x3515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3516=IKsin(j4);
IkReal x3517=IKcos(j4);
IkReal x3518=(gconst103*r11);
IkReal x3519=(sj1*sj2);
IkReal x3520=(gconst103*r01);
IkReal x3521=(gconst103*r21);
IkReal x3522=(gconst104*x3517);
IkReal x3523=((1.0)*cj1*cj2);
IkReal x3524=((1.0)*x3517);
IkReal x3525=((1.0)*gconst104*x3516);
evalcond[0]=((((-1.0)*r20*x3525))+((r22*x3517))+((x3516*x3521)));
evalcond[1]=(cj0+(((-1.0)*r10*x3525))+((r12*x3517))+((x3516*x3518)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3517))+(((-1.0)*r00*x3525))+((x3516*x3520)));
evalcond[3]=(((cj2*sj1))+((r20*x3522))+((cj1*sj2))+(((-1.0)*x3521*x3524))+((r22*x3516)));
evalcond[4]=(((r00*x3522))+((cj0*x3519))+((r02*x3516))+(((-1.0)*cj0*x3523))+(((-1.0)*x3520*x3524)));
evalcond[5]=(((r10*x3522))+(((-1.0)*sj0*x3523))+((r12*x3516))+((sj0*x3519))+(((-1.0)*x3518*x3524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3526=((-1.0)*r11);
IkReal x3528 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3528)==0){
continue;
}
IkReal x3527=pow(x3528,-0.5);
CheckValue<IkReal> x3529 = IKatan2WithCheck(IkReal(x3526),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3529.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3529.value))));
IkReal gconst106=(x3526*x3527);
IkReal gconst107=((1.0)*r10*x3527);
CheckValue<IkReal> x3530 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3530.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3530.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3531=((-1.0)*r11);
CheckValue<IkReal> x3534 = IKatan2WithCheck(IkReal(x3531),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3534.valid){
continue;
}
IkReal x3532=((1.0)*(x3534.value));
IkReal x3533=x3527;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3532)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3532)));
IkReal gconst106=(x3531*x3533);
IkReal gconst107=((1.0)*r10*x3533);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3535=((1.0)*sj0);
IkReal x3536=((1.0)*gconst107);
CheckValue<IkReal> x3537 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3535))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst106*r01))+(((-1.0)*cj0*r00*x3536))+((gconst106*r11*sj0))+(((-1.0)*gconst107*r10*x3535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3537.valid){
continue;
}
CheckValue<IkReal> x3538=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3536))+(((-1.0)*gconst106*r20)))),-1);
if(!x3538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3537.value)+(((1.5707963267949)*(x3538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3539=IKsin(j4);
IkReal x3540=IKcos(j4);
IkReal x3541=(sj1*sj2);
IkReal x3542=((1.0)*cj1*cj2);
IkReal x3543=(gconst106*x3539);
IkReal x3544=(gconst107*x3540);
IkReal x3545=((1.0)*gconst107*x3539);
IkReal x3546=((1.0)*gconst106*x3540);
evalcond[0]=((((-1.0)*r20*x3545))+((r21*x3543))+((r22*x3540)));
evalcond[1]=(cj0+(((-1.0)*r10*x3545))+((r12*x3540))+((r11*x3543)));
evalcond[2]=(((r02*x3540))+(((-1.0)*sj0))+(((-1.0)*r00*x3545))+((r01*x3543)));
evalcond[3]=(((cj2*sj1))+((r20*x3544))+(((-1.0)*r21*x3546))+((r22*x3539))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x3542))+((r02*x3539))+((r00*x3544))+(((-1.0)*r01*x3546))+((cj0*x3541)));
evalcond[5]=(((r12*x3539))+((sj0*x3541))+(((-1.0)*sj0*x3542))+(((-1.0)*r11*x3546))+((r10*x3544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3547=((1.0)*gconst106);
CheckValue<IkReal> x3548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3547))+(((-1.0)*gconst107*r01)))),-1);
if(!x3548.valid){
continue;
}
CheckValue<IkReal> x3549 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x3547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3548.value)))+(x3549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3550=IKsin(j4);
IkReal x3551=IKcos(j4);
IkReal x3552=(sj1*sj2);
IkReal x3553=((1.0)*cj1*cj2);
IkReal x3554=(gconst106*x3550);
IkReal x3555=(gconst107*x3551);
IkReal x3556=((1.0)*gconst107*x3550);
IkReal x3557=((1.0)*gconst106*x3551);
evalcond[0]=((((-1.0)*r20*x3556))+((r21*x3554))+((r22*x3551)));
evalcond[1]=(cj0+(((-1.0)*r10*x3556))+((r12*x3551))+((r11*x3554)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3554))+(((-1.0)*r00*x3556))+((r02*x3551)));
evalcond[3]=(((cj2*sj1))+((r20*x3555))+(((-1.0)*r21*x3557))+((cj1*sj2))+((r22*x3550)));
evalcond[4]=((((-1.0)*r01*x3557))+((r00*x3555))+((cj0*x3552))+((r02*x3550))+(((-1.0)*cj0*x3553)));
evalcond[5]=(((sj0*x3552))+(((-1.0)*sj0*x3553))+((r12*x3550))+(((-1.0)*r11*x3557))+((r10*x3555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3558=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3558;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3559=((1.0)*sj5);
IkReal x3560=((((-1.0)*r00*x3559))+(((-1.0)*cj5*r01)));
j4eval[0]=x3560;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x3559))))));
j4eval[2]=IKsign(x3560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3561=cj5*cj5;
IkReal x3562=r11*r11;
IkReal x3563=(r11*sj5);
IkReal x3564=(cj5*r10);
IkReal x3565=((r12*r12)+x3562+(((-1.0)*x3561*x3562))+((x3561*(r10*r10)))+(((-2.0)*x3563*x3564)));
j4eval[0]=x3565;
j4eval[1]=IKsign(x3565);
j4eval[2]=((IKabs(r12))+(IKabs((x3564+(((-1.0)*x3563))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3566=cj5*cj5;
IkReal x3567=r11*r11;
IkReal x3568=(cj5*r10);
IkReal x3569=(r11*sj5);
CheckValue<IkReal> x3570 = IKatan2WithCheck(IkReal((x3568+(((-1.0)*x3569)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3570.valid){
continue;
}
CheckValue<IkReal> x3571=IKPowWithIntegerCheck(IKsign(((r12*r12)+x3567+((x3566*(r10*r10)))+(((-1.0)*x3566*x3567))+(((-2.0)*x3568*x3569)))),-1);
if(!x3571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3570.value)+(((1.5707963267949)*(x3571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3572=IKsin(j4);
IkReal x3573=IKcos(j4);
IkReal x3574=(cj5*r10);
IkReal x3575=(cj5*r00);
IkReal x3576=(cj5*r20);
IkReal x3577=((1.0)*x3572);
IkReal x3578=(sj5*x3572);
IkReal x3579=((1.0)*sj5*x3573);
evalcond[0]=(((r21*x3578))+(((-1.0)*x3576*x3577))+((r22*x3573)));
evalcond[1]=(((r01*x3578))+(((-1.0)*x3575*x3577))+((r02*x3573)));
evalcond[2]=((((-1.0)*r11*x3579))+((x3573*x3574))+((r12*x3572)));
evalcond[3]=((1.0)+((r12*x3573))+((r11*x3578))+(((-1.0)*x3574*x3577)));
evalcond[4]=(((cj2*sj1))+((x3573*x3576))+((cj1*sj2))+((r22*x3572))+(((-1.0)*r21*x3579)));
evalcond[5]=(((x3573*x3575))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x3579))+((r02*x3572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3580=((1.0)*sj5);
CheckValue<IkReal> x3581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3580))+(((-1.0)*cj5*r01)))),-1);
if(!x3581.valid){
continue;
}
CheckValue<IkReal> x3582 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x3580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3581.value)))+(x3582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3583=IKsin(j4);
IkReal x3584=IKcos(j4);
IkReal x3585=(cj5*r10);
IkReal x3586=(cj5*r00);
IkReal x3587=(cj5*r20);
IkReal x3588=((1.0)*x3583);
IkReal x3589=(sj5*x3583);
IkReal x3590=((1.0)*sj5*x3584);
evalcond[0]=((((-1.0)*x3587*x3588))+((r22*x3584))+((r21*x3589)));
evalcond[1]=(((r02*x3584))+((r01*x3589))+(((-1.0)*x3586*x3588)));
evalcond[2]=(((r12*x3583))+((x3584*x3585))+(((-1.0)*r11*x3590)));
evalcond[3]=((1.0)+((r12*x3584))+((r11*x3589))+(((-1.0)*x3585*x3588)));
evalcond[4]=(((cj2*sj1))+((x3584*x3587))+((cj1*sj2))+(((-1.0)*r21*x3590))+((r22*x3583)));
evalcond[5]=(((r02*x3583))+((x3584*x3586))+(((-1.0)*r01*x3590))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3591=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3591.valid){
continue;
}
CheckValue<IkReal> x3592 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3591.value)))+(x3592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3593=IKsin(j4);
IkReal x3594=IKcos(j4);
IkReal x3595=(cj5*r10);
IkReal x3596=(cj5*r00);
IkReal x3597=(cj5*r20);
IkReal x3598=((1.0)*x3593);
IkReal x3599=(sj5*x3593);
IkReal x3600=((1.0)*sj5*x3594);
evalcond[0]=(((r21*x3599))+(((-1.0)*x3597*x3598))+((r22*x3594)));
evalcond[1]=(((r02*x3594))+((r01*x3599))+(((-1.0)*x3596*x3598)));
evalcond[2]=((((-1.0)*r11*x3600))+((r12*x3593))+((x3594*x3595)));
evalcond[3]=((1.0)+((r11*x3599))+((r12*x3594))+(((-1.0)*x3595*x3598)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x3600))+((r22*x3593))+((x3594*x3597)));
evalcond[5]=((((-1.0)*r01*x3600))+((r02*x3593))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3594*x3596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3601=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3601;
j4eval[1]=IKsign(x3601);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3602=((1.0)*sj5);
IkReal x3603=((((-1.0)*cj5*r21))+(((-1.0)*r20*x3602)));
j4eval[0]=x3603;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3602))+((cj5*r00))))));
j4eval[2]=IKsign(x3603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3604=cj5*cj5;
IkReal x3605=r11*r11;
IkReal x3606=(cj5*r10);
IkReal x3607=(r11*sj5);
IkReal x3608=(((x3604*x3605))+(((-1.0)*x3605))+(((2.0)*x3606*x3607))+(((-1.0)*(r12*r12)))+(((-1.0)*x3604*(r10*r10))));
j4eval[0]=x3608;
j4eval[1]=((IKabs(((((-1.0)*x3607))+x3606)))+(IKabs(r12)));
j4eval[2]=IKsign(x3608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3609=cj5*cj5;
IkReal x3610=r11*r11;
IkReal x3611=(cj5*r10);
IkReal x3612=(r11*sj5);
CheckValue<IkReal> x3613 = IKatan2WithCheck(IkReal(((((-1.0)*x3612))+x3611)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3613.valid){
continue;
}
CheckValue<IkReal> x3614=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3609*(r10*r10)))+((x3609*x3610))+(((-1.0)*x3610))+(((-1.0)*(r12*r12)))+(((2.0)*x3611*x3612)))),-1);
if(!x3614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3613.value)+(((1.5707963267949)*(x3614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3615=IKsin(j4);
IkReal x3616=IKcos(j4);
IkReal x3617=(cj5*r10);
IkReal x3618=(cj5*r00);
IkReal x3619=(cj5*r20);
IkReal x3620=((1.0)*x3615);
IkReal x3621=(sj5*x3615);
IkReal x3622=((1.0)*sj5*x3616);
evalcond[0]=(((r21*x3621))+((r22*x3616))+(((-1.0)*x3619*x3620)));
evalcond[1]=(((r02*x3616))+((r01*x3621))+(((-1.0)*x3618*x3620)));
evalcond[2]=(((x3616*x3617))+(((-1.0)*r11*x3622))+((r12*x3615)));
evalcond[3]=((-1.0)+((r11*x3621))+(((-1.0)*x3617*x3620))+((r12*x3616)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x3622))+((cj1*sj2))+((r22*x3615))+((x3616*x3619)));
evalcond[5]=(((r02*x3615))+(((-1.0)*sj1*sj2))+((x3616*x3618))+(((-1.0)*r01*x3622))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3623=((1.0)*sj5);
CheckValue<IkReal> x3624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3623))+(((-1.0)*cj5*r21)))),-1);
if(!x3624.valid){
continue;
}
CheckValue<IkReal> x3625 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x3623))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3624.value)))+(x3625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3626=IKsin(j4);
IkReal x3627=IKcos(j4);
IkReal x3628=(cj5*r10);
IkReal x3629=(cj5*r00);
IkReal x3630=(cj5*r20);
IkReal x3631=((1.0)*x3626);
IkReal x3632=(sj5*x3626);
IkReal x3633=((1.0)*sj5*x3627);
evalcond[0]=((((-1.0)*x3630*x3631))+((r21*x3632))+((r22*x3627)));
evalcond[1]=(((r02*x3627))+((r01*x3632))+(((-1.0)*x3629*x3631)));
evalcond[2]=((((-1.0)*r11*x3633))+((x3627*x3628))+((r12*x3626)));
evalcond[3]=((-1.0)+((r11*x3632))+(((-1.0)*x3628*x3631))+((r12*x3627)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x3626))+((x3627*x3630))+(((-1.0)*r21*x3633)));
evalcond[5]=((((-1.0)*r01*x3633))+((x3627*x3629))+(((-1.0)*sj1*sj2))+((r02*x3626))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3634=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3634.valid){
continue;
}
CheckValue<IkReal> x3635 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3634.value)))+(x3635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3636=IKsin(j4);
IkReal x3637=IKcos(j4);
IkReal x3638=(cj5*r10);
IkReal x3639=(cj5*r00);
IkReal x3640=(cj5*r20);
IkReal x3641=((1.0)*x3636);
IkReal x3642=(sj5*x3636);
IkReal x3643=((1.0)*sj5*x3637);
evalcond[0]=((((-1.0)*x3640*x3641))+((r22*x3637))+((r21*x3642)));
evalcond[1]=(((r02*x3637))+((r01*x3642))+(((-1.0)*x3639*x3641)));
evalcond[2]=(((r12*x3636))+(((-1.0)*r11*x3643))+((x3637*x3638)));
evalcond[3]=((-1.0)+((r12*x3637))+((r11*x3642))+(((-1.0)*x3638*x3641)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x3636))+(((-1.0)*r21*x3643))+((x3637*x3640)));
evalcond[5]=(((r02*x3636))+(((-1.0)*sj1*sj2))+((x3637*x3639))+((cj1*cj2))+(((-1.0)*r01*x3643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3644=((-1.0)*r00);
IkReal x3646 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3646)==0){
continue;
}
IkReal x3645=pow(x3646,-0.5);
CheckValue<IkReal> x3647 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3644),IKFAST_ATAN2_MAGTHRESH);
if(!x3647.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3647.value));
IkReal gconst109=(r01*x3645);
IkReal gconst110=(x3644*x3645);
CheckValue<IkReal> x3648 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3648.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3648.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3649=((-1.0)*r00);
IkReal x3650=x3645;
CheckValue<IkReal> x3652 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3649),IKFAST_ATAN2_MAGTHRESH);
if(!x3652.valid){
continue;
}
IkReal x3651=((-1.0)*(x3652.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x3651;
IkReal gconst108=x3651;
IkReal gconst109=(r01*x3650);
IkReal gconst110=(x3649*x3650);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3653=((-1.0)*r00);
IkReal x3654=x3645;
CheckValue<IkReal> x3656 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3653),IKFAST_ATAN2_MAGTHRESH);
if(!x3656.valid){
continue;
}
IkReal x3655=((-1.0)*(x3656.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x3655;
IkReal gconst108=x3655;
IkReal gconst109=(r01*x3654);
IkReal gconst110=(x3653*x3654);
IkReal x3657=r02*r02;
IkReal x3658=(r12*sj0);
IkReal x3659=((1.0)*cj0);
IkReal x3660=x3645;
j4eval[0]=((IKabs(((((-1.0)*x3658))+(((-1.0)*r02*x3659)))))+(IKabs((((r02*x3658*x3660))+(((-1.0)*x3659*x3660))+((cj0*x3657*x3660))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3661=((-1.0)*r00);
IkReal x3662=x3645;
CheckValue<IkReal> x3664 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3661),IKFAST_ATAN2_MAGTHRESH);
if(!x3664.valid){
continue;
}
IkReal x3663=((-1.0)*(x3664.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x3663;
IkReal gconst108=x3663;
IkReal gconst109=(r01*x3662);
IkReal gconst110=(x3661*x3662);
IkReal x3665=r02*r02;
IkReal x3666=((1.0)+(((-1.0)*x3665)));
IkReal x3667=(cj2*r22*sj1);
IkReal x3668=(cj1*r22*sj2);
CheckValue<IkReal> x3675=IKPowWithIntegerCheck(x3666,-1);
if(!x3675.valid){
continue;
}
IkReal x3669=x3675.value;
CheckValue<IkReal> x3676=IKPowWithIntegerCheck(((-1.0)+x3665),-1);
if(!x3676.valid){
continue;
}
IkReal x3670=x3676.value;
IkReal x3671=((1.0)*x3669);
if((x3666) < -0.00001)
continue;
IkReal x3672=IKsqrt(x3666);
IkReal x3673=((1.0)*r02*x3670*x3672);
IkReal x3674=((((-1.0)*x3671*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x3669))+(((-1.0)*(r22*r22)))+(((-1.0)*x3671*(r01*r01)*(r21*r21))));
j4eval[0]=x3674;
j4eval[1]=((IKabs(((((-1.0)*x3667*x3673))+(((-1.0)*x3668*x3673)))))+(IKabs((x3667+x3668))));
j4eval[2]=IKsign(x3674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3677=(gconst109*r21);
IkReal x3678=(cj1*sj2);
IkReal x3679=(gconst110*r20);
IkReal x3680=(cj2*sj1);
CheckValue<IkReal> x3681=IKPowWithIntegerCheck(IKsign(((((2.0)*x3677*x3679))+(((-1.0)*(x3679*x3679)))+(((-1.0)*(x3677*x3677)))+(((-1.0)*(r22*r22))))),-1);
if(!x3681.valid){
continue;
}
CheckValue<IkReal> x3682 = IKatan2WithCheck(IkReal((((r22*x3678))+((r22*x3680)))),IkReal(((((-1.0)*x3677*x3678))+((x3678*x3679))+(((-1.0)*x3677*x3680))+((x3679*x3680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3681.value)))+(x3682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3683=IKsin(j4);
IkReal x3684=IKcos(j4);
IkReal x3685=(gconst110*r00);
IkReal x3686=(sj1*sj2);
IkReal x3687=((1.0)*x3683);
IkReal x3688=(gconst109*x3683);
IkReal x3689=(gconst110*x3684);
IkReal x3690=((1.0)*cj1*cj2);
IkReal x3691=((1.0)*gconst109*x3684);
evalcond[0]=(((r21*x3688))+(((-1.0)*gconst110*r20*x3687))+((r22*x3684)));
evalcond[1]=(cj0+((r12*x3684))+((r11*x3688))+(((-1.0)*gconst110*r10*x3687)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3688))+(((-1.0)*x3685*x3687))+((r02*x3684)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x3689))+((r22*x3683))+(((-1.0)*r21*x3691)));
evalcond[4]=(((cj0*x3686))+((x3684*x3685))+(((-1.0)*cj0*x3690))+((r02*x3683))+(((-1.0)*r01*x3691)));
evalcond[5]=(((r10*x3689))+((sj0*x3686))+(((-1.0)*r11*x3691))+(((-1.0)*sj0*x3690))+((r12*x3683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3692=((1.0)*sj0);
IkReal x3693=((1.0)*gconst110);
CheckValue<IkReal> x3694 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3692))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst109*r01))+(((-1.0)*cj0*r00*x3693))+(((-1.0)*gconst110*r10*x3692))+((gconst109*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3694.valid){
continue;
}
CheckValue<IkReal> x3695=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x3693)))),-1);
if(!x3695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3694.value)+(((1.5707963267949)*(x3695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3696=IKsin(j4);
IkReal x3697=IKcos(j4);
IkReal x3698=(gconst110*r00);
IkReal x3699=(sj1*sj2);
IkReal x3700=((1.0)*x3696);
IkReal x3701=(gconst109*x3696);
IkReal x3702=(gconst110*x3697);
IkReal x3703=((1.0)*cj1*cj2);
IkReal x3704=((1.0)*gconst109*x3697);
evalcond[0]=(((r21*x3701))+((r22*x3697))+(((-1.0)*gconst110*r20*x3700)));
evalcond[1]=(cj0+((r11*x3701))+((r12*x3697))+(((-1.0)*gconst110*r10*x3700)));
evalcond[2]=((((-1.0)*x3698*x3700))+(((-1.0)*sj0))+((r01*x3701))+((r02*x3697)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x3702))+((r22*x3696))+(((-1.0)*r21*x3704)));
evalcond[4]=((((-1.0)*r01*x3704))+((x3697*x3698))+((cj0*x3699))+((r02*x3696))+(((-1.0)*cj0*x3703)));
evalcond[5]=(((sj0*x3699))+(((-1.0)*r11*x3704))+((r10*x3702))+(((-1.0)*sj0*x3703))+((r12*x3696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3705=((1.0)*gconst109);
CheckValue<IkReal> x3706=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3705))+(((-1.0)*gconst110*r11)))),-1);
if(!x3706.valid){
continue;
}
CheckValue<IkReal> x3707 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst110*r20*sj0))+(((-1.0)*r21*sj0*x3705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3706.value)))+(x3707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3708=IKsin(j4);
IkReal x3709=IKcos(j4);
IkReal x3710=(gconst110*r00);
IkReal x3711=(sj1*sj2);
IkReal x3712=((1.0)*x3708);
IkReal x3713=(gconst109*x3708);
IkReal x3714=(gconst110*x3709);
IkReal x3715=((1.0)*cj1*cj2);
IkReal x3716=((1.0)*gconst109*x3709);
evalcond[0]=((((-1.0)*gconst110*r20*x3712))+((r21*x3713))+((r22*x3709)));
evalcond[1]=(((r11*x3713))+((r12*x3709))+(((-1.0)*gconst110*r10*x3712))+cj0);
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3710*x3712))+((r01*x3713))+((r02*x3709)));
evalcond[3]=(((cj2*sj1))+((r20*x3714))+((cj1*sj2))+(((-1.0)*r21*x3716))+((r22*x3708)));
evalcond[4]=(((x3709*x3710))+(((-1.0)*r01*x3716))+((cj0*x3711))+((r02*x3708))+(((-1.0)*cj0*x3715)));
evalcond[5]=(((r12*x3708))+(((-1.0)*sj0*x3715))+((sj0*x3711))+(((-1.0)*r11*x3716))+((r10*x3714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3717=((-1.0)*r01);
IkReal x3719 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3719)==0){
continue;
}
IkReal x3718=pow(x3719,-0.5);
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal(x3717),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3720.value))));
IkReal gconst112=(x3717*x3718);
IkReal gconst113=((1.0)*r00*x3718);
CheckValue<IkReal> x3721 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3721.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3721.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3722=((-1.0)*r01);
CheckValue<IkReal> x3725 = IKatan2WithCheck(IkReal(x3722),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3725.valid){
continue;
}
IkReal x3723=((1.0)*(x3725.value));
IkReal x3724=x3718;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3723)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3723)));
IkReal gconst112=(x3722*x3724);
IkReal gconst113=((1.0)*r00*x3724);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3726=((-1.0)*r01);
CheckValue<IkReal> x3729 = IKatan2WithCheck(IkReal(x3726),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3729.valid){
continue;
}
IkReal x3727=((1.0)*(x3729.value));
IkReal x3728=x3718;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3727)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3727)));
IkReal gconst112=(x3726*x3728);
IkReal gconst113=((1.0)*r00*x3728);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3730=((1.0)*sj0);
IkReal x3731=((1.0)*cj0);
CheckValue<IkReal> x3732=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*gconst112*r20)))),-1);
if(!x3732.valid){
continue;
}
CheckValue<IkReal> x3733 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3730))+(((-1.0)*r02*x3731)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*gconst113*r10*x3730))+(((-1.0)*gconst113*r00*x3731))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3732.value)))+(x3733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3734=IKsin(j4);
IkReal x3735=IKcos(j4);
IkReal x3736=(sj1*sj2);
IkReal x3737=((1.0)*cj1*cj2);
IkReal x3738=(gconst112*x3734);
IkReal x3739=(gconst113*x3735);
IkReal x3740=((1.0)*gconst112*x3735);
IkReal x3741=((1.0)*gconst113*x3734);
evalcond[0]=((((-1.0)*r20*x3741))+((r22*x3735))+((r21*x3738)));
evalcond[1]=(cj0+((r11*x3738))+((r12*x3735))+(((-1.0)*r10*x3741)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x3741))+((r01*x3738))+((r02*x3735)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x3740))+((cj1*sj2))+((r22*x3734))+((r20*x3739)));
evalcond[4]=((((-1.0)*r01*x3740))+((r00*x3739))+((r02*x3734))+((cj0*x3736))+(((-1.0)*cj0*x3737)));
evalcond[5]=((((-1.0)*sj0*x3737))+((sj0*x3736))+(((-1.0)*r11*x3740))+((r12*x3734))+((r10*x3739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3742=((1.0)*gconst112);
CheckValue<IkReal> x3743 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3742))+((gconst113*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3743.valid){
continue;
}
CheckValue<IkReal> x3744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3742))+(((-1.0)*gconst113*r11)))),-1);
if(!x3744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3743.value)+(((1.5707963267949)*(x3744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3745=IKsin(j4);
IkReal x3746=IKcos(j4);
IkReal x3747=(sj1*sj2);
IkReal x3748=((1.0)*cj1*cj2);
IkReal x3749=(gconst112*x3745);
IkReal x3750=(gconst113*x3746);
IkReal x3751=((1.0)*gconst112*x3746);
IkReal x3752=((1.0)*gconst113*x3745);
evalcond[0]=((((-1.0)*r20*x3752))+((r22*x3746))+((r21*x3749)));
evalcond[1]=(cj0+((r12*x3746))+((r11*x3749))+(((-1.0)*r10*x3752)));
evalcond[2]=(((r01*x3749))+(((-1.0)*sj0))+(((-1.0)*r00*x3752))+((r02*x3746)));
evalcond[3]=(((cj2*sj1))+((r20*x3750))+(((-1.0)*r21*x3751))+((cj1*sj2))+((r22*x3745)));
evalcond[4]=(((r00*x3750))+(((-1.0)*r01*x3751))+((cj0*x3747))+(((-1.0)*cj0*x3748))+((r02*x3745)));
evalcond[5]=((((-1.0)*sj0*x3748))+((sj0*x3747))+((r12*x3745))+(((-1.0)*r11*x3751))+((r10*x3750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3753=((1.0)*gconst112);
CheckValue<IkReal> x3754 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst113*r20))+(((-1.0)*cj0*r21*x3753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3754.valid){
continue;
}
CheckValue<IkReal> x3755=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3753))+(((-1.0)*gconst113*r01)))),-1);
if(!x3755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3754.value)+(((1.5707963267949)*(x3755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3756=IKsin(j4);
IkReal x3757=IKcos(j4);
IkReal x3758=(sj1*sj2);
IkReal x3759=((1.0)*cj1*cj2);
IkReal x3760=(gconst112*x3756);
IkReal x3761=(gconst113*x3757);
IkReal x3762=((1.0)*gconst112*x3757);
IkReal x3763=((1.0)*gconst113*x3756);
evalcond[0]=((((-1.0)*r20*x3763))+((r21*x3760))+((r22*x3757)));
evalcond[1]=((((-1.0)*r10*x3763))+cj0+((r12*x3757))+((r11*x3760)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3757))+(((-1.0)*r00*x3763))+((r01*x3760)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x3762))+((cj1*sj2))+((r22*x3756))+((r20*x3761)));
evalcond[4]=(((cj0*x3758))+(((-1.0)*cj0*x3759))+((r02*x3756))+(((-1.0)*r01*x3762))+((r00*x3761)));
evalcond[5]=((((-1.0)*r11*x3762))+((sj0*x3758))+(((-1.0)*sj0*x3759))+((r10*x3761))+((r12*x3756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3764=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3764;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x3764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3765=((1.0)*sj5);
IkReal x3766=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3765)));
j4eval[0]=x3766;
j4eval[1]=IKsign(x3766);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x3765)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3767=cj5*cj5;
IkReal x3768=r01*r01;
IkReal x3769=(r01*sj5);
IkReal x3770=(cj5*r00);
IkReal x3771=((((-1.0)*x3767*(r00*r00)))+(((-1.0)*(r02*r02)))+((x3767*x3768))+(((-1.0)*x3768))+(((2.0)*x3769*x3770)));
j4eval[0]=x3771;
j4eval[1]=IKsign(x3771);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3769))+x3770))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3772=cj5*cj5;
IkReal x3773=r01*r01;
IkReal x3774=(r01*sj5);
IkReal x3775=(cj5*r00);
CheckValue<IkReal> x3776=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x3773))+(((2.0)*x3774*x3775))+(((-1.0)*x3772*(r00*r00)))+((x3772*x3773)))),-1);
if(!x3776.valid){
continue;
}
CheckValue<IkReal> x3777 = IKatan2WithCheck(IkReal(((((-1.0)*x3774))+x3775)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3776.value)))+(x3777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3778=IKsin(j4);
IkReal x3779=IKcos(j4);
IkReal x3780=(cj5*r10);
IkReal x3781=(cj5*r00);
IkReal x3782=(cj5*r20);
IkReal x3783=((1.0)*x3778);
IkReal x3784=(sj5*x3778);
IkReal x3785=((1.0)*sj5*x3779);
evalcond[0]=(((r22*x3779))+((r21*x3784))+(((-1.0)*x3782*x3783)));
evalcond[1]=((((-1.0)*x3780*x3783))+((r12*x3779))+((r11*x3784)));
evalcond[2]=(((r02*x3778))+(((-1.0)*r01*x3785))+((x3779*x3781)));
evalcond[3]=((-1.0)+((r02*x3779))+((r01*x3784))+(((-1.0)*x3781*x3783)));
evalcond[4]=(((cj2*sj1))+((r22*x3778))+((cj1*sj2))+((x3779*x3782))+(((-1.0)*r21*x3785)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3779*x3780))+(((-1.0)*r11*x3785))+((r12*x3778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3786=((1.0)*sj5);
CheckValue<IkReal> x3787 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x3786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3787.valid){
continue;
}
CheckValue<IkReal> x3788=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3786)))),-1);
if(!x3788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3787.value)+(((1.5707963267949)*(x3788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3789=IKsin(j4);
IkReal x3790=IKcos(j4);
IkReal x3791=(cj5*r10);
IkReal x3792=(cj5*r00);
IkReal x3793=(cj5*r20);
IkReal x3794=((1.0)*x3789);
IkReal x3795=(sj5*x3789);
IkReal x3796=((1.0)*sj5*x3790);
evalcond[0]=(((r21*x3795))+((r22*x3790))+(((-1.0)*x3793*x3794)));
evalcond[1]=((((-1.0)*x3791*x3794))+((r12*x3790))+((r11*x3795)));
evalcond[2]=(((r02*x3789))+(((-1.0)*r01*x3796))+((x3790*x3792)));
evalcond[3]=((-1.0)+((r02*x3790))+(((-1.0)*x3792*x3794))+((r01*x3795)));
evalcond[4]=(((cj2*sj1))+((r22*x3789))+((cj1*sj2))+((x3790*x3793))+(((-1.0)*r21*x3796)));
evalcond[5]=(((r12*x3789))+(((-1.0)*r11*x3796))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3790*x3791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3797 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3797.valid){
continue;
}
CheckValue<IkReal> x3798=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3797.value)+(((1.5707963267949)*(x3798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3799=IKsin(j4);
IkReal x3800=IKcos(j4);
IkReal x3801=(cj5*r10);
IkReal x3802=(cj5*r00);
IkReal x3803=(cj5*r20);
IkReal x3804=((1.0)*x3799);
IkReal x3805=(sj5*x3799);
IkReal x3806=((1.0)*sj5*x3800);
evalcond[0]=(((r21*x3805))+((r22*x3800))+(((-1.0)*x3803*x3804)));
evalcond[1]=(((r11*x3805))+((r12*x3800))+(((-1.0)*x3801*x3804)));
evalcond[2]=((((-1.0)*r01*x3806))+((r02*x3799))+((x3800*x3802)));
evalcond[3]=((-1.0)+((r01*x3805))+(((-1.0)*x3802*x3804))+((r02*x3800)));
evalcond[4]=(((cj2*sj1))+((r22*x3799))+((cj1*sj2))+((x3800*x3803))+(((-1.0)*r21*x3806)));
evalcond[5]=(((x3800*x3801))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x3799))+(((-1.0)*r11*x3806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3807=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3807;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x3807);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3808=((1.0)*sj5);
IkReal x3809=((((-1.0)*cj5*r21))+(((-1.0)*r20*x3808)));
j4eval[0]=x3809;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x3808))))));
j4eval[2]=IKsign(x3809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3810=cj5*cj5;
IkReal x3811=r01*r01;
IkReal x3812=(cj5*r00);
IkReal x3813=(r01*sj5);
IkReal x3814=(x3811+(((-1.0)*x3810*x3811))+(((-2.0)*x3812*x3813))+(r02*r02)+((x3810*(r00*r00))));
j4eval[0]=x3814;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3813))+x3812))));
j4eval[2]=IKsign(x3814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3815=cj5*cj5;
IkReal x3816=r01*r01;
IkReal x3817=(r01*sj5);
IkReal x3818=(cj5*r00);
CheckValue<IkReal> x3819 = IKatan2WithCheck(IkReal(((((-1.0)*x3817))+x3818)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3819.valid){
continue;
}
CheckValue<IkReal> x3820=IKPowWithIntegerCheck(IKsign((x3816+(((-2.0)*x3817*x3818))+(r02*r02)+((x3815*(r00*r00)))+(((-1.0)*x3815*x3816)))),-1);
if(!x3820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3819.value)+(((1.5707963267949)*(x3820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3821=IKsin(j4);
IkReal x3822=IKcos(j4);
IkReal x3823=(cj5*r10);
IkReal x3824=(cj5*r00);
IkReal x3825=(cj5*r20);
IkReal x3826=((1.0)*x3821);
IkReal x3827=(sj5*x3821);
IkReal x3828=((1.0)*sj5*x3822);
evalcond[0]=((((-1.0)*x3825*x3826))+((r22*x3822))+((r21*x3827)));
evalcond[1]=(((r12*x3822))+((r11*x3827))+(((-1.0)*x3823*x3826)));
evalcond[2]=((((-1.0)*r01*x3828))+((r02*x3821))+((x3822*x3824)));
evalcond[3]=((1.0)+(((-1.0)*x3824*x3826))+((r02*x3822))+((r01*x3827)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x3821))+(((-1.0)*r21*x3828))+((x3822*x3825)));
evalcond[5]=(((r12*x3821))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x3822*x3823))+(((-1.0)*r11*x3828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3829=((1.0)*sj5);
CheckValue<IkReal> x3830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3829))+(((-1.0)*cj5*r21)))),-1);
if(!x3830.valid){
continue;
}
CheckValue<IkReal> x3831 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x3829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3830.value)))+(x3831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3832=IKsin(j4);
IkReal x3833=IKcos(j4);
IkReal x3834=(cj5*r10);
IkReal x3835=(cj5*r00);
IkReal x3836=(cj5*r20);
IkReal x3837=((1.0)*x3832);
IkReal x3838=(sj5*x3832);
IkReal x3839=((1.0)*sj5*x3833);
evalcond[0]=(((r21*x3838))+(((-1.0)*x3836*x3837))+((r22*x3833)));
evalcond[1]=(((r12*x3833))+((r11*x3838))+(((-1.0)*x3834*x3837)));
evalcond[2]=(((r02*x3832))+((x3833*x3835))+(((-1.0)*r01*x3839)));
evalcond[3]=((1.0)+((r02*x3833))+((r01*x3838))+(((-1.0)*x3835*x3837)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x3839))+((cj1*sj2))+((x3833*x3836))+((r22*x3832)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x3832))+((x3833*x3834))+(((-1.0)*r11*x3839))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3840.valid){
continue;
}
CheckValue<IkReal> x3841 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3840.value)))+(x3841.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3842=IKsin(j4);
IkReal x3843=IKcos(j4);
IkReal x3844=(cj5*r10);
IkReal x3845=(cj5*r00);
IkReal x3846=(cj5*r20);
IkReal x3847=((1.0)*x3842);
IkReal x3848=(sj5*x3842);
IkReal x3849=((1.0)*sj5*x3843);
evalcond[0]=(((r21*x3848))+((r22*x3843))+(((-1.0)*x3846*x3847)));
evalcond[1]=(((r12*x3843))+(((-1.0)*x3844*x3847))+((r11*x3848)));
evalcond[2]=(((x3843*x3845))+(((-1.0)*r01*x3849))+((r02*x3842)));
evalcond[3]=((1.0)+(((-1.0)*x3845*x3847))+((r01*x3848))+((r02*x3843)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x3849))+((cj1*sj2))+((x3843*x3846))+((r22*x3842)));
evalcond[5]=(((r12*x3842))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*x3849))+((x3843*x3844))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3850=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3850);
rxp1_1=(px*r21);
rxp1_2=(r11*x3850);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3851=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3851);
rxp1_1=(px*r21);
rxp1_2=(r11*x3851);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3852=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3852);
rxp1_1=(px*r21);
rxp1_2=(r11*x3852);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3855=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3855.valid){
continue;
}
IkReal x3853=x3855.value;
IkReal x3854=(sj0*x3853);
cj4array[0]=(((cj1*cj2*x3854))+(((-1.0)*sj1*sj2*x3854)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3856=IKsin(j4);
IkReal x3857=IKcos(j4);
IkReal x3858=(r21*sj5);
IkReal x3859=(cj5*r20);
IkReal x3860=((1.0)*x3856);
evalcond[0]=(r02*x3856);
evalcond[1]=(((r02*x3857))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x3859*x3860))+((x3856*x3858)));
evalcond[3]=(((r11*sj5*x3856))+(((-1.0)*cj5*r10*x3860)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3857*x3859))+(((-1.0)*x3857*x3858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3863=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3863.valid){
continue;
}
IkReal x3861=x3863.value;
IkReal x3862=((1.0)*x3861);
cj4array[0]=((((-1.0)*cj1*sj2*x3862))+(((-1.0)*cj2*sj1*x3862)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3864=IKsin(j4);
IkReal x3865=IKcos(j4);
IkReal x3866=(r11*sj5);
IkReal x3867=((1.0)*sj0);
IkReal x3868=((1.0)*cj5*x3864);
evalcond[0]=(r02*x3864);
evalcond[1]=((((-1.0)*x3867))+((r02*x3865)));
evalcond[2]=((((-1.0)*r20*x3868))+((r21*sj5*x3864)));
evalcond[3]=(((x3864*x3866))+(((-1.0)*r10*x3868)));
evalcond[4]=(((cj5*r10*x3865))+(((-1.0)*x3865*x3866))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x3867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3869=IKPowWithIntegerCheck(r02,-1);
if(!x3869.valid){
continue;
}
cj4array[0]=(sj0*(x3869.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3870=IKsin(j4);
IkReal x3871=IKcos(j4);
IkReal x3872=(cj5*x3871);
IkReal x3873=(sj5*x3870);
IkReal x3874=((1.0)*sj5*x3871);
IkReal x3875=((1.0)*cj5*x3870);
evalcond[0]=(r02*x3870);
evalcond[1]=(((r21*x3873))+(((-1.0)*r20*x3875)));
evalcond[2]=((((-1.0)*r10*x3875))+((r11*x3873)));
evalcond[3]=(((cj2*sj1))+((r20*x3872))+((cj1*sj2))+(((-1.0)*r21*x3874)));
evalcond[4]=((((-1.0)*r11*x3874))+(((-1.0)*cj1*cj2*sj0))+((r10*x3872))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3876=((1.0)*sj0);
IkReal x3877=((1.0)*cj0);
CheckValue<IkReal> x3878 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3876))+(((-1.0)*r02*x3877)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x3877))+(((-1.0)*cj5*r10*x3876))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3878.valid){
continue;
}
CheckValue<IkReal> x3879=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3878.value)+(((1.5707963267949)*(x3879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3880=IKsin(j4);
IkReal x3881=IKcos(j4);
IkReal x3882=(cj5*r10);
IkReal x3883=(sj1*sj2);
IkReal x3884=(cj5*r00);
IkReal x3885=(cj5*r20);
IkReal x3886=((1.0)*cj1*cj2);
IkReal x3887=((1.0)*x3880);
IkReal x3888=(sj5*x3880);
IkReal x3889=((1.0)*sj5*x3881);
evalcond[0]=(((r22*x3881))+((r21*x3888))+(((-1.0)*x3885*x3887)));
evalcond[1]=(cj0+((r12*x3881))+((r11*x3888))+(((-1.0)*x3882*x3887)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3881))+((r01*x3888))+(((-1.0)*x3884*x3887)));
evalcond[3]=(((cj2*sj1))+((r22*x3880))+((cj1*sj2))+((x3881*x3885))+(((-1.0)*r21*x3889)));
evalcond[4]=(((cj0*x3883))+(((-1.0)*r01*x3889))+((r02*x3880))+((x3881*x3884))+(((-1.0)*cj0*x3886)));
evalcond[5]=(((sj0*x3883))+((r12*x3880))+((x3881*x3882))+(((-1.0)*sj0*x3886))+(((-1.0)*r11*x3889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3890=((1.0)*sj5);
CheckValue<IkReal> x3891 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3890)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3891.valid){
continue;
}
CheckValue<IkReal> x3892=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3890)))),-1);
if(!x3892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3891.value)+(((1.5707963267949)*(x3892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3893=IKsin(j4);
IkReal x3894=IKcos(j4);
IkReal x3895=(cj5*r10);
IkReal x3896=(sj1*sj2);
IkReal x3897=(cj5*r00);
IkReal x3898=(cj5*r20);
IkReal x3899=((1.0)*cj1*cj2);
IkReal x3900=((1.0)*x3893);
IkReal x3901=(sj5*x3893);
IkReal x3902=((1.0)*sj5*x3894);
evalcond[0]=((((-1.0)*x3898*x3900))+((r22*x3894))+((r21*x3901)));
evalcond[1]=(cj0+((r12*x3894))+((r11*x3901))+(((-1.0)*x3895*x3900)));
evalcond[2]=((((-1.0)*x3897*x3900))+(((-1.0)*sj0))+((r01*x3901))+((r02*x3894)));
evalcond[3]=(((cj2*sj1))+((x3894*x3898))+((cj1*sj2))+((r22*x3893))+(((-1.0)*r21*x3902)));
evalcond[4]=(((cj0*x3896))+((x3894*x3897))+(((-1.0)*cj0*x3899))+(((-1.0)*r01*x3902))+((r02*x3893)));
evalcond[5]=((((-1.0)*sj0*x3899))+((x3894*x3895))+((sj0*x3896))+((r12*x3893))+(((-1.0)*r11*x3902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3903=((1.0)*sj5);
CheckValue<IkReal> x3904=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3903))+(((-1.0)*cj5*r01)))),-1);
if(!x3904.valid){
continue;
}
CheckValue<IkReal> x3905 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3904.value)))+(x3905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3906=IKsin(j4);
IkReal x3907=IKcos(j4);
IkReal x3908=(cj5*r10);
IkReal x3909=(sj1*sj2);
IkReal x3910=(cj5*r00);
IkReal x3911=(cj5*r20);
IkReal x3912=((1.0)*cj1*cj2);
IkReal x3913=((1.0)*x3906);
IkReal x3914=(sj5*x3906);
IkReal x3915=((1.0)*sj5*x3907);
evalcond[0]=((((-1.0)*x3911*x3913))+((r21*x3914))+((r22*x3907)));
evalcond[1]=(cj0+(((-1.0)*x3908*x3913))+((r12*x3907))+((r11*x3914)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3910*x3913))+((r01*x3914))+((r02*x3907)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x3915))+((r22*x3906))+((x3907*x3911))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r01*x3915))+((x3907*x3910))+(((-1.0)*cj0*x3912))+((cj0*x3909))+((r02*x3906)));
evalcond[5]=(((sj0*x3909))+((x3907*x3908))+((r12*x3906))+(((-1.0)*sj0*x3912))+(((-1.0)*r11*x3915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3916=r21*r21;
IkReal x3917=cj5*cj5;
IkReal x3918=(cj1*sj2);
IkReal x3919=(cj5*r20);
IkReal x3920=(r21*sj5);
IkReal x3921=(cj2*sj1);
CheckValue<IkReal> x3922 = IKatan2WithCheck(IkReal((((r22*x3921))+((r22*x3918)))),IkReal((((x3919*x3921))+(((-1.0)*x3920*x3921))+((x3918*x3919))+(((-1.0)*x3918*x3920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3922.valid){
continue;
}
CheckValue<IkReal> x3923=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3916))+(((-1.0)*(r22*r22)))+((x3916*x3917))+(((2.0)*x3919*x3920))+(((-1.0)*x3917*(r20*r20))))),-1);
if(!x3923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3922.value)+(((1.5707963267949)*(x3923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3924=IKsin(j4);
IkReal x3925=IKcos(j4);
IkReal x3926=(r21*sj5);
IkReal x3927=(cj5*r20);
evalcond[0]=((((-1.0)*x3924*x3927))+((r22*x3925))+((x3924*x3926)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x3924))+((x3925*x3927))+(((-1.0)*x3925*x3926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3928=(cj5*sj4);
IkReal x3929=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x3928))+((r01*x3929))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3929))+((r10*x3928))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x3928))+((r01*x3929))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x3929))+((r10*x3928))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x3928))+((r01*x3929))+((cj4*r02))), ((((-1.0)*r11*x3929))+((r10*x3928))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3930=IKcos(j0);
IkReal x3931=IKsin(j0);
IkReal x3932=(cj4*cj5);
IkReal x3933=(cj5*r01);
IkReal x3934=(sj4*sj5);
IkReal x3935=((0.098)*sj5);
IkReal x3936=((0.398)*cj2);
IkReal x3937=((0.398)*sj2);
IkReal x3938=((1.0)*cj2);
IkReal x3939=(cj5*r11);
IkReal x3940=((1.0)*cj1*sj2);
IkReal x3941=(cj1*x3931);
IkReal x3942=(sj1*x3930);
IkReal x3943=(sj1*x3931);
IkReal x3944=((1.0)*cj5*sj4);
IkReal x3945=(cj1*x3930);
IkReal x3946=((1.0)*cj4*sj5);
evalcond[0]=(x3930+(((-1.0)*r10*x3944))+((r11*x3934))+((cj4*r12)));
evalcond[1]=(((r01*x3934))+(((-1.0)*x3931))+(((-1.0)*r00*x3944))+((cj4*r02)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x3930*x3940))+x3933+(((-1.0)*x3938*x3942)));
evalcond[3]=(((r10*sj5))+x3939+(((-1.0)*x3931*x3940))+(((-1.0)*x3938*x3943)));
evalcond[4]=(((r00*x3932))+(((-1.0)*r01*x3946))+((r02*sj4))+(((-1.0)*x3938*x3945))+((sj2*x3942)));
evalcond[5]=((((-1.0)*x3938*x3941))+((r12*sj4))+((r10*x3932))+((sj2*x3943))+(((-1.0)*r11*x3946)));
evalcond[6]=(((r00*x3935))+(((0.098)*x3933))+(((-1.0)*x3937*x3942))+(((-1.53e-6)*x3942))+(((-0.122)*x3931))+(((-1.0)*px))+(((0.418)*x3945))+((x3936*x3945)));
evalcond[7]=((((0.122)*x3930))+(((0.098)*x3939))+(((-1.0)*x3937*x3943))+(((-1.53e-6)*x3943))+(((-1.0)*py))+((r10*x3935))+(((0.418)*x3941))+((x3936*x3941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3947=((1.0)*cj5);
IkReal x3948=((1.0)*sj5);
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3948))+(((-1.0)*r11*x3947)))),IkReal(((((-1.0)*r01*x3947))+(((-1.0)*r00*x3948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
CheckValue<IkReal> x3950=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x3950.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3949.value)+(((1.5707963267949)*(x3950.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3951=IKcos(j0);
IkReal x3952=IKsin(j0);
IkReal x3953=(cj5*r01);
IkReal x3954=((1.0)*cj1);
IkReal x3955=((0.098)*sj5);
IkReal x3956=((0.398)*cj2);
IkReal x3957=((0.398)*sj1);
IkReal x3958=((1.0)*cj2);
IkReal x3959=(cj5*r11);
IkReal x3960=(sj2*x3951);
IkReal x3961=(cj1*x3952);
IkReal x3962=(sj1*x3951);
IkReal x3963=(sj2*x3952);
IkReal x3964=(sj1*x3952);
IkReal x3965=(cj1*x3951);
evalcond[0]=(((r00*sj5))+(((-1.0)*x3954*x3960))+(((-1.0)*x3958*x3962))+x3953);
evalcond[1]=(((r10*sj5))+(((-1.0)*x3954*x3963))+(((-1.0)*x3958*x3964))+x3959);
evalcond[2]=((((0.098)*x3953))+((r00*x3955))+(((-1.0)*px))+((x3956*x3965))+(((0.418)*x3965))+(((-0.122)*x3952))+(((-1.53e-6)*x3962))+(((-1.0)*x3957*x3960)));
evalcond[3]=((((0.098)*x3959))+(((-1.0)*py))+((x3956*x3961))+(((0.418)*x3961))+(((-1.53e-6)*x3964))+(((-1.0)*x3957*x3963))+((r10*x3955))+(((0.122)*x3951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3966=((1.0)*sj5);
IkReal x3967=((((-1.0)*r00*x3966))+(((-1.0)*cj5*r01)));
j4eval[0]=x3967;
j4eval[1]=IKsign(x3967);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3966))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3968=((1.0)*sj5);
IkReal x3969=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3968)));
j4eval[0]=x3969;
j4eval[1]=IKsign(x3969);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3968))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3970=((1.0)*sj0);
IkReal x3971=((1.0)*cj0);
IkReal x3972=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3972;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x3970))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x3971)))))+(IKabs(((((-1.0)*r12*x3970))+(((-1.0)*r02*x3971))))));
j4eval[2]=IKsign(x3972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3973=((-1.0)*r20);
IkReal x3975 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3975)==0){
continue;
}
IkReal x3974=pow(x3975,-0.5);
CheckValue<IkReal> x3976 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3973),IKFAST_ATAN2_MAGTHRESH);
if(!x3976.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3976.value));
IkReal gconst97=(r21*x3974);
IkReal gconst98=(x3973*x3974);
CheckValue<IkReal> x3977 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3977.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3977.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3978=((-1.0)*r20);
IkReal x3979=x3974;
CheckValue<IkReal> x3981 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3978),IKFAST_ATAN2_MAGTHRESH);
if(!x3981.valid){
continue;
}
IkReal x3980=((-1.0)*(x3981.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3980;
IkReal gconst96=x3980;
IkReal gconst97=(r21*x3979);
IkReal gconst98=(x3978*x3979);
IkReal x3982=r22*r22;
IkReal x3983=((1.0)*x3982);
CheckValue<IkReal> x3987=IKPowWithIntegerCheck(((-1.0)+x3982),-1);
if(!x3987.valid){
continue;
}
IkReal x3984=x3987.value;
if((((1.0)+(((-1.0)*x3983)))) < -0.00001)
continue;
IkReal x3985=IKsqrt(((1.0)+(((-1.0)*x3983))));
IkReal x3986=(cj0*x3984*x3985);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x3983*x3986))+x3986))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3988=((-1.0)*r20);
IkReal x3989=x3974;
CheckValue<IkReal> x3991 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3988),IKFAST_ATAN2_MAGTHRESH);
if(!x3991.valid){
continue;
}
IkReal x3990=((-1.0)*(x3991.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3990;
IkReal gconst96=x3990;
IkReal gconst97=(r21*x3989);
IkReal gconst98=(x3988*x3989);
IkReal x3992=r22*r22;
IkReal x3993=((1.0)*x3992);
CheckValue<IkReal> x3997=IKPowWithIntegerCheck(((-1.0)+x3992),-1);
if(!x3997.valid){
continue;
}
IkReal x3994=x3997.value;
if((((1.0)+(((-1.0)*x3993)))) < -0.00001)
continue;
IkReal x3995=IKsqrt(((1.0)+(((-1.0)*x3993))));
IkReal x3996=(sj0*x3994*x3995);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3993*x3996))+x3996))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3998=((-1.0)*r20);
IkReal x3999=x3974;
CheckValue<IkReal> x4001 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3998),IKFAST_ATAN2_MAGTHRESH);
if(!x4001.valid){
continue;
}
IkReal x4000=((-1.0)*(x4001.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4000;
IkReal gconst96=x4000;
IkReal gconst97=(r21*x3999);
IkReal gconst98=(x3998*x3999);
IkReal x4002=((1.0)*(r22*r22));
CheckValue<IkReal> x4006=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4002))),-1);
if(!x4006.valid){
continue;
}
IkReal x4003=x4006.value;
IkReal x4004=((1.0)*x4003);
IkReal x4005=((((-1.0)*x4004*(r20*r20*r20*r20)))+(((-1.0)*x4002))+(((-1.0)*x4004*(r21*r21*r21*r21)))+(((-2.0)*x4003*(r20*r20)*(r21*r21))));
j4eval[0]=x4005;
j4eval[1]=IKsign(x4005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4007=(cj2*sj1);
IkReal x4008=(gconst98*r20);
IkReal x4009=(cj1*sj2);
IkReal x4010=((1.0)*gconst97*r21);
CheckValue<IkReal> x4011=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst97*r21*x4008))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst97*r21*x4010))+(((-1.0)*(x4008*x4008))))),-1);
if(!x4011.valid){
continue;
}
CheckValue<IkReal> x4012 = IKatan2WithCheck(IkReal((((r22*x4007))+((r22*x4009)))),IkReal(((((-1.0)*x4009*x4010))+((x4008*x4009))+(((-1.0)*x4007*x4010))+((x4007*x4008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4011.value)))+(x4012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4013=IKsin(j4);
IkReal x4014=IKcos(j4);
IkReal x4015=(sj1*sj2);
IkReal x4016=(gconst98*x4014);
IkReal x4017=((1.0)*cj1*cj2);
IkReal x4018=(gconst97*x4013);
IkReal x4019=((1.0)*gconst98*x4013);
IkReal x4020=((1.0)*gconst97*x4014);
evalcond[0]=(((r21*x4018))+(((-1.0)*r20*x4019))+((r22*x4014)));
evalcond[1]=(cj0+(((-1.0)*r10*x4019))+((r12*x4014))+((r11*x4018)));
evalcond[2]=(((r02*x4014))+(((-1.0)*sj0))+((r01*x4018))+(((-1.0)*r00*x4019)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x4016))+(((-1.0)*r21*x4020))+((r22*x4013)));
evalcond[4]=(((r02*x4013))+(((-1.0)*cj0*x4017))+((cj0*x4015))+((r00*x4016))+(((-1.0)*r01*x4020)));
evalcond[5]=((((-1.0)*r11*x4020))+((sj0*x4015))+((r10*x4016))+((r12*x4013))+(((-1.0)*sj0*x4017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4021=((1.0)*gconst97);
CheckValue<IkReal> x4022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4021))+(((-1.0)*gconst98*r11)))),-1);
if(!x4022.valid){
continue;
}
CheckValue<IkReal> x4023 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*r21*sj0*x4021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4022.value)))+(x4023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4024=IKsin(j4);
IkReal x4025=IKcos(j4);
IkReal x4026=(sj1*sj2);
IkReal x4027=(gconst98*x4025);
IkReal x4028=((1.0)*cj1*cj2);
IkReal x4029=(gconst97*x4024);
IkReal x4030=((1.0)*gconst98*x4024);
IkReal x4031=((1.0)*gconst97*x4025);
evalcond[0]=((((-1.0)*r20*x4030))+((r21*x4029))+((r22*x4025)));
evalcond[1]=(cj0+((r12*x4025))+(((-1.0)*r10*x4030))+((r11*x4029)));
evalcond[2]=((((-1.0)*r00*x4030))+(((-1.0)*sj0))+((r01*x4029))+((r02*x4025)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x4027))+(((-1.0)*r21*x4031))+((r22*x4024)));
evalcond[4]=((((-1.0)*cj0*x4028))+(((-1.0)*r01*x4031))+((cj0*x4026))+((r00*x4027))+((r02*x4024)));
evalcond[5]=(((sj0*x4026))+((r10*x4027))+(((-1.0)*r11*x4031))+((r12*x4024))+(((-1.0)*sj0*x4028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4032=((1.0)*gconst97);
CheckValue<IkReal> x4033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4032))+(((-1.0)*gconst98*r01)))),-1);
if(!x4033.valid){
continue;
}
CheckValue<IkReal> x4034 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r20))+(((-1.0)*cj0*r21*x4032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4033.value)))+(x4034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4035=IKsin(j4);
IkReal x4036=IKcos(j4);
IkReal x4037=(sj1*sj2);
IkReal x4038=(gconst98*x4036);
IkReal x4039=((1.0)*cj1*cj2);
IkReal x4040=(gconst97*x4035);
IkReal x4041=((1.0)*gconst98*x4035);
IkReal x4042=((1.0)*gconst97*x4036);
evalcond[0]=((((-1.0)*r20*x4041))+((r21*x4040))+((r22*x4036)));
evalcond[1]=(cj0+(((-1.0)*r10*x4041))+((r11*x4040))+((r12*x4036)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4036))+(((-1.0)*r00*x4041))+((r01*x4040)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x4042))+((cj1*sj2))+((r20*x4038))+((r22*x4035)));
evalcond[4]=(((r02*x4035))+((r00*x4038))+(((-1.0)*r01*x4042))+((cj0*x4037))+(((-1.0)*cj0*x4039)));
evalcond[5]=((((-1.0)*r11*x4042))+(((-1.0)*sj0*x4039))+((r10*x4038))+((sj0*x4037))+((r12*x4035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4043=((-1.0)*r21);
IkReal x4045 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4045)==0){
continue;
}
IkReal x4044=pow(x4045,-0.5);
CheckValue<IkReal> x4046 = IKatan2WithCheck(IkReal(x4043),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4046.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4046.value))));
IkReal gconst100=(x4043*x4044);
IkReal gconst101=((1.0)*r20*x4044);
CheckValue<IkReal> x4047 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4047.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4047.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4048=((-1.0)*r21);
CheckValue<IkReal> x4051 = IKatan2WithCheck(IkReal(x4048),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4051.valid){
continue;
}
IkReal x4049=((1.0)*(x4051.value));
IkReal x4050=x4044;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4049)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4049)));
IkReal gconst100=(x4048*x4050);
IkReal gconst101=((1.0)*r20*x4050);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4052=((-1.0)*r21);
CheckValue<IkReal> x4055 = IKatan2WithCheck(IkReal(x4052),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4055.valid){
continue;
}
IkReal x4053=((1.0)*(x4055.value));
IkReal x4054=x4044;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4053)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4053)));
IkReal gconst100=(x4052*x4054);
IkReal gconst101=((1.0)*r20*x4054);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4056=((-1.0)*r21);
CheckValue<IkReal> x4059 = IKatan2WithCheck(IkReal(x4056),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4059.valid){
continue;
}
IkReal x4057=((1.0)*(x4059.value));
IkReal x4058=x4044;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4057)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4057)));
IkReal gconst100=(x4056*x4058);
IkReal gconst101=((1.0)*r20*x4058);
IkReal x4060=r22*r22;
IkReal x4061=((1.0)*r12*sj0);
IkReal x4062=((1.0)*cj0*r02);
CheckValue<IkReal> x4066=IKPowWithIntegerCheck(((-1.0)+x4060),-1);
if(!x4066.valid){
continue;
}
IkReal x4063=x4066.value;
if((((1.0)+(((-1.0)*x4060)))) < -0.00001)
continue;
IkReal x4064=IKsqrt(((1.0)+(((-1.0)*x4060))));
IkReal x4065=(r22*x4063*x4064);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4061))+(((-1.0)*x4062)))))+(IKabs(((((-1.0)*x4061*x4065))+(((-1.0)*x4062*x4065))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4067=((1.0)*sj0);
IkReal x4068=((1.0)*cj0);
CheckValue<IkReal> x4069=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*gconst101*r21)))),-1);
if(!x4069.valid){
continue;
}
CheckValue<IkReal> x4070 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4067))+(((-1.0)*r02*x4068)))),IkReal(((((-1.0)*gconst101*r10*x4067))+((cj0*gconst100*r01))+((gconst100*r11*sj0))+(((-1.0)*gconst101*r00*x4068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4069.value)))+(x4070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4071=IKsin(j4);
IkReal x4072=IKcos(j4);
IkReal x4073=(sj1*sj2);
IkReal x4074=((1.0)*cj1*cj2);
IkReal x4075=(gconst100*x4071);
IkReal x4076=(gconst101*x4072);
IkReal x4077=((1.0)*gconst101*x4071);
IkReal x4078=((1.0)*gconst100*x4072);
evalcond[0]=(((r22*x4072))+(((-1.0)*r20*x4077))+((r21*x4075)));
evalcond[1]=((((-1.0)*r10*x4077))+((r12*x4072))+cj0+((r11*x4075)));
evalcond[2]=((((-1.0)*r00*x4077))+(((-1.0)*sj0))+((r01*x4075))+((r02*x4072)));
evalcond[3]=(((cj2*sj1))+((r20*x4076))+((cj1*sj2))+((r22*x4071))+(((-1.0)*r21*x4078)));
evalcond[4]=((((-1.0)*r01*x4078))+((cj0*x4073))+((r00*x4076))+((r02*x4071))+(((-1.0)*cj0*x4074)));
evalcond[5]=(((r12*x4071))+((r10*x4076))+(((-1.0)*sj0*x4074))+((sj0*x4073))+(((-1.0)*r11*x4078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4079=((1.0)*gconst100);
CheckValue<IkReal> x4080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4079))+(((-1.0)*gconst101*r11)))),-1);
if(!x4080.valid){
continue;
}
CheckValue<IkReal> x4081 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst101*r20*sj0))+(((-1.0)*r21*sj0*x4079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4080.value)))+(x4081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4082=IKsin(j4);
IkReal x4083=IKcos(j4);
IkReal x4084=(sj1*sj2);
IkReal x4085=((1.0)*cj1*cj2);
IkReal x4086=(gconst100*x4082);
IkReal x4087=(gconst101*x4083);
IkReal x4088=((1.0)*gconst101*x4082);
IkReal x4089=((1.0)*gconst100*x4083);
evalcond[0]=((((-1.0)*r20*x4088))+((r21*x4086))+((r22*x4083)));
evalcond[1]=(cj0+((r12*x4083))+((r11*x4086))+(((-1.0)*r10*x4088)));
evalcond[2]=(((r01*x4086))+(((-1.0)*sj0))+(((-1.0)*r00*x4088))+((r02*x4083)));
evalcond[3]=((((-1.0)*r21*x4089))+((cj2*sj1))+((r20*x4087))+((cj1*sj2))+((r22*x4082)));
evalcond[4]=(((r00*x4087))+((cj0*x4084))+(((-1.0)*r01*x4089))+((r02*x4082))+(((-1.0)*cj0*x4085)));
evalcond[5]=((((-1.0)*r11*x4089))+((r10*x4087))+((r12*x4082))+(((-1.0)*sj0*x4085))+((sj0*x4084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4090=((1.0)*gconst100);
CheckValue<IkReal> x4091 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst101*r20))+(((-1.0)*cj0*r21*x4090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4091.valid){
continue;
}
CheckValue<IkReal> x4092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4090))+(((-1.0)*gconst101*r01)))),-1);
if(!x4092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4091.value)+(((1.5707963267949)*(x4092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4093=IKsin(j4);
IkReal x4094=IKcos(j4);
IkReal x4095=(sj1*sj2);
IkReal x4096=((1.0)*cj1*cj2);
IkReal x4097=(gconst100*x4093);
IkReal x4098=(gconst101*x4094);
IkReal x4099=((1.0)*gconst101*x4093);
IkReal x4100=((1.0)*gconst100*x4094);
evalcond[0]=((((-1.0)*r20*x4099))+((r21*x4097))+((r22*x4094)));
evalcond[1]=((((-1.0)*r10*x4099))+cj0+((r11*x4097))+((r12*x4094)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4097))+(((-1.0)*r00*x4099))+((r02*x4094)));
evalcond[3]=(((r20*x4098))+((cj2*sj1))+((cj1*sj2))+((r22*x4093))+(((-1.0)*r21*x4100)));
evalcond[4]=((((-1.0)*cj0*x4096))+((r00*x4098))+((cj0*x4095))+((r02*x4093))+(((-1.0)*r01*x4100)));
evalcond[5]=(((r10*x4098))+(((-1.0)*r11*x4100))+((r12*x4093))+(((-1.0)*sj0*x4096))+((sj0*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4101=((-1.0)*r10);
IkReal x4103 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4103)==0){
continue;
}
IkReal x4102=pow(x4103,-0.5);
CheckValue<IkReal> x4104 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4101),IKFAST_ATAN2_MAGTHRESH);
if(!x4104.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4104.value));
IkReal gconst103=(r11*x4102);
IkReal gconst104=(x4101*x4102);
CheckValue<IkReal> x4105 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4105.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4105.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4106=((-1.0)*r10);
IkReal x4107=x4102;
CheckValue<IkReal> x4109 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4106),IKFAST_ATAN2_MAGTHRESH);
if(!x4109.valid){
continue;
}
IkReal x4108=((-1.0)*(x4109.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4108;
IkReal gconst102=x4108;
IkReal gconst103=(r11*x4107);
IkReal gconst104=(x4106*x4107);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4110=((-1.0)*r10);
IkReal x4111=x4102;
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4110),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
IkReal x4112=((-1.0)*(x4113.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4112;
IkReal gconst102=x4112;
IkReal gconst103=(r11*x4111);
IkReal gconst104=(x4110*x4111);
IkReal x4114=r12*r12;
IkReal x4115=((1.0)*sj0);
IkReal x4116=(cj0*r02);
IkReal x4117=x4102;
j4eval[0]=((IKabs(((((-1.0)*r12*x4115))+(((-1.0)*x4116)))))+(IKabs((((r12*x4116*x4117))+(((-1.0)*x4115*x4117))+((sj0*x4114*x4117))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4118=((-1.0)*r10);
IkReal x4119=x4102;
CheckValue<IkReal> x4121 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4118),IKFAST_ATAN2_MAGTHRESH);
if(!x4121.valid){
continue;
}
IkReal x4120=((-1.0)*(x4121.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4120;
IkReal gconst102=x4120;
IkReal gconst103=(r11*x4119);
IkReal gconst104=(x4118*x4119);
IkReal x4122=r12*r12;
IkReal x4123=((1.0)+(((-1.0)*x4122)));
IkReal x4124=(cj2*r22*sj1);
IkReal x4125=(cj1*r22*sj2);
CheckValue<IkReal> x4132=IKPowWithIntegerCheck(x4123,-1);
if(!x4132.valid){
continue;
}
IkReal x4126=x4132.value;
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(((-1.0)+x4122),-1);
if(!x4133.valid){
continue;
}
IkReal x4127=x4133.value;
IkReal x4128=((1.0)*x4126);
if((x4123) < -0.00001)
continue;
IkReal x4129=IKsqrt(x4123);
IkReal x4130=((1.0)*r12*x4127*x4129);
IkReal x4131=((((-2.0)*r10*r11*r20*r21*x4126))+(((-1.0)*x4128*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4128*(r11*r11)*(r21*r21))));
j4eval[0]=x4131;
j4eval[1]=IKsign(x4131);
j4eval[2]=((IKabs(((((-1.0)*x4125*x4130))+(((-1.0)*x4124*x4130)))))+(IKabs((x4125+x4124))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4134=(cj2*sj1);
IkReal x4135=(gconst103*r21);
IkReal x4136=(gconst104*r20);
IkReal x4137=(cj1*sj2);
CheckValue<IkReal> x4138 = IKatan2WithCheck(IkReal((((r22*x4134))+((r22*x4137)))),IkReal((((x4136*x4137))+((x4134*x4136))+(((-1.0)*x4134*x4135))+(((-1.0)*x4135*x4137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4138.valid){
continue;
}
CheckValue<IkReal> x4139=IKPowWithIntegerCheck(IKsign(((((2.0)*x4135*x4136))+(((-1.0)*(x4136*x4136)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4135*x4135))))),-1);
if(!x4139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4138.value)+(((1.5707963267949)*(x4139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4140=IKsin(j4);
IkReal x4141=IKcos(j4);
IkReal x4142=(gconst103*r11);
IkReal x4143=(sj1*sj2);
IkReal x4144=(gconst103*r01);
IkReal x4145=(gconst103*r21);
IkReal x4146=(gconst104*x4141);
IkReal x4147=((1.0)*cj1*cj2);
IkReal x4148=((1.0)*x4141);
IkReal x4149=((1.0)*gconst104*x4140);
evalcond[0]=(((r22*x4141))+((x4140*x4145))+(((-1.0)*r20*x4149)));
evalcond[1]=(cj0+((r12*x4141))+(((-1.0)*r10*x4149))+((x4140*x4142)));
evalcond[2]=(((r02*x4141))+(((-1.0)*sj0))+(((-1.0)*r00*x4149))+((x4140*x4144)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x4140))+(((-1.0)*x4145*x4148))+((r20*x4146)));
evalcond[4]=((((-1.0)*cj0*x4147))+((r02*x4140))+(((-1.0)*x4144*x4148))+((r00*x4146))+((cj0*x4143)));
evalcond[5]=(((r10*x4146))+((r12*x4140))+(((-1.0)*sj0*x4147))+((sj0*x4143))+(((-1.0)*x4142*x4148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4150=((1.0)*sj0);
IkReal x4151=((1.0)*cj0);
CheckValue<IkReal> x4152 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4151))+(((-1.0)*r12*x4150)))),IkReal((((cj0*gconst103*r01))+(((-1.0)*gconst104*r10*x4150))+(((-1.0)*gconst104*r00*x4151))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4152.valid){
continue;
}
CheckValue<IkReal> x4153=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*gconst104*r21)))),-1);
if(!x4153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4152.value)+(((1.5707963267949)*(x4153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4154=IKsin(j4);
IkReal x4155=IKcos(j4);
IkReal x4156=(gconst103*r11);
IkReal x4157=(sj1*sj2);
IkReal x4158=(gconst103*r01);
IkReal x4159=(gconst103*r21);
IkReal x4160=(gconst104*x4155);
IkReal x4161=((1.0)*cj1*cj2);
IkReal x4162=((1.0)*x4155);
IkReal x4163=((1.0)*gconst104*x4154);
evalcond[0]=(((r22*x4155))+(((-1.0)*r20*x4163))+((x4154*x4159)));
evalcond[1]=(cj0+(((-1.0)*r10*x4163))+((r12*x4155))+((x4154*x4156)));
evalcond[2]=((((-1.0)*r00*x4163))+((r02*x4155))+(((-1.0)*sj0))+((x4154*x4158)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x4159*x4162))+((cj1*sj2))+((r20*x4160))+((r22*x4154)));
evalcond[4]=(((r02*x4154))+((r00*x4160))+(((-1.0)*x4158*x4162))+((cj0*x4157))+(((-1.0)*cj0*x4161)));
evalcond[5]=(((r10*x4160))+((r12*x4154))+((sj0*x4157))+(((-1.0)*sj0*x4161))+(((-1.0)*x4156*x4162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4164=((1.0)*gconst103);
CheckValue<IkReal> x4165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4164))+(((-1.0)*gconst104*r01)))),-1);
if(!x4165.valid){
continue;
}
CheckValue<IkReal> x4166 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst104*r20))+(((-1.0)*cj0*r21*x4164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4165.value)))+(x4166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4167=IKsin(j4);
IkReal x4168=IKcos(j4);
IkReal x4169=(gconst103*r11);
IkReal x4170=(sj1*sj2);
IkReal x4171=(gconst103*r01);
IkReal x4172=(gconst103*r21);
IkReal x4173=(gconst104*x4168);
IkReal x4174=((1.0)*cj1*cj2);
IkReal x4175=((1.0)*x4168);
IkReal x4176=((1.0)*gconst104*x4167);
evalcond[0]=(((r22*x4168))+(((-1.0)*r20*x4176))+((x4167*x4172)));
evalcond[1]=(cj0+((x4167*x4169))+((r12*x4168))+(((-1.0)*r10*x4176)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x4176))+((r02*x4168))+((x4167*x4171)));
evalcond[3]=(((r22*x4167))+((cj2*sj1))+(((-1.0)*x4172*x4175))+((cj1*sj2))+((r20*x4173)));
evalcond[4]=(((cj0*x4170))+(((-1.0)*x4171*x4175))+(((-1.0)*cj0*x4174))+((r02*x4167))+((r00*x4173)));
evalcond[5]=((((-1.0)*sj0*x4174))+(((-1.0)*x4169*x4175))+((sj0*x4170))+((r12*x4167))+((r10*x4173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4177=((-1.0)*r11);
IkReal x4179 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4179)==0){
continue;
}
IkReal x4178=pow(x4179,-0.5);
CheckValue<IkReal> x4180 = IKatan2WithCheck(IkReal(x4177),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4180.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4180.value))));
IkReal gconst106=(x4177*x4178);
IkReal gconst107=((1.0)*r10*x4178);
CheckValue<IkReal> x4181 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4181.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4181.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4182=((-1.0)*r11);
CheckValue<IkReal> x4185 = IKatan2WithCheck(IkReal(x4182),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4185.valid){
continue;
}
IkReal x4183=((1.0)*(x4185.value));
IkReal x4184=x4178;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4183)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4183)));
IkReal gconst106=(x4182*x4184);
IkReal gconst107=((1.0)*r10*x4184);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4186=((1.0)*sj0);
IkReal x4187=((1.0)*gconst107);
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4187))+(((-1.0)*gconst106*r20)))),-1);
if(!x4188.valid){
continue;
}
CheckValue<IkReal> x4189 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4186))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst106*r01))+(((-1.0)*cj0*r00*x4187))+((gconst106*r11*sj0))+(((-1.0)*gconst107*r10*x4186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4188.value)))+(x4189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4190=IKsin(j4);
IkReal x4191=IKcos(j4);
IkReal x4192=(sj1*sj2);
IkReal x4193=((1.0)*cj1*cj2);
IkReal x4194=(gconst106*x4190);
IkReal x4195=(gconst107*x4191);
IkReal x4196=((1.0)*gconst107*x4190);
IkReal x4197=((1.0)*gconst106*x4191);
evalcond[0]=((((-1.0)*r20*x4196))+((r21*x4194))+((r22*x4191)));
evalcond[1]=(((r12*x4191))+((r11*x4194))+cj0+(((-1.0)*r10*x4196)));
evalcond[2]=((((-1.0)*r00*x4196))+(((-1.0)*sj0))+((r02*x4191))+((r01*x4194)));
evalcond[3]=(((cj2*sj1))+((r20*x4195))+((cj1*sj2))+(((-1.0)*r21*x4197))+((r22*x4190)));
evalcond[4]=(((cj0*x4192))+(((-1.0)*r01*x4197))+((r02*x4190))+(((-1.0)*cj0*x4193))+((r00*x4195)));
evalcond[5]=(((r12*x4190))+(((-1.0)*r11*x4197))+(((-1.0)*sj0*x4193))+((sj0*x4192))+((r10*x4195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4198=((1.0)*gconst106);
CheckValue<IkReal> x4199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4198))+(((-1.0)*gconst107*r01)))),-1);
if(!x4199.valid){
continue;
}
CheckValue<IkReal> x4200 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*r21*x4198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4199.value)))+(x4200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4201=IKsin(j4);
IkReal x4202=IKcos(j4);
IkReal x4203=(sj1*sj2);
IkReal x4204=((1.0)*cj1*cj2);
IkReal x4205=(gconst106*x4201);
IkReal x4206=(gconst107*x4202);
IkReal x4207=((1.0)*gconst107*x4201);
IkReal x4208=((1.0)*gconst106*x4202);
evalcond[0]=(((r22*x4202))+((r21*x4205))+(((-1.0)*r20*x4207)));
evalcond[1]=((((-1.0)*r10*x4207))+((r11*x4205))+cj0+((r12*x4202)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4202))+(((-1.0)*r00*x4207))+((r01*x4205)));
evalcond[3]=(((cj2*sj1))+((r22*x4201))+((cj1*sj2))+((r20*x4206))+(((-1.0)*r21*x4208)));
evalcond[4]=(((cj0*x4203))+((r02*x4201))+(((-1.0)*r01*x4208))+((r00*x4206))+(((-1.0)*cj0*x4204)));
evalcond[5]=((((-1.0)*r11*x4208))+((sj0*x4203))+(((-1.0)*sj0*x4204))+((r10*x4206))+((r12*x4201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4209=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4209;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4209);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4210=((1.0)*sj5);
IkReal x4211=((((-1.0)*r00*x4210))+(((-1.0)*cj5*r01)));
j4eval[0]=x4211;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4210))))));
j4eval[2]=IKsign(x4211);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4212=cj5*cj5;
IkReal x4213=r11*r11;
IkReal x4214=(r11*sj5);
IkReal x4215=(cj5*r10);
IkReal x4216=((r12*r12)+((x4212*(r10*r10)))+(((-1.0)*x4212*x4213))+(((-2.0)*x4214*x4215))+x4213);
j4eval[0]=x4216;
j4eval[1]=IKsign(x4216);
j4eval[2]=((IKabs(r12))+(IKabs((x4215+(((-1.0)*x4214))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4217=cj5*cj5;
IkReal x4218=r11*r11;
IkReal x4219=(cj5*r10);
IkReal x4220=(r11*sj5);
CheckValue<IkReal> x4221=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x4217*(r10*r10)))+(((-2.0)*x4219*x4220))+(((-1.0)*x4217*x4218))+x4218)),-1);
if(!x4221.valid){
continue;
}
CheckValue<IkReal> x4222 = IKatan2WithCheck(IkReal(((((-1.0)*x4220))+x4219)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4221.value)))+(x4222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4223=IKsin(j4);
IkReal x4224=IKcos(j4);
IkReal x4225=(cj5*r10);
IkReal x4226=(cj5*r00);
IkReal x4227=(cj5*r20);
IkReal x4228=((1.0)*x4223);
IkReal x4229=(sj5*x4223);
IkReal x4230=((1.0)*sj5*x4224);
evalcond[0]=((((-1.0)*x4227*x4228))+((r22*x4224))+((r21*x4229)));
evalcond[1]=(((r01*x4229))+(((-1.0)*x4226*x4228))+((r02*x4224)));
evalcond[2]=(((x4224*x4225))+(((-1.0)*r11*x4230))+((r12*x4223)));
evalcond[3]=((1.0)+(((-1.0)*x4225*x4228))+((r11*x4229))+((r12*x4224)));
evalcond[4]=(((x4224*x4227))+((cj2*sj1))+((cj1*sj2))+((r22*x4223))+(((-1.0)*r21*x4230)));
evalcond[5]=(((x4224*x4226))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x4223))+(((-1.0)*r01*x4230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4231=((1.0)*sj5);
CheckValue<IkReal> x4232 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4232.valid){
continue;
}
CheckValue<IkReal> x4233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4231))+(((-1.0)*cj5*r01)))),-1);
if(!x4233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4232.value)+(((1.5707963267949)*(x4233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4234=IKsin(j4);
IkReal x4235=IKcos(j4);
IkReal x4236=(cj5*r10);
IkReal x4237=(cj5*r00);
IkReal x4238=(cj5*r20);
IkReal x4239=((1.0)*x4234);
IkReal x4240=(sj5*x4234);
IkReal x4241=((1.0)*sj5*x4235);
evalcond[0]=(((r22*x4235))+(((-1.0)*x4238*x4239))+((r21*x4240)));
evalcond[1]=(((r01*x4240))+((r02*x4235))+(((-1.0)*x4237*x4239)));
evalcond[2]=(((r12*x4234))+((x4235*x4236))+(((-1.0)*r11*x4241)));
evalcond[3]=((1.0)+((r12*x4235))+(((-1.0)*x4236*x4239))+((r11*x4240)));
evalcond[4]=(((x4235*x4238))+((cj2*sj1))+((cj1*sj2))+((r22*x4234))+(((-1.0)*r21*x4241)));
evalcond[5]=((((-1.0)*r01*x4241))+((x4235*x4237))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x4234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4242=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4242.valid){
continue;
}
CheckValue<IkReal> x4243 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4242.value)))+(x4243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4244=IKsin(j4);
IkReal x4245=IKcos(j4);
IkReal x4246=(cj5*r10);
IkReal x4247=(cj5*r00);
IkReal x4248=(cj5*r20);
IkReal x4249=((1.0)*x4244);
IkReal x4250=(sj5*x4244);
IkReal x4251=((1.0)*sj5*x4245);
evalcond[0]=((((-1.0)*x4248*x4249))+((r22*x4245))+((r21*x4250)));
evalcond[1]=((((-1.0)*x4247*x4249))+((r01*x4250))+((r02*x4245)));
evalcond[2]=(((x4245*x4246))+((r12*x4244))+(((-1.0)*r11*x4251)));
evalcond[3]=((1.0)+((r11*x4250))+(((-1.0)*x4246*x4249))+((r12*x4245)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x4244))+(((-1.0)*r21*x4251))+((x4245*x4248)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x4244))+(((-1.0)*r01*x4251))+((x4245*x4247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4252=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4252;
j4eval[1]=IKsign(x4252);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4253=((1.0)*sj5);
IkReal x4254=((((-1.0)*cj5*r21))+(((-1.0)*r20*x4253)));
j4eval[0]=x4254;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4253))+((cj5*r00))))));
j4eval[2]=IKsign(x4254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4255=cj5*cj5;
IkReal x4256=r11*r11;
IkReal x4257=(cj5*r10);
IkReal x4258=(r11*sj5);
IkReal x4259=((((2.0)*x4257*x4258))+(((-1.0)*(r12*r12)))+(((-1.0)*x4256))+(((-1.0)*x4255*(r10*r10)))+((x4255*x4256)));
j4eval[0]=x4259;
j4eval[1]=((IKabs(r12))+(IKabs((x4257+(((-1.0)*x4258))))));
j4eval[2]=IKsign(x4259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4260=cj5*cj5;
IkReal x4261=r11*r11;
IkReal x4262=(cj5*r10);
IkReal x4263=(r11*sj5);
CheckValue<IkReal> x4264=IKPowWithIntegerCheck(IKsign(((((2.0)*x4262*x4263))+(((-1.0)*x4260*(r10*r10)))+(((-1.0)*(r12*r12)))+((x4260*x4261))+(((-1.0)*x4261)))),-1);
if(!x4264.valid){
continue;
}
CheckValue<IkReal> x4265 = IKatan2WithCheck(IkReal((x4262+(((-1.0)*x4263)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4264.value)))+(x4265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4266=IKsin(j4);
IkReal x4267=IKcos(j4);
IkReal x4268=(cj5*r10);
IkReal x4269=(cj5*r00);
IkReal x4270=(cj5*r20);
IkReal x4271=((1.0)*x4266);
IkReal x4272=(sj5*x4266);
IkReal x4273=((1.0)*sj5*x4267);
evalcond[0]=(((r21*x4272))+(((-1.0)*x4270*x4271))+((r22*x4267)));
evalcond[1]=(((r02*x4267))+(((-1.0)*x4269*x4271))+((r01*x4272)));
evalcond[2]=((((-1.0)*r11*x4273))+((x4267*x4268))+((r12*x4266)));
evalcond[3]=((-1.0)+((r11*x4272))+((r12*x4267))+(((-1.0)*x4268*x4271)));
evalcond[4]=(((cj2*sj1))+((x4267*x4270))+(((-1.0)*r21*x4273))+((cj1*sj2))+((r22*x4266)));
evalcond[5]=(((r02*x4266))+((x4267*x4269))+(((-1.0)*sj1*sj2))+(((-1.0)*r01*x4273))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4274=((1.0)*sj5);
CheckValue<IkReal> x4275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4274))+(((-1.0)*cj5*r21)))),-1);
if(!x4275.valid){
continue;
}
CheckValue<IkReal> x4276 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x4274))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4275.value)))+(x4276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4277=IKsin(j4);
IkReal x4278=IKcos(j4);
IkReal x4279=(cj5*r10);
IkReal x4280=(cj5*r00);
IkReal x4281=(cj5*r20);
IkReal x4282=((1.0)*x4277);
IkReal x4283=(sj5*x4277);
IkReal x4284=((1.0)*sj5*x4278);
evalcond[0]=(((r21*x4283))+(((-1.0)*x4281*x4282))+((r22*x4278)));
evalcond[1]=(((r02*x4278))+(((-1.0)*x4280*x4282))+((r01*x4283)));
evalcond[2]=(((x4278*x4279))+((r12*x4277))+(((-1.0)*r11*x4284)));
evalcond[3]=((-1.0)+((r11*x4283))+((r12*x4278))+(((-1.0)*x4279*x4282)));
evalcond[4]=(((cj2*sj1))+((x4278*x4281))+(((-1.0)*r21*x4284))+((cj1*sj2))+((r22*x4277)));
evalcond[5]=(((r02*x4277))+((x4278*x4280))+(((-1.0)*sj1*sj2))+(((-1.0)*r01*x4284))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4285=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4285.valid){
continue;
}
CheckValue<IkReal> x4286 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4285.value)))+(x4286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4287=IKsin(j4);
IkReal x4288=IKcos(j4);
IkReal x4289=(cj5*r10);
IkReal x4290=(cj5*r00);
IkReal x4291=(cj5*r20);
IkReal x4292=((1.0)*x4287);
IkReal x4293=(sj5*x4287);
IkReal x4294=((1.0)*sj5*x4288);
evalcond[0]=(((r22*x4288))+(((-1.0)*x4291*x4292))+((r21*x4293)));
evalcond[1]=(((r01*x4293))+(((-1.0)*x4290*x4292))+((r02*x4288)));
evalcond[2]=(((r12*x4287))+(((-1.0)*r11*x4294))+((x4288*x4289)));
evalcond[3]=((-1.0)+((r12*x4288))+(((-1.0)*x4289*x4292))+((r11*x4293)));
evalcond[4]=(((cj2*sj1))+((r22*x4287))+((x4288*x4291))+((cj1*sj2))+(((-1.0)*r21*x4294)));
evalcond[5]=((((-1.0)*r01*x4294))+((x4288*x4290))+(((-1.0)*sj1*sj2))+((r02*x4287))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4295=((-1.0)*r00);
IkReal x4297 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4297)==0){
continue;
}
IkReal x4296=pow(x4297,-0.5);
CheckValue<IkReal> x4298 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4295),IKFAST_ATAN2_MAGTHRESH);
if(!x4298.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4298.value));
IkReal gconst109=(r01*x4296);
IkReal gconst110=(x4295*x4296);
CheckValue<IkReal> x4299 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4299.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4299.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4300=((-1.0)*r00);
IkReal x4301=x4296;
CheckValue<IkReal> x4303 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4300),IKFAST_ATAN2_MAGTHRESH);
if(!x4303.valid){
continue;
}
IkReal x4302=((-1.0)*(x4303.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4302;
IkReal gconst108=x4302;
IkReal gconst109=(r01*x4301);
IkReal gconst110=(x4300*x4301);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4304=((-1.0)*r00);
IkReal x4305=x4296;
CheckValue<IkReal> x4307 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4304),IKFAST_ATAN2_MAGTHRESH);
if(!x4307.valid){
continue;
}
IkReal x4306=((-1.0)*(x4307.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4306;
IkReal gconst108=x4306;
IkReal gconst109=(r01*x4305);
IkReal gconst110=(x4304*x4305);
IkReal x4308=r02*r02;
IkReal x4309=(r12*sj0);
IkReal x4310=((1.0)*cj0);
IkReal x4311=x4296;
j4eval[0]=((IKabs(((((-1.0)*x4309))+(((-1.0)*r02*x4310)))))+(IKabs(((((-1.0)*x4310*x4311))+((r02*x4309*x4311))+((cj0*x4308*x4311))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4312=((-1.0)*r00);
IkReal x4313=x4296;
CheckValue<IkReal> x4315 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4312),IKFAST_ATAN2_MAGTHRESH);
if(!x4315.valid){
continue;
}
IkReal x4314=((-1.0)*(x4315.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4314;
IkReal gconst108=x4314;
IkReal gconst109=(r01*x4313);
IkReal gconst110=(x4312*x4313);
IkReal x4316=r02*r02;
IkReal x4317=((1.0)+(((-1.0)*x4316)));
IkReal x4318=(cj2*r22*sj1);
IkReal x4319=(cj1*r22*sj2);
CheckValue<IkReal> x4326=IKPowWithIntegerCheck(x4317,-1);
if(!x4326.valid){
continue;
}
IkReal x4320=x4326.value;
CheckValue<IkReal> x4327=IKPowWithIntegerCheck(((-1.0)+x4316),-1);
if(!x4327.valid){
continue;
}
IkReal x4321=x4327.value;
IkReal x4322=((1.0)*x4320);
if((x4317) < -0.00001)
continue;
IkReal x4323=IKsqrt(x4317);
IkReal x4324=((1.0)*r02*x4321*x4323);
IkReal x4325=((((-2.0)*r00*r01*r20*r21*x4320))+(((-1.0)*x4322*(r00*r00)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4322*(r01*r01)*(r21*r21))));
j4eval[0]=x4325;
j4eval[1]=((IKabs(((((-1.0)*x4319*x4324))+(((-1.0)*x4318*x4324)))))+(IKabs((x4318+x4319))));
j4eval[2]=IKsign(x4325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4328=(gconst109*r21);
IkReal x4329=(cj1*sj2);
IkReal x4330=(gconst110*r20);
IkReal x4331=(cj2*sj1);
CheckValue<IkReal> x4332=IKPowWithIntegerCheck(IKsign(((((2.0)*x4328*x4330))+(((-1.0)*(x4330*x4330)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4328*x4328))))),-1);
if(!x4332.valid){
continue;
}
CheckValue<IkReal> x4333 = IKatan2WithCheck(IkReal((((r22*x4331))+((r22*x4329)))),IkReal((((x4329*x4330))+(((-1.0)*x4328*x4331))+(((-1.0)*x4328*x4329))+((x4330*x4331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4332.value)))+(x4333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4334=IKsin(j4);
IkReal x4335=IKcos(j4);
IkReal x4336=(gconst110*r00);
IkReal x4337=(sj1*sj2);
IkReal x4338=((1.0)*x4334);
IkReal x4339=(gconst109*x4334);
IkReal x4340=(gconst110*x4335);
IkReal x4341=((1.0)*cj1*cj2);
IkReal x4342=((1.0)*gconst109*x4335);
evalcond[0]=(((r21*x4339))+((r22*x4335))+(((-1.0)*gconst110*r20*x4338)));
evalcond[1]=(cj0+((r12*x4335))+((r11*x4339))+(((-1.0)*gconst110*r10*x4338)));
evalcond[2]=(((r01*x4339))+(((-1.0)*sj0))+((r02*x4335))+(((-1.0)*x4336*x4338)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x4334))+(((-1.0)*r21*x4342))+((r20*x4340)));
evalcond[4]=(((cj0*x4337))+(((-1.0)*cj0*x4341))+((x4335*x4336))+((r02*x4334))+(((-1.0)*r01*x4342)));
evalcond[5]=((((-1.0)*r11*x4342))+(((-1.0)*sj0*x4341))+((sj0*x4337))+((r12*x4334))+((r10*x4340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4343=((1.0)*sj0);
IkReal x4344=((1.0)*gconst110);
CheckValue<IkReal> x4345=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x4344)))),-1);
if(!x4345.valid){
continue;
}
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4343))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst109*r01))+(((-1.0)*gconst110*r10*x4343))+(((-1.0)*cj0*r00*x4344))+((gconst109*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4345.value)))+(x4346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4347=IKsin(j4);
IkReal x4348=IKcos(j4);
IkReal x4349=(gconst110*r00);
IkReal x4350=(sj1*sj2);
IkReal x4351=((1.0)*x4347);
IkReal x4352=(gconst109*x4347);
IkReal x4353=(gconst110*x4348);
IkReal x4354=((1.0)*cj1*cj2);
IkReal x4355=((1.0)*gconst109*x4348);
evalcond[0]=(((r22*x4348))+(((-1.0)*gconst110*r20*x4351))+((r21*x4352)));
evalcond[1]=((((-1.0)*gconst110*r10*x4351))+cj0+((r12*x4348))+((r11*x4352)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4349*x4351))+((r02*x4348))+((r01*x4352)));
evalcond[3]=((((-1.0)*r21*x4355))+((cj2*sj1))+((r20*x4353))+((cj1*sj2))+((r22*x4347)));
evalcond[4]=((((-1.0)*r01*x4355))+((cj0*x4350))+(((-1.0)*cj0*x4354))+((x4348*x4349))+((r02*x4347)));
evalcond[5]=((((-1.0)*r11*x4355))+(((-1.0)*sj0*x4354))+((r12*x4347))+((sj0*x4350))+((r10*x4353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4356=((1.0)*gconst109);
CheckValue<IkReal> x4357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4356))+(((-1.0)*gconst110*r11)))),-1);
if(!x4357.valid){
continue;
}
CheckValue<IkReal> x4358 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4356))+((gconst110*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4357.value)))+(x4358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4359=IKsin(j4);
IkReal x4360=IKcos(j4);
IkReal x4361=(gconst110*r00);
IkReal x4362=(sj1*sj2);
IkReal x4363=((1.0)*x4359);
IkReal x4364=(gconst109*x4359);
IkReal x4365=(gconst110*x4360);
IkReal x4366=((1.0)*cj1*cj2);
IkReal x4367=((1.0)*gconst109*x4360);
evalcond[0]=(((r21*x4364))+(((-1.0)*gconst110*r20*x4363))+((r22*x4360)));
evalcond[1]=(cj0+((r11*x4364))+((r12*x4360))+(((-1.0)*gconst110*r10*x4363)));
evalcond[2]=((((-1.0)*x4361*x4363))+(((-1.0)*sj0))+((r01*x4364))+((r02*x4360)));
evalcond[3]=(((cj2*sj1))+((r20*x4365))+((cj1*sj2))+((r22*x4359))+(((-1.0)*r21*x4367)));
evalcond[4]=(((r02*x4359))+((cj0*x4362))+((x4360*x4361))+(((-1.0)*cj0*x4366))+(((-1.0)*r01*x4367)));
evalcond[5]=((((-1.0)*sj0*x4366))+((r10*x4365))+((sj0*x4362))+(((-1.0)*r11*x4367))+((r12*x4359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4368=((-1.0)*r01);
IkReal x4370 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4370)==0){
continue;
}
IkReal x4369=pow(x4370,-0.5);
CheckValue<IkReal> x4371 = IKatan2WithCheck(IkReal(x4368),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4371.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4371.value))));
IkReal gconst112=(x4368*x4369);
IkReal gconst113=((1.0)*r00*x4369);
CheckValue<IkReal> x4372 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4372.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4372.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4373=((-1.0)*r01);
CheckValue<IkReal> x4376 = IKatan2WithCheck(IkReal(x4373),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4376.valid){
continue;
}
IkReal x4374=((1.0)*(x4376.value));
IkReal x4375=x4369;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4374)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4374)));
IkReal gconst112=(x4373*x4375);
IkReal gconst113=((1.0)*r00*x4375);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4377=((-1.0)*r01);
CheckValue<IkReal> x4380 = IKatan2WithCheck(IkReal(x4377),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4380.valid){
continue;
}
IkReal x4378=((1.0)*(x4380.value));
IkReal x4379=x4369;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4378)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4378)));
IkReal gconst112=(x4377*x4379);
IkReal gconst113=((1.0)*r00*x4379);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4381=((1.0)*sj0);
IkReal x4382=((1.0)*cj0);
CheckValue<IkReal> x4383 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4382))+(((-1.0)*r12*x4381)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*gconst113*r10*x4381))+(((-1.0)*gconst113*r00*x4382))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4383.valid){
continue;
}
CheckValue<IkReal> x4384=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*gconst112*r20)))),-1);
if(!x4384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4383.value)+(((1.5707963267949)*(x4384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4385=IKsin(j4);
IkReal x4386=IKcos(j4);
IkReal x4387=(sj1*sj2);
IkReal x4388=((1.0)*cj1*cj2);
IkReal x4389=(gconst112*x4385);
IkReal x4390=(gconst113*x4386);
IkReal x4391=((1.0)*gconst112*x4386);
IkReal x4392=((1.0)*gconst113*x4385);
evalcond[0]=(((r22*x4386))+((r21*x4389))+(((-1.0)*r20*x4392)));
evalcond[1]=(cj0+(((-1.0)*r10*x4392))+((r11*x4389))+((r12*x4386)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x4392))+((r02*x4386))+((r01*x4389)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x4385))+((r20*x4390))+(((-1.0)*r21*x4391)));
evalcond[4]=((((-1.0)*cj0*x4388))+(((-1.0)*r01*x4391))+((r02*x4385))+((r00*x4390))+((cj0*x4387)));
evalcond[5]=((((-1.0)*r11*x4391))+((sj0*x4387))+(((-1.0)*sj0*x4388))+((r10*x4390))+((r12*x4385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4393=((1.0)*gconst112);
CheckValue<IkReal> x4394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4393))+(((-1.0)*gconst113*r11)))),-1);
if(!x4394.valid){
continue;
}
CheckValue<IkReal> x4395 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4393))+((gconst113*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4394.value)))+(x4395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4396=IKsin(j4);
IkReal x4397=IKcos(j4);
IkReal x4398=(sj1*sj2);
IkReal x4399=((1.0)*cj1*cj2);
IkReal x4400=(gconst112*x4396);
IkReal x4401=(gconst113*x4397);
IkReal x4402=((1.0)*gconst112*x4397);
IkReal x4403=((1.0)*gconst113*x4396);
evalcond[0]=(((r21*x4400))+((r22*x4397))+(((-1.0)*r20*x4403)));
evalcond[1]=(((r11*x4400))+cj0+(((-1.0)*r10*x4403))+((r12*x4397)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4397))+(((-1.0)*r00*x4403))+((r01*x4400)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x4396))+(((-1.0)*r21*x4402))+((r20*x4401)));
evalcond[4]=(((cj0*x4398))+(((-1.0)*cj0*x4399))+((r00*x4401))+((r02*x4396))+(((-1.0)*r01*x4402)));
evalcond[5]=((((-1.0)*r11*x4402))+((r10*x4401))+(((-1.0)*sj0*x4399))+((sj0*x4398))+((r12*x4396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4404=((1.0)*gconst112);
CheckValue<IkReal> x4405 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst113*r20))+(((-1.0)*cj0*r21*x4404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4405.valid){
continue;
}
CheckValue<IkReal> x4406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4404))+(((-1.0)*gconst113*r01)))),-1);
if(!x4406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4405.value)+(((1.5707963267949)*(x4406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4407=IKsin(j4);
IkReal x4408=IKcos(j4);
IkReal x4409=(sj1*sj2);
IkReal x4410=((1.0)*cj1*cj2);
IkReal x4411=(gconst112*x4407);
IkReal x4412=(gconst113*x4408);
IkReal x4413=((1.0)*gconst112*x4408);
IkReal x4414=((1.0)*gconst113*x4407);
evalcond[0]=(((r21*x4411))+((r22*x4408))+(((-1.0)*r20*x4414)));
evalcond[1]=(((r11*x4411))+cj0+(((-1.0)*r10*x4414))+((r12*x4408)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4411))+(((-1.0)*r00*x4414))+((r02*x4408)));
evalcond[3]=(((r22*x4407))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x4413))+((r20*x4412)));
evalcond[4]=((((-1.0)*cj0*x4410))+(((-1.0)*r01*x4413))+((r00*x4412))+((cj0*x4409))+((r02*x4407)));
evalcond[5]=(((r12*x4407))+(((-1.0)*r11*x4413))+(((-1.0)*sj0*x4410))+((r10*x4412))+((sj0*x4409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4415=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4415;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4415);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4416=((1.0)*sj5);
IkReal x4417=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4416)));
j4eval[0]=x4417;
j4eval[1]=IKsign(x4417);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4416))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4418=cj5*cj5;
IkReal x4419=r01*r01;
IkReal x4420=(r01*sj5);
IkReal x4421=(cj5*r00);
IkReal x4422=(((x4418*x4419))+(((-1.0)*(r02*r02)))+(((-1.0)*x4419))+(((2.0)*x4420*x4421))+(((-1.0)*x4418*(r00*r00))));
j4eval[0]=x4422;
j4eval[1]=IKsign(x4422);
j4eval[2]=((IKabs(r02))+(IKabs((x4421+(((-1.0)*x4420))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4423=cj5*cj5;
IkReal x4424=r01*r01;
IkReal x4425=(r01*sj5);
IkReal x4426=(cj5*r00);
CheckValue<IkReal> x4427 = IKatan2WithCheck(IkReal((x4426+(((-1.0)*x4425)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4427.valid){
continue;
}
CheckValue<IkReal> x4428=IKPowWithIntegerCheck(IKsign((((x4423*x4424))+(((-1.0)*x4423*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4425*x4426))+(((-1.0)*x4424)))),-1);
if(!x4428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4427.value)+(((1.5707963267949)*(x4428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4429=IKsin(j4);
IkReal x4430=IKcos(j4);
IkReal x4431=(cj5*r10);
IkReal x4432=(cj5*r00);
IkReal x4433=(cj5*r20);
IkReal x4434=((1.0)*x4429);
IkReal x4435=(sj5*x4429);
IkReal x4436=((1.0)*sj5*x4430);
evalcond[0]=(((r22*x4430))+(((-1.0)*x4433*x4434))+((r21*x4435)));
evalcond[1]=(((r12*x4430))+(((-1.0)*x4431*x4434))+((r11*x4435)));
evalcond[2]=(((r02*x4429))+((x4430*x4432))+(((-1.0)*r01*x4436)));
evalcond[3]=((-1.0)+(((-1.0)*x4432*x4434))+((r02*x4430))+((r01*x4435)));
evalcond[4]=(((cj2*sj1))+((x4430*x4433))+((cj1*sj2))+((r22*x4429))+(((-1.0)*r21*x4436)));
evalcond[5]=(((x4430*x4431))+(((-1.0)*cj1*cj2))+(((-1.0)*r11*x4436))+((sj1*sj2))+((r12*x4429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4437=((1.0)*sj5);
CheckValue<IkReal> x4438=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4437)))),-1);
if(!x4438.valid){
continue;
}
CheckValue<IkReal> x4439 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4438.value)))+(x4439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4440=IKsin(j4);
IkReal x4441=IKcos(j4);
IkReal x4442=(cj5*r10);
IkReal x4443=(cj5*r00);
IkReal x4444=(cj5*r20);
IkReal x4445=((1.0)*x4440);
IkReal x4446=(sj5*x4440);
IkReal x4447=((1.0)*sj5*x4441);
evalcond[0]=((((-1.0)*x4444*x4445))+((r21*x4446))+((r22*x4441)));
evalcond[1]=(((r11*x4446))+(((-1.0)*x4442*x4445))+((r12*x4441)));
evalcond[2]=(((x4441*x4443))+(((-1.0)*r01*x4447))+((r02*x4440)));
evalcond[3]=((-1.0)+((r01*x4446))+(((-1.0)*x4443*x4445))+((r02*x4441)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x4441*x4444))+((r22*x4440))+(((-1.0)*r21*x4447)));
evalcond[5]=((((-1.0)*r11*x4447))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4441*x4442))+((r12*x4440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4448 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4448.valid){
continue;
}
CheckValue<IkReal> x4449=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4448.value)+(((1.5707963267949)*(x4449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4450=IKsin(j4);
IkReal x4451=IKcos(j4);
IkReal x4452=(cj5*r10);
IkReal x4453=(cj5*r00);
IkReal x4454=(cj5*r20);
IkReal x4455=((1.0)*x4450);
IkReal x4456=(sj5*x4450);
IkReal x4457=((1.0)*sj5*x4451);
evalcond[0]=(((r21*x4456))+(((-1.0)*x4454*x4455))+((r22*x4451)));
evalcond[1]=(((r11*x4456))+((r12*x4451))+(((-1.0)*x4452*x4455)));
evalcond[2]=(((x4451*x4453))+(((-1.0)*r01*x4457))+((r02*x4450)));
evalcond[3]=((-1.0)+((r01*x4456))+((r02*x4451))+(((-1.0)*x4453*x4455)));
evalcond[4]=(((cj2*sj1))+((x4451*x4454))+((cj1*sj2))+(((-1.0)*r21*x4457))+((r22*x4450)));
evalcond[5]=(((x4451*x4452))+(((-1.0)*r11*x4457))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x4450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4458=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4458;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4459=((1.0)*sj5);
IkReal x4460=((((-1.0)*cj5*r21))+(((-1.0)*r20*x4459)));
j4eval[0]=x4460;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x4459))))));
j4eval[2]=IKsign(x4460);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4461=cj5*cj5;
IkReal x4462=r01*r01;
IkReal x4463=(cj5*r00);
IkReal x4464=(r01*sj5);
IkReal x4465=(x4462+(((-2.0)*x4463*x4464))+((x4461*(r00*r00)))+(((-1.0)*x4461*x4462))+(r02*r02));
j4eval[0]=x4465;
j4eval[1]=((IKabs(r02))+(IKabs((x4463+(((-1.0)*x4464))))));
j4eval[2]=IKsign(x4465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4466=cj5*cj5;
IkReal x4467=r01*r01;
IkReal x4468=(r01*sj5);
IkReal x4469=(cj5*r00);
CheckValue<IkReal> x4470=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4468*x4469))+((x4466*(r00*r00)))+x4467+(((-1.0)*x4466*x4467))+(r02*r02))),-1);
if(!x4470.valid){
continue;
}
CheckValue<IkReal> x4471 = IKatan2WithCheck(IkReal((x4469+(((-1.0)*x4468)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4470.value)))+(x4471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4472=IKsin(j4);
IkReal x4473=IKcos(j4);
IkReal x4474=(cj5*r10);
IkReal x4475=(cj5*r00);
IkReal x4476=(cj5*r20);
IkReal x4477=((1.0)*x4472);
IkReal x4478=(sj5*x4472);
IkReal x4479=((1.0)*sj5*x4473);
evalcond[0]=(((r21*x4478))+(((-1.0)*x4476*x4477))+((r22*x4473)));
evalcond[1]=((((-1.0)*x4474*x4477))+((r12*x4473))+((r11*x4478)));
evalcond[2]=(((r02*x4472))+((x4473*x4475))+(((-1.0)*r01*x4479)));
evalcond[3]=((1.0)+(((-1.0)*x4475*x4477))+((r02*x4473))+((r01*x4478)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x4479))+((r22*x4472))+((x4473*x4476)));
evalcond[5]=((((-1.0)*r11*x4479))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x4473*x4474))+((r12*x4472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4480=((1.0)*sj5);
CheckValue<IkReal> x4481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4480))+(((-1.0)*cj5*r21)))),-1);
if(!x4481.valid){
continue;
}
CheckValue<IkReal> x4482 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4481.value)))+(x4482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4483=IKsin(j4);
IkReal x4484=IKcos(j4);
IkReal x4485=(cj5*r10);
IkReal x4486=(cj5*r00);
IkReal x4487=(cj5*r20);
IkReal x4488=((1.0)*x4483);
IkReal x4489=(sj5*x4483);
IkReal x4490=((1.0)*sj5*x4484);
evalcond[0]=((((-1.0)*x4487*x4488))+((r21*x4489))+((r22*x4484)));
evalcond[1]=(((r11*x4489))+(((-1.0)*x4485*x4488))+((r12*x4484)));
evalcond[2]=(((x4484*x4486))+((r02*x4483))+(((-1.0)*r01*x4490)));
evalcond[3]=((1.0)+(((-1.0)*x4486*x4488))+((r02*x4484))+((r01*x4489)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x4484*x4487))+(((-1.0)*r21*x4490))+((r22*x4483)));
evalcond[5]=((((-1.0)*r11*x4490))+(((-1.0)*sj1*sj2))+((x4484*x4485))+((cj1*cj2))+((r12*x4483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4491=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4491.valid){
continue;
}
CheckValue<IkReal> x4492 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4491.value)))+(x4492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4493=IKsin(j4);
IkReal x4494=IKcos(j4);
IkReal x4495=(cj5*r10);
IkReal x4496=(cj5*r00);
IkReal x4497=(cj5*r20);
IkReal x4498=((1.0)*x4493);
IkReal x4499=(sj5*x4493);
IkReal x4500=((1.0)*sj5*x4494);
evalcond[0]=(((r21*x4499))+((r22*x4494))+(((-1.0)*x4497*x4498)));
evalcond[1]=(((r12*x4494))+(((-1.0)*x4495*x4498))+((r11*x4499)));
evalcond[2]=((((-1.0)*r01*x4500))+((r02*x4493))+((x4494*x4496)));
evalcond[3]=((1.0)+(((-1.0)*x4496*x4498))+((r02*x4494))+((r01*x4499)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x4494*x4497))+((r22*x4493))+(((-1.0)*r21*x4500)));
evalcond[5]=(((r12*x4493))+(((-1.0)*sj1*sj2))+((x4494*x4495))+((cj1*cj2))+(((-1.0)*r11*x4500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4501=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4501);
rxp1_1=(px*r21);
rxp1_2=(r11*x4501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4502=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4502);
rxp1_1=(px*r21);
rxp1_2=(r11*x4502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4503=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4503);
rxp1_1=(px*r21);
rxp1_2=(r11*x4503);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4506=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x4506.valid){
continue;
}
IkReal x4504=x4506.value;
IkReal x4505=(sj0*x4504);
cj4array[0]=(((cj1*cj2*x4505))+(((-1.0)*sj1*sj2*x4505)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4507=IKsin(j4);
IkReal x4508=IKcos(j4);
IkReal x4509=(r21*sj5);
IkReal x4510=(cj5*r20);
IkReal x4511=((1.0)*x4507);
evalcond[0]=(r02*x4507);
evalcond[1]=((((-1.0)*sj0))+((r02*x4508)));
evalcond[2]=(((x4507*x4509))+(((-1.0)*x4510*x4511)));
evalcond[3]=((((-1.0)*cj5*r10*x4511))+((r11*sj5*x4507)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4508*x4509))+((x4508*x4510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4514=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x4514.valid){
continue;
}
IkReal x4512=x4514.value;
IkReal x4513=((1.0)*x4512);
cj4array[0]=((((-1.0)*cj1*sj2*x4513))+(((-1.0)*cj2*sj1*x4513)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4515=IKsin(j4);
IkReal x4516=IKcos(j4);
IkReal x4517=(r11*sj5);
IkReal x4518=((1.0)*sj0);
IkReal x4519=((1.0)*cj5*x4515);
evalcond[0]=(r02*x4515);
evalcond[1]=(((r02*x4516))+(((-1.0)*x4518)));
evalcond[2]=(((r21*sj5*x4515))+(((-1.0)*r20*x4519)));
evalcond[3]=((((-1.0)*r10*x4519))+((x4515*x4517)));
evalcond[4]=(((cj5*r10*x4516))+(((-1.0)*x4516*x4517))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x4518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4520=IKPowWithIntegerCheck(r02,-1);
if(!x4520.valid){
continue;
}
cj4array[0]=(sj0*(x4520.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4521=IKsin(j4);
IkReal x4522=IKcos(j4);
IkReal x4523=(cj5*x4522);
IkReal x4524=(sj5*x4521);
IkReal x4525=((1.0)*sj5*x4522);
IkReal x4526=((1.0)*cj5*x4521);
evalcond[0]=(r02*x4521);
evalcond[1]=(((r21*x4524))+(((-1.0)*r20*x4526)));
evalcond[2]=(((r11*x4524))+(((-1.0)*r10*x4526)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x4525))+((r20*x4523)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x4523))+((sj0*sj1*sj2))+(((-1.0)*r11*x4525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4527=((1.0)*sj0);
IkReal x4528=((1.0)*cj0);
CheckValue<IkReal> x4529 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4527))+(((-1.0)*r02*x4528)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x4527))+(((-1.0)*cj5*r00*x4528))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4529.valid){
continue;
}
CheckValue<IkReal> x4530=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4529.value)+(((1.5707963267949)*(x4530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4531=IKsin(j4);
IkReal x4532=IKcos(j4);
IkReal x4533=(cj5*r10);
IkReal x4534=(sj1*sj2);
IkReal x4535=(cj5*r00);
IkReal x4536=(cj5*r20);
IkReal x4537=((1.0)*cj1*cj2);
IkReal x4538=((1.0)*x4531);
IkReal x4539=(sj5*x4531);
IkReal x4540=((1.0)*sj5*x4532);
evalcond[0]=(((r21*x4539))+((r22*x4532))+(((-1.0)*x4536*x4538)));
evalcond[1]=(cj0+((r12*x4532))+(((-1.0)*x4533*x4538))+((r11*x4539)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4539))+((r02*x4532))+(((-1.0)*x4535*x4538)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x4531))+((x4532*x4536))+(((-1.0)*r21*x4540)));
evalcond[4]=(((cj0*x4534))+(((-1.0)*r01*x4540))+((x4532*x4535))+((r02*x4531))+(((-1.0)*cj0*x4537)));
evalcond[5]=(((r12*x4531))+((sj0*x4534))+((x4532*x4533))+(((-1.0)*r11*x4540))+(((-1.0)*sj0*x4537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4541=((1.0)*sj5);
CheckValue<IkReal> x4542 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4542.valid){
continue;
}
CheckValue<IkReal> x4543=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4541)))),-1);
if(!x4543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4542.value)+(((1.5707963267949)*(x4543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4544=IKsin(j4);
IkReal x4545=IKcos(j4);
IkReal x4546=(cj5*r10);
IkReal x4547=(sj1*sj2);
IkReal x4548=(cj5*r00);
IkReal x4549=(cj5*r20);
IkReal x4550=((1.0)*cj1*cj2);
IkReal x4551=((1.0)*x4544);
IkReal x4552=(sj5*x4544);
IkReal x4553=((1.0)*sj5*x4545);
evalcond[0]=(((r22*x4545))+(((-1.0)*x4549*x4551))+((r21*x4552)));
evalcond[1]=(cj0+((r11*x4552))+((r12*x4545))+(((-1.0)*x4546*x4551)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4552))+((r02*x4545))+(((-1.0)*x4548*x4551)));
evalcond[3]=(((r22*x4544))+((cj2*sj1))+(((-1.0)*r21*x4553))+((cj1*sj2))+((x4545*x4549)));
evalcond[4]=((((-1.0)*r01*x4553))+((r02*x4544))+((x4545*x4548))+(((-1.0)*cj0*x4550))+((cj0*x4547)));
evalcond[5]=((((-1.0)*r11*x4553))+((x4545*x4546))+((sj0*x4547))+((r12*x4544))+(((-1.0)*sj0*x4550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4554=((1.0)*sj5);
CheckValue<IkReal> x4555 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4555.valid){
continue;
}
CheckValue<IkReal> x4556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4554))+(((-1.0)*cj5*r01)))),-1);
if(!x4556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4555.value)+(((1.5707963267949)*(x4556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4557=IKsin(j4);
IkReal x4558=IKcos(j4);
IkReal x4559=(cj5*r10);
IkReal x4560=(sj1*sj2);
IkReal x4561=(cj5*r00);
IkReal x4562=(cj5*r20);
IkReal x4563=((1.0)*cj1*cj2);
IkReal x4564=((1.0)*x4557);
IkReal x4565=(sj5*x4557);
IkReal x4566=((1.0)*sj5*x4558);
evalcond[0]=(((r21*x4565))+((r22*x4558))+(((-1.0)*x4562*x4564)));
evalcond[1]=(cj0+((r11*x4565))+((r12*x4558))+(((-1.0)*x4559*x4564)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4558))+(((-1.0)*x4561*x4564))+((r01*x4565)));
evalcond[3]=((((-1.0)*r21*x4566))+((cj2*sj1))+((cj1*sj2))+((r22*x4557))+((x4558*x4562)));
evalcond[4]=(((cj0*x4560))+(((-1.0)*r01*x4566))+((r02*x4557))+(((-1.0)*cj0*x4563))+((x4558*x4561)));
evalcond[5]=(((sj0*x4560))+((r12*x4557))+(((-1.0)*r11*x4566))+((x4558*x4559))+(((-1.0)*sj0*x4563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4567=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x4567;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x4567);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4568=r21*r21;
IkReal x4569=cj5*cj5;
IkReal x4570=(sj1*sj2);
IkReal x4571=(r21*sj5);
IkReal x4572=(cj1*cj2);
IkReal x4573=(cj5*r20);
IkReal x4574=((((2.0)*x4571*x4573))+(((-1.0)*(r22*r22)))+((x4568*x4569))+(((-1.0)*x4569*(r20*r20)))+(((-1.0)*x4568)));
j4eval[0]=x4574;
j4eval[1]=((IKabs((((x4571*x4572))+((x4570*x4573))+(((-1.0)*x4572*x4573))+(((-1.0)*x4570*x4571)))))+(IKabs((((r22*x4570))+(((-1.0)*r22*x4572))))));
j4eval[2]=IKsign(x4574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.643432766549935)*px))+(((2.20454833129404)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20454833129404)*px))+(((0.643432766549935)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.643432766549935)*px))+(((2.20454833129404)*py))))+IKsqr(((((2.20454833129404)*px))+(((0.643432766549935)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.643432766549935)*px))+(((2.20454833129404)*py))), ((((2.20454833129404)*px))+(((0.643432766549935)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4575=IKcos(j0);
IkReal x4576=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.122)*x4576))+(((0.418)*x4575)));
evalcond[1]=((((0.122)*x4575))+(((-1.0)*py))+(((0.418)*x4576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4577=((1.0)*sj5);
IkReal x4578=((((-1.0)*r00*x4577))+(((-1.0)*cj5*r01)));
j4eval[0]=x4578;
j4eval[1]=IKsign(x4578);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x4577))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4579=((1.0)*sj5);
IkReal x4580=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4579)));
j4eval[0]=x4580;
j4eval[1]=IKsign(x4580);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4579))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4581=cj5*cj5;
IkReal x4582=((1.0)*r21);
IkReal x4583=(cj5*sj5);
IkReal x4584=(((r00*r20*x4581))+(((-1.0)*r01*r20*x4583))+((r01*r21))+(((-1.0)*r01*x4581*x4582))+(((-1.0)*r00*x4582*x4583))+((r02*r22)));
j4eval[0]=x4584;
j4eval[1]=IKsign(x4584);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x4582))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4585=cj5*cj5;
IkReal x4586=((1.0)*r21);
IkReal x4587=(cj5*sj5);
CheckValue<IkReal> x4588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4586))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4588.valid){
continue;
}
CheckValue<IkReal> x4589=IKPowWithIntegerCheck(IKsign((((r00*r20*x4585))+(((-1.0)*r00*x4586*x4587))+(((-1.0)*r01*r20*x4587))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x4585*x4586)))),-1);
if(!x4589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4588.value)+(((1.5707963267949)*(x4589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4590=IKsin(j4);
IkReal x4591=IKcos(j4);
IkReal x4592=((1.0)*sj0);
IkReal x4593=(cj5*r00);
IkReal x4594=(cj5*r10);
IkReal x4595=(cj5*r20);
IkReal x4596=((1.0)*x4590);
IkReal x4597=(sj5*x4590);
IkReal x4598=((1.0)*sj5*x4591);
evalcond[0]=(((r21*x4597))+((r22*x4591))+(((-1.0)*x4595*x4596)));
evalcond[1]=(((r22*x4590))+((x4591*x4595))+(((-1.0)*r21*x4598)));
evalcond[2]=(cj0+(((-1.0)*x4594*x4596))+((r11*x4597))+((r12*x4591)));
evalcond[3]=((((-1.0)*x4592))+((r02*x4591))+(((-1.0)*x4593*x4596))+((r01*x4597)));
evalcond[4]=(((r02*x4590))+(((-1.0)*r01*x4598))+((x4591*x4593))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4592))+((x4591*x4594))+(((-1.0)*r11*x4598))+((r12*x4590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4599=((1.0)*sj5);
CheckValue<IkReal> x4600=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4599)))),-1);
if(!x4600.valid){
continue;
}
CheckValue<IkReal> x4601 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4599))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4600.value)))+(x4601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4602=IKsin(j4);
IkReal x4603=IKcos(j4);
IkReal x4604=((1.0)*sj0);
IkReal x4605=(cj5*r00);
IkReal x4606=(cj5*r10);
IkReal x4607=(cj5*r20);
IkReal x4608=((1.0)*x4602);
IkReal x4609=(sj5*x4602);
IkReal x4610=((1.0)*sj5*x4603);
evalcond[0]=(((r21*x4609))+((r22*x4603))+(((-1.0)*x4607*x4608)));
evalcond[1]=((((-1.0)*r21*x4610))+((x4603*x4607))+((r22*x4602)));
evalcond[2]=(((r11*x4609))+cj0+(((-1.0)*x4606*x4608))+((r12*x4603)));
evalcond[3]=((((-1.0)*x4604))+((r01*x4609))+((r02*x4603))+(((-1.0)*x4605*x4608)));
evalcond[4]=(((x4603*x4605))+((r02*x4602))+(((-1.0)*r01*x4610))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4604))+((r12*x4602))+((x4603*x4606))+(((-1.0)*r11*x4610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4611=((1.0)*sj5);
CheckValue<IkReal> x4612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4611))+(((-1.0)*cj5*r01)))),-1);
if(!x4612.valid){
continue;
}
CheckValue<IkReal> x4613 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4612.value)))+(x4613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4614=IKsin(j4);
IkReal x4615=IKcos(j4);
IkReal x4616=((1.0)*sj0);
IkReal x4617=(cj5*r00);
IkReal x4618=(cj5*r10);
IkReal x4619=(cj5*r20);
IkReal x4620=((1.0)*x4614);
IkReal x4621=(sj5*x4614);
IkReal x4622=((1.0)*sj5*x4615);
evalcond[0]=(((r22*x4615))+(((-1.0)*x4619*x4620))+((r21*x4621)));
evalcond[1]=(((x4615*x4619))+(((-1.0)*r21*x4622))+((r22*x4614)));
evalcond[2]=(cj0+((r11*x4621))+(((-1.0)*x4618*x4620))+((r12*x4615)));
evalcond[3]=(((r02*x4615))+(((-1.0)*x4616))+((r01*x4621))+(((-1.0)*x4617*x4620)));
evalcond[4]=((((-1.0)*r01*x4622))+((r02*x4614))+((x4615*x4617))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x4614))+((x4615*x4618))+(((-1.0)*x4616))+(((-1.0)*r11*x4622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.643432766549935)*px))+(((2.20454833129404)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20454833129404)*px))+(((0.643432766549935)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.643432766549935)*px))+(((2.20454833129404)*py))))+IKsqr(((((2.20454833129404)*px))+(((0.643432766549935)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.643432766549935)*px))+(((2.20454833129404)*py))), ((((2.20454833129404)*px))+(((0.643432766549935)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4623=IKcos(j0);
IkReal x4624=IKsin(j0);
evalcond[0]=((((0.418)*x4623))+(((-1.0)*px))+(((-0.122)*x4624)));
evalcond[1]=((((0.122)*x4623))+(((0.418)*x4624))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4625=((1.0)*sj5);
IkReal x4626=((((-1.0)*r00*x4625))+(((-1.0)*cj5*r01)));
j4eval[0]=x4626;
j4eval[1]=IKsign(x4626);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x4625))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4627=cj5*cj5;
IkReal x4628=((1.0)*r21);
IkReal x4629=(cj5*r20);
IkReal x4630=((((-1.0)*r02*r22))+((r01*r21*x4627))+(((-1.0)*r01*x4628))+((cj5*r00*r21*sj5))+((r01*sj5*x4629))+(((-1.0)*r00*r20*x4627)));
j4eval[0]=x4630;
j4eval[1]=IKsign(x4630);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x4629))+(((-1.0)*cj0*sj5*x4628))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4631=cj5*cj5;
IkReal x4632=(r11*r21);
IkReal x4633=(cj5*r20);
IkReal x4634=(r21*sj5);
IkReal x4635=(((x4631*x4632))+(((-1.0)*x4632))+(((-1.0)*r12*r22))+((r11*sj5*x4633))+((cj5*r10*x4634))+(((-1.0)*r10*r20*x4631)));
j4eval[0]=x4635;
j4eval[1]=IKsign(x4635);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x4633))+(((-1.0)*sj0*x4634))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4636=cj5*cj5;
IkReal x4637=(r11*r21);
IkReal x4638=(cj5*r20);
IkReal x4639=(r21*sj5);
CheckValue<IkReal> x4640 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x4638))+(((-1.0)*sj0*x4639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4640.valid){
continue;
}
CheckValue<IkReal> x4641=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4637))+(((-1.0)*r12*r22))+((x4636*x4637))+((r11*sj5*x4638))+((cj5*r10*x4639))+(((-1.0)*r10*r20*x4636)))),-1);
if(!x4641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4640.value)+(((1.5707963267949)*(x4641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4642=IKsin(j4);
IkReal x4643=IKcos(j4);
IkReal x4644=(cj5*r00);
IkReal x4645=(cj5*r10);
IkReal x4646=(cj5*r20);
IkReal x4647=((1.0)*x4642);
IkReal x4648=(sj5*x4642);
IkReal x4649=((1.0)*sj5*x4643);
evalcond[0]=(((r21*x4648))+((r22*x4643))+(((-1.0)*x4646*x4647)));
evalcond[1]=((((-1.0)*r21*x4649))+((r22*x4642))+((x4643*x4646)));
evalcond[2]=((((-1.0)*x4645*x4647))+cj0+((r11*x4648))+((r12*x4643)));
evalcond[3]=(((r02*x4642))+cj0+((x4643*x4644))+(((-1.0)*r01*x4649)));
evalcond[4]=(sj0+(((-1.0)*r11*x4649))+((r12*x4642))+((x4643*x4645)));
evalcond[5]=(((r02*x4643))+(((-1.0)*sj0))+((r01*x4648))+(((-1.0)*x4644*x4647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4650=cj5*cj5;
IkReal x4651=((1.0)*r21);
IkReal x4652=(cj5*r20);
CheckValue<IkReal> x4653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*r21*x4650))+(((-1.0)*r01*x4651))+((r01*sj5*x4652))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x4650)))),-1);
if(!x4653.valid){
continue;
}
CheckValue<IkReal> x4654 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4652))+(((-1.0)*cj0*sj5*x4651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4653.value)))+(x4654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4655=IKsin(j4);
IkReal x4656=IKcos(j4);
IkReal x4657=(cj5*r00);
IkReal x4658=(cj5*r10);
IkReal x4659=(cj5*r20);
IkReal x4660=((1.0)*x4655);
IkReal x4661=(sj5*x4655);
IkReal x4662=((1.0)*sj5*x4656);
evalcond[0]=((((-1.0)*x4659*x4660))+((r21*x4661))+((r22*x4656)));
evalcond[1]=((((-1.0)*r21*x4662))+((x4656*x4659))+((r22*x4655)));
evalcond[2]=(((r12*x4656))+(((-1.0)*x4658*x4660))+cj0+((r11*x4661)));
evalcond[3]=(cj0+((r02*x4655))+(((-1.0)*r01*x4662))+((x4656*x4657)));
evalcond[4]=(((r12*x4655))+sj0+(((-1.0)*r11*x4662))+((x4656*x4658)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4661))+((r02*x4656))+(((-1.0)*x4657*x4660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4663=((1.0)*sj5);
CheckValue<IkReal> x4664 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4664.valid){
continue;
}
CheckValue<IkReal> x4665=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4663))+(((-1.0)*cj5*r01)))),-1);
if(!x4665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4664.value)+(((1.5707963267949)*(x4665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4666=IKsin(j4);
IkReal x4667=IKcos(j4);
IkReal x4668=(cj5*r00);
IkReal x4669=(cj5*r10);
IkReal x4670=(cj5*r20);
IkReal x4671=((1.0)*x4666);
IkReal x4672=(sj5*x4666);
IkReal x4673=((1.0)*sj5*x4667);
evalcond[0]=(((r21*x4672))+((r22*x4667))+(((-1.0)*x4670*x4671)));
evalcond[1]=(((x4667*x4670))+(((-1.0)*r21*x4673))+((r22*x4666)));
evalcond[2]=(cj0+((r12*x4667))+((r11*x4672))+(((-1.0)*x4669*x4671)));
evalcond[3]=(((r02*x4666))+cj0+(((-1.0)*r01*x4673))+((x4667*x4668)));
evalcond[4]=(sj0+((r12*x4666))+(((-1.0)*r11*x4673))+((x4667*x4669)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4667))+((r01*x4672))+(((-1.0)*x4668*x4671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.19672131018626)*py))+(((-0.000102794947578565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px))))+IKsqr(((((8.19672131018626)*py))+(((-0.000102794947578565)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px))), ((((8.19672131018626)*py))+(((-0.000102794947578565)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4674=IKcos(j0);
IkReal x4675=IKsin(j0);
evalcond[0]=((((-1.53e-6)*x4674))+(((-0.122)*x4675))+(((-1.0)*px)));
evalcond[1]=((((-1.53e-6)*x4675))+(((-1.0)*py))+(((0.122)*x4674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4676=((1.0)*sj5);
IkReal x4677=((((-1.0)*r00*x4676))+(((-1.0)*cj5*r01)));
j4eval[0]=x4677;
j4eval[1]=IKsign(x4677);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x4676))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4678=((1.0)*sj5);
IkReal x4679=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4678)));
j4eval[0]=x4679;
j4eval[1]=IKsign(x4679);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4678))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4680=cj5*cj5;
IkReal x4681=((1.0)*r21);
IkReal x4682=(cj5*sj5);
IkReal x4683=((((-1.0)*r00*x4681*x4682))+((r01*r21))+(((-1.0)*r01*x4680*x4681))+((r00*r20*x4680))+(((-1.0)*r01*r20*x4682))+((r02*r22)));
j4eval[0]=x4683;
j4eval[1]=IKsign(x4683);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x4681))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4684=cj5*cj5;
IkReal x4685=((1.0)*r21);
IkReal x4686=(cj5*sj5);
CheckValue<IkReal> x4687=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x4685*x4686))+((r00*r20*x4684))+(((-1.0)*r01*x4684*x4685))+(((-1.0)*r01*r20*x4686))+((r02*r22)))),-1);
if(!x4687.valid){
continue;
}
CheckValue<IkReal> x4688 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4685))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4687.value)))+(x4688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4689=IKsin(j4);
IkReal x4690=IKcos(j4);
IkReal x4691=((1.0)*sj0);
IkReal x4692=(cj5*r00);
IkReal x4693=(cj5*r10);
IkReal x4694=(cj5*r20);
IkReal x4695=((1.0)*x4689);
IkReal x4696=(sj5*x4689);
IkReal x4697=((1.0)*sj5*x4690);
evalcond[0]=(((r22*x4690))+((r21*x4696))+(((-1.0)*x4694*x4695)));
evalcond[1]=(((x4690*x4694))+((r22*x4689))+(((-1.0)*r21*x4697)));
evalcond[2]=(cj0+((r12*x4690))+(((-1.0)*x4693*x4695))+((r11*x4696)));
evalcond[3]=(((r02*x4690))+(((-1.0)*x4692*x4695))+((r01*x4696))+(((-1.0)*x4691)));
evalcond[4]=(((r02*x4689))+(((-1.0)*r01*x4697))+((x4690*x4692))+(((-1.0)*cj0)));
evalcond[5]=(((x4690*x4693))+((r12*x4689))+(((-1.0)*x4691))+(((-1.0)*r11*x4697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4698=((1.0)*sj5);
CheckValue<IkReal> x4699 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4699.valid){
continue;
}
CheckValue<IkReal> x4700=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4698)))),-1);
if(!x4700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4699.value)+(((1.5707963267949)*(x4700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4701=IKsin(j4);
IkReal x4702=IKcos(j4);
IkReal x4703=((1.0)*sj0);
IkReal x4704=(cj5*r00);
IkReal x4705=(cj5*r10);
IkReal x4706=(cj5*r20);
IkReal x4707=((1.0)*x4701);
IkReal x4708=(sj5*x4701);
IkReal x4709=((1.0)*sj5*x4702);
evalcond[0]=(((r21*x4708))+(((-1.0)*x4706*x4707))+((r22*x4702)));
evalcond[1]=((((-1.0)*r21*x4709))+((x4702*x4706))+((r22*x4701)));
evalcond[2]=(cj0+(((-1.0)*x4705*x4707))+((r11*x4708))+((r12*x4702)));
evalcond[3]=((((-1.0)*x4704*x4707))+((r01*x4708))+((r02*x4702))+(((-1.0)*x4703)));
evalcond[4]=((((-1.0)*r01*x4709))+((x4702*x4704))+((r02*x4701))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x4709))+((x4702*x4705))+(((-1.0)*x4703))+((r12*x4701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4710=((1.0)*sj5);
CheckValue<IkReal> x4711=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x4710)))),-1);
if(!x4711.valid){
continue;
}
CheckValue<IkReal> x4712 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4710))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4711.value)))+(x4712.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4713=IKsin(j4);
IkReal x4714=IKcos(j4);
IkReal x4715=((1.0)*sj0);
IkReal x4716=(cj5*r00);
IkReal x4717=(cj5*r10);
IkReal x4718=(cj5*r20);
IkReal x4719=((1.0)*x4713);
IkReal x4720=(sj5*x4713);
IkReal x4721=((1.0)*sj5*x4714);
evalcond[0]=(((r22*x4714))+((r21*x4720))+(((-1.0)*x4718*x4719)));
evalcond[1]=(((r22*x4713))+((x4714*x4718))+(((-1.0)*r21*x4721)));
evalcond[2]=(((r11*x4720))+cj0+((r12*x4714))+(((-1.0)*x4717*x4719)));
evalcond[3]=((((-1.0)*x4716*x4719))+((r01*x4720))+((r02*x4714))+(((-1.0)*x4715)));
evalcond[4]=(((x4714*x4716))+((r02*x4713))+(((-1.0)*cj0))+(((-1.0)*r01*x4721)));
evalcond[5]=(((x4714*x4717))+(((-1.0)*r11*x4721))+((r12*x4713))+(((-1.0)*x4715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.19672131018626)*py))+(((-0.000102794947578565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px))))+IKsqr(((((8.19672131018626)*py))+(((-0.000102794947578565)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px))), ((((8.19672131018626)*py))+(((-0.000102794947578565)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4722=IKcos(j0);
IkReal x4723=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-1.53e-6)*x4722))+(((-0.122)*x4723)));
evalcond[1]=((((-1.0)*py))+(((0.122)*x4722))+(((-1.53e-6)*x4723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4724=((1.0)*sj5);
IkReal x4725=((((-1.0)*r00*x4724))+(((-1.0)*cj5*r01)));
j4eval[0]=x4725;
j4eval[1]=IKsign(x4725);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4724)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4726=cj5*cj5;
IkReal x4727=((1.0)*r21);
IkReal x4728=(cj5*r20);
IkReal x4729=((((-1.0)*r00*r20*x4726))+(((-1.0)*r02*r22))+((r01*sj5*x4728))+((cj5*r00*r21*sj5))+((r01*r21*x4726))+(((-1.0)*r01*x4727)));
j4eval[0]=x4729;
j4eval[1]=IKsign(x4729);
j4eval[2]=((IKabs((((cj0*x4728))+(((-1.0)*cj0*sj5*x4727)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4730=cj5*cj5;
IkReal x4731=(r11*r21);
IkReal x4732=(cj5*r20);
IkReal x4733=(r21*sj5);
IkReal x4734=((((-1.0)*x4731))+((x4730*x4731))+((r11*sj5*x4732))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x4730))+((cj5*r10*x4733)));
j4eval[0]=x4734;
j4eval[1]=IKsign(x4734);
j4eval[2]=((IKabs(((((-1.0)*sj0*x4733))+((sj0*x4732)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4735=cj5*cj5;
IkReal x4736=(r11*r21);
IkReal x4737=(cj5*r20);
IkReal x4738=(r21*sj5);
CheckValue<IkReal> x4739=IKPowWithIntegerCheck(IKsign((((x4735*x4736))+(((-1.0)*x4736))+((r11*sj5*x4737))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x4735))+((cj5*r10*x4738)))),-1);
if(!x4739.valid){
continue;
}
CheckValue<IkReal> x4740 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x4738))+((sj0*x4737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4739.value)))+(x4740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4741=IKsin(j4);
IkReal x4742=IKcos(j4);
IkReal x4743=(cj5*r00);
IkReal x4744=(cj5*r10);
IkReal x4745=(cj5*r20);
IkReal x4746=((1.0)*x4741);
IkReal x4747=(sj5*x4741);
IkReal x4748=((1.0)*sj5*x4742);
evalcond[0]=((((-1.0)*x4745*x4746))+((r22*x4742))+((r21*x4747)));
evalcond[1]=(((x4742*x4745))+(((-1.0)*r21*x4748))+((r22*x4741)));
evalcond[2]=(((r11*x4747))+cj0+((r12*x4742))+(((-1.0)*x4744*x4746)));
evalcond[3]=(((x4742*x4743))+cj0+(((-1.0)*r01*x4748))+((r02*x4741)));
evalcond[4]=(sj0+((x4742*x4744))+(((-1.0)*r11*x4748))+((r12*x4741)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4747))+((r02*x4742))+(((-1.0)*x4743*x4746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4749=cj5*cj5;
IkReal x4750=((1.0)*r21);
IkReal x4751=(cj5*r20);
CheckValue<IkReal> x4752 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4750))+((cj0*x4751)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4752.valid){
continue;
}
CheckValue<IkReal> x4753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x4749))+(((-1.0)*r01*x4750))+((r01*sj5*x4751))+((cj5*r00*r21*sj5))+((r01*r21*x4749)))),-1);
if(!x4753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4752.value)+(((1.5707963267949)*(x4753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4754=IKsin(j4);
IkReal x4755=IKcos(j4);
IkReal x4756=(cj5*r00);
IkReal x4757=(cj5*r10);
IkReal x4758=(cj5*r20);
IkReal x4759=((1.0)*x4754);
IkReal x4760=(sj5*x4754);
IkReal x4761=((1.0)*sj5*x4755);
evalcond[0]=(((r21*x4760))+(((-1.0)*x4758*x4759))+((r22*x4755)));
evalcond[1]=(((x4755*x4758))+(((-1.0)*r21*x4761))+((r22*x4754)));
evalcond[2]=(((r12*x4755))+cj0+(((-1.0)*x4757*x4759))+((r11*x4760)));
evalcond[3]=(cj0+((x4755*x4756))+((r02*x4754))+(((-1.0)*r01*x4761)));
evalcond[4]=(((r12*x4754))+sj0+((x4755*x4757))+(((-1.0)*r11*x4761)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4756*x4759))+((r01*x4760))+((r02*x4755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4762=((1.0)*sj5);
CheckValue<IkReal> x4763 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4762))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4763.valid){
continue;
}
CheckValue<IkReal> x4764=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4762))+(((-1.0)*cj5*r01)))),-1);
if(!x4764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4763.value)+(((1.5707963267949)*(x4764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4765=IKsin(j4);
IkReal x4766=IKcos(j4);
IkReal x4767=(cj5*r00);
IkReal x4768=(cj5*r10);
IkReal x4769=(cj5*r20);
IkReal x4770=((1.0)*x4765);
IkReal x4771=(sj5*x4765);
IkReal x4772=((1.0)*sj5*x4766);
evalcond[0]=(((r22*x4766))+(((-1.0)*x4769*x4770))+((r21*x4771)));
evalcond[1]=(((r22*x4765))+((x4766*x4769))+(((-1.0)*r21*x4772)));
evalcond[2]=(((r11*x4771))+cj0+((r12*x4766))+(((-1.0)*x4768*x4770)));
evalcond[3]=(((r02*x4765))+((x4766*x4767))+cj0+(((-1.0)*r01*x4772)));
evalcond[4]=((((-1.0)*r11*x4772))+sj0+((x4766*x4768))+((r12*x4765)));
evalcond[5]=(((r02*x4766))+(((-1.0)*sj0))+((r01*x4771))+(((-1.0)*x4767*x4770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.643432766549935)*px))+(((-2.20454833129404)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.643432766549935)*py))+(((-2.20454833129404)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.643432766549935)*px))+(((-2.20454833129404)*py))))+IKsqr(((((0.643432766549935)*py))+(((-2.20454833129404)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.643432766549935)*px))+(((-2.20454833129404)*py))), ((((0.643432766549935)*py))+(((-2.20454833129404)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4773=IKcos(j0);
IkReal x4774=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.122)*x4774))+(((-0.418)*x4773)));
evalcond[1]=((((0.122)*x4773))+(((-1.0)*py))+(((-0.418)*x4774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4775=((1.0)*sj5);
IkReal x4776=((((-1.0)*r00*x4775))+(((-1.0)*cj5*r01)));
j4eval[0]=x4776;
j4eval[1]=IKsign(x4776);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x4775))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4777=cj5*cj5;
IkReal x4778=((1.0)*r21);
IkReal x4779=(cj5*r20);
IkReal x4780=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x4777))+(((-1.0)*r01*x4778))+((cj5*r00*r21*sj5))+((r01*sj5*x4779))+((r01*r21*x4777)));
j4eval[0]=x4780;
j4eval[1]=IKsign(x4780);
j4eval[2]=((IKabs((((cj0*x4779))+(((-1.0)*cj0*sj5*x4778)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4781=cj5*cj5;
IkReal x4782=(r11*r21);
IkReal x4783=(cj5*r20);
IkReal x4784=(r21*sj5);
IkReal x4785=((((-1.0)*r10*r20*x4781))+((cj5*r10*x4784))+(((-1.0)*r12*r22))+((r11*sj5*x4783))+(((-1.0)*x4782))+((x4781*x4782)));
j4eval[0]=x4785;
j4eval[1]=IKsign(x4785);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x4783))+(((-1.0)*sj0*x4784))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4786=cj5*cj5;
IkReal x4787=(r11*r21);
IkReal x4788=(cj5*r20);
IkReal x4789=(r21*sj5);
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x4788))+(((-1.0)*sj0*x4789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
CheckValue<IkReal> x4791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x4786))+((x4786*x4787))+((cj5*r10*x4789))+(((-1.0)*r12*r22))+((r11*sj5*x4788))+(((-1.0)*x4787)))),-1);
if(!x4791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4790.value)+(((1.5707963267949)*(x4791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4792=IKsin(j4);
IkReal x4793=IKcos(j4);
IkReal x4794=(cj5*r00);
IkReal x4795=(cj5*r10);
IkReal x4796=(cj5*r20);
IkReal x4797=((1.0)*x4792);
IkReal x4798=(sj5*x4792);
IkReal x4799=((1.0)*sj5*x4793);
evalcond[0]=(((r21*x4798))+(((-1.0)*x4796*x4797))+((r22*x4793)));
evalcond[1]=(((x4793*x4796))+(((-1.0)*r21*x4799))+((r22*x4792)));
evalcond[2]=(cj0+(((-1.0)*x4795*x4797))+((r11*x4798))+((r12*x4793)));
evalcond[3]=(cj0+((x4793*x4794))+((r02*x4792))+(((-1.0)*r01*x4799)));
evalcond[4]=(sj0+((x4793*x4795))+(((-1.0)*r11*x4799))+((r12*x4792)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4798))+(((-1.0)*x4794*x4797))+((r02*x4793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4800=cj5*cj5;
IkReal x4801=((1.0)*r21);
IkReal x4802=(cj5*r20);
CheckValue<IkReal> x4803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*r21*x4800))+(((-1.0)*r01*x4801))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x4800))+((r01*sj5*x4802)))),-1);
if(!x4803.valid){
continue;
}
CheckValue<IkReal> x4804 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4802))+(((-1.0)*cj0*sj5*x4801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4803.value)))+(x4804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4805=IKsin(j4);
IkReal x4806=IKcos(j4);
IkReal x4807=(cj5*r00);
IkReal x4808=(cj5*r10);
IkReal x4809=(cj5*r20);
IkReal x4810=((1.0)*x4805);
IkReal x4811=(sj5*x4805);
IkReal x4812=((1.0)*sj5*x4806);
evalcond[0]=((((-1.0)*x4809*x4810))+((r21*x4811))+((r22*x4806)));
evalcond[1]=(((r22*x4805))+((x4806*x4809))+(((-1.0)*r21*x4812)));
evalcond[2]=((((-1.0)*x4808*x4810))+cj0+((r11*x4811))+((r12*x4806)));
evalcond[3]=(((r02*x4805))+(((-1.0)*r01*x4812))+cj0+((x4806*x4807)));
evalcond[4]=((((-1.0)*r11*x4812))+sj0+((r12*x4805))+((x4806*x4808)));
evalcond[5]=(((r02*x4806))+(((-1.0)*sj0))+(((-1.0)*x4807*x4810))+((r01*x4811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4813=((1.0)*sj5);
CheckValue<IkReal> x4814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4813))+(((-1.0)*cj5*r01)))),-1);
if(!x4814.valid){
continue;
}
CheckValue<IkReal> x4815 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4814.value)))+(x4815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4816=IKsin(j4);
IkReal x4817=IKcos(j4);
IkReal x4818=(cj5*r00);
IkReal x4819=(cj5*r10);
IkReal x4820=(cj5*r20);
IkReal x4821=((1.0)*x4816);
IkReal x4822=(sj5*x4816);
IkReal x4823=((1.0)*sj5*x4817);
evalcond[0]=(((r21*x4822))+(((-1.0)*x4820*x4821))+((r22*x4817)));
evalcond[1]=(((x4817*x4820))+(((-1.0)*r21*x4823))+((r22*x4816)));
evalcond[2]=(cj0+((r11*x4822))+(((-1.0)*x4819*x4821))+((r12*x4817)));
evalcond[3]=((((-1.0)*r01*x4823))+cj0+((x4817*x4818))+((r02*x4816)));
evalcond[4]=(sj0+((x4817*x4819))+((r12*x4816))+(((-1.0)*r11*x4823)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4817))+(((-1.0)*x4818*x4821))+((r01*x4822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.643432766549935)*px))+(((-2.20454833129404)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.643432766549935)*py))+(((-2.20454833129404)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.643432766549935)*px))+(((-2.20454833129404)*py))))+IKsqr(((((0.643432766549935)*py))+(((-2.20454833129404)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.643432766549935)*px))+(((-2.20454833129404)*py))), ((((0.643432766549935)*py))+(((-2.20454833129404)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4824=IKcos(j0);
IkReal x4825=IKsin(j0);
evalcond[0]=((((-0.122)*x4825))+(((-1.0)*px))+(((-0.418)*x4824)));
evalcond[1]=((((0.122)*x4824))+(((-1.0)*py))+(((-0.418)*x4825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4826=((1.0)*sj5);
IkReal x4827=((((-1.0)*r00*x4826))+(((-1.0)*cj5*r01)));
j4eval[0]=x4827;
j4eval[1]=IKsign(x4827);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4826)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4828=((1.0)*sj5);
IkReal x4829=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4828)));
j4eval[0]=x4829;
j4eval[1]=IKsign(x4829);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4828)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4830=cj5*cj5;
IkReal x4831=((1.0)*r21);
IkReal x4832=(cj5*sj5);
IkReal x4833=((((-1.0)*r01*x4830*x4831))+(((-1.0)*r01*r20*x4832))+(((-1.0)*r00*x4831*x4832))+((r01*r21))+((r02*r22))+((r00*r20*x4830)));
j4eval[0]=x4833;
j4eval[1]=IKsign(x4833);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x4831))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4834=cj5*cj5;
IkReal x4835=((1.0)*r21);
IkReal x4836=(cj5*sj5);
CheckValue<IkReal> x4837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4834*x4835))+(((-1.0)*r01*r20*x4836))+((r01*r21))+(((-1.0)*r00*x4835*x4836))+((r02*r22))+((r00*r20*x4834)))),-1);
if(!x4837.valid){
continue;
}
CheckValue<IkReal> x4838 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4835))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4837.value)))+(x4838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4839=IKsin(j4);
IkReal x4840=IKcos(j4);
IkReal x4841=((1.0)*sj0);
IkReal x4842=(cj5*r00);
IkReal x4843=(cj5*r10);
IkReal x4844=(cj5*r20);
IkReal x4845=((1.0)*x4839);
IkReal x4846=(sj5*x4839);
IkReal x4847=((1.0)*sj5*x4840);
evalcond[0]=((((-1.0)*x4844*x4845))+((r22*x4840))+((r21*x4846)));
evalcond[1]=(((x4840*x4844))+((r22*x4839))+(((-1.0)*r21*x4847)));
evalcond[2]=(cj0+((r11*x4846))+((r12*x4840))+(((-1.0)*x4843*x4845)));
evalcond[3]=(((r02*x4840))+(((-1.0)*x4841))+(((-1.0)*x4842*x4845))+((r01*x4846)));
evalcond[4]=((((-1.0)*r01*x4847))+((x4840*x4842))+((r02*x4839))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x4839))+(((-1.0)*x4841))+((x4840*x4843))+(((-1.0)*r11*x4847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4848=((1.0)*sj5);
CheckValue<IkReal> x4849 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4849.valid){
continue;
}
CheckValue<IkReal> x4850=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4848)))),-1);
if(!x4850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4849.value)+(((1.5707963267949)*(x4850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4851=IKsin(j4);
IkReal x4852=IKcos(j4);
IkReal x4853=((1.0)*sj0);
IkReal x4854=(cj5*r00);
IkReal x4855=(cj5*r10);
IkReal x4856=(cj5*r20);
IkReal x4857=((1.0)*x4851);
IkReal x4858=(sj5*x4851);
IkReal x4859=((1.0)*sj5*x4852);
evalcond[0]=(((r21*x4858))+(((-1.0)*x4856*x4857))+((r22*x4852)));
evalcond[1]=((((-1.0)*r21*x4859))+((r22*x4851))+((x4852*x4856)));
evalcond[2]=(cj0+((r12*x4852))+(((-1.0)*x4855*x4857))+((r11*x4858)));
evalcond[3]=(((r01*x4858))+(((-1.0)*x4853))+((r02*x4852))+(((-1.0)*x4854*x4857)));
evalcond[4]=((((-1.0)*r01*x4859))+((r02*x4851))+((x4852*x4854))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x4851))+(((-1.0)*r11*x4859))+(((-1.0)*x4853))+((x4852*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4860=((1.0)*sj5);
CheckValue<IkReal> x4861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4860))+(((-1.0)*cj5*r01)))),-1);
if(!x4861.valid){
continue;
}
CheckValue<IkReal> x4862 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4860))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4861.value)))+(x4862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4863=IKsin(j4);
IkReal x4864=IKcos(j4);
IkReal x4865=((1.0)*sj0);
IkReal x4866=(cj5*r00);
IkReal x4867=(cj5*r10);
IkReal x4868=(cj5*r20);
IkReal x4869=((1.0)*x4863);
IkReal x4870=(sj5*x4863);
IkReal x4871=((1.0)*sj5*x4864);
evalcond[0]=(((r22*x4864))+(((-1.0)*x4868*x4869))+((r21*x4870)));
evalcond[1]=((((-1.0)*r21*x4871))+((r22*x4863))+((x4864*x4868)));
evalcond[2]=(((r12*x4864))+cj0+(((-1.0)*x4867*x4869))+((r11*x4870)));
evalcond[3]=(((r01*x4870))+(((-1.0)*x4865))+(((-1.0)*x4866*x4869))+((r02*x4864)));
evalcond[4]=((((-1.0)*r01*x4871))+((r02*x4863))+(((-1.0)*cj0))+((x4864*x4866)));
evalcond[5]=(((r12*x4863))+(((-1.0)*x4865))+(((-1.0)*r11*x4871))+((x4864*x4867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.19672131018626)*px))+(((0.000102794947578565)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.19672131018626)*py))+(((0.000102794947578565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.19672131018626)*px))+(((0.000102794947578565)*py))))+IKsqr(((((8.19672131018626)*py))+(((0.000102794947578565)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.19672131018626)*px))+(((0.000102794947578565)*py))), ((((8.19672131018626)*py))+(((0.000102794947578565)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4872=IKcos(j0);
IkReal x4873=IKsin(j0);
evalcond[0]=((((1.53e-6)*x4872))+(((-0.122)*x4873))+(((-1.0)*px)));
evalcond[1]=((((1.53e-6)*x4873))+(((-1.0)*py))+(((0.122)*x4872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4874=((1.0)*sj5);
IkReal x4875=((((-1.0)*r00*x4874))+(((-1.0)*cj5*r01)));
j4eval[0]=x4875;
j4eval[1]=IKsign(x4875);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x4874))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4876=cj5*cj5;
IkReal x4877=((1.0)*r21);
IkReal x4878=(cj5*r20);
IkReal x4879=((((-1.0)*r02*r22))+((r01*r21*x4876))+(((-1.0)*r01*x4877))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x4876))+((r01*sj5*x4878)));
j4eval[0]=x4879;
j4eval[1]=IKsign(x4879);
j4eval[2]=((IKabs((((cj0*x4878))+(((-1.0)*cj0*sj5*x4877)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4880=cj5*cj5;
IkReal x4881=(r11*r21);
IkReal x4882=(cj5*r20);
IkReal x4883=(r21*sj5);
IkReal x4884=((((-1.0)*r12*r22))+(((-1.0)*x4881))+((r11*sj5*x4882))+(((-1.0)*r10*r20*x4880))+((x4880*x4881))+((cj5*r10*x4883)));
j4eval[0]=x4884;
j4eval[1]=IKsign(x4884);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x4883))+((sj0*x4882))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4885=cj5*cj5;
IkReal x4886=(r11*r21);
IkReal x4887=(cj5*r20);
IkReal x4888=(r21*sj5);
CheckValue<IkReal> x4889 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x4888))+((sj0*x4887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4889.valid){
continue;
}
CheckValue<IkReal> x4890=IKPowWithIntegerCheck(IKsign((((x4885*x4886))+(((-1.0)*r12*r22))+(((-1.0)*x4886))+((r11*sj5*x4887))+(((-1.0)*r10*r20*x4885))+((cj5*r10*x4888)))),-1);
if(!x4890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4889.value)+(((1.5707963267949)*(x4890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4891=IKsin(j4);
IkReal x4892=IKcos(j4);
IkReal x4893=(cj5*r00);
IkReal x4894=(cj5*r10);
IkReal x4895=(cj5*r20);
IkReal x4896=((1.0)*x4891);
IkReal x4897=(sj5*x4891);
IkReal x4898=((1.0)*sj5*x4892);
evalcond[0]=(((r21*x4897))+((r22*x4892))+(((-1.0)*x4895*x4896)));
evalcond[1]=(((x4892*x4895))+(((-1.0)*r21*x4898))+((r22*x4891)));
evalcond[2]=(((r11*x4897))+cj0+((r12*x4892))+(((-1.0)*x4894*x4896)));
evalcond[3]=((((-1.0)*r01*x4898))+cj0+((r02*x4891))+((x4892*x4893)));
evalcond[4]=(sj0+(((-1.0)*r11*x4898))+((x4892*x4894))+((r12*x4891)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4892))+(((-1.0)*x4893*x4896))+((r01*x4897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4899=cj5*cj5;
IkReal x4900=((1.0)*r21);
IkReal x4901=(cj5*r20);
CheckValue<IkReal> x4902=IKPowWithIntegerCheck(IKsign((((r01*r21*x4899))+(((-1.0)*r01*x4900))+(((-1.0)*r02*r22))+((r01*sj5*x4901))+(((-1.0)*r00*r20*x4899))+((cj5*r00*r21*sj5)))),-1);
if(!x4902.valid){
continue;
}
CheckValue<IkReal> x4903 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4900))+((cj0*x4901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4902.value)))+(x4903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4904=IKsin(j4);
IkReal x4905=IKcos(j4);
IkReal x4906=(cj5*r00);
IkReal x4907=(cj5*r10);
IkReal x4908=(cj5*r20);
IkReal x4909=((1.0)*x4904);
IkReal x4910=(sj5*x4904);
IkReal x4911=((1.0)*sj5*x4905);
evalcond[0]=(((r21*x4910))+(((-1.0)*x4908*x4909))+((r22*x4905)));
evalcond[1]=(((x4905*x4908))+(((-1.0)*r21*x4911))+((r22*x4904)));
evalcond[2]=(cj0+(((-1.0)*x4907*x4909))+((r11*x4910))+((r12*x4905)));
evalcond[3]=(((r02*x4904))+((x4905*x4906))+cj0+(((-1.0)*r01*x4911)));
evalcond[4]=(sj0+((x4905*x4907))+(((-1.0)*r11*x4911))+((r12*x4904)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4905))+(((-1.0)*x4906*x4909))+((r01*x4910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4912=((1.0)*sj5);
CheckValue<IkReal> x4913 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4913.valid){
continue;
}
CheckValue<IkReal> x4914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4912))+(((-1.0)*cj5*r01)))),-1);
if(!x4914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4913.value)+(((1.5707963267949)*(x4914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4915=IKsin(j4);
IkReal x4916=IKcos(j4);
IkReal x4917=(cj5*r00);
IkReal x4918=(cj5*r10);
IkReal x4919=(cj5*r20);
IkReal x4920=((1.0)*x4915);
IkReal x4921=(sj5*x4915);
IkReal x4922=((1.0)*sj5*x4916);
evalcond[0]=((((-1.0)*x4919*x4920))+((r21*x4921))+((r22*x4916)));
evalcond[1]=(((x4916*x4919))+(((-1.0)*r21*x4922))+((r22*x4915)));
evalcond[2]=(cj0+(((-1.0)*x4918*x4920))+((r12*x4916))+((r11*x4921)));
evalcond[3]=(cj0+((r02*x4915))+(((-1.0)*r01*x4922))+((x4916*x4917)));
evalcond[4]=(sj0+((r12*x4915))+((x4916*x4918))+(((-1.0)*r11*x4922)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4916))+(((-1.0)*x4917*x4920))+((r01*x4921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.19672131018626)*px))+(((0.000102794947578565)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.19672131018626)*py))+(((0.000102794947578565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.19672131018626)*px))+(((0.000102794947578565)*py))))+IKsqr(((((8.19672131018626)*py))+(((0.000102794947578565)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.19672131018626)*px))+(((0.000102794947578565)*py))), ((((8.19672131018626)*py))+(((0.000102794947578565)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4923=IKcos(j0);
IkReal x4924=IKsin(j0);
evalcond[0]=((((-0.122)*x4924))+(((-1.0)*px))+(((1.53e-6)*x4923)));
evalcond[1]=((((0.122)*x4923))+(((-1.0)*py))+(((1.53e-6)*x4924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4925=((1.0)*sj5);
IkReal x4926=((((-1.0)*r00*x4925))+(((-1.0)*cj5*r01)));
j4eval[0]=x4926;
j4eval[1]=IKsign(x4926);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x4925)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4927=((1.0)*sj5);
IkReal x4928=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4927)));
j4eval[0]=x4928;
j4eval[1]=IKsign(x4928);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4927))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4929=cj5*cj5;
IkReal x4930=((1.0)*r21);
IkReal x4931=(cj5*sj5);
IkReal x4932=((((-1.0)*r01*r20*x4931))+((r00*r20*x4929))+((r01*r21))+(((-1.0)*r01*x4929*x4930))+((r02*r22))+(((-1.0)*r00*x4930*x4931)));
j4eval[0]=x4932;
j4eval[1]=IKsign(x4932);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x4930))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4933=cj5*cj5;
IkReal x4934=((1.0)*r21);
IkReal x4935=(cj5*sj5);
CheckValue<IkReal> x4936 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x4934))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4936.valid){
continue;
}
CheckValue<IkReal> x4937=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4934*x4935))+(((-1.0)*r01*r20*x4935))+((r01*r21))+((r00*r20*x4933))+(((-1.0)*r01*x4933*x4934))+((r02*r22)))),-1);
if(!x4937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4936.value)+(((1.5707963267949)*(x4937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4938=IKsin(j4);
IkReal x4939=IKcos(j4);
IkReal x4940=((1.0)*sj0);
IkReal x4941=(cj5*r00);
IkReal x4942=(cj5*r10);
IkReal x4943=(cj5*r20);
IkReal x4944=((1.0)*x4938);
IkReal x4945=(sj5*x4938);
IkReal x4946=((1.0)*sj5*x4939);
evalcond[0]=((((-1.0)*x4943*x4944))+((r21*x4945))+((r22*x4939)));
evalcond[1]=((((-1.0)*r21*x4946))+((x4939*x4943))+((r22*x4938)));
evalcond[2]=((((-1.0)*x4942*x4944))+((r12*x4939))+cj0+((r11*x4945)));
evalcond[3]=(((r01*x4945))+(((-1.0)*x4941*x4944))+(((-1.0)*x4940))+((r02*x4939)));
evalcond[4]=(((x4939*x4941))+((r02*x4938))+(((-1.0)*cj0))+(((-1.0)*r01*x4946)));
evalcond[5]=(((r12*x4938))+(((-1.0)*r11*x4946))+(((-1.0)*x4940))+((x4939*x4942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4947=((1.0)*sj5);
CheckValue<IkReal> x4948=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4947)))),-1);
if(!x4948.valid){
continue;
}
CheckValue<IkReal> x4949 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4947))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4948.value)))+(x4949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4950=IKsin(j4);
IkReal x4951=IKcos(j4);
IkReal x4952=((1.0)*sj0);
IkReal x4953=(cj5*r00);
IkReal x4954=(cj5*r10);
IkReal x4955=(cj5*r20);
IkReal x4956=((1.0)*x4950);
IkReal x4957=(sj5*x4950);
IkReal x4958=((1.0)*sj5*x4951);
evalcond[0]=(((r22*x4951))+(((-1.0)*x4955*x4956))+((r21*x4957)));
evalcond[1]=((((-1.0)*r21*x4958))+((r22*x4950))+((x4951*x4955)));
evalcond[2]=(cj0+((r12*x4951))+((r11*x4957))+(((-1.0)*x4954*x4956)));
evalcond[3]=((((-1.0)*x4952))+((r02*x4951))+((r01*x4957))+(((-1.0)*x4953*x4956)));
evalcond[4]=(((r02*x4950))+(((-1.0)*r01*x4958))+((x4951*x4953))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x4950))+(((-1.0)*x4952))+(((-1.0)*r11*x4958))+((x4951*x4954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4959=((1.0)*sj5);
CheckValue<IkReal> x4960=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4959))+(((-1.0)*cj5*r01)))),-1);
if(!x4960.valid){
continue;
}
CheckValue<IkReal> x4961 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x4959))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4960.value)))+(x4961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4962=IKsin(j4);
IkReal x4963=IKcos(j4);
IkReal x4964=((1.0)*sj0);
IkReal x4965=(cj5*r00);
IkReal x4966=(cj5*r10);
IkReal x4967=(cj5*r20);
IkReal x4968=((1.0)*x4962);
IkReal x4969=(sj5*x4962);
IkReal x4970=((1.0)*sj5*x4963);
evalcond[0]=(((r22*x4963))+(((-1.0)*x4967*x4968))+((r21*x4969)));
evalcond[1]=(((x4963*x4967))+(((-1.0)*r21*x4970))+((r22*x4962)));
evalcond[2]=(cj0+((r12*x4963))+((r11*x4969))+(((-1.0)*x4966*x4968)));
evalcond[3]=((((-1.0)*x4964))+((r02*x4963))+(((-1.0)*x4965*x4968))+((r01*x4969)));
evalcond[4]=(((x4963*x4965))+((r02*x4962))+(((-1.0)*r01*x4970))+(((-1.0)*cj0)));
evalcond[5]=(((x4963*x4966))+((r12*x4962))+(((-1.0)*x4964))+(((-1.0)*r11*x4970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4971=(sj1*sj2);
IkReal x4972=(r00*sj5);
IkReal x4973=(cj5*r01);
IkReal x4974=((209.0)*cj1);
IkReal x4975=(cj1*cj2);
IkReal x4976=((0.000765)*sj1);
IkReal x4977=((500.0)*px);
CheckValue<IkReal> x4978=IKPowWithIntegerCheck(((((-61.0)*x4975))+(((61.0)*x4971))),-1);
if(!x4978.valid){
continue;
}
CheckValue<IkReal> x4979=IKPowWithIntegerCheck((x4971+(((-1.0)*x4975))),-1);
if(!x4979.valid){
continue;
}
if( IKabs(((x4978.value)*(((((-150.0)*x4971*x4972))+(((-150.0)*x4971*x4973))+(((-1.0)*x4971*x4977))+(((-1.0)*x4972*x4976))+(((-1.0)*x4973*x4976))+(((150.0)*x4973*x4975))+(((150.0)*x4972*x4975))+((x4973*x4974))+((x4975*x4977))+((x4972*x4974)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4979.value)*((x4972+x4973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4978.value)*(((((-150.0)*x4971*x4972))+(((-150.0)*x4971*x4973))+(((-1.0)*x4971*x4977))+(((-1.0)*x4972*x4976))+(((-1.0)*x4973*x4976))+(((150.0)*x4973*x4975))+(((150.0)*x4972*x4975))+((x4973*x4974))+((x4975*x4977))+((x4972*x4974))))))+IKsqr(((x4979.value)*((x4972+x4973))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4978.value)*(((((-150.0)*x4971*x4972))+(((-150.0)*x4971*x4973))+(((-1.0)*x4971*x4977))+(((-1.0)*x4972*x4976))+(((-1.0)*x4973*x4976))+(((150.0)*x4973*x4975))+(((150.0)*x4972*x4975))+((x4973*x4974))+((x4975*x4977))+((x4972*x4974))))), ((x4979.value)*((x4972+x4973))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4980=IKcos(j0);
IkReal x4981=IKsin(j0);
IkReal x4982=(r10*sj5);
IkReal x4983=(cj5*r01);
IkReal x4984=(cj5*r11);
IkReal x4985=(r00*sj5);
IkReal x4986=((1.53e-6)*sj1);
IkReal x4987=((1.0)*cj2);
IkReal x4988=((0.398)*cj1*cj2);
IkReal x4989=(cj1*x4981);
IkReal x4990=(cj1*x4980);
IkReal x4991=(sj1*sj2*x4980);
IkReal x4992=(sj1*sj2*x4981);
evalcond[0]=(x4991+(((-1.0)*x4987*x4990))+(((-1.0)*x4985))+(((-1.0)*x4983)));
evalcond[1]=(x4992+(((-1.0)*x4987*x4989))+(((-1.0)*x4982))+(((-1.0)*x4984)));
evalcond[2]=((((0.418)*x4990))+(((-0.398)*x4991))+(((-1.0)*px))+(((-1.0)*x4980*x4986))+(((0.098)*x4985))+(((0.098)*x4983))+((x4980*x4988))+(((-0.122)*x4981)));
evalcond[3]=((((0.122)*x4980))+(((-0.398)*x4992))+(((0.418)*x4989))+(((-1.0)*py))+(((-1.0)*x4981*x4986))+(((0.098)*x4984))+(((0.098)*x4982))+((x4981*x4988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4993=((1.0)*sj5);
IkReal x4994=((((-1.0)*r00*x4993))+(((-1.0)*cj5*r01)));
j4eval[0]=x4994;
j4eval[1]=IKsign(x4994);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x4993))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4995=((1.0)*sj5);
IkReal x4996=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4995)));
j4eval[0]=x4996;
j4eval[1]=IKsign(x4996);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x4995))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4997=((1.0)*sj0);
IkReal x4998=((1.0)*cj0);
IkReal x4999=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4999;
j4eval[1]=((IKabs(((((-1.0)*r12*x4997))+(((-1.0)*r02*x4998)))))+(IKabs(((((-1.0)*cj5*r00*x4998))+((r11*sj0*sj5))+(((-1.0)*cj5*r10*x4997))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x4999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5000=((-1.0)*r20);
IkReal x5002 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5002)==0){
continue;
}
IkReal x5001=pow(x5002,-0.5);
CheckValue<IkReal> x5003 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5000),IKFAST_ATAN2_MAGTHRESH);
if(!x5003.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5003.value));
IkReal gconst115=(r21*x5001);
IkReal gconst116=(x5000*x5001);
CheckValue<IkReal> x5004 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5004.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5004.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5005=((-1.0)*r20);
IkReal x5006=x5001;
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5005),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
IkReal x5007=((-1.0)*(x5008.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5007;
IkReal gconst114=x5007;
IkReal gconst115=(r21*x5006);
IkReal gconst116=(x5005*x5006);
IkReal x5009=r22*r22;
IkReal x5010=((1.0)*x5009);
CheckValue<IkReal> x5014=IKPowWithIntegerCheck(((-1.0)+x5009),-1);
if(!x5014.valid){
continue;
}
IkReal x5011=x5014.value;
if((((1.0)+(((-1.0)*x5010)))) < -0.00001)
continue;
IkReal x5012=IKsqrt(((1.0)+(((-1.0)*x5010))));
IkReal x5013=(cj0*x5011*x5012);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5013+(((-1.0)*x5010*x5013))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5015=((-1.0)*r20);
IkReal x5016=x5001;
CheckValue<IkReal> x5018 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5015),IKFAST_ATAN2_MAGTHRESH);
if(!x5018.valid){
continue;
}
IkReal x5017=((-1.0)*(x5018.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5017;
IkReal gconst114=x5017;
IkReal gconst115=(r21*x5016);
IkReal gconst116=(x5015*x5016);
IkReal x5019=r22*r22;
IkReal x5020=((1.0)*x5019);
CheckValue<IkReal> x5024=IKPowWithIntegerCheck(((-1.0)+x5019),-1);
if(!x5024.valid){
continue;
}
IkReal x5021=x5024.value;
if((((1.0)+(((-1.0)*x5020)))) < -0.00001)
continue;
IkReal x5022=IKsqrt(((1.0)+(((-1.0)*x5020))));
IkReal x5023=(sj0*x5021*x5022);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5023+(((-1.0)*x5020*x5023))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5025=((-1.0)*r20);
IkReal x5026=x5001;
CheckValue<IkReal> x5028 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5025),IKFAST_ATAN2_MAGTHRESH);
if(!x5028.valid){
continue;
}
IkReal x5027=((-1.0)*(x5028.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5027;
IkReal gconst114=x5027;
IkReal gconst115=(r21*x5026);
IkReal gconst116=(x5025*x5026);
IkReal x5029=((1.0)*(r22*r22));
CheckValue<IkReal> x5033=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5029))),-1);
if(!x5033.valid){
continue;
}
IkReal x5030=x5033.value;
IkReal x5031=((1.0)*x5030);
IkReal x5032=((((-2.0)*x5030*(r20*r20)*(r21*r21)))+(((-1.0)*x5031*(r20*r20*r20*r20)))+(((-1.0)*x5031*(r21*r21*r21*r21)))+(((-1.0)*x5029)));
j4eval[0]=x5032;
j4eval[1]=IKsign(x5032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5034=(sj1*sj2);
IkReal x5035=(gconst115*r21);
IkReal x5036=(cj1*cj2);
IkReal x5037=(gconst116*r20);
CheckValue<IkReal> x5038=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5035*x5035)))+(((2.0)*x5035*x5037))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5037*x5037))))),-1);
if(!x5038.valid){
continue;
}
CheckValue<IkReal> x5039 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5036))+((r22*x5034)))),IkReal((((x5034*x5037))+((x5035*x5036))+(((-1.0)*x5034*x5035))+(((-1.0)*x5036*x5037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5038.value)))+(x5039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5040=IKsin(j4);
IkReal x5041=IKcos(j4);
IkReal x5042=(gconst115*r21);
IkReal x5043=(gconst116*r00);
IkReal x5044=((1.0)*cj2);
IkReal x5045=((1.0)*sj0);
IkReal x5046=(gconst116*r20);
IkReal x5047=(gconst116*r10);
IkReal x5048=(cj1*sj2);
IkReal x5049=((1.0)*x5041);
IkReal x5050=((1.0)*x5040);
IkReal x5051=(gconst115*x5040);
evalcond[0]=(((x5040*x5042))+((r22*x5041))+(((-1.0)*x5046*x5050)));
evalcond[1]=(cj0+((r11*x5051))+((r12*x5041))+(((-1.0)*x5047*x5050)));
evalcond[2]=((((-1.0)*x5045))+((r01*x5051))+((r02*x5041))+(((-1.0)*x5043*x5050)));
evalcond[3]=((((-1.0)*x5042*x5049))+((sj1*sj2))+((x5041*x5046))+(((-1.0)*cj1*x5044))+((r22*x5040)));
evalcond[4]=((((-1.0)*cj0*x5048))+(((-1.0)*gconst115*r01*x5049))+((x5041*x5043))+((r02*x5040))+(((-1.0)*cj0*sj1*x5044)));
evalcond[5]=(((x5041*x5047))+(((-1.0)*sj0*sj1*x5044))+(((-1.0)*x5045*x5048))+((r12*x5040))+(((-1.0)*gconst115*r11*x5049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5052=((1.0)*gconst115);
CheckValue<IkReal> x5053 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5052))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5053.valid){
continue;
}
CheckValue<IkReal> x5054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5052))+(((-1.0)*gconst116*r11)))),-1);
if(!x5054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5053.value)+(((1.5707963267949)*(x5054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5055=IKsin(j4);
IkReal x5056=IKcos(j4);
IkReal x5057=(gconst115*r21);
IkReal x5058=(gconst116*r00);
IkReal x5059=((1.0)*cj2);
IkReal x5060=((1.0)*sj0);
IkReal x5061=(gconst116*r20);
IkReal x5062=(gconst116*r10);
IkReal x5063=(cj1*sj2);
IkReal x5064=((1.0)*x5056);
IkReal x5065=((1.0)*x5055);
IkReal x5066=(gconst115*x5055);
evalcond[0]=(((x5055*x5057))+(((-1.0)*x5061*x5065))+((r22*x5056)));
evalcond[1]=(cj0+((r12*x5056))+((r11*x5066))+(((-1.0)*x5062*x5065)));
evalcond[2]=((((-1.0)*x5060))+(((-1.0)*x5058*x5065))+((r01*x5066))+((r02*x5056)));
evalcond[3]=(((r22*x5055))+(((-1.0)*cj1*x5059))+(((-1.0)*x5057*x5064))+((sj1*sj2))+((x5056*x5061)));
evalcond[4]=((((-1.0)*cj0*x5063))+(((-1.0)*gconst115*r01*x5064))+((x5056*x5058))+(((-1.0)*cj0*sj1*x5059))+((r02*x5055)));
evalcond[5]=(((r12*x5055))+(((-1.0)*sj0*sj1*x5059))+(((-1.0)*x5060*x5063))+((x5056*x5062))+(((-1.0)*gconst115*r11*x5064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5067=((1.0)*gconst115);
CheckValue<IkReal> x5068=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r01))+(((-1.0)*r00*x5067)))),-1);
if(!x5068.valid){
continue;
}
CheckValue<IkReal> x5069 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*r21*x5067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5068.value)))+(x5069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5070=IKsin(j4);
IkReal x5071=IKcos(j4);
IkReal x5072=(gconst115*r21);
IkReal x5073=(gconst116*r00);
IkReal x5074=((1.0)*cj2);
IkReal x5075=((1.0)*sj0);
IkReal x5076=(gconst116*r20);
IkReal x5077=(gconst116*r10);
IkReal x5078=(cj1*sj2);
IkReal x5079=((1.0)*x5071);
IkReal x5080=((1.0)*x5070);
IkReal x5081=(gconst115*x5070);
evalcond[0]=(((x5070*x5072))+(((-1.0)*x5076*x5080))+((r22*x5071)));
evalcond[1]=(cj0+(((-1.0)*x5077*x5080))+((r11*x5081))+((r12*x5071)));
evalcond[2]=((((-1.0)*x5075))+(((-1.0)*x5073*x5080))+((r01*x5081))+((r02*x5071)));
evalcond[3]=((((-1.0)*x5072*x5079))+((sj1*sj2))+((x5071*x5076))+(((-1.0)*cj1*x5074))+((r22*x5070)));
evalcond[4]=((((-1.0)*cj0*sj1*x5074))+(((-1.0)*cj0*x5078))+(((-1.0)*gconst115*r01*x5079))+((r02*x5070))+((x5071*x5073)));
evalcond[5]=((((-1.0)*sj0*sj1*x5074))+((x5071*x5077))+((r12*x5070))+(((-1.0)*x5075*x5078))+(((-1.0)*gconst115*r11*x5079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5082=((-1.0)*r21);
IkReal x5084 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5084)==0){
continue;
}
IkReal x5083=pow(x5084,-0.5);
CheckValue<IkReal> x5085 = IKatan2WithCheck(IkReal(x5082),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5085.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5085.value))));
IkReal gconst118=(x5082*x5083);
IkReal gconst119=((1.0)*r20*x5083);
CheckValue<IkReal> x5086 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5086.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5086.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5087=((-1.0)*r21);
CheckValue<IkReal> x5090 = IKatan2WithCheck(IkReal(x5087),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5090.valid){
continue;
}
IkReal x5088=((1.0)*(x5090.value));
IkReal x5089=x5083;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5088)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5088)));
IkReal gconst118=(x5087*x5089);
IkReal gconst119=((1.0)*r20*x5089);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5091=((-1.0)*r21);
CheckValue<IkReal> x5094 = IKatan2WithCheck(IkReal(x5091),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5094.valid){
continue;
}
IkReal x5092=((1.0)*(x5094.value));
IkReal x5093=x5083;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5092)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5092)));
IkReal gconst118=(x5091*x5093);
IkReal gconst119=((1.0)*r20*x5093);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5095=((-1.0)*r21);
CheckValue<IkReal> x5098 = IKatan2WithCheck(IkReal(x5095),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5098.valid){
continue;
}
IkReal x5096=((1.0)*(x5098.value));
IkReal x5097=x5083;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5096)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5096)));
IkReal gconst118=(x5095*x5097);
IkReal gconst119=((1.0)*r20*x5097);
IkReal x5099=r22*r22;
IkReal x5100=((1.0)*r12*sj0);
IkReal x5101=((1.0)*cj0*r02);
CheckValue<IkReal> x5105=IKPowWithIntegerCheck(((-1.0)+x5099),-1);
if(!x5105.valid){
continue;
}
IkReal x5102=x5105.value;
if((((1.0)+(((-1.0)*x5099)))) < -0.00001)
continue;
IkReal x5103=IKsqrt(((1.0)+(((-1.0)*x5099))));
IkReal x5104=(r22*x5102*x5103);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5101*x5104))+(((-1.0)*x5100*x5104)))))+(IKabs(((((-1.0)*x5101))+(((-1.0)*x5100))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5106=((1.0)*sj0);
IkReal x5107=((1.0)*cj0);
CheckValue<IkReal> x5108=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*gconst118*r20)))),-1);
if(!x5108.valid){
continue;
}
CheckValue<IkReal> x5109 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5107))+(((-1.0)*r12*x5106)))),IkReal((((gconst118*r11*sj0))+(((-1.0)*gconst119*r10*x5106))+(((-1.0)*gconst119*r00*x5107))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5108.value)))+(x5109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5110=IKsin(j4);
IkReal x5111=IKcos(j4);
IkReal x5112=(gconst118*r01);
IkReal x5113=(gconst119*r10);
IkReal x5114=(gconst119*r20);
IkReal x5115=((1.0)*cj2);
IkReal x5116=(gconst118*r11);
IkReal x5117=(gconst118*r21);
IkReal x5118=(gconst119*r00);
IkReal x5119=((1.0)*sj0);
IkReal x5120=(cj1*sj2);
IkReal x5121=((1.0)*x5111);
IkReal x5122=((1.0)*x5110);
evalcond[0]=(((r22*x5111))+((x5110*x5117))+(((-1.0)*x5114*x5122)));
evalcond[1]=(cj0+(((-1.0)*x5113*x5122))+((x5110*x5116))+((r12*x5111)));
evalcond[2]=(((r02*x5111))+(((-1.0)*x5118*x5122))+((x5110*x5112))+(((-1.0)*x5119)));
evalcond[3]=(((sj1*sj2))+((r22*x5110))+(((-1.0)*x5117*x5121))+(((-1.0)*cj1*x5115))+((x5111*x5114)));
evalcond[4]=((((-1.0)*cj0*sj1*x5115))+(((-1.0)*x5112*x5121))+((r02*x5110))+(((-1.0)*cj0*x5120))+((x5111*x5118)));
evalcond[5]=((((-1.0)*sj0*sj1*x5115))+(((-1.0)*x5116*x5121))+((x5111*x5113))+(((-1.0)*x5119*x5120))+((r12*x5110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5123=((1.0)*gconst118);
CheckValue<IkReal> x5124 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5123))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5124.valid){
continue;
}
CheckValue<IkReal> x5125=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5123))+(((-1.0)*gconst119*r11)))),-1);
if(!x5125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5124.value)+(((1.5707963267949)*(x5125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5126=IKsin(j4);
IkReal x5127=IKcos(j4);
IkReal x5128=(gconst118*r01);
IkReal x5129=(gconst119*r10);
IkReal x5130=(gconst119*r20);
IkReal x5131=((1.0)*cj2);
IkReal x5132=(gconst118*r11);
IkReal x5133=(gconst118*r21);
IkReal x5134=(gconst119*r00);
IkReal x5135=((1.0)*sj0);
IkReal x5136=(cj1*sj2);
IkReal x5137=((1.0)*x5127);
IkReal x5138=((1.0)*x5126);
evalcond[0]=(((r22*x5127))+((x5126*x5133))+(((-1.0)*x5130*x5138)));
evalcond[1]=(cj0+((r12*x5127))+((x5126*x5132))+(((-1.0)*x5129*x5138)));
evalcond[2]=(((x5126*x5128))+(((-1.0)*x5135))+(((-1.0)*x5134*x5138))+((r02*x5127)));
evalcond[3]=(((r22*x5126))+((sj1*sj2))+(((-1.0)*cj1*x5131))+((x5127*x5130))+(((-1.0)*x5133*x5137)));
evalcond[4]=((((-1.0)*x5128*x5137))+(((-1.0)*cj0*x5136))+(((-1.0)*cj0*sj1*x5131))+((x5127*x5134))+((r02*x5126)));
evalcond[5]=((((-1.0)*x5132*x5137))+((r12*x5126))+(((-1.0)*x5135*x5136))+((x5127*x5129))+(((-1.0)*sj0*sj1*x5131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5139=((1.0)*gconst118);
CheckValue<IkReal> x5140=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r01))+(((-1.0)*r00*x5139)))),-1);
if(!x5140.valid){
continue;
}
CheckValue<IkReal> x5141 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5139))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5140.value)))+(x5141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5142=IKsin(j4);
IkReal x5143=IKcos(j4);
IkReal x5144=(gconst118*r01);
IkReal x5145=(gconst119*r10);
IkReal x5146=(gconst119*r20);
IkReal x5147=((1.0)*cj2);
IkReal x5148=(gconst118*r11);
IkReal x5149=(gconst118*r21);
IkReal x5150=(gconst119*r00);
IkReal x5151=((1.0)*sj0);
IkReal x5152=(cj1*sj2);
IkReal x5153=((1.0)*x5143);
IkReal x5154=((1.0)*x5142);
evalcond[0]=(((x5142*x5149))+(((-1.0)*x5146*x5154))+((r22*x5143)));
evalcond[1]=(((x5142*x5148))+cj0+(((-1.0)*x5145*x5154))+((r12*x5143)));
evalcond[2]=(((x5142*x5144))+((r02*x5143))+(((-1.0)*x5150*x5154))+(((-1.0)*x5151)));
evalcond[3]=(((x5143*x5146))+((sj1*sj2))+(((-1.0)*cj1*x5147))+(((-1.0)*x5149*x5153))+((r22*x5142)));
evalcond[4]=((((-1.0)*cj0*x5152))+((x5143*x5150))+(((-1.0)*x5144*x5153))+(((-1.0)*cj0*sj1*x5147))+((r02*x5142)));
evalcond[5]=((((-1.0)*x5151*x5152))+((x5143*x5145))+((r12*x5142))+(((-1.0)*sj0*sj1*x5147))+(((-1.0)*x5148*x5153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5155=((-1.0)*r10);
IkReal x5157 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5157)==0){
continue;
}
IkReal x5156=pow(x5157,-0.5);
CheckValue<IkReal> x5158 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5155),IKFAST_ATAN2_MAGTHRESH);
if(!x5158.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5158.value));
IkReal gconst121=(r11*x5156);
IkReal gconst122=(x5155*x5156);
CheckValue<IkReal> x5159 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5159.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5159.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5160=((-1.0)*r10);
IkReal x5161=x5156;
CheckValue<IkReal> x5163 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5160),IKFAST_ATAN2_MAGTHRESH);
if(!x5163.valid){
continue;
}
IkReal x5162=((-1.0)*(x5163.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5162;
IkReal gconst120=x5162;
IkReal gconst121=(r11*x5161);
IkReal gconst122=(x5160*x5161);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5164=((-1.0)*r10);
IkReal x5165=x5156;
CheckValue<IkReal> x5167 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5164),IKFAST_ATAN2_MAGTHRESH);
if(!x5167.valid){
continue;
}
IkReal x5166=((-1.0)*(x5167.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5166;
IkReal gconst120=x5166;
IkReal gconst121=(r11*x5165);
IkReal gconst122=(x5164*x5165);
IkReal x5168=r12*r12;
IkReal x5169=((1.0)*sj0);
IkReal x5170=(cj0*r02);
IkReal x5171=x5156;
j4eval[0]=((IKabs(((((-1.0)*x5169*x5171))+((r12*x5170*x5171))+((sj0*x5168*x5171)))))+(IKabs(((((-1.0)*r12*x5169))+(((-1.0)*x5170))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5172=((-1.0)*r10);
IkReal x5173=x5156;
CheckValue<IkReal> x5175 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5172),IKFAST_ATAN2_MAGTHRESH);
if(!x5175.valid){
continue;
}
IkReal x5174=((-1.0)*(x5175.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5174;
IkReal gconst120=x5174;
IkReal gconst121=(r11*x5173);
IkReal gconst122=(x5172*x5173);
IkReal x5176=r12*r12;
IkReal x5177=((1.0)+(((-1.0)*x5176)));
IkReal x5178=(r22*sj1*sj2);
IkReal x5179=(cj1*cj2*r22);
CheckValue<IkReal> x5186=IKPowWithIntegerCheck(x5177,-1);
if(!x5186.valid){
continue;
}
IkReal x5180=x5186.value;
CheckValue<IkReal> x5187=IKPowWithIntegerCheck(((-1.0)+x5176),-1);
if(!x5187.valid){
continue;
}
IkReal x5181=x5187.value;
IkReal x5182=((1.0)*x5180);
if((x5177) < -0.00001)
continue;
IkReal x5183=IKsqrt(x5177);
IkReal x5184=(r12*x5181*x5183);
IkReal x5185=((((-1.0)*x5182*(r10*r10)*(r20*r20)))+(((-1.0)*x5182*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x5180)));
j4eval[0]=x5185;
j4eval[1]=IKsign(x5185);
j4eval[2]=((IKabs((x5178+(((-1.0)*x5179)))))+(IKabs(((((-1.0)*x5178*x5184))+((x5179*x5184))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5188=(cj1*cj2);
IkReal x5189=(gconst122*r20);
IkReal x5190=(gconst121*r21);
IkReal x5191=(sj1*sj2);
CheckValue<IkReal> x5192=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5189*x5189)))+(((-1.0)*(x5190*x5190)))+(((-1.0)*(r22*r22)))+(((2.0)*x5189*x5190)))),-1);
if(!x5192.valid){
continue;
}
CheckValue<IkReal> x5193 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5188))+((r22*x5191)))),IkReal((((x5188*x5190))+(((-1.0)*x5190*x5191))+(((-1.0)*x5188*x5189))+((x5189*x5191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5192.value)))+(x5193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5194=IKsin(j4);
IkReal x5195=IKcos(j4);
IkReal x5196=(gconst121*r01);
IkReal x5197=((1.0)*cj2);
IkReal x5198=((1.0)*sj0);
IkReal x5199=(cj1*sj2);
IkReal x5200=((1.0)*x5195);
IkReal x5201=(gconst122*x5195);
IkReal x5202=(gconst121*x5194);
IkReal x5203=((1.0)*gconst122*x5194);
evalcond[0]=(((r22*x5195))+(((-1.0)*r20*x5203))+((r21*x5202)));
evalcond[1]=(cj0+(((-1.0)*r10*x5203))+((r11*x5202))+((r12*x5195)));
evalcond[2]=(((x5194*x5196))+((r02*x5195))+(((-1.0)*x5198))+(((-1.0)*r00*x5203)));
evalcond[3]=(((r20*x5201))+(((-1.0)*gconst121*r21*x5200))+((sj1*sj2))+((r22*x5194))+(((-1.0)*cj1*x5197)));
evalcond[4]=(((r00*x5201))+((r02*x5194))+(((-1.0)*x5196*x5200))+(((-1.0)*cj0*x5199))+(((-1.0)*cj0*sj1*x5197)));
evalcond[5]=((((-1.0)*gconst121*r11*x5200))+(((-1.0)*x5198*x5199))+((r12*x5194))+(((-1.0)*sj0*sj1*x5197))+((r10*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5204=((1.0)*sj0);
IkReal x5205=((1.0)*cj0);
CheckValue<IkReal> x5206=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*gconst122*r21)))),-1);
if(!x5206.valid){
continue;
}
CheckValue<IkReal> x5207 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5205))+(((-1.0)*r12*x5204)))),IkReal(((((-1.0)*gconst122*r10*x5204))+(((-1.0)*gconst122*r00*x5205))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5206.value)))+(x5207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5208=IKsin(j4);
IkReal x5209=IKcos(j4);
IkReal x5210=(gconst121*r01);
IkReal x5211=((1.0)*cj2);
IkReal x5212=((1.0)*sj0);
IkReal x5213=(cj1*sj2);
IkReal x5214=((1.0)*x5209);
IkReal x5215=(gconst122*x5209);
IkReal x5216=(gconst121*x5208);
IkReal x5217=((1.0)*gconst122*x5208);
evalcond[0]=(((r22*x5209))+(((-1.0)*r20*x5217))+((r21*x5216)));
evalcond[1]=(cj0+(((-1.0)*r10*x5217))+((r11*x5216))+((r12*x5209)));
evalcond[2]=((((-1.0)*x5212))+((x5208*x5210))+(((-1.0)*r00*x5217))+((r02*x5209)));
evalcond[3]=(((r20*x5215))+(((-1.0)*gconst121*r21*x5214))+((sj1*sj2))+((r22*x5208))+(((-1.0)*cj1*x5211)));
evalcond[4]=((((-1.0)*cj0*x5213))+((r02*x5208))+(((-1.0)*cj0*sj1*x5211))+(((-1.0)*x5210*x5214))+((r00*x5215)));
evalcond[5]=((((-1.0)*x5212*x5213))+(((-1.0)*gconst121*r11*x5214))+(((-1.0)*sj0*sj1*x5211))+((r12*x5208))+((r10*x5215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5218=((1.0)*gconst121);
CheckValue<IkReal> x5219=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5218))+(((-1.0)*gconst122*r01)))),-1);
if(!x5219.valid){
continue;
}
CheckValue<IkReal> x5220 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5218))+((cj0*gconst122*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5219.value)))+(x5220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5221=IKsin(j4);
IkReal x5222=IKcos(j4);
IkReal x5223=(gconst121*r01);
IkReal x5224=((1.0)*cj2);
IkReal x5225=((1.0)*sj0);
IkReal x5226=(cj1*sj2);
IkReal x5227=((1.0)*x5222);
IkReal x5228=(gconst122*x5222);
IkReal x5229=(gconst121*x5221);
IkReal x5230=((1.0)*gconst122*x5221);
evalcond[0]=(((r21*x5229))+(((-1.0)*r20*x5230))+((r22*x5222)));
evalcond[1]=((((-1.0)*r10*x5230))+cj0+((r11*x5229))+((r12*x5222)));
evalcond[2]=(((r02*x5222))+((x5221*x5223))+(((-1.0)*r00*x5230))+(((-1.0)*x5225)));
evalcond[3]=(((r22*x5221))+((sj1*sj2))+(((-1.0)*cj1*x5224))+(((-1.0)*gconst121*r21*x5227))+((r20*x5228)));
evalcond[4]=((((-1.0)*x5223*x5227))+(((-1.0)*cj0*x5226))+((r02*x5221))+(((-1.0)*cj0*sj1*x5224))+((r00*x5228)));
evalcond[5]=((((-1.0)*sj0*sj1*x5224))+(((-1.0)*x5225*x5226))+((r10*x5228))+((r12*x5221))+(((-1.0)*gconst121*r11*x5227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5231=((-1.0)*r11);
IkReal x5233 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5233)==0){
continue;
}
IkReal x5232=pow(x5233,-0.5);
CheckValue<IkReal> x5234 = IKatan2WithCheck(IkReal(x5231),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5234.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5234.value))));
IkReal gconst124=(x5231*x5232);
IkReal gconst125=((1.0)*r10*x5232);
CheckValue<IkReal> x5235 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5235.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5235.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5236=((-1.0)*r11);
CheckValue<IkReal> x5239 = IKatan2WithCheck(IkReal(x5236),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5239.valid){
continue;
}
IkReal x5237=((1.0)*(x5239.value));
IkReal x5238=x5232;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5237)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5237)));
IkReal gconst124=(x5236*x5238);
IkReal gconst125=((1.0)*r10*x5238);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5240=((1.0)*sj0);
IkReal x5241=((1.0)*gconst125);
CheckValue<IkReal> x5242=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5241)))),-1);
if(!x5242.valid){
continue;
}
CheckValue<IkReal> x5243 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5240))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5241))+(((-1.0)*gconst125*r10*x5240))+((cj0*gconst124*r01))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5242.value)))+(x5243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5244=IKsin(j4);
IkReal x5245=IKcos(j4);
IkReal x5246=(gconst125*r20);
IkReal x5247=((1.0)*cj2);
IkReal x5248=((1.0)*sj0);
IkReal x5249=(cj1*sj2);
IkReal x5250=((1.0)*x5244);
IkReal x5251=(gconst124*x5244);
IkReal x5252=(gconst125*x5245);
IkReal x5253=((1.0)*gconst124*x5245);
evalcond[0]=(((r21*x5251))+(((-1.0)*x5246*x5250))+((r22*x5245)));
evalcond[1]=((((-1.0)*gconst125*r10*x5250))+cj0+((r12*x5245))+((r11*x5251)));
evalcond[2]=(((r01*x5251))+(((-1.0)*x5248))+(((-1.0)*gconst125*r00*x5250))+((r02*x5245)));
evalcond[3]=(((x5245*x5246))+((sj1*sj2))+((r22*x5244))+(((-1.0)*cj1*x5247))+(((-1.0)*r21*x5253)));
evalcond[4]=((((-1.0)*cj0*sj1*x5247))+((r00*x5252))+(((-1.0)*r01*x5253))+(((-1.0)*cj0*x5249))+((r02*x5244)));
evalcond[5]=(((r10*x5252))+(((-1.0)*r11*x5253))+((r12*x5244))+(((-1.0)*x5248*x5249))+(((-1.0)*sj0*sj1*x5247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5254=((1.0)*gconst124);
CheckValue<IkReal> x5255=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5254))+(((-1.0)*gconst125*r01)))),-1);
if(!x5255.valid){
continue;
}
CheckValue<IkReal> x5256 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5254))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5255.value)))+(x5256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5257=IKsin(j4);
IkReal x5258=IKcos(j4);
IkReal x5259=(gconst125*r20);
IkReal x5260=((1.0)*cj2);
IkReal x5261=((1.0)*sj0);
IkReal x5262=(cj1*sj2);
IkReal x5263=((1.0)*x5257);
IkReal x5264=(gconst124*x5257);
IkReal x5265=(gconst125*x5258);
IkReal x5266=((1.0)*gconst124*x5258);
evalcond[0]=(((r22*x5258))+(((-1.0)*x5259*x5263))+((r21*x5264)));
evalcond[1]=(((r12*x5258))+cj0+(((-1.0)*gconst125*r10*x5263))+((r11*x5264)));
evalcond[2]=((((-1.0)*gconst125*r00*x5263))+((r01*x5264))+(((-1.0)*x5261))+((r02*x5258)));
evalcond[3]=((((-1.0)*r21*x5266))+((r22*x5257))+((sj1*sj2))+((x5258*x5259))+(((-1.0)*cj1*x5260)));
evalcond[4]=(((r00*x5265))+(((-1.0)*cj0*sj1*x5260))+(((-1.0)*r01*x5266))+(((-1.0)*cj0*x5262))+((r02*x5257)));
evalcond[5]=(((r12*x5257))+(((-1.0)*r11*x5266))+(((-1.0)*x5261*x5262))+(((-1.0)*sj0*sj1*x5260))+((r10*x5265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5267=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5267;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x5267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5268=((1.0)*sj5);
IkReal x5269=((((-1.0)*r00*x5268))+(((-1.0)*cj5*r01)));
j4eval[0]=x5269;
j4eval[1]=((IKabs(((((-1.0)*r21*x5268))+((cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5270=cj5*cj5;
IkReal x5271=r11*r11;
IkReal x5272=(r11*sj5);
IkReal x5273=(cj5*r10);
IkReal x5274=((((-1.0)*x5270*x5271))+(((-2.0)*x5272*x5273))+(r12*r12)+x5271+((x5270*(r10*r10))));
j4eval[0]=x5274;
j4eval[1]=IKsign(x5274);
j4eval[2]=((IKabs(r12))+(IKabs((x5273+(((-1.0)*x5272))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5275=cj5*cj5;
IkReal x5276=r11*r11;
IkReal x5277=(cj5*r10);
IkReal x5278=(r11*sj5);
CheckValue<IkReal> x5279=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5275*(r10*r10)))+x5276+(((-1.0)*x5275*x5276))+(((-2.0)*x5277*x5278)))),-1);
if(!x5279.valid){
continue;
}
CheckValue<IkReal> x5280 = IKatan2WithCheck(IkReal((x5277+(((-1.0)*x5278)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5279.value)))+(x5280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5281=IKsin(j4);
IkReal x5282=IKcos(j4);
IkReal x5283=(cj5*r10);
IkReal x5284=((1.0)*cj2);
IkReal x5285=(cj5*r00);
IkReal x5286=(cj5*r20);
IkReal x5287=((1.0)*x5281);
IkReal x5288=(sj5*x5281);
IkReal x5289=((1.0)*sj5*x5282);
evalcond[0]=(((r22*x5282))+((r21*x5288))+(((-1.0)*x5286*x5287)));
evalcond[1]=(((r02*x5282))+((r01*x5288))+(((-1.0)*x5285*x5287)));
evalcond[2]=(((r12*x5281))+((x5282*x5283))+(((-1.0)*r11*x5289)));
evalcond[3]=((1.0)+((r12*x5282))+(((-1.0)*x5283*x5287))+((r11*x5288)));
evalcond[4]=(((r22*x5281))+(((-1.0)*cj1*x5284))+((x5282*x5286))+(((-1.0)*r21*x5289))+((sj1*sj2)));
evalcond[5]=(((r02*x5281))+(((-1.0)*r01*x5289))+((x5282*x5285))+(((-1.0)*sj1*x5284))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5290=((1.0)*sj5);
CheckValue<IkReal> x5291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5290))+(((-1.0)*cj5*r01)))),-1);
if(!x5291.valid){
continue;
}
CheckValue<IkReal> x5292 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5291.value)))+(x5292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5293=IKsin(j4);
IkReal x5294=IKcos(j4);
IkReal x5295=(cj5*r10);
IkReal x5296=((1.0)*cj2);
IkReal x5297=(cj5*r00);
IkReal x5298=(cj5*r20);
IkReal x5299=((1.0)*x5293);
IkReal x5300=(sj5*x5293);
IkReal x5301=((1.0)*sj5*x5294);
evalcond[0]=(((r21*x5300))+((r22*x5294))+(((-1.0)*x5298*x5299)));
evalcond[1]=(((r02*x5294))+(((-1.0)*x5297*x5299))+((r01*x5300)));
evalcond[2]=(((r12*x5293))+((x5294*x5295))+(((-1.0)*r11*x5301)));
evalcond[3]=((1.0)+((r12*x5294))+(((-1.0)*x5295*x5299))+((r11*x5300)));
evalcond[4]=(((x5294*x5298))+((r22*x5293))+(((-1.0)*cj1*x5296))+((sj1*sj2))+(((-1.0)*r21*x5301)));
evalcond[5]=(((x5294*x5297))+((r02*x5293))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x5301))+(((-1.0)*sj1*x5296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5302=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5302.valid){
continue;
}
CheckValue<IkReal> x5303 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5302.value)))+(x5303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5304=IKsin(j4);
IkReal x5305=IKcos(j4);
IkReal x5306=(cj5*r10);
IkReal x5307=((1.0)*cj2);
IkReal x5308=(cj5*r00);
IkReal x5309=(cj5*r20);
IkReal x5310=((1.0)*x5304);
IkReal x5311=(sj5*x5304);
IkReal x5312=((1.0)*sj5*x5305);
evalcond[0]=(((r21*x5311))+((r22*x5305))+(((-1.0)*x5309*x5310)));
evalcond[1]=(((r01*x5311))+((r02*x5305))+(((-1.0)*x5308*x5310)));
evalcond[2]=((((-1.0)*r11*x5312))+((r12*x5304))+((x5305*x5306)));
evalcond[3]=((1.0)+(((-1.0)*x5306*x5310))+((r12*x5305))+((r11*x5311)));
evalcond[4]=(((sj1*sj2))+((r22*x5304))+(((-1.0)*cj1*x5307))+(((-1.0)*r21*x5312))+((x5305*x5309)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r02*x5304))+(((-1.0)*r01*x5312))+(((-1.0)*sj1*x5307))+((x5305*x5308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5313=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5313;
j4eval[1]=IKsign(x5313);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5314=((1.0)*sj5);
IkReal x5315=((((-1.0)*cj5*r21))+(((-1.0)*r20*x5314)));
j4eval[0]=x5315;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x5314))+((cj5*r00))))));
j4eval[2]=IKsign(x5315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5316=cj5*cj5;
IkReal x5317=r11*r11;
IkReal x5318=(cj5*r10);
IkReal x5319=(r11*sj5);
IkReal x5320=(((x5316*x5317))+(((-1.0)*x5317))+(((-1.0)*(r12*r12)))+(((2.0)*x5318*x5319))+(((-1.0)*x5316*(r10*r10))));
j4eval[0]=x5320;
j4eval[1]=((IKabs(r12))+(IKabs((x5318+(((-1.0)*x5319))))));
j4eval[2]=IKsign(x5320);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5321=cj5*cj5;
IkReal x5322=r11*r11;
IkReal x5323=(cj5*r10);
IkReal x5324=(r11*sj5);
CheckValue<IkReal> x5325=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5322))+((x5321*x5322))+(((2.0)*x5323*x5324))+(((-1.0)*(r12*r12)))+(((-1.0)*x5321*(r10*r10))))),-1);
if(!x5325.valid){
continue;
}
CheckValue<IkReal> x5326 = IKatan2WithCheck(IkReal(((((-1.0)*x5324))+x5323)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5325.value)))+(x5326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5327=IKsin(j4);
IkReal x5328=IKcos(j4);
IkReal x5329=(cj5*r10);
IkReal x5330=(cj5*r00);
IkReal x5331=(cj5*r20);
IkReal x5332=((1.0)*x5327);
IkReal x5333=(sj5*x5327);
IkReal x5334=((1.0)*sj5*x5328);
evalcond[0]=((((-1.0)*x5331*x5332))+((r22*x5328))+((r21*x5333)));
evalcond[1]=((((-1.0)*x5330*x5332))+((r01*x5333))+((r02*x5328)));
evalcond[2]=(((x5328*x5329))+((r12*x5327))+(((-1.0)*r11*x5334)));
evalcond[3]=((-1.0)+((r11*x5333))+((r12*x5328))+(((-1.0)*x5329*x5332)));
evalcond[4]=(((x5328*x5330))+((cj2*sj1))+((cj1*sj2))+((r02*x5327))+(((-1.0)*r01*x5334)));
evalcond[5]=(((x5328*x5331))+(((-1.0)*r21*x5334))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5335=((1.0)*sj5);
CheckValue<IkReal> x5336 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x5335))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5336.valid){
continue;
}
CheckValue<IkReal> x5337=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5335))+(((-1.0)*cj5*r21)))),-1);
if(!x5337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5336.value)+(((1.5707963267949)*(x5337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5338=IKsin(j4);
IkReal x5339=IKcos(j4);
IkReal x5340=(cj5*r10);
IkReal x5341=(cj5*r00);
IkReal x5342=(cj5*r20);
IkReal x5343=((1.0)*x5338);
IkReal x5344=(sj5*x5338);
IkReal x5345=((1.0)*sj5*x5339);
evalcond[0]=(((r22*x5339))+((r21*x5344))+(((-1.0)*x5342*x5343)));
evalcond[1]=(((r01*x5344))+(((-1.0)*x5341*x5343))+((r02*x5339)));
evalcond[2]=(((r12*x5338))+(((-1.0)*r11*x5345))+((x5339*x5340)));
evalcond[3]=((-1.0)+((r12*x5339))+((r11*x5344))+(((-1.0)*x5340*x5343)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x5345))+((cj1*sj2))+((x5339*x5341))+((r02*x5338)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x5339*x5342))+((r22*x5338))+(((-1.0)*r21*x5345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5346=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5346.valid){
continue;
}
CheckValue<IkReal> x5347 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5346.value)))+(x5347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5348=IKsin(j4);
IkReal x5349=IKcos(j4);
IkReal x5350=(cj5*r10);
IkReal x5351=(cj5*r00);
IkReal x5352=(cj5*r20);
IkReal x5353=((1.0)*x5348);
IkReal x5354=(sj5*x5348);
IkReal x5355=((1.0)*sj5*x5349);
evalcond[0]=((((-1.0)*x5352*x5353))+((r22*x5349))+((r21*x5354)));
evalcond[1]=((((-1.0)*x5351*x5353))+((r01*x5354))+((r02*x5349)));
evalcond[2]=(((r12*x5348))+(((-1.0)*r11*x5355))+((x5349*x5350)));
evalcond[3]=((-1.0)+((r12*x5349))+((r11*x5354))+(((-1.0)*x5350*x5353)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x5355))+((x5349*x5351))+((r02*x5348)));
evalcond[5]=((((-1.0)*r21*x5355))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5348))+((x5349*x5352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5356=((-1.0)*r00);
IkReal x5358 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5358)==0){
continue;
}
IkReal x5357=pow(x5358,-0.5);
CheckValue<IkReal> x5359 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5356),IKFAST_ATAN2_MAGTHRESH);
if(!x5359.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5359.value));
IkReal gconst127=(r01*x5357);
IkReal gconst128=(x5356*x5357);
CheckValue<IkReal> x5360 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5360.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5360.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5361=((-1.0)*r00);
IkReal x5362=x5357;
CheckValue<IkReal> x5364 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5361),IKFAST_ATAN2_MAGTHRESH);
if(!x5364.valid){
continue;
}
IkReal x5363=((-1.0)*(x5364.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5363;
IkReal gconst126=x5363;
IkReal gconst127=(r01*x5362);
IkReal gconst128=(x5361*x5362);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5365=((-1.0)*r00);
IkReal x5366=x5357;
CheckValue<IkReal> x5368 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5365),IKFAST_ATAN2_MAGTHRESH);
if(!x5368.valid){
continue;
}
IkReal x5367=((-1.0)*(x5368.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5367;
IkReal gconst126=x5367;
IkReal gconst127=(r01*x5366);
IkReal gconst128=(x5365*x5366);
IkReal x5369=r02*r02;
IkReal x5370=(r12*sj0);
IkReal x5371=((1.0)*cj0);
IkReal x5372=x5357;
j4eval[0]=((IKabs(((((-1.0)*x5370))+(((-1.0)*r02*x5371)))))+(IKabs(((((-1.0)*x5371*x5372))+((r02*x5370*x5372))+((cj0*x5369*x5372))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5373=((-1.0)*r00);
IkReal x5374=x5357;
CheckValue<IkReal> x5376 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5373),IKFAST_ATAN2_MAGTHRESH);
if(!x5376.valid){
continue;
}
IkReal x5375=((-1.0)*(x5376.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5375;
IkReal gconst126=x5375;
IkReal gconst127=(r01*x5374);
IkReal gconst128=(x5373*x5374);
IkReal x5377=r02*r02;
IkReal x5378=(sj1*sj2);
IkReal x5379=(cj1*cj2);
IkReal x5380=((1.0)+(((-1.0)*x5377)));
CheckValue<IkReal> x5387=IKPowWithIntegerCheck(x5380,-1);
if(!x5387.valid){
continue;
}
IkReal x5381=x5387.value;
CheckValue<IkReal> x5388=IKPowWithIntegerCheck(((-1.0)+x5377),-1);
if(!x5388.valid){
continue;
}
IkReal x5382=x5388.value;
IkReal x5383=((1.0)*x5381);
if((x5380) < -0.00001)
continue;
IkReal x5384=IKsqrt(x5380);
IkReal x5385=(r02*r22*x5382*x5384);
IkReal x5386=((((-2.0)*r00*r01*r20*r21*x5381))+(((-1.0)*x5383*(r01*r01)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5383*(r00*r00)*(r20*r20))));
j4eval[0]=x5386;
j4eval[1]=IKsign(x5386);
j4eval[2]=((IKabs((((x5379*x5385))+(((-1.0)*x5378*x5385)))))+(IKabs((((r22*x5378))+(((-1.0)*r22*x5379))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5389=(gconst128*r20);
IkReal x5390=(gconst127*r21);
IkReal x5391=(cj1*cj2);
IkReal x5392=(sj1*sj2);
CheckValue<IkReal> x5393 = IKatan2WithCheck(IkReal((((r22*x5392))+(((-1.0)*r22*x5391)))),IkReal((((x5389*x5392))+(((-1.0)*x5390*x5392))+(((-1.0)*x5389*x5391))+((x5390*x5391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5393.valid){
continue;
}
CheckValue<IkReal> x5394=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5389*x5389)))+(((-1.0)*(r22*r22)))+(((2.0)*x5389*x5390))+(((-1.0)*(x5390*x5390))))),-1);
if(!x5394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5393.value)+(((1.5707963267949)*(x5394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5395=IKsin(j4);
IkReal x5396=IKcos(j4);
IkReal x5397=((1.0)*cj2);
IkReal x5398=(gconst127*r01);
IkReal x5399=(gconst128*r10);
IkReal x5400=(gconst128*r00);
IkReal x5401=((1.0)*sj0);
IkReal x5402=(gconst127*r21);
IkReal x5403=(gconst128*r20);
IkReal x5404=(gconst127*r11);
IkReal x5405=(cj1*sj2);
IkReal x5406=((1.0)*x5395);
IkReal x5407=((1.0)*x5396);
evalcond[0]=(((r22*x5396))+(((-1.0)*x5403*x5406))+((x5395*x5402)));
evalcond[1]=(cj0+(((-1.0)*x5399*x5406))+((r12*x5396))+((x5395*x5404)));
evalcond[2]=((((-1.0)*x5400*x5406))+((r02*x5396))+(((-1.0)*x5401))+((x5395*x5398)));
evalcond[3]=(((r22*x5395))+((sj1*sj2))+(((-1.0)*x5402*x5407))+(((-1.0)*cj1*x5397))+((x5396*x5403)));
evalcond[4]=((((-1.0)*cj0*x5405))+((r02*x5395))+(((-1.0)*x5398*x5407))+(((-1.0)*cj0*sj1*x5397))+((x5396*x5400)));
evalcond[5]=((((-1.0)*x5404*x5407))+(((-1.0)*sj0*sj1*x5397))+((r12*x5395))+(((-1.0)*x5401*x5405))+((x5396*x5399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5408=((1.0)*sj0);
IkReal x5409=((1.0)*gconst128);
CheckValue<IkReal> x5410=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5409)))),-1);
if(!x5410.valid){
continue;
}
CheckValue<IkReal> x5411 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5408)))),IkReal(((((-1.0)*cj0*r00*x5409))+((cj0*gconst127*r01))+((gconst127*r11*sj0))+(((-1.0)*gconst128*r10*x5408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5410.value)))+(x5411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5412=IKsin(j4);
IkReal x5413=IKcos(j4);
IkReal x5414=((1.0)*cj2);
IkReal x5415=(gconst127*r01);
IkReal x5416=(gconst128*r10);
IkReal x5417=(gconst128*r00);
IkReal x5418=((1.0)*sj0);
IkReal x5419=(gconst127*r21);
IkReal x5420=(gconst128*r20);
IkReal x5421=(gconst127*r11);
IkReal x5422=(cj1*sj2);
IkReal x5423=((1.0)*x5412);
IkReal x5424=((1.0)*x5413);
evalcond[0]=(((r22*x5413))+((x5412*x5419))+(((-1.0)*x5420*x5423)));
evalcond[1]=(cj0+(((-1.0)*x5416*x5423))+((x5412*x5421))+((r12*x5413)));
evalcond[2]=((((-1.0)*x5417*x5423))+((r02*x5413))+((x5412*x5415))+(((-1.0)*x5418)));
evalcond[3]=(((x5413*x5420))+(((-1.0)*cj1*x5414))+((r22*x5412))+((sj1*sj2))+(((-1.0)*x5419*x5424)));
evalcond[4]=((((-1.0)*cj0*x5422))+(((-1.0)*cj0*sj1*x5414))+((r02*x5412))+(((-1.0)*x5415*x5424))+((x5413*x5417)));
evalcond[5]=((((-1.0)*x5421*x5424))+(((-1.0)*sj0*sj1*x5414))+((x5413*x5416))+((r12*x5412))+(((-1.0)*x5418*x5422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5425=((1.0)*gconst127);
CheckValue<IkReal> x5426=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r11))+(((-1.0)*r10*x5425)))),-1);
if(!x5426.valid){
continue;
}
CheckValue<IkReal> x5427 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst128*r20*sj0))+(((-1.0)*r21*sj0*x5425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5426.value)))+(x5427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5428=IKsin(j4);
IkReal x5429=IKcos(j4);
IkReal x5430=((1.0)*cj2);
IkReal x5431=(gconst127*r01);
IkReal x5432=(gconst128*r10);
IkReal x5433=(gconst128*r00);
IkReal x5434=((1.0)*sj0);
IkReal x5435=(gconst127*r21);
IkReal x5436=(gconst128*r20);
IkReal x5437=(gconst127*r11);
IkReal x5438=(cj1*sj2);
IkReal x5439=((1.0)*x5428);
IkReal x5440=((1.0)*x5429);
evalcond[0]=(((r22*x5429))+(((-1.0)*x5436*x5439))+((x5428*x5435)));
evalcond[1]=(((r12*x5429))+cj0+((x5428*x5437))+(((-1.0)*x5432*x5439)));
evalcond[2]=(((r02*x5429))+(((-1.0)*x5434))+(((-1.0)*x5433*x5439))+((x5428*x5431)));
evalcond[3]=((((-1.0)*x5435*x5440))+(((-1.0)*cj1*x5430))+((r22*x5428))+((sj1*sj2))+((x5429*x5436)));
evalcond[4]=((((-1.0)*cj0*sj1*x5430))+((r02*x5428))+(((-1.0)*x5431*x5440))+((x5429*x5433))+(((-1.0)*cj0*x5438)));
evalcond[5]=(((r12*x5428))+(((-1.0)*x5437*x5440))+(((-1.0)*sj0*sj1*x5430))+(((-1.0)*x5434*x5438))+((x5429*x5432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5441=((-1.0)*r01);
IkReal x5443 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5443)==0){
continue;
}
IkReal x5442=pow(x5443,-0.5);
CheckValue<IkReal> x5444 = IKatan2WithCheck(IkReal(x5441),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5444.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5444.value))));
IkReal gconst130=(x5441*x5442);
IkReal gconst131=((1.0)*r00*x5442);
CheckValue<IkReal> x5445 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5445.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5445.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5446=((-1.0)*r01);
CheckValue<IkReal> x5449 = IKatan2WithCheck(IkReal(x5446),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5449.valid){
continue;
}
IkReal x5447=((1.0)*(x5449.value));
IkReal x5448=x5442;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5447)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5447)));
IkReal gconst130=(x5446*x5448);
IkReal gconst131=((1.0)*r00*x5448);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5450=((-1.0)*r01);
CheckValue<IkReal> x5453 = IKatan2WithCheck(IkReal(x5450),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5453.valid){
continue;
}
IkReal x5451=((1.0)*(x5453.value));
IkReal x5452=x5442;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5451)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5451)));
IkReal gconst130=(x5450*x5452);
IkReal gconst131=((1.0)*r00*x5452);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5454=((1.0)*sj0);
IkReal x5455=((1.0)*cj0);
CheckValue<IkReal> x5456 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5454))+(((-1.0)*r02*x5455)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*gconst131*r00*x5455))+((gconst130*r11*sj0))+(((-1.0)*gconst131*r10*x5454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5456.valid){
continue;
}
CheckValue<IkReal> x5457=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*gconst130*r20)))),-1);
if(!x5457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5456.value)+(((1.5707963267949)*(x5457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5458=IKsin(j4);
IkReal x5459=IKcos(j4);
IkReal x5460=((1.0)*cj2);
IkReal x5461=(gconst131*r10);
IkReal x5462=(gconst131*r20);
IkReal x5463=((1.0)*sj0);
IkReal x5464=(gconst131*r00);
IkReal x5465=(cj1*sj2);
IkReal x5466=(gconst130*x5458);
IkReal x5467=((1.0)*x5458);
IkReal x5468=((1.0)*gconst130*x5459);
evalcond[0]=(((r22*x5459))+((r21*x5466))+(((-1.0)*x5462*x5467)));
evalcond[1]=(((r12*x5459))+cj0+((r11*x5466))+(((-1.0)*x5461*x5467)));
evalcond[2]=((((-1.0)*x5464*x5467))+((r01*x5466))+((r02*x5459))+(((-1.0)*x5463)));
evalcond[3]=((((-1.0)*cj1*x5460))+((r22*x5458))+(((-1.0)*r21*x5468))+((sj1*sj2))+((x5459*x5462)));
evalcond[4]=((((-1.0)*r01*x5468))+(((-1.0)*cj0*x5465))+(((-1.0)*cj0*sj1*x5460))+((r02*x5458))+((x5459*x5464)));
evalcond[5]=(((r12*x5458))+(((-1.0)*x5463*x5465))+(((-1.0)*sj0*sj1*x5460))+(((-1.0)*r11*x5468))+((x5459*x5461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5469=((1.0)*gconst130);
CheckValue<IkReal> x5470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5469))+(((-1.0)*gconst131*r11)))),-1);
if(!x5470.valid){
continue;
}
CheckValue<IkReal> x5471 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst131*r20*sj0))+(((-1.0)*r21*sj0*x5469)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5470.value)))+(x5471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5472=IKsin(j4);
IkReal x5473=IKcos(j4);
IkReal x5474=((1.0)*cj2);
IkReal x5475=(gconst131*r10);
IkReal x5476=(gconst131*r20);
IkReal x5477=((1.0)*sj0);
IkReal x5478=(gconst131*r00);
IkReal x5479=(cj1*sj2);
IkReal x5480=(gconst130*x5472);
IkReal x5481=((1.0)*x5472);
IkReal x5482=((1.0)*gconst130*x5473);
evalcond[0]=(((r21*x5480))+(((-1.0)*x5476*x5481))+((r22*x5473)));
evalcond[1]=(cj0+((r11*x5480))+(((-1.0)*x5475*x5481))+((r12*x5473)));
evalcond[2]=(((r01*x5480))+(((-1.0)*x5477))+(((-1.0)*x5478*x5481))+((r02*x5473)));
evalcond[3]=((((-1.0)*r21*x5482))+((x5473*x5476))+(((-1.0)*cj1*x5474))+((sj1*sj2))+((r22*x5472)));
evalcond[4]=((((-1.0)*cj0*sj1*x5474))+((x5473*x5478))+(((-1.0)*cj0*x5479))+(((-1.0)*r01*x5482))+((r02*x5472)));
evalcond[5]=((((-1.0)*x5477*x5479))+(((-1.0)*r11*x5482))+((x5473*x5475))+(((-1.0)*sj0*sj1*x5474))+((r12*x5472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5483=((1.0)*gconst130);
CheckValue<IkReal> x5484 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x5483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5484.valid){
continue;
}
CheckValue<IkReal> x5485=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r01))+(((-1.0)*r00*x5483)))),-1);
if(!x5485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5484.value)+(((1.5707963267949)*(x5485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5486=IKsin(j4);
IkReal x5487=IKcos(j4);
IkReal x5488=((1.0)*cj2);
IkReal x5489=(gconst131*r10);
IkReal x5490=(gconst131*r20);
IkReal x5491=((1.0)*sj0);
IkReal x5492=(gconst131*r00);
IkReal x5493=(cj1*sj2);
IkReal x5494=(gconst130*x5486);
IkReal x5495=((1.0)*x5486);
IkReal x5496=((1.0)*gconst130*x5487);
evalcond[0]=(((r21*x5494))+((r22*x5487))+(((-1.0)*x5490*x5495)));
evalcond[1]=((((-1.0)*x5489*x5495))+cj0+((r12*x5487))+((r11*x5494)));
evalcond[2]=(((r01*x5494))+(((-1.0)*x5491))+(((-1.0)*x5492*x5495))+((r02*x5487)));
evalcond[3]=(((sj1*sj2))+((x5487*x5490))+(((-1.0)*cj1*x5488))+((r22*x5486))+(((-1.0)*r21*x5496)));
evalcond[4]=((((-1.0)*cj0*x5493))+(((-1.0)*r01*x5496))+((x5487*x5492))+(((-1.0)*cj0*sj1*x5488))+((r02*x5486)));
evalcond[5]=((((-1.0)*sj0*sj1*x5488))+(((-1.0)*r11*x5496))+(((-1.0)*x5491*x5493))+((r12*x5486))+((x5487*x5489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5497=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5497;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x5497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5498=((1.0)*sj5);
IkReal x5499=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5498)));
j4eval[0]=x5499;
j4eval[1]=IKsign(x5499);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5498)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5500=cj5*cj5;
IkReal x5501=r01*r01;
IkReal x5502=(r01*sj5);
IkReal x5503=(cj5*r00);
IkReal x5504=((((-1.0)*(r02*r02)))+((x5500*x5501))+(((2.0)*x5502*x5503))+(((-1.0)*x5501))+(((-1.0)*x5500*(r00*r00))));
j4eval[0]=x5504;
j4eval[1]=IKsign(x5504);
j4eval[2]=((IKabs((x5503+(((-1.0)*x5502)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5505=cj5*cj5;
IkReal x5506=r01*r01;
IkReal x5507=(r01*sj5);
IkReal x5508=(cj5*r00);
CheckValue<IkReal> x5509=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5505*(r00*r00)))+(((2.0)*x5507*x5508))+(((-1.0)*(r02*r02)))+(((-1.0)*x5506))+((x5505*x5506)))),-1);
if(!x5509.valid){
continue;
}
CheckValue<IkReal> x5510 = IKatan2WithCheck(IkReal((x5508+(((-1.0)*x5507)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5509.value)))+(x5510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5511=IKsin(j4);
IkReal x5512=IKcos(j4);
IkReal x5513=(cj5*r10);
IkReal x5514=((1.0)*cj2);
IkReal x5515=(cj5*r00);
IkReal x5516=(cj5*r20);
IkReal x5517=((1.0)*x5511);
IkReal x5518=(sj5*x5511);
IkReal x5519=((1.0)*sj5*x5512);
evalcond[0]=(((r21*x5518))+((r22*x5512))+(((-1.0)*x5516*x5517)));
evalcond[1]=((((-1.0)*x5513*x5517))+((r12*x5512))+((r11*x5518)));
evalcond[2]=(((x5512*x5515))+((r02*x5511))+(((-1.0)*r01*x5519)));
evalcond[3]=((-1.0)+((r02*x5512))+(((-1.0)*x5515*x5517))+((r01*x5518)));
evalcond[4]=(((x5512*x5516))+((sj1*sj2))+((r22*x5511))+(((-1.0)*r21*x5519))+(((-1.0)*cj1*x5514)));
evalcond[5]=(((x5512*x5513))+(((-1.0)*r11*x5519))+(((-1.0)*cj1*sj2))+((r12*x5511))+(((-1.0)*sj1*x5514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5520=((1.0)*sj5);
CheckValue<IkReal> x5521=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5520)))),-1);
if(!x5521.valid){
continue;
}
CheckValue<IkReal> x5522 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5521.value)))+(x5522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5523=IKsin(j4);
IkReal x5524=IKcos(j4);
IkReal x5525=(cj5*r10);
IkReal x5526=((1.0)*cj2);
IkReal x5527=(cj5*r00);
IkReal x5528=(cj5*r20);
IkReal x5529=((1.0)*x5523);
IkReal x5530=(sj5*x5523);
IkReal x5531=((1.0)*sj5*x5524);
evalcond[0]=((((-1.0)*x5528*x5529))+((r22*x5524))+((r21*x5530)));
evalcond[1]=(((r11*x5530))+((r12*x5524))+(((-1.0)*x5525*x5529)));
evalcond[2]=(((r02*x5523))+((x5524*x5527))+(((-1.0)*r01*x5531)));
evalcond[3]=((-1.0)+((r02*x5524))+(((-1.0)*x5527*x5529))+((r01*x5530)));
evalcond[4]=(((r22*x5523))+((sj1*sj2))+(((-1.0)*cj1*x5526))+(((-1.0)*r21*x5531))+((x5524*x5528)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5526))+((x5524*x5525))+((r12*x5523))+(((-1.0)*r11*x5531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5532 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5532.valid){
continue;
}
CheckValue<IkReal> x5533=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5532.value)+(((1.5707963267949)*(x5533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5534=IKsin(j4);
IkReal x5535=IKcos(j4);
IkReal x5536=(cj5*r10);
IkReal x5537=((1.0)*cj2);
IkReal x5538=(cj5*r00);
IkReal x5539=(cj5*r20);
IkReal x5540=((1.0)*x5534);
IkReal x5541=(sj5*x5534);
IkReal x5542=((1.0)*sj5*x5535);
evalcond[0]=((((-1.0)*x5539*x5540))+((r22*x5535))+((r21*x5541)));
evalcond[1]=(((r11*x5541))+(((-1.0)*x5536*x5540))+((r12*x5535)));
evalcond[2]=(((x5535*x5538))+(((-1.0)*r01*x5542))+((r02*x5534)));
evalcond[3]=((-1.0)+(((-1.0)*x5538*x5540))+((r02*x5535))+((r01*x5541)));
evalcond[4]=(((r22*x5534))+((sj1*sj2))+(((-1.0)*cj1*x5537))+((x5535*x5539))+(((-1.0)*r21*x5542)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*x5542))+((x5535*x5536))+(((-1.0)*sj1*x5537))+((r12*x5534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5543=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5543;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x5543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5544=((1.0)*sj5);
IkReal x5545=((((-1.0)*cj5*r21))+(((-1.0)*r20*x5544)));
j4eval[0]=x5545;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x5544))))));
j4eval[2]=IKsign(x5545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5546=cj5*cj5;
IkReal x5547=r01*r01;
IkReal x5548=(cj5*r00);
IkReal x5549=(r01*sj5);
IkReal x5550=(x5547+(((-2.0)*x5548*x5549))+((x5546*(r00*r00)))+(((-1.0)*x5546*x5547))+(r02*r02));
j4eval[0]=x5550;
j4eval[1]=((IKabs(r02))+(IKabs((x5548+(((-1.0)*x5549))))));
j4eval[2]=IKsign(x5550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5551=cj5*cj5;
IkReal x5552=r01*r01;
IkReal x5553=(r01*sj5);
IkReal x5554=(cj5*r00);
CheckValue<IkReal> x5555=IKPowWithIntegerCheck(IKsign((x5552+((x5551*(r00*r00)))+(((-1.0)*x5551*x5552))+(((-2.0)*x5553*x5554))+(r02*r02))),-1);
if(!x5555.valid){
continue;
}
CheckValue<IkReal> x5556 = IKatan2WithCheck(IkReal(((((-1.0)*x5553))+x5554)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5555.value)))+(x5556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5557=IKsin(j4);
IkReal x5558=IKcos(j4);
IkReal x5559=(cj5*r10);
IkReal x5560=(cj5*r00);
IkReal x5561=(cj5*r20);
IkReal x5562=((1.0)*x5557);
IkReal x5563=(sj5*x5557);
IkReal x5564=((1.0)*sj5*x5558);
evalcond[0]=(((r21*x5563))+((r22*x5558))+(((-1.0)*x5561*x5562)));
evalcond[1]=(((r12*x5558))+((r11*x5563))+(((-1.0)*x5559*x5562)));
evalcond[2]=(((r02*x5557))+(((-1.0)*r01*x5564))+((x5558*x5560)));
evalcond[3]=((1.0)+((r02*x5558))+(((-1.0)*x5560*x5562))+((r01*x5563)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*x5564))+((cj1*sj2))+((r12*x5557))+((x5558*x5559)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5557))+((x5558*x5561))+(((-1.0)*r21*x5564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5565=((1.0)*sj5);
CheckValue<IkReal> x5566=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x5565)))),-1);
if(!x5566.valid){
continue;
}
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x5565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5566.value)))+(x5567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5568=IKsin(j4);
IkReal x5569=IKcos(j4);
IkReal x5570=(cj5*r10);
IkReal x5571=(cj5*r00);
IkReal x5572=(cj5*r20);
IkReal x5573=((1.0)*x5568);
IkReal x5574=(sj5*x5568);
IkReal x5575=((1.0)*sj5*x5569);
evalcond[0]=(((r22*x5569))+((r21*x5574))+(((-1.0)*x5572*x5573)));
evalcond[1]=((((-1.0)*x5570*x5573))+((r11*x5574))+((r12*x5569)));
evalcond[2]=(((r02*x5568))+((x5569*x5571))+(((-1.0)*r01*x5575)));
evalcond[3]=((1.0)+((r02*x5569))+(((-1.0)*x5571*x5573))+((r01*x5574)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*x5575))+((x5569*x5570))+((cj1*sj2))+((r12*x5568)));
evalcond[5]=(((x5569*x5572))+((r22*x5568))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x5575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5576=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5576.valid){
continue;
}
CheckValue<IkReal> x5577 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5576.value)))+(x5577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5578=IKsin(j4);
IkReal x5579=IKcos(j4);
IkReal x5580=(cj5*r10);
IkReal x5581=(cj5*r00);
IkReal x5582=(cj5*r20);
IkReal x5583=((1.0)*x5578);
IkReal x5584=(sj5*x5578);
IkReal x5585=((1.0)*sj5*x5579);
evalcond[0]=(((r21*x5584))+((r22*x5579))+(((-1.0)*x5582*x5583)));
evalcond[1]=(((r11*x5584))+((r12*x5579))+(((-1.0)*x5580*x5583)));
evalcond[2]=(((r02*x5578))+((x5579*x5581))+(((-1.0)*r01*x5585)));
evalcond[3]=((1.0)+((r02*x5579))+(((-1.0)*x5581*x5583))+((r01*x5584)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*x5585))+((cj1*sj2))+((r12*x5578))+((x5579*x5580)));
evalcond[5]=((((-1.0)*r21*x5585))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5578))+((x5579*x5582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5586=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5586);
rxp1_1=(px*r21);
rxp1_2=(r11*x5586);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5587=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5587);
rxp1_1=(px*r21);
rxp1_2=(r11*x5587);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5588=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5588);
rxp1_1=(px*r21);
rxp1_2=(r11*x5588);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5591=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x5591.valid){
continue;
}
IkReal x5589=x5591.value;
IkReal x5590=(sj0*x5589);
cj4array[0]=(((cj1*sj2*x5590))+((cj2*sj1*x5590)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5592=IKsin(j4);
IkReal x5593=IKcos(j4);
IkReal x5594=(cj5*r20);
IkReal x5595=(r21*sj5);
IkReal x5596=((1.0)*x5592);
evalcond[0]=(r02*x5592);
evalcond[1]=((((-1.0)*sj0))+((r02*x5593)));
evalcond[2]=(((x5592*x5595))+(((-1.0)*x5594*x5596)));
evalcond[3]=(((r11*sj5*x5592))+(((-1.0)*cj5*r10*x5596)));
evalcond[4]=(((x5593*x5594))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5593*x5595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5598=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x5598.valid){
continue;
}
IkReal x5597=x5598.value;
cj4array[0]=(((cj1*cj2*x5597))+(((-1.0)*sj1*sj2*x5597)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5599=IKsin(j4);
IkReal x5600=IKcos(j4);
IkReal x5601=(r11*sj5);
IkReal x5602=((1.0)*sj0);
IkReal x5603=((1.0)*cj5*x5599);
evalcond[0]=(r02*x5599);
evalcond[1]=(((r02*x5600))+(((-1.0)*x5602)));
evalcond[2]=(((r21*sj5*x5599))+(((-1.0)*r20*x5603)));
evalcond[3]=((((-1.0)*r10*x5603))+((x5599*x5601)));
evalcond[4]=(((cj5*r10*x5600))+(((-1.0)*x5600*x5601))+(((-1.0)*cj1*sj2*x5602))+(((-1.0)*cj2*sj1*x5602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5604=IKPowWithIntegerCheck(r02,-1);
if(!x5604.valid){
continue;
}
cj4array[0]=(sj0*(x5604.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5605=IKsin(j4);
IkReal x5606=IKcos(j4);
IkReal x5607=((1.0)*cj1);
IkReal x5608=(cj5*x5606);
IkReal x5609=(sj5*x5605);
IkReal x5610=((1.0)*sj5*x5606);
IkReal x5611=((1.0)*cj5*x5605);
evalcond[0]=(r02*x5605);
evalcond[1]=(((r21*x5609))+(((-1.0)*r20*x5611)));
evalcond[2]=((((-1.0)*r10*x5611))+((r11*x5609)));
evalcond[3]=(((r20*x5608))+((sj1*sj2))+(((-1.0)*cj2*x5607))+(((-1.0)*r21*x5610)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r11*x5610))+(((-1.0)*sj0*sj2*x5607))+((r10*x5608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5612=((1.0)*sj0);
IkReal x5613=((1.0)*cj0);
CheckValue<IkReal> x5614 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5612))+(((-1.0)*r02*x5613)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x5612))+(((-1.0)*cj5*r00*x5613))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5614.valid){
continue;
}
CheckValue<IkReal> x5615=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5614.value)+(((1.5707963267949)*(x5615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5616=IKsin(j4);
IkReal x5617=IKcos(j4);
IkReal x5618=(cj5*r10);
IkReal x5619=((1.0)*cj2);
IkReal x5620=(cj5*r00);
IkReal x5621=(cj5*r20);
IkReal x5622=((1.0)*x5616);
IkReal x5623=(sj5*x5616);
IkReal x5624=((1.0)*cj1*sj2);
IkReal x5625=((1.0)*sj5*x5617);
evalcond[0]=(((r21*x5623))+(((-1.0)*x5621*x5622))+((r22*x5617)));
evalcond[1]=(cj0+(((-1.0)*x5618*x5622))+((r12*x5617))+((r11*x5623)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5617))+((r01*x5623))+(((-1.0)*x5620*x5622)));
evalcond[3]=(((x5617*x5621))+((sj1*sj2))+(((-1.0)*r21*x5625))+(((-1.0)*cj1*x5619))+((r22*x5616)));
evalcond[4]=((((-1.0)*r01*x5625))+((x5617*x5620))+((r02*x5616))+(((-1.0)*cj0*x5624))+(((-1.0)*cj0*sj1*x5619)));
evalcond[5]=(((x5617*x5618))+(((-1.0)*r11*x5625))+((r12*x5616))+(((-1.0)*sj0*x5624))+(((-1.0)*sj0*sj1*x5619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5626=((1.0)*sj5);
CheckValue<IkReal> x5627 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5627.valid){
continue;
}
CheckValue<IkReal> x5628=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5626)))),-1);
if(!x5628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5627.value)+(((1.5707963267949)*(x5628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5629=IKsin(j4);
IkReal x5630=IKcos(j4);
IkReal x5631=(cj5*r10);
IkReal x5632=((1.0)*cj2);
IkReal x5633=(cj5*r00);
IkReal x5634=(cj5*r20);
IkReal x5635=((1.0)*x5629);
IkReal x5636=(sj5*x5629);
IkReal x5637=((1.0)*cj1*sj2);
IkReal x5638=((1.0)*sj5*x5630);
evalcond[0]=(((r22*x5630))+(((-1.0)*x5634*x5635))+((r21*x5636)));
evalcond[1]=(((r12*x5630))+((r11*x5636))+cj0+(((-1.0)*x5631*x5635)));
evalcond[2]=(((r01*x5636))+(((-1.0)*sj0))+(((-1.0)*x5633*x5635))+((r02*x5630)));
evalcond[3]=((((-1.0)*cj1*x5632))+((sj1*sj2))+(((-1.0)*r21*x5638))+((x5630*x5634))+((r22*x5629)));
evalcond[4]=((((-1.0)*cj0*sj1*x5632))+((r02*x5629))+((x5630*x5633))+(((-1.0)*r01*x5638))+(((-1.0)*cj0*x5637)));
evalcond[5]=((((-1.0)*sj0*x5637))+(((-1.0)*r11*x5638))+((x5630*x5631))+(((-1.0)*sj0*sj1*x5632))+((r12*x5629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5639=((1.0)*sj5);
CheckValue<IkReal> x5640 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5639))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5640.valid){
continue;
}
CheckValue<IkReal> x5641=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5639))+(((-1.0)*cj5*r01)))),-1);
if(!x5641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5640.value)+(((1.5707963267949)*(x5641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5642=IKsin(j4);
IkReal x5643=IKcos(j4);
IkReal x5644=(cj5*r10);
IkReal x5645=((1.0)*cj2);
IkReal x5646=(cj5*r00);
IkReal x5647=(cj5*r20);
IkReal x5648=((1.0)*x5642);
IkReal x5649=(sj5*x5642);
IkReal x5650=((1.0)*cj1*sj2);
IkReal x5651=((1.0)*sj5*x5643);
evalcond[0]=((((-1.0)*x5647*x5648))+((r22*x5643))+((r21*x5649)));
evalcond[1]=(cj0+(((-1.0)*x5644*x5648))+((r12*x5643))+((r11*x5649)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5649))+(((-1.0)*x5646*x5648))+((r02*x5643)));
evalcond[3]=((((-1.0)*cj1*x5645))+(((-1.0)*r21*x5651))+((sj1*sj2))+((r22*x5642))+((x5643*x5647)));
evalcond[4]=((((-1.0)*cj0*sj1*x5645))+((x5643*x5646))+(((-1.0)*r01*x5651))+(((-1.0)*cj0*x5650))+((r02*x5642)));
evalcond[5]=((((-1.0)*sj0*x5650))+(((-1.0)*r11*x5651))+((r12*x5642))+(((-1.0)*sj0*sj1*x5645))+((x5643*x5644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5652=r21*r21;
IkReal x5653=cj5*cj5;
IkReal x5654=(sj1*sj2);
IkReal x5655=(r21*sj5);
IkReal x5656=(cj5*r20);
IkReal x5657=(cj1*cj2);
CheckValue<IkReal> x5658 = IKatan2WithCheck(IkReal((((r22*x5654))+(((-1.0)*r22*x5657)))),IkReal((((x5654*x5656))+(((-1.0)*x5656*x5657))+((x5655*x5657))+(((-1.0)*x5654*x5655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5658.valid){
continue;
}
CheckValue<IkReal> x5659=IKPowWithIntegerCheck(IKsign(((((2.0)*x5655*x5656))+((x5652*x5653))+(((-1.0)*(r22*r22)))+(((-1.0)*x5653*(r20*r20)))+(((-1.0)*x5652)))),-1);
if(!x5659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5658.value)+(((1.5707963267949)*(x5659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5660=IKsin(j4);
IkReal x5661=IKcos(j4);
IkReal x5662=(cj5*r20);
IkReal x5663=(r21*sj5);
evalcond[0]=(((x5660*x5663))+((r22*x5661))+(((-1.0)*x5660*x5662)));
evalcond[1]=((((-1.0)*x5661*x5663))+((r22*x5660))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5661*x5662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5664=(cj5*sj4);
IkReal x5665=(sj4*sj5);
if( IKabs((((r01*x5665))+(((-1.0)*r00*x5664))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x5664))+(((-1.0)*r11*x5665))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5665))+(((-1.0)*r00*x5664))+((cj4*r02))))+IKsqr((((r10*x5664))+(((-1.0)*r11*x5665))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x5665))+(((-1.0)*r00*x5664))+((cj4*r02))), (((r10*x5664))+(((-1.0)*r11*x5665))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5666=IKcos(j0);
IkReal x5667=IKsin(j0);
IkReal x5668=(cj4*cj5);
IkReal x5669=((1.53e-6)*sj1);
IkReal x5670=(sj4*sj5);
IkReal x5671=(r10*sj5);
IkReal x5672=(cj5*r01);
IkReal x5673=((0.398)*cj2);
IkReal x5674=(r00*sj5);
IkReal x5675=((1.0)*cj5);
IkReal x5676=((0.398)*sj2);
IkReal x5677=((1.0)*cj2);
IkReal x5678=((1.0)*cj1*sj2);
IkReal x5679=(cj1*x5667);
IkReal x5680=(sj1*x5666);
IkReal x5681=(cj1*x5666);
IkReal x5682=((1.0)*cj4*sj5);
IkReal x5683=(sj1*x5667);
evalcond[0]=(x5666+((r11*x5670))+(((-1.0)*r10*sj4*x5675))+((cj4*r12)));
evalcond[1]=(((r01*x5670))+(((-1.0)*r00*sj4*x5675))+(((-1.0)*x5667))+((cj4*r02)));
evalcond[2]=((((-1.0)*x5674))+(((-1.0)*x5672))+((sj2*x5680))+(((-1.0)*x5677*x5681)));
evalcond[3]=((((-1.0)*x5671))+(((-1.0)*r11*x5675))+((sj2*x5683))+(((-1.0)*x5677*x5679)));
evalcond[4]=(((r00*x5668))+(((-1.0)*x5666*x5678))+((r02*sj4))+(((-1.0)*x5677*x5680))+(((-1.0)*r01*x5682)));
evalcond[5]=((((-1.0)*x5667*x5678))+((r12*sj4))+(((-1.0)*x5677*x5683))+(((-1.0)*r11*x5682))+((r10*x5668)));
evalcond[6]=((((-1.0)*x5666*x5669))+((x5673*x5681))+(((0.418)*x5681))+(((-1.0)*px))+(((-1.0)*x5676*x5680))+(((0.098)*x5674))+(((0.098)*x5672))+(((-0.122)*x5667)));
evalcond[7]=((((0.418)*x5679))+(((0.122)*x5666))+(((0.098)*cj5*r11))+(((-1.0)*x5667*x5669))+(((-1.0)*py))+((x5673*x5679))+(((-1.0)*x5676*x5683))+(((0.098)*x5671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5684 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5684.valid){
continue;
}
CheckValue<IkReal> x5685=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x5685.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5684.value)+(((1.5707963267949)*(x5685.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5686=IKcos(j0);
IkReal x5687=IKsin(j0);
IkReal x5688=(r10*sj5);
IkReal x5689=(cj5*r01);
IkReal x5690=(cj5*r11);
IkReal x5691=(r00*sj5);
IkReal x5692=((1.53e-6)*sj1);
IkReal x5693=((1.0)*cj2);
IkReal x5694=((0.398)*cj1*cj2);
IkReal x5695=(cj1*x5687);
IkReal x5696=(cj1*x5686);
IkReal x5697=(sj1*sj2*x5686);
IkReal x5698=(sj1*sj2*x5687);
evalcond[0]=(x5697+(((-1.0)*x5691))+(((-1.0)*x5689))+(((-1.0)*x5693*x5696)));
evalcond[1]=(x5698+(((-1.0)*x5690))+(((-1.0)*x5688))+(((-1.0)*x5693*x5695)));
evalcond[2]=((((0.098)*x5691))+(((0.098)*x5689))+(((-1.0)*x5686*x5692))+((x5686*x5694))+(((0.418)*x5696))+(((-1.0)*px))+(((-0.122)*x5687))+(((-0.398)*x5697)));
evalcond[3]=((((0.098)*x5690))+((x5687*x5694))+(((0.098)*x5688))+(((0.418)*x5695))+(((0.122)*x5686))+(((-1.0)*py))+(((-1.0)*x5687*x5692))+(((-0.398)*x5698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5699=((1.0)*sj5);
IkReal x5700=((((-1.0)*r00*x5699))+(((-1.0)*cj5*r01)));
j4eval[0]=x5700;
j4eval[1]=IKsign(x5700);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x5699))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5701=((1.0)*sj5);
IkReal x5702=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5701)));
j4eval[0]=x5702;
j4eval[1]=IKsign(x5702);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x5701)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5703=((1.0)*sj0);
IkReal x5704=((1.0)*cj0);
IkReal x5705=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5705;
j4eval[1]=((IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x5703))+(((-1.0)*cj5*r00*x5704)))))+(IKabs(((((-1.0)*r12*x5703))+(((-1.0)*r02*x5704))))));
j4eval[2]=IKsign(x5705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5706=((-1.0)*r20);
IkReal x5708 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5708)==0){
continue;
}
IkReal x5707=pow(x5708,-0.5);
CheckValue<IkReal> x5709 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5706),IKFAST_ATAN2_MAGTHRESH);
if(!x5709.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5709.value));
IkReal gconst115=(r21*x5707);
IkReal gconst116=(x5706*x5707);
CheckValue<IkReal> x5710 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5710.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5710.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5711=((-1.0)*r20);
IkReal x5712=x5707;
CheckValue<IkReal> x5714 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5711),IKFAST_ATAN2_MAGTHRESH);
if(!x5714.valid){
continue;
}
IkReal x5713=((-1.0)*(x5714.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5713;
IkReal gconst114=x5713;
IkReal gconst115=(r21*x5712);
IkReal gconst116=(x5711*x5712);
IkReal x5715=r22*r22;
IkReal x5716=((1.0)*x5715);
CheckValue<IkReal> x5720=IKPowWithIntegerCheck(((-1.0)+x5715),-1);
if(!x5720.valid){
continue;
}
IkReal x5717=x5720.value;
if((((1.0)+(((-1.0)*x5716)))) < -0.00001)
continue;
IkReal x5718=IKsqrt(((1.0)+(((-1.0)*x5716))));
IkReal x5719=(cj0*x5717*x5718);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x5716*x5719))+x5719))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5721=((-1.0)*r20);
IkReal x5722=x5707;
CheckValue<IkReal> x5724 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5721),IKFAST_ATAN2_MAGTHRESH);
if(!x5724.valid){
continue;
}
IkReal x5723=((-1.0)*(x5724.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5723;
IkReal gconst114=x5723;
IkReal gconst115=(r21*x5722);
IkReal gconst116=(x5721*x5722);
IkReal x5725=r22*r22;
IkReal x5726=((1.0)*x5725);
CheckValue<IkReal> x5730=IKPowWithIntegerCheck(((-1.0)+x5725),-1);
if(!x5730.valid){
continue;
}
IkReal x5727=x5730.value;
if((((1.0)+(((-1.0)*x5726)))) < -0.00001)
continue;
IkReal x5728=IKsqrt(((1.0)+(((-1.0)*x5726))));
IkReal x5729=(sj0*x5727*x5728);
j4eval[0]=((IKabs(((((-1.0)*x5726*x5729))+x5729)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5731=((-1.0)*r20);
IkReal x5732=x5707;
CheckValue<IkReal> x5734 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5731),IKFAST_ATAN2_MAGTHRESH);
if(!x5734.valid){
continue;
}
IkReal x5733=((-1.0)*(x5734.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5733;
IkReal gconst114=x5733;
IkReal gconst115=(r21*x5732);
IkReal gconst116=(x5731*x5732);
IkReal x5735=((1.0)*(r22*r22));
CheckValue<IkReal> x5739=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5735))),-1);
if(!x5739.valid){
continue;
}
IkReal x5736=x5739.value;
IkReal x5737=((1.0)*x5736);
IkReal x5738=((((-1.0)*x5735))+(((-2.0)*x5736*(r20*r20)*(r21*r21)))+(((-1.0)*x5737*(r21*r21*r21*r21)))+(((-1.0)*x5737*(r20*r20*r20*r20))));
j4eval[0]=x5738;
j4eval[1]=IKsign(x5738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5740=(sj1*sj2);
IkReal x5741=(gconst115*r21);
IkReal x5742=(cj1*cj2);
IkReal x5743=(gconst116*r20);
CheckValue<IkReal> x5744=IKPowWithIntegerCheck(IKsign(((((2.0)*x5741*x5743))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5741*x5741)))+(((-1.0)*(x5743*x5743))))),-1);
if(!x5744.valid){
continue;
}
CheckValue<IkReal> x5745 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5742))+((r22*x5740)))),IkReal(((((-1.0)*x5742*x5743))+((x5741*x5742))+((x5740*x5743))+(((-1.0)*x5740*x5741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5744.value)))+(x5745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5746=IKsin(j4);
IkReal x5747=IKcos(j4);
IkReal x5748=(gconst115*r21);
IkReal x5749=(gconst116*r00);
IkReal x5750=((1.0)*cj2);
IkReal x5751=((1.0)*sj0);
IkReal x5752=(gconst116*r20);
IkReal x5753=(gconst116*r10);
IkReal x5754=(cj1*sj2);
IkReal x5755=((1.0)*x5747);
IkReal x5756=((1.0)*x5746);
IkReal x5757=(gconst115*x5746);
evalcond[0]=(((x5746*x5748))+(((-1.0)*x5752*x5756))+((r22*x5747)));
evalcond[1]=(cj0+(((-1.0)*x5753*x5756))+((r11*x5757))+((r12*x5747)));
evalcond[2]=((((-1.0)*x5749*x5756))+((r01*x5757))+(((-1.0)*x5751))+((r02*x5747)));
evalcond[3]=(((r22*x5746))+(((-1.0)*cj1*x5750))+((sj1*sj2))+(((-1.0)*x5748*x5755))+((x5747*x5752)));
evalcond[4]=((((-1.0)*cj0*sj1*x5750))+(((-1.0)*cj0*x5754))+((r02*x5746))+(((-1.0)*gconst115*r01*x5755))+((x5747*x5749)));
evalcond[5]=((((-1.0)*gconst115*r11*x5755))+(((-1.0)*x5751*x5754))+(((-1.0)*sj0*sj1*x5750))+((r12*x5746))+((x5747*x5753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5758=((1.0)*gconst115);
CheckValue<IkReal> x5759 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5758))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5759.valid){
continue;
}
CheckValue<IkReal> x5760=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r11))+(((-1.0)*r10*x5758)))),-1);
if(!x5760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5759.value)+(((1.5707963267949)*(x5760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5761=IKsin(j4);
IkReal x5762=IKcos(j4);
IkReal x5763=(gconst115*r21);
IkReal x5764=(gconst116*r00);
IkReal x5765=((1.0)*cj2);
IkReal x5766=((1.0)*sj0);
IkReal x5767=(gconst116*r20);
IkReal x5768=(gconst116*r10);
IkReal x5769=(cj1*sj2);
IkReal x5770=((1.0)*x5762);
IkReal x5771=((1.0)*x5761);
IkReal x5772=(gconst115*x5761);
evalcond[0]=((((-1.0)*x5767*x5771))+((r22*x5762))+((x5761*x5763)));
evalcond[1]=(cj0+((r11*x5772))+(((-1.0)*x5768*x5771))+((r12*x5762)));
evalcond[2]=(((r01*x5772))+((r02*x5762))+(((-1.0)*x5766))+(((-1.0)*x5764*x5771)));
evalcond[3]=((((-1.0)*cj1*x5765))+((r22*x5761))+((sj1*sj2))+(((-1.0)*x5763*x5770))+((x5762*x5767)));
evalcond[4]=((((-1.0)*gconst115*r01*x5770))+(((-1.0)*cj0*sj1*x5765))+((r02*x5761))+((x5762*x5764))+(((-1.0)*cj0*x5769)));
evalcond[5]=((((-1.0)*x5766*x5769))+(((-1.0)*sj0*sj1*x5765))+(((-1.0)*gconst115*r11*x5770))+((r12*x5761))+((x5762*x5768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5773=((1.0)*gconst115);
CheckValue<IkReal> x5774 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*r21*x5773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5774.valid){
continue;
}
CheckValue<IkReal> x5775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5773))+(((-1.0)*gconst116*r01)))),-1);
if(!x5775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5774.value)+(((1.5707963267949)*(x5775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5776=IKsin(j4);
IkReal x5777=IKcos(j4);
IkReal x5778=(gconst115*r21);
IkReal x5779=(gconst116*r00);
IkReal x5780=((1.0)*cj2);
IkReal x5781=((1.0)*sj0);
IkReal x5782=(gconst116*r20);
IkReal x5783=(gconst116*r10);
IkReal x5784=(cj1*sj2);
IkReal x5785=((1.0)*x5777);
IkReal x5786=((1.0)*x5776);
IkReal x5787=(gconst115*x5776);
evalcond[0]=(((x5776*x5778))+(((-1.0)*x5782*x5786))+((r22*x5777)));
evalcond[1]=(cj0+(((-1.0)*x5783*x5786))+((r11*x5787))+((r12*x5777)));
evalcond[2]=((((-1.0)*x5781))+((r01*x5787))+(((-1.0)*x5779*x5786))+((r02*x5777)));
evalcond[3]=((((-1.0)*cj1*x5780))+((sj1*sj2))+((r22*x5776))+(((-1.0)*x5778*x5785))+((x5777*x5782)));
evalcond[4]=((((-1.0)*gconst115*r01*x5785))+((x5777*x5779))+(((-1.0)*cj0*x5784))+((r02*x5776))+(((-1.0)*cj0*sj1*x5780)));
evalcond[5]=((((-1.0)*gconst115*r11*x5785))+((x5777*x5783))+((r12*x5776))+(((-1.0)*x5781*x5784))+(((-1.0)*sj0*sj1*x5780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5788=((-1.0)*r21);
IkReal x5790 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5790)==0){
continue;
}
IkReal x5789=pow(x5790,-0.5);
CheckValue<IkReal> x5791 = IKatan2WithCheck(IkReal(x5788),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5791.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5791.value))));
IkReal gconst118=(x5788*x5789);
IkReal gconst119=((1.0)*r20*x5789);
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5792.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5793=((-1.0)*r21);
CheckValue<IkReal> x5796 = IKatan2WithCheck(IkReal(x5793),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5796.valid){
continue;
}
IkReal x5794=((1.0)*(x5796.value));
IkReal x5795=x5789;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5794)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5794)));
IkReal gconst118=(x5793*x5795);
IkReal gconst119=((1.0)*r20*x5795);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5797=((-1.0)*r21);
CheckValue<IkReal> x5800 = IKatan2WithCheck(IkReal(x5797),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5800.valid){
continue;
}
IkReal x5798=((1.0)*(x5800.value));
IkReal x5799=x5789;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5798)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5798)));
IkReal gconst118=(x5797*x5799);
IkReal gconst119=((1.0)*r20*x5799);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5801=((-1.0)*r21);
CheckValue<IkReal> x5804 = IKatan2WithCheck(IkReal(x5801),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5804.valid){
continue;
}
IkReal x5802=((1.0)*(x5804.value));
IkReal x5803=x5789;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5802)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5802)));
IkReal gconst118=(x5801*x5803);
IkReal gconst119=((1.0)*r20*x5803);
IkReal x5805=r22*r22;
IkReal x5806=((1.0)*r12*sj0);
IkReal x5807=((1.0)*cj0*r02);
CheckValue<IkReal> x5811=IKPowWithIntegerCheck(((-1.0)+x5805),-1);
if(!x5811.valid){
continue;
}
IkReal x5808=x5811.value;
if((((1.0)+(((-1.0)*x5805)))) < -0.00001)
continue;
IkReal x5809=IKsqrt(((1.0)+(((-1.0)*x5805))));
IkReal x5810=(r22*x5808*x5809);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5806*x5810))+(((-1.0)*x5807*x5810)))))+(IKabs(((((-1.0)*x5806))+(((-1.0)*x5807))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5812=((1.0)*sj0);
IkReal x5813=((1.0)*cj0);
CheckValue<IkReal> x5814=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*gconst118*r20)))),-1);
if(!x5814.valid){
continue;
}
CheckValue<IkReal> x5815 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5812))+(((-1.0)*r02*x5813)))),IkReal(((((-1.0)*gconst119*r00*x5813))+((gconst118*r11*sj0))+(((-1.0)*gconst119*r10*x5812))+((cj0*gconst118*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5814.value)))+(x5815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5816=IKsin(j4);
IkReal x5817=IKcos(j4);
IkReal x5818=(gconst118*r01);
IkReal x5819=(gconst119*r10);
IkReal x5820=(gconst119*r20);
IkReal x5821=((1.0)*cj2);
IkReal x5822=(gconst118*r11);
IkReal x5823=(gconst118*r21);
IkReal x5824=(gconst119*r00);
IkReal x5825=((1.0)*sj0);
IkReal x5826=(cj1*sj2);
IkReal x5827=((1.0)*x5817);
IkReal x5828=((1.0)*x5816);
evalcond[0]=(((x5816*x5823))+((r22*x5817))+(((-1.0)*x5820*x5828)));
evalcond[1]=(cj0+((x5816*x5822))+((r12*x5817))+(((-1.0)*x5819*x5828)));
evalcond[2]=((((-1.0)*x5825))+((r02*x5817))+((x5816*x5818))+(((-1.0)*x5824*x5828)));
evalcond[3]=((((-1.0)*cj1*x5821))+(((-1.0)*x5823*x5827))+((r22*x5816))+((sj1*sj2))+((x5817*x5820)));
evalcond[4]=((((-1.0)*cj0*sj1*x5821))+(((-1.0)*x5818*x5827))+((r02*x5816))+(((-1.0)*cj0*x5826))+((x5817*x5824)));
evalcond[5]=((((-1.0)*sj0*sj1*x5821))+((r12*x5816))+(((-1.0)*x5822*x5827))+(((-1.0)*x5825*x5826))+((x5817*x5819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5829=((1.0)*gconst118);
CheckValue<IkReal> x5830 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5829))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5830.valid){
continue;
}
CheckValue<IkReal> x5831=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r11))+(((-1.0)*r10*x5829)))),-1);
if(!x5831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5830.value)+(((1.5707963267949)*(x5831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5832=IKsin(j4);
IkReal x5833=IKcos(j4);
IkReal x5834=(gconst118*r01);
IkReal x5835=(gconst119*r10);
IkReal x5836=(gconst119*r20);
IkReal x5837=((1.0)*cj2);
IkReal x5838=(gconst118*r11);
IkReal x5839=(gconst118*r21);
IkReal x5840=(gconst119*r00);
IkReal x5841=((1.0)*sj0);
IkReal x5842=(cj1*sj2);
IkReal x5843=((1.0)*x5833);
IkReal x5844=((1.0)*x5832);
evalcond[0]=(((x5832*x5839))+(((-1.0)*x5836*x5844))+((r22*x5833)));
evalcond[1]=(cj0+((x5832*x5838))+((r12*x5833))+(((-1.0)*x5835*x5844)));
evalcond[2]=(((r02*x5833))+((x5832*x5834))+(((-1.0)*x5840*x5844))+(((-1.0)*x5841)));
evalcond[3]=((((-1.0)*cj1*x5837))+((x5833*x5836))+((sj1*sj2))+(((-1.0)*x5839*x5843))+((r22*x5832)));
evalcond[4]=((((-1.0)*x5834*x5843))+((r02*x5832))+(((-1.0)*cj0*sj1*x5837))+(((-1.0)*cj0*x5842))+((x5833*x5840)));
evalcond[5]=(((x5833*x5835))+((r12*x5832))+(((-1.0)*sj0*sj1*x5837))+(((-1.0)*x5841*x5842))+(((-1.0)*x5838*x5843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5845=((1.0)*gconst118);
CheckValue<IkReal> x5846 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5845))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5846.valid){
continue;
}
CheckValue<IkReal> x5847=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r01))+(((-1.0)*r00*x5845)))),-1);
if(!x5847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5846.value)+(((1.5707963267949)*(x5847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5848=IKsin(j4);
IkReal x5849=IKcos(j4);
IkReal x5850=(gconst118*r01);
IkReal x5851=(gconst119*r10);
IkReal x5852=(gconst119*r20);
IkReal x5853=((1.0)*cj2);
IkReal x5854=(gconst118*r11);
IkReal x5855=(gconst118*r21);
IkReal x5856=(gconst119*r00);
IkReal x5857=((1.0)*sj0);
IkReal x5858=(cj1*sj2);
IkReal x5859=((1.0)*x5849);
IkReal x5860=((1.0)*x5848);
evalcond[0]=((((-1.0)*x5852*x5860))+((x5848*x5855))+((r22*x5849)));
evalcond[1]=(cj0+((r12*x5849))+((x5848*x5854))+(((-1.0)*x5851*x5860)));
evalcond[2]=(((x5848*x5850))+(((-1.0)*x5857))+(((-1.0)*x5856*x5860))+((r02*x5849)));
evalcond[3]=((((-1.0)*cj1*x5853))+((sj1*sj2))+(((-1.0)*x5855*x5859))+((r22*x5848))+((x5849*x5852)));
evalcond[4]=((((-1.0)*cj0*x5858))+(((-1.0)*x5850*x5859))+(((-1.0)*cj0*sj1*x5853))+((r02*x5848))+((x5849*x5856)));
evalcond[5]=((((-1.0)*x5857*x5858))+((r12*x5848))+(((-1.0)*x5854*x5859))+(((-1.0)*sj0*sj1*x5853))+((x5849*x5851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5861=((-1.0)*r10);
IkReal x5863 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5863)==0){
continue;
}
IkReal x5862=pow(x5863,-0.5);
CheckValue<IkReal> x5864 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5861),IKFAST_ATAN2_MAGTHRESH);
if(!x5864.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5864.value));
IkReal gconst121=(r11*x5862);
IkReal gconst122=(x5861*x5862);
CheckValue<IkReal> x5865 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5865.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5865.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5866=((-1.0)*r10);
IkReal x5867=x5862;
CheckValue<IkReal> x5869 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5866),IKFAST_ATAN2_MAGTHRESH);
if(!x5869.valid){
continue;
}
IkReal x5868=((-1.0)*(x5869.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5868;
IkReal gconst120=x5868;
IkReal gconst121=(r11*x5867);
IkReal gconst122=(x5866*x5867);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5870=((-1.0)*r10);
IkReal x5871=x5862;
CheckValue<IkReal> x5873 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5870),IKFAST_ATAN2_MAGTHRESH);
if(!x5873.valid){
continue;
}
IkReal x5872=((-1.0)*(x5873.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5872;
IkReal gconst120=x5872;
IkReal gconst121=(r11*x5871);
IkReal gconst122=(x5870*x5871);
IkReal x5874=r12*r12;
IkReal x5875=((1.0)*sj0);
IkReal x5876=(cj0*r02);
IkReal x5877=x5862;
j4eval[0]=((IKabs((((sj0*x5874*x5877))+(((-1.0)*x5875*x5877))+((r12*x5876*x5877)))))+(IKabs(((((-1.0)*r12*x5875))+(((-1.0)*x5876))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5878=((-1.0)*r10);
IkReal x5879=x5862;
CheckValue<IkReal> x5881 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5878),IKFAST_ATAN2_MAGTHRESH);
if(!x5881.valid){
continue;
}
IkReal x5880=((-1.0)*(x5881.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5880;
IkReal gconst120=x5880;
IkReal gconst121=(r11*x5879);
IkReal gconst122=(x5878*x5879);
IkReal x5882=r12*r12;
IkReal x5883=((1.0)+(((-1.0)*x5882)));
IkReal x5884=(r22*sj1*sj2);
IkReal x5885=(cj1*cj2*r22);
CheckValue<IkReal> x5892=IKPowWithIntegerCheck(x5883,-1);
if(!x5892.valid){
continue;
}
IkReal x5886=x5892.value;
CheckValue<IkReal> x5893=IKPowWithIntegerCheck(((-1.0)+x5882),-1);
if(!x5893.valid){
continue;
}
IkReal x5887=x5893.value;
IkReal x5888=((1.0)*x5886);
if((x5883) < -0.00001)
continue;
IkReal x5889=IKsqrt(x5883);
IkReal x5890=(r12*x5887*x5889);
IkReal x5891=((((-2.0)*r10*r11*r20*r21*x5886))+(((-1.0)*x5888*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5888*(r10*r10)*(r20*r20))));
j4eval[0]=x5891;
j4eval[1]=IKsign(x5891);
j4eval[2]=((IKabs((((x5885*x5890))+(((-1.0)*x5884*x5890)))))+(IKabs(((((-1.0)*x5885))+x5884))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5894=(cj1*cj2);
IkReal x5895=(gconst122*r20);
IkReal x5896=(gconst121*r21);
IkReal x5897=(sj1*sj2);
CheckValue<IkReal> x5898=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5896*x5896)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5895*x5895)))+(((2.0)*x5895*x5896)))),-1);
if(!x5898.valid){
continue;
}
CheckValue<IkReal> x5899 = IKatan2WithCheck(IkReal((((r22*x5897))+(((-1.0)*r22*x5894)))),IkReal(((((-1.0)*x5894*x5895))+((x5895*x5897))+(((-1.0)*x5896*x5897))+((x5894*x5896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5898.value)))+(x5899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5900=IKsin(j4);
IkReal x5901=IKcos(j4);
IkReal x5902=(gconst121*r01);
IkReal x5903=((1.0)*cj2);
IkReal x5904=((1.0)*sj0);
IkReal x5905=(cj1*sj2);
IkReal x5906=((1.0)*x5901);
IkReal x5907=(gconst122*x5901);
IkReal x5908=(gconst121*x5900);
IkReal x5909=((1.0)*gconst122*x5900);
evalcond[0]=(((r22*x5901))+(((-1.0)*r20*x5909))+((r21*x5908)));
evalcond[1]=(((r12*x5901))+cj0+(((-1.0)*r10*x5909))+((r11*x5908)));
evalcond[2]=((((-1.0)*r00*x5909))+((r02*x5901))+(((-1.0)*x5904))+((x5900*x5902)));
evalcond[3]=(((r22*x5900))+((r20*x5907))+((sj1*sj2))+(((-1.0)*cj1*x5903))+(((-1.0)*gconst121*r21*x5906)));
evalcond[4]=(((r00*x5907))+(((-1.0)*x5902*x5906))+(((-1.0)*cj0*x5905))+((r02*x5900))+(((-1.0)*cj0*sj1*x5903)));
evalcond[5]=(((r12*x5900))+(((-1.0)*x5904*x5905))+((r10*x5907))+(((-1.0)*sj0*sj1*x5903))+(((-1.0)*gconst121*r11*x5906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5910=((1.0)*sj0);
IkReal x5911=((1.0)*cj0);
CheckValue<IkReal> x5912=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*gconst122*r21)))),-1);
if(!x5912.valid){
continue;
}
CheckValue<IkReal> x5913 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5910))+(((-1.0)*r02*x5911)))),IkReal(((((-1.0)*gconst122*r10*x5910))+((cj0*gconst121*r01))+(((-1.0)*gconst122*r00*x5911))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5912.value)))+(x5913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5914=IKsin(j4);
IkReal x5915=IKcos(j4);
IkReal x5916=(gconst121*r01);
IkReal x5917=((1.0)*cj2);
IkReal x5918=((1.0)*sj0);
IkReal x5919=(cj1*sj2);
IkReal x5920=((1.0)*x5915);
IkReal x5921=(gconst122*x5915);
IkReal x5922=(gconst121*x5914);
IkReal x5923=((1.0)*gconst122*x5914);
evalcond[0]=(((r22*x5915))+((r21*x5922))+(((-1.0)*r20*x5923)));
evalcond[1]=(((r12*x5915))+cj0+((r11*x5922))+(((-1.0)*r10*x5923)));
evalcond[2]=((((-1.0)*r00*x5923))+((r02*x5915))+((x5914*x5916))+(((-1.0)*x5918)));
evalcond[3]=(((r22*x5914))+((r20*x5921))+((sj1*sj2))+(((-1.0)*cj1*x5917))+(((-1.0)*gconst121*r21*x5920)));
evalcond[4]=((((-1.0)*cj0*x5919))+(((-1.0)*x5916*x5920))+((r02*x5914))+((r00*x5921))+(((-1.0)*cj0*sj1*x5917)));
evalcond[5]=(((r12*x5914))+((r10*x5921))+(((-1.0)*gconst121*r11*x5920))+(((-1.0)*x5918*x5919))+(((-1.0)*sj0*sj1*x5917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5924=((1.0)*gconst121);
CheckValue<IkReal> x5925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5924))+(((-1.0)*gconst122*r01)))),-1);
if(!x5925.valid){
continue;
}
CheckValue<IkReal> x5926 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5924))+((cj0*gconst122*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5925.value)))+(x5926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5927=IKsin(j4);
IkReal x5928=IKcos(j4);
IkReal x5929=(gconst121*r01);
IkReal x5930=((1.0)*cj2);
IkReal x5931=((1.0)*sj0);
IkReal x5932=(cj1*sj2);
IkReal x5933=((1.0)*x5928);
IkReal x5934=(gconst122*x5928);
IkReal x5935=(gconst121*x5927);
IkReal x5936=((1.0)*gconst122*x5927);
evalcond[0]=(((r22*x5928))+((r21*x5935))+(((-1.0)*r20*x5936)));
evalcond[1]=(cj0+((r11*x5935))+((r12*x5928))+(((-1.0)*r10*x5936)));
evalcond[2]=(((x5927*x5929))+(((-1.0)*r00*x5936))+(((-1.0)*x5931))+((r02*x5928)));
evalcond[3]=(((r20*x5934))+(((-1.0)*cj1*x5930))+((r22*x5927))+((sj1*sj2))+(((-1.0)*gconst121*r21*x5933)));
evalcond[4]=((((-1.0)*x5929*x5933))+(((-1.0)*cj0*sj1*x5930))+((r00*x5934))+(((-1.0)*cj0*x5932))+((r02*x5927)));
evalcond[5]=(((r10*x5934))+(((-1.0)*gconst121*r11*x5933))+(((-1.0)*x5931*x5932))+(((-1.0)*sj0*sj1*x5930))+((r12*x5927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5937=((-1.0)*r11);
IkReal x5939 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5939)==0){
continue;
}
IkReal x5938=pow(x5939,-0.5);
CheckValue<IkReal> x5940 = IKatan2WithCheck(IkReal(x5937),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5940.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5940.value))));
IkReal gconst124=(x5937*x5938);
IkReal gconst125=((1.0)*r10*x5938);
CheckValue<IkReal> x5941 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5941.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5941.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5942=((-1.0)*r11);
CheckValue<IkReal> x5945 = IKatan2WithCheck(IkReal(x5942),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5945.valid){
continue;
}
IkReal x5943=((1.0)*(x5945.value));
IkReal x5944=x5938;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5943)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5943)));
IkReal gconst124=(x5942*x5944);
IkReal gconst125=((1.0)*r10*x5944);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5946=((1.0)*sj0);
IkReal x5947=((1.0)*gconst125);
CheckValue<IkReal> x5948=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5947)))),-1);
if(!x5948.valid){
continue;
}
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5946))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x5947))+((cj0*gconst124*r01))+(((-1.0)*gconst125*r10*x5946))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5948.value)))+(x5949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5950=IKsin(j4);
IkReal x5951=IKcos(j4);
IkReal x5952=(gconst125*r20);
IkReal x5953=((1.0)*cj2);
IkReal x5954=((1.0)*sj0);
IkReal x5955=(cj1*sj2);
IkReal x5956=((1.0)*x5950);
IkReal x5957=(gconst124*x5950);
IkReal x5958=(gconst125*x5951);
IkReal x5959=((1.0)*gconst124*x5951);
evalcond[0]=(((r21*x5957))+(((-1.0)*x5952*x5956))+((r22*x5951)));
evalcond[1]=(cj0+((r11*x5957))+((r12*x5951))+(((-1.0)*gconst125*r10*x5956)));
evalcond[2]=((((-1.0)*gconst125*r00*x5956))+((r02*x5951))+(((-1.0)*x5954))+((r01*x5957)));
evalcond[3]=(((x5951*x5952))+((sj1*sj2))+(((-1.0)*cj1*x5953))+((r22*x5950))+(((-1.0)*r21*x5959)));
evalcond[4]=((((-1.0)*cj0*x5955))+(((-1.0)*r01*x5959))+((r02*x5950))+(((-1.0)*cj0*sj1*x5953))+((r00*x5958)));
evalcond[5]=(((r10*x5958))+((r12*x5950))+(((-1.0)*sj0*sj1*x5953))+(((-1.0)*x5954*x5955))+(((-1.0)*r11*x5959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5960=((1.0)*gconst124);
CheckValue<IkReal> x5961 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x5960))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5961.valid){
continue;
}
CheckValue<IkReal> x5962=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5960))+(((-1.0)*gconst125*r01)))),-1);
if(!x5962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5961.value)+(((1.5707963267949)*(x5962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5963=IKsin(j4);
IkReal x5964=IKcos(j4);
IkReal x5965=(gconst125*r20);
IkReal x5966=((1.0)*cj2);
IkReal x5967=((1.0)*sj0);
IkReal x5968=(cj1*sj2);
IkReal x5969=((1.0)*x5963);
IkReal x5970=(gconst124*x5963);
IkReal x5971=(gconst125*x5964);
IkReal x5972=((1.0)*gconst124*x5964);
evalcond[0]=(((r22*x5964))+((r21*x5970))+(((-1.0)*x5965*x5969)));
evalcond[1]=(cj0+(((-1.0)*gconst125*r10*x5969))+((r11*x5970))+((r12*x5964)));
evalcond[2]=(((r02*x5964))+(((-1.0)*gconst125*r00*x5969))+((r01*x5970))+(((-1.0)*x5967)));
evalcond[3]=(((x5964*x5965))+((sj1*sj2))+((r22*x5963))+(((-1.0)*r21*x5972))+(((-1.0)*cj1*x5966)));
evalcond[4]=(((r02*x5963))+(((-1.0)*cj0*sj1*x5966))+((r00*x5971))+(((-1.0)*cj0*x5968))+(((-1.0)*r01*x5972)));
evalcond[5]=((((-1.0)*sj0*sj1*x5966))+(((-1.0)*r11*x5972))+((r10*x5971))+((r12*x5963))+(((-1.0)*x5967*x5968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5973=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5973;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x5973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5974=((1.0)*sj5);
IkReal x5975=((((-1.0)*r00*x5974))+(((-1.0)*cj5*r01)));
j4eval[0]=x5975;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x5974))))));
j4eval[2]=IKsign(x5975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5976=cj5*cj5;
IkReal x5977=r11*r11;
IkReal x5978=(r11*sj5);
IkReal x5979=(cj5*r10);
IkReal x5980=((r12*r12)+(((-1.0)*x5976*x5977))+(((-2.0)*x5978*x5979))+((x5976*(r10*r10)))+x5977);
j4eval[0]=x5980;
j4eval[1]=IKsign(x5980);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5978))+x5979))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5981=cj5*cj5;
IkReal x5982=r11*r11;
IkReal x5983=(cj5*r10);
IkReal x5984=(r11*sj5);
CheckValue<IkReal> x5985 = IKatan2WithCheck(IkReal(((((-1.0)*x5984))+x5983)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5985.valid){
continue;
}
CheckValue<IkReal> x5986=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5981*x5982))+(((-2.0)*x5983*x5984))+x5982+((x5981*(r10*r10))))),-1);
if(!x5986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5985.value)+(((1.5707963267949)*(x5986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5987=IKsin(j4);
IkReal x5988=IKcos(j4);
IkReal x5989=(cj5*r10);
IkReal x5990=((1.0)*cj2);
IkReal x5991=(cj5*r00);
IkReal x5992=(cj5*r20);
IkReal x5993=((1.0)*x5987);
IkReal x5994=(sj5*x5987);
IkReal x5995=((1.0)*sj5*x5988);
evalcond[0]=(((r21*x5994))+(((-1.0)*x5992*x5993))+((r22*x5988)));
evalcond[1]=(((r02*x5988))+(((-1.0)*x5991*x5993))+((r01*x5994)));
evalcond[2]=((((-1.0)*r11*x5995))+((x5988*x5989))+((r12*x5987)));
evalcond[3]=((1.0)+((r12*x5988))+((r11*x5994))+(((-1.0)*x5989*x5993)));
evalcond[4]=(((x5988*x5992))+((sj1*sj2))+(((-1.0)*cj1*x5990))+((r22*x5987))+(((-1.0)*r21*x5995)));
evalcond[5]=((((-1.0)*sj1*x5990))+((x5988*x5991))+((r02*x5987))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x5995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5996=((1.0)*sj5);
CheckValue<IkReal> x5997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5996))+(((-1.0)*cj5*r01)))),-1);
if(!x5997.valid){
continue;
}
CheckValue<IkReal> x5998 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5997.value)))+(x5998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5999=IKsin(j4);
IkReal x6000=IKcos(j4);
IkReal x6001=(cj5*r10);
IkReal x6002=((1.0)*cj2);
IkReal x6003=(cj5*r00);
IkReal x6004=(cj5*r20);
IkReal x6005=((1.0)*x5999);
IkReal x6006=(sj5*x5999);
IkReal x6007=((1.0)*sj5*x6000);
evalcond[0]=(((r21*x6006))+((r22*x6000))+(((-1.0)*x6004*x6005)));
evalcond[1]=(((r02*x6000))+((r01*x6006))+(((-1.0)*x6003*x6005)));
evalcond[2]=(((r12*x5999))+(((-1.0)*r11*x6007))+((x6000*x6001)));
evalcond[3]=((1.0)+((r12*x6000))+((r11*x6006))+(((-1.0)*x6001*x6005)));
evalcond[4]=((((-1.0)*cj1*x6002))+((sj1*sj2))+((x6000*x6004))+(((-1.0)*r21*x6007))+((r22*x5999)));
evalcond[5]=(((r02*x5999))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x6007))+(((-1.0)*sj1*x6002))+((x6000*x6003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6008=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6008.valid){
continue;
}
CheckValue<IkReal> x6009 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6008.value)))+(x6009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6010=IKsin(j4);
IkReal x6011=IKcos(j4);
IkReal x6012=(cj5*r10);
IkReal x6013=((1.0)*cj2);
IkReal x6014=(cj5*r00);
IkReal x6015=(cj5*r20);
IkReal x6016=((1.0)*x6010);
IkReal x6017=(sj5*x6010);
IkReal x6018=((1.0)*sj5*x6011);
evalcond[0]=(((r21*x6017))+(((-1.0)*x6015*x6016))+((r22*x6011)));
evalcond[1]=(((r01*x6017))+((r02*x6011))+(((-1.0)*x6014*x6016)));
evalcond[2]=((((-1.0)*r11*x6018))+((r12*x6010))+((x6011*x6012)));
evalcond[3]=((1.0)+((r11*x6017))+((r12*x6011))+(((-1.0)*x6012*x6016)));
evalcond[4]=((((-1.0)*r21*x6018))+(((-1.0)*cj1*x6013))+((sj1*sj2))+((x6011*x6015))+((r22*x6010)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r02*x6010))+((x6011*x6014))+(((-1.0)*sj1*x6013))+(((-1.0)*r01*x6018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6019=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6019;
j4eval[1]=IKsign(x6019);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6020=((1.0)*sj5);
IkReal x6021=((((-1.0)*r20*x6020))+(((-1.0)*cj5*r21)));
j4eval[0]=x6021;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x6020))+((cj5*r00))))));
j4eval[2]=IKsign(x6021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6022=cj5*cj5;
IkReal x6023=r11*r11;
IkReal x6024=(cj5*r10);
IkReal x6025=(r11*sj5);
IkReal x6026=((((2.0)*x6024*x6025))+(((-1.0)*x6023))+(((-1.0)*(r12*r12)))+(((-1.0)*x6022*(r10*r10)))+((x6022*x6023)));
j4eval[0]=x6026;
j4eval[1]=((IKabs(r12))+(IKabs((x6024+(((-1.0)*x6025))))));
j4eval[2]=IKsign(x6026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6027=cj5*cj5;
IkReal x6028=r11*r11;
IkReal x6029=(cj5*r10);
IkReal x6030=(r11*sj5);
CheckValue<IkReal> x6031=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6028))+(((2.0)*x6029*x6030))+((x6027*x6028))+(((-1.0)*(r12*r12)))+(((-1.0)*x6027*(r10*r10))))),-1);
if(!x6031.valid){
continue;
}
CheckValue<IkReal> x6032 = IKatan2WithCheck(IkReal((x6029+(((-1.0)*x6030)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6031.value)))+(x6032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6033=IKsin(j4);
IkReal x6034=IKcos(j4);
IkReal x6035=(cj5*r10);
IkReal x6036=(cj5*r00);
IkReal x6037=(cj5*r20);
IkReal x6038=((1.0)*x6033);
IkReal x6039=(sj5*x6033);
IkReal x6040=((1.0)*sj5*x6034);
evalcond[0]=(((r22*x6034))+((r21*x6039))+(((-1.0)*x6037*x6038)));
evalcond[1]=((((-1.0)*x6036*x6038))+((r02*x6034))+((r01*x6039)));
evalcond[2]=(((r12*x6033))+(((-1.0)*r11*x6040))+((x6034*x6035)));
evalcond[3]=((-1.0)+((r12*x6034))+(((-1.0)*x6035*x6038))+((r11*x6039)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x6040))+((r02*x6033))+((x6034*x6036)));
evalcond[5]=(((r22*x6033))+(((-1.0)*r21*x6040))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6034*x6037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6041=((1.0)*sj5);
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x6041))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
CheckValue<IkReal> x6043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6041))+(((-1.0)*cj5*r21)))),-1);
if(!x6043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6042.value)+(((1.5707963267949)*(x6043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6044=IKsin(j4);
IkReal x6045=IKcos(j4);
IkReal x6046=(cj5*r10);
IkReal x6047=(cj5*r00);
IkReal x6048=(cj5*r20);
IkReal x6049=((1.0)*x6044);
IkReal x6050=(sj5*x6044);
IkReal x6051=((1.0)*sj5*x6045);
evalcond[0]=(((r22*x6045))+(((-1.0)*x6048*x6049))+((r21*x6050)));
evalcond[1]=(((r01*x6050))+((r02*x6045))+(((-1.0)*x6047*x6049)));
evalcond[2]=((((-1.0)*r11*x6051))+((x6045*x6046))+((r12*x6044)));
evalcond[3]=((-1.0)+(((-1.0)*x6046*x6049))+((r12*x6045))+((r11*x6050)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x6051))+((x6045*x6047))+((r02*x6044)));
evalcond[5]=(((r22*x6044))+(((-1.0)*r21*x6051))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6045*x6048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6052=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6052.valid){
continue;
}
CheckValue<IkReal> x6053 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6052.value)))+(x6053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6054=IKsin(j4);
IkReal x6055=IKcos(j4);
IkReal x6056=(cj5*r10);
IkReal x6057=(cj5*r00);
IkReal x6058=(cj5*r20);
IkReal x6059=((1.0)*x6054);
IkReal x6060=(sj5*x6054);
IkReal x6061=((1.0)*sj5*x6055);
evalcond[0]=(((r22*x6055))+(((-1.0)*x6058*x6059))+((r21*x6060)));
evalcond[1]=(((r01*x6060))+(((-1.0)*x6057*x6059))+((r02*x6055)));
evalcond[2]=(((r12*x6054))+((x6055*x6056))+(((-1.0)*r11*x6061)));
evalcond[3]=((-1.0)+((r12*x6055))+(((-1.0)*x6056*x6059))+((r11*x6060)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x6061))+((x6055*x6057))+((cj1*sj2))+((r02*x6054)));
evalcond[5]=(((r22*x6054))+((x6055*x6058))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x6061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6062=((-1.0)*r00);
IkReal x6064 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6064)==0){
continue;
}
IkReal x6063=pow(x6064,-0.5);
CheckValue<IkReal> x6065 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6062),IKFAST_ATAN2_MAGTHRESH);
if(!x6065.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6065.value));
IkReal gconst127=(r01*x6063);
IkReal gconst128=(x6062*x6063);
CheckValue<IkReal> x6066 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6066.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6066.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6067=((-1.0)*r00);
IkReal x6068=x6063;
CheckValue<IkReal> x6070 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6067),IKFAST_ATAN2_MAGTHRESH);
if(!x6070.valid){
continue;
}
IkReal x6069=((-1.0)*(x6070.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x6069;
IkReal gconst126=x6069;
IkReal gconst127=(r01*x6068);
IkReal gconst128=(x6067*x6068);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6071=((-1.0)*r00);
IkReal x6072=x6063;
CheckValue<IkReal> x6074 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6071),IKFAST_ATAN2_MAGTHRESH);
if(!x6074.valid){
continue;
}
IkReal x6073=((-1.0)*(x6074.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x6073;
IkReal gconst126=x6073;
IkReal gconst127=(r01*x6072);
IkReal gconst128=(x6071*x6072);
IkReal x6075=r02*r02;
IkReal x6076=(r12*sj0);
IkReal x6077=((1.0)*cj0);
IkReal x6078=x6063;
j4eval[0]=((IKabs(((((-1.0)*x6076))+(((-1.0)*r02*x6077)))))+(IKabs((((r02*x6076*x6078))+(((-1.0)*x6077*x6078))+((cj0*x6075*x6078))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6079=((-1.0)*r00);
IkReal x6080=x6063;
CheckValue<IkReal> x6082 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6079),IKFAST_ATAN2_MAGTHRESH);
if(!x6082.valid){
continue;
}
IkReal x6081=((-1.0)*(x6082.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x6081;
IkReal gconst126=x6081;
IkReal gconst127=(r01*x6080);
IkReal gconst128=(x6079*x6080);
IkReal x6083=r02*r02;
IkReal x6084=(sj1*sj2);
IkReal x6085=(cj1*cj2);
IkReal x6086=((1.0)+(((-1.0)*x6083)));
CheckValue<IkReal> x6093=IKPowWithIntegerCheck(x6086,-1);
if(!x6093.valid){
continue;
}
IkReal x6087=x6093.value;
CheckValue<IkReal> x6094=IKPowWithIntegerCheck(((-1.0)+x6083),-1);
if(!x6094.valid){
continue;
}
IkReal x6088=x6094.value;
IkReal x6089=((1.0)*x6087);
if((x6086) < -0.00001)
continue;
IkReal x6090=IKsqrt(x6086);
IkReal x6091=(r02*r22*x6088*x6090);
IkReal x6092=((((-1.0)*x6089*(r00*r00)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r00*r01*r20*r21*x6087))+(((-1.0)*x6089*(r01*r01)*(r21*r21))));
j4eval[0]=x6092;
j4eval[1]=IKsign(x6092);
j4eval[2]=((IKabs(((((-1.0)*r22*x6085))+((r22*x6084)))))+(IKabs((((x6085*x6091))+(((-1.0)*x6084*x6091))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6095=(gconst128*r20);
IkReal x6096=(gconst127*r21);
IkReal x6097=(cj1*cj2);
IkReal x6098=(sj1*sj2);
CheckValue<IkReal> x6099 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6097))+((r22*x6098)))),IkReal((((x6095*x6098))+(((-1.0)*x6096*x6098))+((x6096*x6097))+(((-1.0)*x6095*x6097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6099.valid){
continue;
}
CheckValue<IkReal> x6100=IKPowWithIntegerCheck(IKsign(((((2.0)*x6095*x6096))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6096*x6096)))+(((-1.0)*(x6095*x6095))))),-1);
if(!x6100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6099.value)+(((1.5707963267949)*(x6100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6101=IKsin(j4);
IkReal x6102=IKcos(j4);
IkReal x6103=((1.0)*cj2);
IkReal x6104=(gconst127*r01);
IkReal x6105=(gconst128*r10);
IkReal x6106=(gconst128*r00);
IkReal x6107=((1.0)*sj0);
IkReal x6108=(gconst127*r21);
IkReal x6109=(gconst128*r20);
IkReal x6110=(gconst127*r11);
IkReal x6111=(cj1*sj2);
IkReal x6112=((1.0)*x6101);
IkReal x6113=((1.0)*x6102);
evalcond[0]=(((r22*x6102))+((x6101*x6108))+(((-1.0)*x6109*x6112)));
evalcond[1]=(cj0+(((-1.0)*x6105*x6112))+((x6101*x6110))+((r12*x6102)));
evalcond[2]=(((x6101*x6104))+(((-1.0)*x6106*x6112))+((r02*x6102))+(((-1.0)*x6107)));
evalcond[3]=(((x6102*x6109))+((r22*x6101))+((sj1*sj2))+(((-1.0)*x6108*x6113))+(((-1.0)*cj1*x6103)));
evalcond[4]=(((x6102*x6106))+(((-1.0)*x6104*x6113))+(((-1.0)*cj0*x6111))+((r02*x6101))+(((-1.0)*cj0*sj1*x6103)));
evalcond[5]=(((x6102*x6105))+(((-1.0)*x6107*x6111))+(((-1.0)*sj0*sj1*x6103))+(((-1.0)*x6110*x6113))+((r12*x6101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6114=((1.0)*sj0);
IkReal x6115=((1.0)*gconst128);
CheckValue<IkReal> x6116 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6114))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x6115))+((cj0*gconst127*r01))+(((-1.0)*gconst128*r10*x6114))+((gconst127*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6116.valid){
continue;
}
CheckValue<IkReal> x6117=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x6115)))),-1);
if(!x6117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6116.value)+(((1.5707963267949)*(x6117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6118=IKsin(j4);
IkReal x6119=IKcos(j4);
IkReal x6120=((1.0)*cj2);
IkReal x6121=(gconst127*r01);
IkReal x6122=(gconst128*r10);
IkReal x6123=(gconst128*r00);
IkReal x6124=((1.0)*sj0);
IkReal x6125=(gconst127*r21);
IkReal x6126=(gconst128*r20);
IkReal x6127=(gconst127*r11);
IkReal x6128=(cj1*sj2);
IkReal x6129=((1.0)*x6118);
IkReal x6130=((1.0)*x6119);
evalcond[0]=(((x6118*x6125))+(((-1.0)*x6126*x6129))+((r22*x6119)));
evalcond[1]=(cj0+((x6118*x6127))+((r12*x6119))+(((-1.0)*x6122*x6129)));
evalcond[2]=(((r02*x6119))+((x6118*x6121))+(((-1.0)*x6124))+(((-1.0)*x6123*x6129)));
evalcond[3]=(((x6119*x6126))+(((-1.0)*x6125*x6130))+((sj1*sj2))+((r22*x6118))+(((-1.0)*cj1*x6120)));
evalcond[4]=((((-1.0)*cj0*x6128))+((r02*x6118))+((x6119*x6123))+(((-1.0)*x6121*x6130))+(((-1.0)*cj0*sj1*x6120)));
evalcond[5]=(((x6119*x6122))+(((-1.0)*x6124*x6128))+((r12*x6118))+(((-1.0)*sj0*sj1*x6120))+(((-1.0)*x6127*x6130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6131=((1.0)*gconst127);
CheckValue<IkReal> x6132=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r11))+(((-1.0)*r10*x6131)))),-1);
if(!x6132.valid){
continue;
}
CheckValue<IkReal> x6133 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6131))+((gconst128*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6132.value)))+(x6133.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6134=IKsin(j4);
IkReal x6135=IKcos(j4);
IkReal x6136=((1.0)*cj2);
IkReal x6137=(gconst127*r01);
IkReal x6138=(gconst128*r10);
IkReal x6139=(gconst128*r00);
IkReal x6140=((1.0)*sj0);
IkReal x6141=(gconst127*r21);
IkReal x6142=(gconst128*r20);
IkReal x6143=(gconst127*r11);
IkReal x6144=(cj1*sj2);
IkReal x6145=((1.0)*x6134);
IkReal x6146=((1.0)*x6135);
evalcond[0]=(((x6134*x6141))+((r22*x6135))+(((-1.0)*x6142*x6145)));
evalcond[1]=(((x6134*x6143))+cj0+(((-1.0)*x6138*x6145))+((r12*x6135)));
evalcond[2]=((((-1.0)*x6139*x6145))+(((-1.0)*x6140))+((x6134*x6137))+((r02*x6135)));
evalcond[3]=(((r22*x6134))+((sj1*sj2))+(((-1.0)*x6141*x6146))+(((-1.0)*cj1*x6136))+((x6135*x6142)));
evalcond[4]=((((-1.0)*x6137*x6146))+((x6135*x6139))+(((-1.0)*cj0*x6144))+((r02*x6134))+(((-1.0)*cj0*sj1*x6136)));
evalcond[5]=(((x6135*x6138))+(((-1.0)*sj0*sj1*x6136))+(((-1.0)*x6143*x6146))+(((-1.0)*x6140*x6144))+((r12*x6134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6147=((-1.0)*r01);
IkReal x6149 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6149)==0){
continue;
}
IkReal x6148=pow(x6149,-0.5);
CheckValue<IkReal> x6150 = IKatan2WithCheck(IkReal(x6147),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6150.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6150.value))));
IkReal gconst130=(x6147*x6148);
IkReal gconst131=((1.0)*r00*x6148);
CheckValue<IkReal> x6151 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6151.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6151.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6152=((-1.0)*r01);
CheckValue<IkReal> x6155 = IKatan2WithCheck(IkReal(x6152),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6155.valid){
continue;
}
IkReal x6153=((1.0)*(x6155.value));
IkReal x6154=x6148;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6153)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6153)));
IkReal gconst130=(x6152*x6154);
IkReal gconst131=((1.0)*r00*x6154);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6156=((-1.0)*r01);
CheckValue<IkReal> x6159 = IKatan2WithCheck(IkReal(x6156),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6159.valid){
continue;
}
IkReal x6157=((1.0)*(x6159.value));
IkReal x6158=x6148;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6157)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6157)));
IkReal gconst130=(x6156*x6158);
IkReal gconst131=((1.0)*r00*x6158);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6160=((1.0)*sj0);
IkReal x6161=((1.0)*cj0);
CheckValue<IkReal> x6162=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*gconst130*r20)))),-1);
if(!x6162.valid){
continue;
}
CheckValue<IkReal> x6163 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6160))+(((-1.0)*r02*x6161)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*gconst131*r10*x6160))+(((-1.0)*gconst131*r00*x6161))+((gconst130*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6162.value)))+(x6163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6164=IKsin(j4);
IkReal x6165=IKcos(j4);
IkReal x6166=((1.0)*cj2);
IkReal x6167=(gconst131*r10);
IkReal x6168=(gconst131*r20);
IkReal x6169=((1.0)*sj0);
IkReal x6170=(gconst131*r00);
IkReal x6171=(cj1*sj2);
IkReal x6172=(gconst130*x6164);
IkReal x6173=((1.0)*x6164);
IkReal x6174=((1.0)*gconst130*x6165);
evalcond[0]=((((-1.0)*x6168*x6173))+((r21*x6172))+((r22*x6165)));
evalcond[1]=(cj0+((r12*x6165))+(((-1.0)*x6167*x6173))+((r11*x6172)));
evalcond[2]=((((-1.0)*x6169))+((r02*x6165))+(((-1.0)*x6170*x6173))+((r01*x6172)));
evalcond[3]=((((-1.0)*r21*x6174))+((sj1*sj2))+((x6165*x6168))+(((-1.0)*cj1*x6166))+((r22*x6164)));
evalcond[4]=(((r02*x6164))+((x6165*x6170))+(((-1.0)*cj0*sj1*x6166))+(((-1.0)*cj0*x6171))+(((-1.0)*r01*x6174)));
evalcond[5]=(((r12*x6164))+(((-1.0)*sj0*sj1*x6166))+(((-1.0)*r11*x6174))+((x6165*x6167))+(((-1.0)*x6169*x6171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6175=((1.0)*gconst130);
CheckValue<IkReal> x6176=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r11))+(((-1.0)*r10*x6175)))),-1);
if(!x6176.valid){
continue;
}
CheckValue<IkReal> x6177 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6175))+((gconst131*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6176.value)))+(x6177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6178=IKsin(j4);
IkReal x6179=IKcos(j4);
IkReal x6180=((1.0)*cj2);
IkReal x6181=(gconst131*r10);
IkReal x6182=(gconst131*r20);
IkReal x6183=((1.0)*sj0);
IkReal x6184=(gconst131*r00);
IkReal x6185=(cj1*sj2);
IkReal x6186=(gconst130*x6178);
IkReal x6187=((1.0)*x6178);
IkReal x6188=((1.0)*gconst130*x6179);
evalcond[0]=(((r21*x6186))+(((-1.0)*x6182*x6187))+((r22*x6179)));
evalcond[1]=(cj0+((r12*x6179))+((r11*x6186))+(((-1.0)*x6181*x6187)));
evalcond[2]=((((-1.0)*x6184*x6187))+((r01*x6186))+((r02*x6179))+(((-1.0)*x6183)));
evalcond[3]=((((-1.0)*cj1*x6180))+((sj1*sj2))+((x6179*x6182))+((r22*x6178))+(((-1.0)*r21*x6188)));
evalcond[4]=((((-1.0)*cj0*x6185))+(((-1.0)*r01*x6188))+((r02*x6178))+(((-1.0)*cj0*sj1*x6180))+((x6179*x6184)));
evalcond[5]=(((r12*x6178))+(((-1.0)*sj0*sj1*x6180))+(((-1.0)*x6183*x6185))+(((-1.0)*r11*x6188))+((x6179*x6181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6189=((1.0)*gconst130);
CheckValue<IkReal> x6190 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*r21*x6189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6190.valid){
continue;
}
CheckValue<IkReal> x6191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6189))+(((-1.0)*gconst131*r01)))),-1);
if(!x6191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6190.value)+(((1.5707963267949)*(x6191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6192=IKsin(j4);
IkReal x6193=IKcos(j4);
IkReal x6194=((1.0)*cj2);
IkReal x6195=(gconst131*r10);
IkReal x6196=(gconst131*r20);
IkReal x6197=((1.0)*sj0);
IkReal x6198=(gconst131*r00);
IkReal x6199=(cj1*sj2);
IkReal x6200=(gconst130*x6192);
IkReal x6201=((1.0)*x6192);
IkReal x6202=((1.0)*gconst130*x6193);
evalcond[0]=((((-1.0)*x6196*x6201))+((r21*x6200))+((r22*x6193)));
evalcond[1]=(cj0+(((-1.0)*x6195*x6201))+((r12*x6193))+((r11*x6200)));
evalcond[2]=(((r01*x6200))+(((-1.0)*x6198*x6201))+(((-1.0)*x6197))+((r02*x6193)));
evalcond[3]=((((-1.0)*r21*x6202))+((sj1*sj2))+(((-1.0)*cj1*x6194))+((r22*x6192))+((x6193*x6196)));
evalcond[4]=((((-1.0)*cj0*sj1*x6194))+((r02*x6192))+(((-1.0)*cj0*x6199))+((x6193*x6198))+(((-1.0)*r01*x6202)));
evalcond[5]=((((-1.0)*sj0*sj1*x6194))+((r12*x6192))+(((-1.0)*x6197*x6199))+(((-1.0)*r11*x6202))+((x6193*x6195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6203=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6203;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x6203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6204=((1.0)*sj5);
IkReal x6205=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6204)));
j4eval[0]=x6205;
j4eval[1]=IKsign(x6205);
j4eval[2]=((IKabs(((((-1.0)*r21*x6204))+((cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6206=cj5*cj5;
IkReal x6207=r01*r01;
IkReal x6208=(r01*sj5);
IkReal x6209=(cj5*r00);
IkReal x6210=((((2.0)*x6208*x6209))+(((-1.0)*x6206*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x6207))+((x6206*x6207)));
j4eval[0]=x6210;
j4eval[1]=IKsign(x6210);
j4eval[2]=((IKabs(r02))+(IKabs((x6209+(((-1.0)*x6208))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6211=cj5*cj5;
IkReal x6212=r01*r01;
IkReal x6213=(r01*sj5);
IkReal x6214=(cj5*r00);
CheckValue<IkReal> x6215=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x6212))+(((2.0)*x6213*x6214))+((x6211*x6212))+(((-1.0)*x6211*(r00*r00))))),-1);
if(!x6215.valid){
continue;
}
CheckValue<IkReal> x6216 = IKatan2WithCheck(IkReal((x6214+(((-1.0)*x6213)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6215.value)))+(x6216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6217=IKsin(j4);
IkReal x6218=IKcos(j4);
IkReal x6219=(cj5*r10);
IkReal x6220=((1.0)*cj2);
IkReal x6221=(cj5*r00);
IkReal x6222=(cj5*r20);
IkReal x6223=((1.0)*x6217);
IkReal x6224=(sj5*x6217);
IkReal x6225=((1.0)*sj5*x6218);
evalcond[0]=((((-1.0)*x6222*x6223))+((r21*x6224))+((r22*x6218)));
evalcond[1]=(((r12*x6218))+((r11*x6224))+(((-1.0)*x6219*x6223)));
evalcond[2]=(((r02*x6217))+(((-1.0)*r01*x6225))+((x6218*x6221)));
evalcond[3]=((-1.0)+((r02*x6218))+((r01*x6224))+(((-1.0)*x6221*x6223)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*x6225))+(((-1.0)*cj1*x6220))+((r22*x6217))+((x6218*x6222)));
evalcond[5]=(((r12*x6217))+(((-1.0)*sj1*x6220))+(((-1.0)*r11*x6225))+(((-1.0)*cj1*sj2))+((x6218*x6219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6226=((1.0)*sj5);
CheckValue<IkReal> x6227 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6227.valid){
continue;
}
CheckValue<IkReal> x6228=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6226)))),-1);
if(!x6228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6227.value)+(((1.5707963267949)*(x6228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6229=IKsin(j4);
IkReal x6230=IKcos(j4);
IkReal x6231=(cj5*r10);
IkReal x6232=((1.0)*cj2);
IkReal x6233=(cj5*r00);
IkReal x6234=(cj5*r20);
IkReal x6235=((1.0)*x6229);
IkReal x6236=(sj5*x6229);
IkReal x6237=((1.0)*sj5*x6230);
evalcond[0]=(((r21*x6236))+((r22*x6230))+(((-1.0)*x6234*x6235)));
evalcond[1]=(((r12*x6230))+(((-1.0)*x6231*x6235))+((r11*x6236)));
evalcond[2]=(((x6230*x6233))+((r02*x6229))+(((-1.0)*r01*x6237)));
evalcond[3]=((-1.0)+((r02*x6230))+((r01*x6236))+(((-1.0)*x6233*x6235)));
evalcond[4]=(((x6230*x6234))+((sj1*sj2))+(((-1.0)*r21*x6237))+(((-1.0)*cj1*x6232))+((r22*x6229)));
evalcond[5]=(((x6230*x6231))+(((-1.0)*sj1*x6232))+(((-1.0)*r11*x6237))+(((-1.0)*cj1*sj2))+((r12*x6229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6238 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6238.valid){
continue;
}
CheckValue<IkReal> x6239=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6238.value)+(((1.5707963267949)*(x6239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6240=IKsin(j4);
IkReal x6241=IKcos(j4);
IkReal x6242=(cj5*r10);
IkReal x6243=((1.0)*cj2);
IkReal x6244=(cj5*r00);
IkReal x6245=(cj5*r20);
IkReal x6246=((1.0)*x6240);
IkReal x6247=(sj5*x6240);
IkReal x6248=((1.0)*sj5*x6241);
evalcond[0]=(((r21*x6247))+(((-1.0)*x6245*x6246))+((r22*x6241)));
evalcond[1]=((((-1.0)*x6242*x6246))+((r11*x6247))+((r12*x6241)));
evalcond[2]=(((x6241*x6244))+((r02*x6240))+(((-1.0)*r01*x6248)));
evalcond[3]=((-1.0)+((r02*x6241))+(((-1.0)*x6244*x6246))+((r01*x6247)));
evalcond[4]=(((x6241*x6245))+((sj1*sj2))+(((-1.0)*r21*x6248))+(((-1.0)*cj1*x6243))+((r22*x6240)));
evalcond[5]=(((x6241*x6242))+((r12*x6240))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*x6248))+(((-1.0)*sj1*x6243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6249=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6249;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x6249);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6250=((1.0)*sj5);
IkReal x6251=((((-1.0)*cj5*r21))+(((-1.0)*r20*x6250)));
j4eval[0]=x6251;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x6250))))));
j4eval[2]=IKsign(x6251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6252=cj5*cj5;
IkReal x6253=r01*r01;
IkReal x6254=(cj5*r00);
IkReal x6255=(r01*sj5);
IkReal x6256=(x6253+(((-2.0)*x6254*x6255))+(((-1.0)*x6252*x6253))+((x6252*(r00*r00)))+(r02*r02));
j4eval[0]=x6256;
j4eval[1]=((IKabs(r02))+(IKabs((x6254+(((-1.0)*x6255))))));
j4eval[2]=IKsign(x6256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6257=cj5*cj5;
IkReal x6258=r01*r01;
IkReal x6259=(r01*sj5);
IkReal x6260=(cj5*r00);
CheckValue<IkReal> x6261 = IKatan2WithCheck(IkReal((x6260+(((-1.0)*x6259)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6261.valid){
continue;
}
CheckValue<IkReal> x6262=IKPowWithIntegerCheck(IKsign((x6258+(((-1.0)*x6257*x6258))+(((-2.0)*x6259*x6260))+((x6257*(r00*r00)))+(r02*r02))),-1);
if(!x6262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6261.value)+(((1.5707963267949)*(x6262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6263=IKsin(j4);
IkReal x6264=IKcos(j4);
IkReal x6265=(cj5*r10);
IkReal x6266=(cj5*r00);
IkReal x6267=(cj5*r20);
IkReal x6268=((1.0)*x6263);
IkReal x6269=(sj5*x6263);
IkReal x6270=((1.0)*sj5*x6264);
evalcond[0]=((((-1.0)*x6267*x6268))+((r22*x6264))+((r21*x6269)));
evalcond[1]=((((-1.0)*x6265*x6268))+((r12*x6264))+((r11*x6269)));
evalcond[2]=((((-1.0)*r01*x6270))+((r02*x6263))+((x6264*x6266)));
evalcond[3]=((1.0)+((r01*x6269))+(((-1.0)*x6266*x6268))+((r02*x6264)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6264*x6265))+((r12*x6263))+(((-1.0)*r11*x6270)));
evalcond[5]=((((-1.0)*r21*x6270))+((r22*x6263))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6264*x6267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6271=((1.0)*sj5);
CheckValue<IkReal> x6272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6271))+(((-1.0)*cj5*r21)))),-1);
if(!x6272.valid){
continue;
}
CheckValue<IkReal> x6273 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x6271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6272.value)))+(x6273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6274=IKsin(j4);
IkReal x6275=IKcos(j4);
IkReal x6276=(cj5*r10);
IkReal x6277=(cj5*r00);
IkReal x6278=(cj5*r20);
IkReal x6279=((1.0)*x6274);
IkReal x6280=(sj5*x6274);
IkReal x6281=((1.0)*sj5*x6275);
evalcond[0]=(((r22*x6275))+(((-1.0)*x6278*x6279))+((r21*x6280)));
evalcond[1]=(((r12*x6275))+(((-1.0)*x6276*x6279))+((r11*x6280)));
evalcond[2]=(((r02*x6274))+((x6275*x6277))+(((-1.0)*r01*x6281)));
evalcond[3]=((1.0)+((r02*x6275))+(((-1.0)*x6277*x6279))+((r01*x6280)));
evalcond[4]=(((r12*x6274))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x6281))+((x6275*x6276)));
evalcond[5]=(((r22*x6274))+(((-1.0)*r21*x6281))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6275*x6278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6282=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6282.valid){
continue;
}
CheckValue<IkReal> x6283 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6282.value)))+(x6283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6284=IKsin(j4);
IkReal x6285=IKcos(j4);
IkReal x6286=(cj5*r10);
IkReal x6287=(cj5*r00);
IkReal x6288=(cj5*r20);
IkReal x6289=((1.0)*x6284);
IkReal x6290=(sj5*x6284);
IkReal x6291=((1.0)*sj5*x6285);
evalcond[0]=(((r22*x6285))+(((-1.0)*x6288*x6289))+((r21*x6290)));
evalcond[1]=(((r11*x6290))+((r12*x6285))+(((-1.0)*x6286*x6289)));
evalcond[2]=(((x6285*x6287))+(((-1.0)*r01*x6291))+((r02*x6284)));
evalcond[3]=((1.0)+((r01*x6290))+((r02*x6285))+(((-1.0)*x6287*x6289)));
evalcond[4]=(((cj2*sj1))+((x6285*x6286))+((cj1*sj2))+((r12*x6284))+(((-1.0)*r11*x6291)));
evalcond[5]=(((x6285*x6288))+(((-1.0)*r21*x6291))+((r22*x6284))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6292=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6292);
rxp1_1=(px*r21);
rxp1_2=(r11*x6292);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6293=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6293);
rxp1_1=(px*r21);
rxp1_2=(r11*x6293);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6294=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6294);
rxp1_1=(px*r21);
rxp1_2=(r11*x6294);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6297=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x6297.valid){
continue;
}
IkReal x6295=x6297.value;
IkReal x6296=(sj0*x6295);
cj4array[0]=(((cj2*sj1*x6296))+((cj1*sj2*x6296)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6298=IKsin(j4);
IkReal x6299=IKcos(j4);
IkReal x6300=(cj5*r20);
IkReal x6301=(r21*sj5);
IkReal x6302=((1.0)*x6298);
evalcond[0]=(r02*x6298);
evalcond[1]=((((-1.0)*sj0))+((r02*x6299)));
evalcond[2]=((((-1.0)*x6300*x6302))+((x6298*x6301)));
evalcond[3]=(((r11*sj5*x6298))+(((-1.0)*cj5*r10*x6302)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6299*x6301))+((x6299*x6300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6304=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x6304.valid){
continue;
}
IkReal x6303=x6304.value;
cj4array[0]=((((-1.0)*sj1*sj2*x6303))+((cj1*cj2*x6303)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6305=IKsin(j4);
IkReal x6306=IKcos(j4);
IkReal x6307=(r11*sj5);
IkReal x6308=((1.0)*sj0);
IkReal x6309=((1.0)*cj5*x6305);
evalcond[0]=(r02*x6305);
evalcond[1]=((((-1.0)*x6308))+((r02*x6306)));
evalcond[2]=(((r21*sj5*x6305))+(((-1.0)*r20*x6309)));
evalcond[3]=((((-1.0)*r10*x6309))+((x6305*x6307)));
evalcond[4]=((((-1.0)*cj2*sj1*x6308))+(((-1.0)*cj1*sj2*x6308))+((cj5*r10*x6306))+(((-1.0)*x6306*x6307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6310=IKPowWithIntegerCheck(r02,-1);
if(!x6310.valid){
continue;
}
cj4array[0]=(sj0*(x6310.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6311=IKsin(j4);
IkReal x6312=IKcos(j4);
IkReal x6313=((1.0)*cj1);
IkReal x6314=(cj5*x6312);
IkReal x6315=(sj5*x6311);
IkReal x6316=((1.0)*sj5*x6312);
IkReal x6317=((1.0)*cj5*x6311);
evalcond[0]=(r02*x6311);
evalcond[1]=(((r21*x6315))+(((-1.0)*r20*x6317)));
evalcond[2]=((((-1.0)*r10*x6317))+((r11*x6315)));
evalcond[3]=(((r20*x6314))+((sj1*sj2))+(((-1.0)*r21*x6316))+(((-1.0)*cj2*x6313)));
evalcond[4]=((((-1.0)*sj0*sj2*x6313))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r11*x6316))+((r10*x6314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6318=((1.0)*sj0);
IkReal x6319=((1.0)*cj0);
CheckValue<IkReal> x6320 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6319))+(((-1.0)*r12*x6318)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x6319))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x6318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6320.valid){
continue;
}
CheckValue<IkReal> x6321=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6320.value)+(((1.5707963267949)*(x6321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6322=IKsin(j4);
IkReal x6323=IKcos(j4);
IkReal x6324=(cj5*r10);
IkReal x6325=((1.0)*cj2);
IkReal x6326=(cj5*r00);
IkReal x6327=(cj5*r20);
IkReal x6328=((1.0)*x6322);
IkReal x6329=(sj5*x6322);
IkReal x6330=((1.0)*cj1*sj2);
IkReal x6331=((1.0)*sj5*x6323);
evalcond[0]=(((r22*x6323))+((r21*x6329))+(((-1.0)*x6327*x6328)));
evalcond[1]=(((r11*x6329))+cj0+((r12*x6323))+(((-1.0)*x6324*x6328)));
evalcond[2]=((((-1.0)*x6326*x6328))+((r02*x6323))+(((-1.0)*sj0))+((r01*x6329)));
evalcond[3]=((((-1.0)*r21*x6331))+((x6323*x6327))+((sj1*sj2))+(((-1.0)*cj1*x6325))+((r22*x6322)));
evalcond[4]=(((r02*x6322))+(((-1.0)*cj0*x6330))+((x6323*x6326))+(((-1.0)*cj0*sj1*x6325))+(((-1.0)*r01*x6331)));
evalcond[5]=((((-1.0)*r11*x6331))+((x6323*x6324))+((r12*x6322))+(((-1.0)*sj0*sj1*x6325))+(((-1.0)*sj0*x6330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6332=((1.0)*sj5);
CheckValue<IkReal> x6333=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6332)))),-1);
if(!x6333.valid){
continue;
}
CheckValue<IkReal> x6334 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6333.value)))+(x6334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6335=IKsin(j4);
IkReal x6336=IKcos(j4);
IkReal x6337=(cj5*r10);
IkReal x6338=((1.0)*cj2);
IkReal x6339=(cj5*r00);
IkReal x6340=(cj5*r20);
IkReal x6341=((1.0)*x6335);
IkReal x6342=(sj5*x6335);
IkReal x6343=((1.0)*cj1*sj2);
IkReal x6344=((1.0)*sj5*x6336);
evalcond[0]=((((-1.0)*x6340*x6341))+((r22*x6336))+((r21*x6342)));
evalcond[1]=(((r12*x6336))+cj0+(((-1.0)*x6337*x6341))+((r11*x6342)));
evalcond[2]=(((r02*x6336))+(((-1.0)*sj0))+(((-1.0)*x6339*x6341))+((r01*x6342)));
evalcond[3]=(((r22*x6335))+((sj1*sj2))+((x6336*x6340))+(((-1.0)*r21*x6344))+(((-1.0)*cj1*x6338)));
evalcond[4]=(((r02*x6335))+(((-1.0)*cj0*x6343))+((x6336*x6339))+(((-1.0)*cj0*sj1*x6338))+(((-1.0)*r01*x6344)));
evalcond[5]=((((-1.0)*r11*x6344))+((r12*x6335))+((x6336*x6337))+(((-1.0)*sj0*sj1*x6338))+(((-1.0)*sj0*x6343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6345=((1.0)*sj5);
CheckValue<IkReal> x6346 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6345))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6346.valid){
continue;
}
CheckValue<IkReal> x6347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6345))+(((-1.0)*cj5*r01)))),-1);
if(!x6347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6346.value)+(((1.5707963267949)*(x6347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6348=IKsin(j4);
IkReal x6349=IKcos(j4);
IkReal x6350=(cj5*r10);
IkReal x6351=((1.0)*cj2);
IkReal x6352=(cj5*r00);
IkReal x6353=(cj5*r20);
IkReal x6354=((1.0)*x6348);
IkReal x6355=(sj5*x6348);
IkReal x6356=((1.0)*cj1*sj2);
IkReal x6357=((1.0)*sj5*x6349);
evalcond[0]=(((r21*x6355))+((r22*x6349))+(((-1.0)*x6353*x6354)));
evalcond[1]=(((r12*x6349))+cj0+((r11*x6355))+(((-1.0)*x6350*x6354)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6349))+((r01*x6355))+(((-1.0)*x6352*x6354)));
evalcond[3]=((((-1.0)*r21*x6357))+((r22*x6348))+((x6349*x6353))+((sj1*sj2))+(((-1.0)*cj1*x6351)));
evalcond[4]=((((-1.0)*cj0*x6356))+(((-1.0)*r01*x6357))+((x6349*x6352))+(((-1.0)*cj0*sj1*x6351))+((r02*x6348)));
evalcond[5]=(((r12*x6348))+((x6349*x6350))+(((-1.0)*sj0*sj1*x6351))+(((-1.0)*sj0*x6356))+(((-1.0)*r11*x6357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6358=((1.0)*cj5);
IkReal x6359=((1.0)*sj5);
IkReal x6360=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x6360;
j0eval[1]=((IKabs(((((-1.0)*r00*x6359))+(((-1.0)*r01*x6358)))))+(IKabs(((((-1.0)*r10*x6359))+(((-1.0)*r11*x6358))))));
j0eval[2]=IKsign(x6360);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6361=cj5*cj5;
IkReal x6362=r21*r21;
IkReal x6363=(sj1*sj2);
IkReal x6364=(r21*sj5);
IkReal x6365=(cj1*cj2);
IkReal x6366=(cj5*r20);
IkReal x6367=(x6362+(r22*r22)+((x6361*(r20*r20)))+(((-2.0)*x6364*x6366))+(((-1.0)*x6361*x6362)));
j4eval[0]=x6367;
j4eval[1]=IKsign(x6367);
j4eval[2]=((IKabs(((((-1.0)*r22*x6365))+((r22*x6363)))))+(IKabs(((((-1.0)*x6365*x6366))+((x6363*x6366))+(((-1.0)*x6363*x6364))+((x6364*x6365))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.643432766549935)*px))+(((2.20454833129404)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20454833129404)*px))+(((0.643432766549935)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.643432766549935)*px))+(((2.20454833129404)*py))))+IKsqr(((((2.20454833129404)*px))+(((0.643432766549935)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.643432766549935)*px))+(((2.20454833129404)*py))), ((((2.20454833129404)*px))+(((0.643432766549935)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6368=IKcos(j0);
IkReal x6369=IKsin(j0);
evalcond[0]=((((-0.122)*x6369))+(((-1.0)*px))+(((0.418)*x6368)));
evalcond[1]=((((0.122)*x6368))+(((-1.0)*py))+(((0.418)*x6369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6370=((1.0)*sj5);
IkReal x6371=((((-1.0)*cj5*r01))+(((-1.0)*r00*x6370)));
j4eval[0]=x6371;
j4eval[1]=IKsign(x6371);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6370)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6372=((1.0)*sj5);
IkReal x6373=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6372)));
j4eval[0]=x6373;
j4eval[1]=IKsign(x6373);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6372)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6374=cj5*cj5;
IkReal x6375=(r11*r21);
IkReal x6376=((1.0)*r20);
IkReal x6377=(cj5*sj5);
IkReal x6378=(((r11*r20*x6377))+(((-1.0)*r12*r22))+((x6374*x6375))+(((-1.0)*r10*x6374*x6376))+(((-1.0)*x6375))+((r10*r21*x6377)));
j4eval[0]=x6378;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6376))))));
j4eval[2]=IKsign(x6378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6379=cj5*cj5;
IkReal x6380=(r11*r21);
IkReal x6381=(r21*sj5);
IkReal x6382=(cj5*r20);
CheckValue<IkReal> x6383=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6380))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x6379))+((r11*sj5*x6382))+((x6379*x6380))+((cj5*r10*x6381)))),-1);
if(!x6383.valid){
continue;
}
CheckValue<IkReal> x6384 = IKatan2WithCheck(IkReal((((cj0*x6381))+(((-1.0)*cj0*x6382)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6383.value)))+(x6384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6385=IKsin(j4);
IkReal x6386=IKcos(j4);
IkReal x6387=((1.0)*sj0);
IkReal x6388=(cj5*r00);
IkReal x6389=(cj5*r20);
IkReal x6390=(cj5*r10);
IkReal x6391=((1.0)*x6385);
IkReal x6392=((1.0)*x6386);
IkReal x6393=(sj5*x6386);
IkReal x6394=(sj5*x6385);
evalcond[0]=(((r22*x6386))+((r21*x6394))+(((-1.0)*x6389*x6391)));
evalcond[1]=(((r11*x6394))+cj0+(((-1.0)*x6390*x6391))+((r12*x6386)));
evalcond[2]=((((-1.0)*r22*x6391))+((r21*x6393))+(((-1.0)*x6389*x6392)));
evalcond[3]=((((-1.0)*x6387))+(((-1.0)*x6388*x6391))+((r02*x6386))+((r01*x6394)));
evalcond[4]=((((-1.0)*x6388*x6392))+((r01*x6393))+(((-1.0)*r02*x6391))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x6393))+(((-1.0)*x6387))+(((-1.0)*x6390*x6392))+(((-1.0)*r12*x6391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6395=((1.0)*sj5);
CheckValue<IkReal> x6396=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6395)))),-1);
if(!x6396.valid){
continue;
}
CheckValue<IkReal> x6397 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6396.value)))+(x6397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6398=IKsin(j4);
IkReal x6399=IKcos(j4);
IkReal x6400=((1.0)*sj0);
IkReal x6401=(cj5*r00);
IkReal x6402=(cj5*r20);
IkReal x6403=(cj5*r10);
IkReal x6404=((1.0)*x6398);
IkReal x6405=((1.0)*x6399);
IkReal x6406=(sj5*x6399);
IkReal x6407=(sj5*x6398);
evalcond[0]=((((-1.0)*x6402*x6404))+((r21*x6407))+((r22*x6399)));
evalcond[1]=((((-1.0)*x6403*x6404))+cj0+((r12*x6399))+((r11*x6407)));
evalcond[2]=((((-1.0)*x6402*x6405))+((r21*x6406))+(((-1.0)*r22*x6404)));
evalcond[3]=((((-1.0)*x6401*x6404))+((r01*x6407))+(((-1.0)*x6400))+((r02*x6399)));
evalcond[4]=((((-1.0)*x6401*x6405))+((r01*x6406))+(((-1.0)*r02*x6404))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6403*x6405))+(((-1.0)*x6400))+(((-1.0)*r12*x6404))+((r11*x6406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6408=((1.0)*sj5);
CheckValue<IkReal> x6409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6408))+(((-1.0)*cj5*r01)))),-1);
if(!x6409.valid){
continue;
}
CheckValue<IkReal> x6410 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6409.value)))+(x6410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6411=IKsin(j4);
IkReal x6412=IKcos(j4);
IkReal x6413=((1.0)*sj0);
IkReal x6414=(cj5*r00);
IkReal x6415=(cj5*r20);
IkReal x6416=(cj5*r10);
IkReal x6417=((1.0)*x6411);
IkReal x6418=((1.0)*x6412);
IkReal x6419=(sj5*x6412);
IkReal x6420=(sj5*x6411);
evalcond[0]=(((r21*x6420))+(((-1.0)*x6415*x6417))+((r22*x6412)));
evalcond[1]=(cj0+((r11*x6420))+(((-1.0)*x6416*x6417))+((r12*x6412)));
evalcond[2]=((((-1.0)*x6415*x6418))+((r21*x6419))+(((-1.0)*r22*x6417)));
evalcond[3]=((((-1.0)*x6414*x6417))+((r02*x6412))+(((-1.0)*x6413))+((r01*x6420)));
evalcond[4]=((((-1.0)*x6414*x6418))+((r01*x6419))+(((-1.0)*r02*x6417))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6413))+(((-1.0)*x6416*x6418))+(((-1.0)*r12*x6417))+((r11*x6419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.643432766549935)*px))+(((2.20454833129404)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20454833129404)*px))+(((0.643432766549935)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.643432766549935)*px))+(((2.20454833129404)*py))))+IKsqr(((((2.20454833129404)*px))+(((0.643432766549935)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.643432766549935)*px))+(((2.20454833129404)*py))), ((((2.20454833129404)*px))+(((0.643432766549935)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6421=IKcos(j0);
IkReal x6422=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.122)*x6422))+(((0.418)*x6421)));
evalcond[1]=((((0.122)*x6421))+(((-1.0)*py))+(((0.418)*x6422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6423=((1.0)*sj5);
IkReal x6424=((((-1.0)*r00*x6423))+(((-1.0)*cj5*r01)));
j4eval[0]=x6424;
j4eval[1]=IKsign(x6424);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6423))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6425=cj5*cj5;
IkReal x6426=((1.0)*r21);
IkReal x6427=(cj5*sj5);
IkReal x6428=(((r00*r20*x6425))+(((-1.0)*r00*x6426*x6427))+((r01*r21))+(((-1.0)*r01*r20*x6427))+(((-1.0)*r01*x6425*x6426))+((r02*r22)));
j4eval[0]=x6428;
j4eval[1]=IKsign(x6428);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x6426))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6429=cj5*cj5;
IkReal x6430=(cj5*r20);
IkReal x6431=((1.0)*sj5);
IkReal x6432=(r11*r21);
IkReal x6433=(((r10*r20*x6429))+x6432+((r12*r22))+(((-1.0)*r11*x6430*x6431))+(((-1.0)*x6429*x6432))+(((-1.0)*cj5*r10*r21*x6431)));
j4eval[0]=x6433;
j4eval[1]=IKsign(x6433);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x6431))+((sj0*x6430))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6434=cj5*cj5;
IkReal x6435=(cj5*r20);
IkReal x6436=((1.0)*sj5);
IkReal x6437=(r11*r21);
CheckValue<IkReal> x6438=IKPowWithIntegerCheck(IKsign((x6437+((r12*r22))+(((-1.0)*x6434*x6437))+((r10*r20*x6434))+(((-1.0)*r11*x6435*x6436))+(((-1.0)*cj5*r10*r21*x6436)))),-1);
if(!x6438.valid){
continue;
}
CheckValue<IkReal> x6439 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6436))+((sj0*x6435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6438.value)))+(x6439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6440=IKsin(j4);
IkReal x6441=IKcos(j4);
IkReal x6442=(cj5*r00);
IkReal x6443=(cj5*r20);
IkReal x6444=(cj5*r10);
IkReal x6445=((1.0)*x6440);
IkReal x6446=((1.0)*x6441);
IkReal x6447=(sj5*x6441);
IkReal x6448=(sj5*x6440);
evalcond[0]=(((r22*x6441))+((r21*x6448))+(((-1.0)*x6443*x6445)));
evalcond[1]=(((r12*x6441))+((r11*x6448))+cj0+(((-1.0)*x6444*x6445)));
evalcond[2]=(((r21*x6447))+(((-1.0)*x6443*x6446))+(((-1.0)*r22*x6445)));
evalcond[3]=(cj0+((r01*x6447))+(((-1.0)*r02*x6445))+(((-1.0)*x6442*x6446)));
evalcond[4]=(((r11*x6447))+sj0+(((-1.0)*x6444*x6446))+(((-1.0)*r12*x6445)));
evalcond[5]=((((-1.0)*sj0))+((r01*x6448))+(((-1.0)*x6442*x6445))+((r02*x6441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6449=cj5*cj5;
IkReal x6450=((1.0)*r21);
IkReal x6451=(cj5*sj5);
CheckValue<IkReal> x6452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x6450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6452.valid){
continue;
}
CheckValue<IkReal> x6453=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x6451))+((r01*r21))+(((-1.0)*r00*x6450*x6451))+((r02*r22))+(((-1.0)*r01*x6449*x6450))+((r00*r20*x6449)))),-1);
if(!x6453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6452.value)+(((1.5707963267949)*(x6453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6454=IKsin(j4);
IkReal x6455=IKcos(j4);
IkReal x6456=(cj5*r00);
IkReal x6457=(cj5*r20);
IkReal x6458=(cj5*r10);
IkReal x6459=((1.0)*x6454);
IkReal x6460=((1.0)*x6455);
IkReal x6461=(sj5*x6455);
IkReal x6462=(sj5*x6454);
evalcond[0]=(((r21*x6462))+((r22*x6455))+(((-1.0)*x6457*x6459)));
evalcond[1]=(cj0+((r11*x6462))+(((-1.0)*x6458*x6459))+((r12*x6455)));
evalcond[2]=((((-1.0)*x6457*x6460))+((r21*x6461))+(((-1.0)*r22*x6459)));
evalcond[3]=(cj0+(((-1.0)*r02*x6459))+((r01*x6461))+(((-1.0)*x6456*x6460)));
evalcond[4]=(sj0+(((-1.0)*x6458*x6460))+(((-1.0)*r12*x6459))+((r11*x6461)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6456*x6459))+((r01*x6462))+((r02*x6455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6463=((1.0)*sj5);
CheckValue<IkReal> x6464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6463))+(((-1.0)*cj5*r01)))),-1);
if(!x6464.valid){
continue;
}
CheckValue<IkReal> x6465 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6463))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6464.value)))+(x6465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6466=IKsin(j4);
IkReal x6467=IKcos(j4);
IkReal x6468=(cj5*r00);
IkReal x6469=(cj5*r20);
IkReal x6470=(cj5*r10);
IkReal x6471=((1.0)*x6466);
IkReal x6472=((1.0)*x6467);
IkReal x6473=(sj5*x6467);
IkReal x6474=(sj5*x6466);
evalcond[0]=(((r22*x6467))+(((-1.0)*x6469*x6471))+((r21*x6474)));
evalcond[1]=(cj0+((r11*x6474))+(((-1.0)*x6470*x6471))+((r12*x6467)));
evalcond[2]=((((-1.0)*r22*x6471))+(((-1.0)*x6469*x6472))+((r21*x6473)));
evalcond[3]=(cj0+(((-1.0)*x6468*x6472))+((r01*x6473))+(((-1.0)*r02*x6471)));
evalcond[4]=((((-1.0)*r12*x6471))+sj0+((r11*x6473))+(((-1.0)*x6470*x6472)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6468*x6471))+((r01*x6474))+((r02*x6467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.19672131018626)*py))+(((-0.000102794947578565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px))))+IKsqr(((((8.19672131018626)*py))+(((-0.000102794947578565)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px))), ((((8.19672131018626)*py))+(((-0.000102794947578565)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6475=IKcos(j0);
IkReal x6476=IKsin(j0);
evalcond[0]=((((-1.53e-6)*x6475))+(((-1.0)*px))+(((-0.122)*x6476)));
evalcond[1]=((((-1.53e-6)*x6476))+(((0.122)*x6475))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6477=((1.0)*sj5);
IkReal x6478=((((-1.0)*r00*x6477))+(((-1.0)*cj5*r01)));
j4eval[0]=x6478;
j4eval[1]=IKsign(x6478);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6477))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6479=((1.0)*sj5);
IkReal x6480=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6479)));
j4eval[0]=x6480;
j4eval[1]=IKsign(x6480);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6479)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6481=cj5*cj5;
IkReal x6482=(r11*r21);
IkReal x6483=((1.0)*r20);
IkReal x6484=(cj5*sj5);
IkReal x6485=((((-1.0)*x6482))+(((-1.0)*r10*x6481*x6483))+(((-1.0)*r12*r22))+((r10*r21*x6484))+((r11*r20*x6484))+((x6481*x6482)));
j4eval[0]=x6485;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x6483))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6486=cj5*cj5;
IkReal x6487=(r11*r21);
IkReal x6488=(r21*sj5);
IkReal x6489=(cj5*r20);
CheckValue<IkReal> x6490 = IKatan2WithCheck(IkReal((((cj0*x6488))+(((-1.0)*cj0*x6489)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6490.valid){
continue;
}
CheckValue<IkReal> x6491=IKPowWithIntegerCheck(IKsign((((x6486*x6487))+((r11*sj5*x6489))+(((-1.0)*x6487))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x6486))+((cj5*r10*x6488)))),-1);
if(!x6491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6490.value)+(((1.5707963267949)*(x6491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6492=IKsin(j4);
IkReal x6493=IKcos(j4);
IkReal x6494=((1.0)*sj0);
IkReal x6495=(cj5*r00);
IkReal x6496=(cj5*r20);
IkReal x6497=(cj5*r10);
IkReal x6498=((1.0)*x6492);
IkReal x6499=((1.0)*x6493);
IkReal x6500=(sj5*x6493);
IkReal x6501=(sj5*x6492);
evalcond[0]=(((r21*x6501))+(((-1.0)*x6496*x6498))+((r22*x6493)));
evalcond[1]=(cj0+((r12*x6493))+((r11*x6501))+(((-1.0)*x6497*x6498)));
evalcond[2]=((((-1.0)*r22*x6498))+((r21*x6500))+(((-1.0)*x6496*x6499)));
evalcond[3]=((((-1.0)*x6495*x6498))+(((-1.0)*x6494))+((r02*x6493))+((r01*x6501)));
evalcond[4]=((((-1.0)*x6495*x6499))+(((-1.0)*r02*x6498))+((r01*x6500))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6494))+(((-1.0)*r12*x6498))+((r11*x6500))+(((-1.0)*x6497*x6499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6502=((1.0)*sj5);
CheckValue<IkReal> x6503=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6502)))),-1);
if(!x6503.valid){
continue;
}
CheckValue<IkReal> x6504 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6503.value)))+(x6504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6505=IKsin(j4);
IkReal x6506=IKcos(j4);
IkReal x6507=((1.0)*sj0);
IkReal x6508=(cj5*r00);
IkReal x6509=(cj5*r20);
IkReal x6510=(cj5*r10);
IkReal x6511=((1.0)*x6505);
IkReal x6512=((1.0)*x6506);
IkReal x6513=(sj5*x6506);
IkReal x6514=(sj5*x6505);
evalcond[0]=(((r22*x6506))+((r21*x6514))+(((-1.0)*x6509*x6511)));
evalcond[1]=(((r12*x6506))+cj0+((r11*x6514))+(((-1.0)*x6510*x6511)));
evalcond[2]=((((-1.0)*r22*x6511))+((r21*x6513))+(((-1.0)*x6509*x6512)));
evalcond[3]=(((r02*x6506))+((r01*x6514))+(((-1.0)*x6507))+(((-1.0)*x6508*x6511)));
evalcond[4]=((((-1.0)*r02*x6511))+((r01*x6513))+(((-1.0)*x6508*x6512))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6507))+((r11*x6513))+(((-1.0)*r12*x6511))+(((-1.0)*x6510*x6512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6515=((1.0)*sj5);
CheckValue<IkReal> x6516=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6515))+(((-1.0)*cj5*r01)))),-1);
if(!x6516.valid){
continue;
}
CheckValue<IkReal> x6517 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6516.value)))+(x6517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6518=IKsin(j4);
IkReal x6519=IKcos(j4);
IkReal x6520=((1.0)*sj0);
IkReal x6521=(cj5*r00);
IkReal x6522=(cj5*r20);
IkReal x6523=(cj5*r10);
IkReal x6524=((1.0)*x6518);
IkReal x6525=((1.0)*x6519);
IkReal x6526=(sj5*x6519);
IkReal x6527=(sj5*x6518);
evalcond[0]=((((-1.0)*x6522*x6524))+((r21*x6527))+((r22*x6519)));
evalcond[1]=(cj0+((r12*x6519))+((r11*x6527))+(((-1.0)*x6523*x6524)));
evalcond[2]=((((-1.0)*x6522*x6525))+(((-1.0)*r22*x6524))+((r21*x6526)));
evalcond[3]=((((-1.0)*x6521*x6524))+(((-1.0)*x6520))+((r02*x6519))+((r01*x6527)));
evalcond[4]=((((-1.0)*x6521*x6525))+(((-1.0)*r02*x6524))+((r01*x6526))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6520))+(((-1.0)*r12*x6524))+((r11*x6526))+(((-1.0)*x6523*x6525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.19672131018626)*py))+(((-0.000102794947578565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px))))+IKsqr(((((8.19672131018626)*py))+(((-0.000102794947578565)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.000102794947578565)*py))+(((-8.19672131018626)*px))), ((((8.19672131018626)*py))+(((-0.000102794947578565)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6528=IKcos(j0);
IkReal x6529=IKsin(j0);
evalcond[0]=((((-1.53e-6)*x6528))+(((-0.122)*x6529))+(((-1.0)*px)));
evalcond[1]=((((0.122)*x6528))+(((-1.53e-6)*x6529))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6530=((1.0)*sj5);
IkReal x6531=((((-1.0)*r00*x6530))+(((-1.0)*cj5*r01)));
j4eval[0]=x6531;
j4eval[1]=IKsign(x6531);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6530))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6532=cj5*cj5;
IkReal x6533=((1.0)*r21);
IkReal x6534=(cj5*sj5);
IkReal x6535=(((r01*r21))+(((-1.0)*r00*x6533*x6534))+((r02*r22))+((r00*r20*x6532))+(((-1.0)*r01*r20*x6534))+(((-1.0)*r01*x6532*x6533)));
j4eval[0]=x6535;
j4eval[1]=IKsign(x6535);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x6533)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6536=cj5*cj5;
IkReal x6537=(cj5*r20);
IkReal x6538=((1.0)*sj5);
IkReal x6539=(r11*r21);
IkReal x6540=((((-1.0)*cj5*r10*r21*x6538))+((r12*r22))+x6539+(((-1.0)*r11*x6537*x6538))+(((-1.0)*x6536*x6539))+((r10*r20*x6536)));
j4eval[0]=x6540;
j4eval[1]=IKsign(x6540);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6537))+(((-1.0)*r21*sj0*x6538))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6541=cj5*cj5;
IkReal x6542=(cj5*r20);
IkReal x6543=((1.0)*sj5);
IkReal x6544=(r11*r21);
CheckValue<IkReal> x6545 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6543))+((sj0*x6542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6545.valid){
continue;
}
CheckValue<IkReal> x6546=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6541*x6544))+((r12*r22))+x6544+((r10*r20*x6541))+(((-1.0)*cj5*r10*r21*x6543))+(((-1.0)*r11*x6542*x6543)))),-1);
if(!x6546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6545.value)+(((1.5707963267949)*(x6546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6547=IKsin(j4);
IkReal x6548=IKcos(j4);
IkReal x6549=(cj5*r00);
IkReal x6550=(cj5*r20);
IkReal x6551=(cj5*r10);
IkReal x6552=((1.0)*x6547);
IkReal x6553=((1.0)*x6548);
IkReal x6554=(sj5*x6548);
IkReal x6555=(sj5*x6547);
evalcond[0]=((((-1.0)*x6550*x6552))+((r22*x6548))+((r21*x6555)));
evalcond[1]=((((-1.0)*x6551*x6552))+cj0+((r11*x6555))+((r12*x6548)));
evalcond[2]=((((-1.0)*r22*x6552))+(((-1.0)*x6550*x6553))+((r21*x6554)));
evalcond[3]=(cj0+(((-1.0)*r02*x6552))+(((-1.0)*x6549*x6553))+((r01*x6554)));
evalcond[4]=((((-1.0)*x6551*x6553))+sj0+(((-1.0)*r12*x6552))+((r11*x6554)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6548))+(((-1.0)*x6549*x6552))+((r01*x6555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6556=cj5*cj5;
IkReal x6557=((1.0)*r21);
IkReal x6558=(cj5*sj5);
CheckValue<IkReal> x6559=IKPowWithIntegerCheck(IKsign((((r00*r20*x6556))+(((-1.0)*r01*r20*x6558))+(((-1.0)*r01*x6556*x6557))+((r01*r21))+(((-1.0)*r00*x6557*x6558))+((r02*r22)))),-1);
if(!x6559.valid){
continue;
}
CheckValue<IkReal> x6560 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6557))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6559.value)))+(x6560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6561=IKsin(j4);
IkReal x6562=IKcos(j4);
IkReal x6563=(cj5*r00);
IkReal x6564=(cj5*r20);
IkReal x6565=(cj5*r10);
IkReal x6566=((1.0)*x6561);
IkReal x6567=((1.0)*x6562);
IkReal x6568=(sj5*x6562);
IkReal x6569=(sj5*x6561);
evalcond[0]=(((r22*x6562))+((r21*x6569))+(((-1.0)*x6564*x6566)));
evalcond[1]=((((-1.0)*x6565*x6566))+cj0+((r12*x6562))+((r11*x6569)));
evalcond[2]=((((-1.0)*r22*x6566))+((r21*x6568))+(((-1.0)*x6564*x6567)));
evalcond[3]=(cj0+(((-1.0)*x6563*x6567))+(((-1.0)*r02*x6566))+((r01*x6568)));
evalcond[4]=((((-1.0)*x6565*x6567))+sj0+((r11*x6568))+(((-1.0)*r12*x6566)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6562))+(((-1.0)*x6563*x6566))+((r01*x6569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6570=((1.0)*sj5);
CheckValue<IkReal> x6571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6570))+(((-1.0)*cj5*r01)))),-1);
if(!x6571.valid){
continue;
}
CheckValue<IkReal> x6572 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6571.value)))+(x6572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6573=IKsin(j4);
IkReal x6574=IKcos(j4);
IkReal x6575=(cj5*r00);
IkReal x6576=(cj5*r20);
IkReal x6577=(cj5*r10);
IkReal x6578=((1.0)*x6573);
IkReal x6579=((1.0)*x6574);
IkReal x6580=(sj5*x6574);
IkReal x6581=(sj5*x6573);
evalcond[0]=(((r22*x6574))+(((-1.0)*x6576*x6578))+((r21*x6581)));
evalcond[1]=(((r11*x6581))+cj0+(((-1.0)*x6577*x6578))+((r12*x6574)));
evalcond[2]=((((-1.0)*x6576*x6579))+((r21*x6580))+(((-1.0)*r22*x6578)));
evalcond[3]=(cj0+((r01*x6580))+(((-1.0)*x6575*x6579))+(((-1.0)*r02*x6578)));
evalcond[4]=(sj0+((r11*x6580))+(((-1.0)*x6577*x6579))+(((-1.0)*r12*x6578)));
evalcond[5]=((((-1.0)*sj0))+((r01*x6581))+(((-1.0)*x6575*x6578))+((r02*x6574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.643432766549935)*px))+(((-2.20454833129404)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.643432766549935)*py))+(((-2.20454833129404)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.643432766549935)*px))+(((-2.20454833129404)*py))))+IKsqr(((((0.643432766549935)*py))+(((-2.20454833129404)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.643432766549935)*px))+(((-2.20454833129404)*py))), ((((0.643432766549935)*py))+(((-2.20454833129404)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6582=IKcos(j0);
IkReal x6583=IKsin(j0);
evalcond[0]=((((-0.418)*x6582))+(((-1.0)*px))+(((-0.122)*x6583)));
evalcond[1]=((((-0.418)*x6583))+(((-1.0)*py))+(((0.122)*x6582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6584=((1.0)*sj5);
IkReal x6585=((((-1.0)*r00*x6584))+(((-1.0)*cj5*r01)));
j4eval[0]=x6585;
j4eval[1]=IKsign(x6585);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6584))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6586=cj5*cj5;
IkReal x6587=((1.0)*r21);
IkReal x6588=(cj5*sj5);
IkReal x6589=((((-1.0)*r01*r20*x6588))+((r01*r21))+(((-1.0)*r01*x6586*x6587))+((r00*r20*x6586))+(((-1.0)*r00*x6587*x6588))+((r02*r22)));
j4eval[0]=x6589;
j4eval[1]=IKsign(x6589);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x6587)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6590=cj5*cj5;
IkReal x6591=(cj5*r20);
IkReal x6592=((1.0)*sj5);
IkReal x6593=(r11*r21);
IkReal x6594=((((-1.0)*cj5*r10*r21*x6592))+((r12*r22))+x6593+(((-1.0)*x6590*x6593))+(((-1.0)*r11*x6591*x6592))+((r10*r20*x6590)));
j4eval[0]=x6594;
j4eval[1]=IKsign(x6594);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6591))+(((-1.0)*r21*sj0*x6592))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6595=cj5*cj5;
IkReal x6596=(cj5*r20);
IkReal x6597=((1.0)*sj5);
IkReal x6598=(r11*r21);
CheckValue<IkReal> x6599 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6596))+(((-1.0)*r21*sj0*x6597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6599.valid){
continue;
}
CheckValue<IkReal> x6600=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6597))+(((-1.0)*r11*x6596*x6597))+((r12*r22))+x6598+(((-1.0)*x6595*x6598))+((r10*r20*x6595)))),-1);
if(!x6600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6599.value)+(((1.5707963267949)*(x6600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6601=IKsin(j4);
IkReal x6602=IKcos(j4);
IkReal x6603=(cj5*r00);
IkReal x6604=(cj5*r20);
IkReal x6605=(cj5*r10);
IkReal x6606=((1.0)*x6601);
IkReal x6607=((1.0)*x6602);
IkReal x6608=(sj5*x6602);
IkReal x6609=(sj5*x6601);
evalcond[0]=(((r22*x6602))+(((-1.0)*x6604*x6606))+((r21*x6609)));
evalcond[1]=(cj0+((r11*x6609))+(((-1.0)*x6605*x6606))+((r12*x6602)));
evalcond[2]=((((-1.0)*r22*x6606))+(((-1.0)*x6604*x6607))+((r21*x6608)));
evalcond[3]=(cj0+((r01*x6608))+(((-1.0)*r02*x6606))+(((-1.0)*x6603*x6607)));
evalcond[4]=(sj0+(((-1.0)*r12*x6606))+((r11*x6608))+(((-1.0)*x6605*x6607)));
evalcond[5]=((((-1.0)*sj0))+((r01*x6609))+(((-1.0)*x6603*x6606))+((r02*x6602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6610=cj5*cj5;
IkReal x6611=((1.0)*r21);
IkReal x6612=(cj5*sj5);
CheckValue<IkReal> x6613 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6611))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6613.valid){
continue;
}
CheckValue<IkReal> x6614=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x6612))+((r00*r20*x6610))+(((-1.0)*r01*x6610*x6611))+((r01*r21))+(((-1.0)*r00*x6611*x6612))+((r02*r22)))),-1);
if(!x6614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6613.value)+(((1.5707963267949)*(x6614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6615=IKsin(j4);
IkReal x6616=IKcos(j4);
IkReal x6617=(cj5*r00);
IkReal x6618=(cj5*r20);
IkReal x6619=(cj5*r10);
IkReal x6620=((1.0)*x6615);
IkReal x6621=((1.0)*x6616);
IkReal x6622=(sj5*x6616);
IkReal x6623=(sj5*x6615);
evalcond[0]=((((-1.0)*x6618*x6620))+((r22*x6616))+((r21*x6623)));
evalcond[1]=(cj0+(((-1.0)*x6619*x6620))+((r12*x6616))+((r11*x6623)));
evalcond[2]=((((-1.0)*r22*x6620))+(((-1.0)*x6618*x6621))+((r21*x6622)));
evalcond[3]=(cj0+((r01*x6622))+(((-1.0)*r02*x6620))+(((-1.0)*x6617*x6621)));
evalcond[4]=(sj0+(((-1.0)*r12*x6620))+(((-1.0)*x6619*x6621))+((r11*x6622)));
evalcond[5]=(((r02*x6616))+(((-1.0)*sj0))+((r01*x6623))+(((-1.0)*x6617*x6620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6624=((1.0)*sj5);
CheckValue<IkReal> x6625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6624))+(((-1.0)*cj5*r01)))),-1);
if(!x6625.valid){
continue;
}
CheckValue<IkReal> x6626 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6625.value)))+(x6626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6627=IKsin(j4);
IkReal x6628=IKcos(j4);
IkReal x6629=(cj5*r00);
IkReal x6630=(cj5*r20);
IkReal x6631=(cj5*r10);
IkReal x6632=((1.0)*x6627);
IkReal x6633=((1.0)*x6628);
IkReal x6634=(sj5*x6628);
IkReal x6635=(sj5*x6627);
evalcond[0]=(((r21*x6635))+(((-1.0)*x6630*x6632))+((r22*x6628)));
evalcond[1]=(cj0+((r12*x6628))+((r11*x6635))+(((-1.0)*x6631*x6632)));
evalcond[2]=((((-1.0)*r22*x6632))+((r21*x6634))+(((-1.0)*x6630*x6633)));
evalcond[3]=(cj0+((r01*x6634))+(((-1.0)*x6629*x6633))+(((-1.0)*r02*x6632)));
evalcond[4]=(sj0+((r11*x6634))+(((-1.0)*r12*x6632))+(((-1.0)*x6631*x6633)));
evalcond[5]=(((r02*x6628))+(((-1.0)*sj0))+((r01*x6635))+(((-1.0)*x6629*x6632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.643432766549935)*px))+(((-2.20454833129404)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.643432766549935)*py))+(((-2.20454833129404)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.643432766549935)*px))+(((-2.20454833129404)*py))))+IKsqr(((((0.643432766549935)*py))+(((-2.20454833129404)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.643432766549935)*px))+(((-2.20454833129404)*py))), ((((0.643432766549935)*py))+(((-2.20454833129404)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6636=IKcos(j0);
IkReal x6637=IKsin(j0);
evalcond[0]=((((-0.418)*x6636))+(((-1.0)*px))+(((-0.122)*x6637)));
evalcond[1]=((((-0.418)*x6637))+(((-1.0)*py))+(((0.122)*x6636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6638=((1.0)*sj5);
IkReal x6639=((((-1.0)*r00*x6638))+(((-1.0)*cj5*r01)));
j4eval[0]=x6639;
j4eval[1]=IKsign(x6639);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6638)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6640=((1.0)*sj5);
IkReal x6641=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6640)));
j4eval[0]=x6641;
j4eval[1]=IKsign(x6641);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6640))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6642=cj5*cj5;
IkReal x6643=(r11*r21);
IkReal x6644=((1.0)*r20);
IkReal x6645=(cj5*sj5);
IkReal x6646=((((-1.0)*x6643))+(((-1.0)*r12*r22))+((x6642*x6643))+((r11*r20*x6645))+(((-1.0)*r10*x6642*x6644))+((r10*r21*x6645)));
j4eval[0]=x6646;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6644)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6646);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6647=cj5*cj5;
IkReal x6648=(r11*r21);
IkReal x6649=(r21*sj5);
IkReal x6650=(cj5*r20);
CheckValue<IkReal> x6651 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x6650))+((cj0*x6649)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6651.valid){
continue;
}
CheckValue<IkReal> x6652=IKPowWithIntegerCheck(IKsign((((r11*sj5*x6650))+((cj5*r10*x6649))+(((-1.0)*x6648))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x6647))+((x6647*x6648)))),-1);
if(!x6652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6651.value)+(((1.5707963267949)*(x6652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6653=IKsin(j4);
IkReal x6654=IKcos(j4);
IkReal x6655=((1.0)*sj0);
IkReal x6656=(cj5*r00);
IkReal x6657=(cj5*r20);
IkReal x6658=(cj5*r10);
IkReal x6659=((1.0)*x6653);
IkReal x6660=((1.0)*x6654);
IkReal x6661=(sj5*x6654);
IkReal x6662=(sj5*x6653);
evalcond[0]=((((-1.0)*x6657*x6659))+((r21*x6662))+((r22*x6654)));
evalcond[1]=(cj0+(((-1.0)*x6658*x6659))+((r12*x6654))+((r11*x6662)));
evalcond[2]=((((-1.0)*r22*x6659))+(((-1.0)*x6657*x6660))+((r21*x6661)));
evalcond[3]=((((-1.0)*x6655))+((r02*x6654))+((r01*x6662))+(((-1.0)*x6656*x6659)));
evalcond[4]=(((r01*x6661))+(((-1.0)*r02*x6659))+(((-1.0)*x6656*x6660))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6658*x6660))+(((-1.0)*x6655))+(((-1.0)*r12*x6659))+((r11*x6661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6663=((1.0)*sj5);
CheckValue<IkReal> x6664 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6663))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6664.valid){
continue;
}
CheckValue<IkReal> x6665=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6663)))),-1);
if(!x6665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6664.value)+(((1.5707963267949)*(x6665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6666=IKsin(j4);
IkReal x6667=IKcos(j4);
IkReal x6668=((1.0)*sj0);
IkReal x6669=(cj5*r00);
IkReal x6670=(cj5*r20);
IkReal x6671=(cj5*r10);
IkReal x6672=((1.0)*x6666);
IkReal x6673=((1.0)*x6667);
IkReal x6674=(sj5*x6667);
IkReal x6675=(sj5*x6666);
evalcond[0]=((((-1.0)*x6670*x6672))+((r22*x6667))+((r21*x6675)));
evalcond[1]=(((r11*x6675))+cj0+(((-1.0)*x6671*x6672))+((r12*x6667)));
evalcond[2]=((((-1.0)*x6670*x6673))+(((-1.0)*r22*x6672))+((r21*x6674)));
evalcond[3]=((((-1.0)*x6669*x6672))+((r02*x6667))+(((-1.0)*x6668))+((r01*x6675)));
evalcond[4]=((((-1.0)*r02*x6672))+(((-1.0)*x6669*x6673))+((r01*x6674))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x6674))+(((-1.0)*x6671*x6673))+(((-1.0)*r12*x6672))+(((-1.0)*x6668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6676=((1.0)*sj5);
CheckValue<IkReal> x6677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6676))+(((-1.0)*cj5*r01)))),-1);
if(!x6677.valid){
continue;
}
CheckValue<IkReal> x6678 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6676))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6677.value)))+(x6678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6679=IKsin(j4);
IkReal x6680=IKcos(j4);
IkReal x6681=((1.0)*sj0);
IkReal x6682=(cj5*r00);
IkReal x6683=(cj5*r20);
IkReal x6684=(cj5*r10);
IkReal x6685=((1.0)*x6679);
IkReal x6686=((1.0)*x6680);
IkReal x6687=(sj5*x6680);
IkReal x6688=(sj5*x6679);
evalcond[0]=((((-1.0)*x6683*x6685))+((r22*x6680))+((r21*x6688)));
evalcond[1]=(((r12*x6680))+cj0+((r11*x6688))+(((-1.0)*x6684*x6685)));
evalcond[2]=((((-1.0)*x6683*x6686))+((r21*x6687))+(((-1.0)*r22*x6685)));
evalcond[3]=(((r02*x6680))+((r01*x6688))+(((-1.0)*x6681))+(((-1.0)*x6682*x6685)));
evalcond[4]=((((-1.0)*r02*x6685))+((r01*x6687))+(((-1.0)*x6682*x6686))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x6687))+(((-1.0)*x6684*x6686))+(((-1.0)*x6681))+(((-1.0)*r12*x6685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.19672131018626)*px))+(((0.000102794947578565)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.19672131018626)*py))+(((0.000102794947578565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.19672131018626)*px))+(((0.000102794947578565)*py))))+IKsqr(((((8.19672131018626)*py))+(((0.000102794947578565)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.19672131018626)*px))+(((0.000102794947578565)*py))), ((((8.19672131018626)*py))+(((0.000102794947578565)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6689=IKcos(j0);
IkReal x6690=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((1.53e-6)*x6689))+(((-0.122)*x6690)));
evalcond[1]=((((1.53e-6)*x6690))+(((-1.0)*py))+(((0.122)*x6689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6691=((1.0)*sj5);
IkReal x6692=((((-1.0)*r00*x6691))+(((-1.0)*cj5*r01)));
j4eval[0]=x6692;
j4eval[1]=IKsign(x6692);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x6691))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6693=cj5*cj5;
IkReal x6694=((1.0)*r21);
IkReal x6695=(cj5*sj5);
IkReal x6696=(((r00*r20*x6693))+(((-1.0)*r01*r20*x6695))+((r01*r21))+(((-1.0)*r01*x6693*x6694))+((r02*r22))+(((-1.0)*r00*x6694*x6695)));
j4eval[0]=x6696;
j4eval[1]=IKsign(x6696);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x6694))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6697=cj5*cj5;
IkReal x6698=(cj5*r20);
IkReal x6699=((1.0)*sj5);
IkReal x6700=(r11*r21);
IkReal x6701=(x6700+((r12*r22))+((r10*r20*x6697))+(((-1.0)*x6697*x6700))+(((-1.0)*cj5*r10*r21*x6699))+(((-1.0)*r11*x6698*x6699)));
j4eval[0]=x6701;
j4eval[1]=IKsign(x6701);
j4eval[2]=((IKabs((((sj0*x6698))+(((-1.0)*r21*sj0*x6699)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6702=cj5*cj5;
IkReal x6703=(cj5*r20);
IkReal x6704=((1.0)*sj5);
IkReal x6705=(r11*r21);
CheckValue<IkReal> x6706=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6702*x6705))+x6705+((r12*r22))+(((-1.0)*cj5*r10*r21*x6704))+((r10*r20*x6702))+(((-1.0)*r11*x6703*x6704)))),-1);
if(!x6706.valid){
continue;
}
CheckValue<IkReal> x6707 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6704))+((sj0*x6703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6706.value)))+(x6707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6708=IKsin(j4);
IkReal x6709=IKcos(j4);
IkReal x6710=(cj5*r00);
IkReal x6711=(cj5*r20);
IkReal x6712=(cj5*r10);
IkReal x6713=((1.0)*x6708);
IkReal x6714=((1.0)*x6709);
IkReal x6715=(sj5*x6709);
IkReal x6716=(sj5*x6708);
evalcond[0]=((((-1.0)*x6711*x6713))+((r21*x6716))+((r22*x6709)));
evalcond[1]=(cj0+((r11*x6716))+(((-1.0)*x6712*x6713))+((r12*x6709)));
evalcond[2]=((((-1.0)*x6711*x6714))+((r21*x6715))+(((-1.0)*r22*x6713)));
evalcond[3]=(cj0+(((-1.0)*x6710*x6714))+(((-1.0)*r02*x6713))+((r01*x6715)));
evalcond[4]=(sj0+((r11*x6715))+(((-1.0)*x6712*x6714))+(((-1.0)*r12*x6713)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6710*x6713))+((r01*x6716))+((r02*x6709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6717=cj5*cj5;
IkReal x6718=((1.0)*r21);
IkReal x6719=(cj5*sj5);
CheckValue<IkReal> x6720 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x6718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6720.valid){
continue;
}
CheckValue<IkReal> x6721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6718*x6719))+((r00*r20*x6717))+((r01*r21))+(((-1.0)*r01*r20*x6719))+(((-1.0)*r01*x6717*x6718))+((r02*r22)))),-1);
if(!x6721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6720.value)+(((1.5707963267949)*(x6721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6722=IKsin(j4);
IkReal x6723=IKcos(j4);
IkReal x6724=(cj5*r00);
IkReal x6725=(cj5*r20);
IkReal x6726=(cj5*r10);
IkReal x6727=((1.0)*x6722);
IkReal x6728=((1.0)*x6723);
IkReal x6729=(sj5*x6723);
IkReal x6730=(sj5*x6722);
evalcond[0]=(((r21*x6730))+((r22*x6723))+(((-1.0)*x6725*x6727)));
evalcond[1]=(((r12*x6723))+cj0+((r11*x6730))+(((-1.0)*x6726*x6727)));
evalcond[2]=((((-1.0)*r22*x6727))+((r21*x6729))+(((-1.0)*x6725*x6728)));
evalcond[3]=((((-1.0)*x6724*x6728))+cj0+(((-1.0)*r02*x6727))+((r01*x6729)));
evalcond[4]=(((r11*x6729))+sj0+(((-1.0)*r12*x6727))+(((-1.0)*x6726*x6728)));
evalcond[5]=((((-1.0)*x6724*x6727))+(((-1.0)*sj0))+((r02*x6723))+((r01*x6730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6731=((1.0)*sj5);
CheckValue<IkReal> x6732 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6732.valid){
continue;
}
CheckValue<IkReal> x6733=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6731))+(((-1.0)*cj5*r01)))),-1);
if(!x6733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6732.value)+(((1.5707963267949)*(x6733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6734=IKsin(j4);
IkReal x6735=IKcos(j4);
IkReal x6736=(cj5*r00);
IkReal x6737=(cj5*r20);
IkReal x6738=(cj5*r10);
IkReal x6739=((1.0)*x6734);
IkReal x6740=((1.0)*x6735);
IkReal x6741=(sj5*x6735);
IkReal x6742=(sj5*x6734);
evalcond[0]=(((r22*x6735))+((r21*x6742))+(((-1.0)*x6737*x6739)));
evalcond[1]=(cj0+((r11*x6742))+((r12*x6735))+(((-1.0)*x6738*x6739)));
evalcond[2]=((((-1.0)*r22*x6739))+((r21*x6741))+(((-1.0)*x6737*x6740)));
evalcond[3]=(cj0+(((-1.0)*r02*x6739))+(((-1.0)*x6736*x6740))+((r01*x6741)));
evalcond[4]=(sj0+(((-1.0)*r12*x6739))+((r11*x6741))+(((-1.0)*x6738*x6740)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6736*x6739))+((r01*x6742))+((r02*x6735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.19672131018626)*px))+(((0.000102794947578565)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.19672131018626)*py))+(((0.000102794947578565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.19672131018626)*px))+(((0.000102794947578565)*py))))+IKsqr(((((8.19672131018626)*py))+(((0.000102794947578565)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.19672131018626)*px))+(((0.000102794947578565)*py))), ((((8.19672131018626)*py))+(((0.000102794947578565)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6743=IKcos(j0);
IkReal x6744=IKsin(j0);
evalcond[0]=((((1.53e-6)*x6743))+(((-0.122)*x6744))+(((-1.0)*px)));
evalcond[1]=((((1.53e-6)*x6744))+(((-1.0)*py))+(((0.122)*x6743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6745=((1.0)*sj5);
IkReal x6746=((((-1.0)*r00*x6745))+(((-1.0)*cj5*r01)));
j4eval[0]=x6746;
j4eval[1]=IKsign(x6746);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6745)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6747=((1.0)*sj5);
IkReal x6748=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6747)));
j4eval[0]=x6748;
j4eval[1]=IKsign(x6748);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6747))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6749=cj5*cj5;
IkReal x6750=(r11*r21);
IkReal x6751=((1.0)*r20);
IkReal x6752=(cj5*sj5);
IkReal x6753=(((r10*r21*x6752))+(((-1.0)*r12*r22))+(((-1.0)*x6750))+((x6749*x6750))+((r11*r20*x6752))+(((-1.0)*r10*x6749*x6751)));
j4eval[0]=x6753;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6751)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6753);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6754=cj5*cj5;
IkReal x6755=(r11*r21);
IkReal x6756=(r21*sj5);
IkReal x6757=(cj5*r20);
CheckValue<IkReal> x6758 = IKatan2WithCheck(IkReal((((cj0*x6756))+(((-1.0)*cj0*x6757)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6758.valid){
continue;
}
CheckValue<IkReal> x6759=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x6754))+(((-1.0)*x6755))+((cj5*r10*x6756))+((r11*sj5*x6757))+((x6754*x6755)))),-1);
if(!x6759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6758.value)+(((1.5707963267949)*(x6759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6760=IKsin(j4);
IkReal x6761=IKcos(j4);
IkReal x6762=((1.0)*sj0);
IkReal x6763=(cj5*r00);
IkReal x6764=(cj5*r20);
IkReal x6765=(cj5*r10);
IkReal x6766=((1.0)*x6760);
IkReal x6767=((1.0)*x6761);
IkReal x6768=(sj5*x6761);
IkReal x6769=(sj5*x6760);
evalcond[0]=(((r22*x6761))+((r21*x6769))+(((-1.0)*x6764*x6766)));
evalcond[1]=(((r12*x6761))+cj0+((r11*x6769))+(((-1.0)*x6765*x6766)));
evalcond[2]=((((-1.0)*r22*x6766))+((r21*x6768))+(((-1.0)*x6764*x6767)));
evalcond[3]=(((r01*x6769))+(((-1.0)*x6762))+((r02*x6761))+(((-1.0)*x6763*x6766)));
evalcond[4]=(((r01*x6768))+(((-1.0)*r02*x6766))+(((-1.0)*x6763*x6767))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x6768))+(((-1.0)*x6765*x6767))+(((-1.0)*x6762))+(((-1.0)*r12*x6766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6770=((1.0)*sj5);
CheckValue<IkReal> x6771 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6770))+((cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6771.valid){
continue;
}
CheckValue<IkReal> x6772=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6770)))),-1);
if(!x6772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6771.value)+(((1.5707963267949)*(x6772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6773=IKsin(j4);
IkReal x6774=IKcos(j4);
IkReal x6775=((1.0)*sj0);
IkReal x6776=(cj5*r00);
IkReal x6777=(cj5*r20);
IkReal x6778=(cj5*r10);
IkReal x6779=((1.0)*x6773);
IkReal x6780=((1.0)*x6774);
IkReal x6781=(sj5*x6774);
IkReal x6782=(sj5*x6773);
evalcond[0]=((((-1.0)*x6777*x6779))+((r22*x6774))+((r21*x6782)));
evalcond[1]=((((-1.0)*x6778*x6779))+((r12*x6774))+cj0+((r11*x6782)));
evalcond[2]=((((-1.0)*r22*x6779))+((r21*x6781))+(((-1.0)*x6777*x6780)));
evalcond[3]=((((-1.0)*x6775))+((r02*x6774))+(((-1.0)*x6776*x6779))+((r01*x6782)));
evalcond[4]=((((-1.0)*r02*x6779))+((r01*x6781))+(((-1.0)*x6776*x6780))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6775))+((r11*x6781))+(((-1.0)*x6778*x6780))+(((-1.0)*r12*x6779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6783=((1.0)*sj5);
CheckValue<IkReal> x6784 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6784.valid){
continue;
}
CheckValue<IkReal> x6785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6783))+(((-1.0)*cj5*r01)))),-1);
if(!x6785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6784.value)+(((1.5707963267949)*(x6785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6786=IKsin(j4);
IkReal x6787=IKcos(j4);
IkReal x6788=((1.0)*sj0);
IkReal x6789=(cj5*r00);
IkReal x6790=(cj5*r20);
IkReal x6791=(cj5*r10);
IkReal x6792=((1.0)*x6786);
IkReal x6793=((1.0)*x6787);
IkReal x6794=(sj5*x6787);
IkReal x6795=(sj5*x6786);
evalcond[0]=(((r21*x6795))+((r22*x6787))+(((-1.0)*x6790*x6792)));
evalcond[1]=(((r12*x6787))+cj0+((r11*x6795))+(((-1.0)*x6791*x6792)));
evalcond[2]=(((r21*x6794))+(((-1.0)*r22*x6792))+(((-1.0)*x6790*x6793)));
evalcond[3]=((((-1.0)*x6788))+(((-1.0)*x6789*x6792))+((r01*x6795))+((r02*x6787)));
evalcond[4]=((((-1.0)*x6789*x6793))+((r01*x6794))+(((-1.0)*cj0))+(((-1.0)*r02*x6792)));
evalcond[5]=((((-1.0)*x6788))+((r11*x6794))+(((-1.0)*x6791*x6793))+(((-1.0)*r12*x6792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6796=(sj1*sj2);
IkReal x6797=((248.0)*cj2);
IkReal x6798=(r00*sj5);
IkReal x6799=(cj5*r01);
IkReal x6800=((0.000765)*sj1);
IkReal x6801=((500.0)*px);
IkReal x6802=(cj1*cj2);
IkReal x6803=(cj1*x6799);
CheckValue<IkReal> x6804=IKPowWithIntegerCheck(((((-61.0)*x6802))+(((61.0)*x6796))),-1);
if(!x6804.valid){
continue;
}
CheckValue<IkReal> x6805=IKPowWithIntegerCheck((x6796+(((-1.0)*x6802))),-1);
if(!x6805.valid){
continue;
}
if( IKabs(((x6804.value)*(((((-1.0)*x6796*x6801))+((x6801*x6802))+(((-1.0)*cj1*x6797*x6798))+((x6799*x6800))+(((-1.0)*x6797*x6803))+((x6798*x6800))+(((-209.0)*x6803))+(((248.0)*x6796*x6798))+(((248.0)*x6796*x6799))+(((-209.0)*cj1*x6798)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6805.value)*(((((-1.0)*x6799))+(((-1.0)*x6798)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6804.value)*(((((-1.0)*x6796*x6801))+((x6801*x6802))+(((-1.0)*cj1*x6797*x6798))+((x6799*x6800))+(((-1.0)*x6797*x6803))+((x6798*x6800))+(((-209.0)*x6803))+(((248.0)*x6796*x6798))+(((248.0)*x6796*x6799))+(((-209.0)*cj1*x6798))))))+IKsqr(((x6805.value)*(((((-1.0)*x6799))+(((-1.0)*x6798))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6804.value)*(((((-1.0)*x6796*x6801))+((x6801*x6802))+(((-1.0)*cj1*x6797*x6798))+((x6799*x6800))+(((-1.0)*x6797*x6803))+((x6798*x6800))+(((-209.0)*x6803))+(((248.0)*x6796*x6798))+(((248.0)*x6796*x6799))+(((-209.0)*cj1*x6798))))), ((x6805.value)*(((((-1.0)*x6799))+(((-1.0)*x6798))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6806=IKcos(j0);
IkReal x6807=IKsin(j0);
IkReal x6808=(cj5*r01);
IkReal x6809=((0.098)*sj5);
IkReal x6810=(cj5*r11);
IkReal x6811=((1.53e-6)*sj1);
IkReal x6812=((1.0)*cj2);
IkReal x6813=((0.398)*cj1*cj2);
IkReal x6814=(cj1*x6807);
IkReal x6815=(cj1*x6806);
IkReal x6816=(sj1*sj2*x6806);
IkReal x6817=(sj1*sj2*x6807);
evalcond[0]=(((r00*sj5))+x6816+x6808+(((-1.0)*x6812*x6815)));
evalcond[1]=(((r10*sj5))+x6810+x6817+(((-1.0)*x6812*x6814)));
evalcond[2]=((((0.418)*x6815))+(((-0.398)*x6816))+(((-0.122)*x6807))+((r00*x6809))+(((-1.0)*x6806*x6811))+(((-1.0)*px))+((x6806*x6813))+(((0.098)*x6808)));
evalcond[3]=(((x6807*x6813))+(((0.098)*x6810))+(((0.418)*x6814))+(((-0.398)*x6817))+(((-1.0)*x6807*x6811))+(((-1.0)*py))+((r10*x6809))+(((0.122)*x6806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6818=((1.0)*sj5);
IkReal x6819=((((-1.0)*r00*x6818))+(((-1.0)*cj5*r01)));
j4eval[0]=x6819;
j4eval[1]=IKsign(x6819);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6818))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6820=((1.0)*sj5);
IkReal x6821=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6820)));
j4eval[0]=x6821;
j4eval[1]=IKsign(x6821);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6820))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6822=((1.0)*sj0);
IkReal x6823=((1.0)*cj0);
IkReal x6824=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6824;
j4eval[1]=((IKabs(((((-1.0)*r02*x6823))+(((-1.0)*r12*x6822)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x6823))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x6822))))));
j4eval[2]=IKsign(x6824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6825=((-1.0)*r20);
IkReal x6827 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6827)==0){
continue;
}
IkReal x6826=pow(x6827,-0.5);
CheckValue<IkReal> x6828 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6825),IKFAST_ATAN2_MAGTHRESH);
if(!x6828.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6828.value));
IkReal gconst133=(r21*x6826);
IkReal gconst134=(x6825*x6826);
CheckValue<IkReal> x6829 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6829.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6829.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6830=((-1.0)*r20);
IkReal x6831=x6826;
CheckValue<IkReal> x6833 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6830),IKFAST_ATAN2_MAGTHRESH);
if(!x6833.valid){
continue;
}
IkReal x6832=((-1.0)*(x6833.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6832;
IkReal gconst132=x6832;
IkReal gconst133=(r21*x6831);
IkReal gconst134=(x6830*x6831);
IkReal x6834=r22*r22;
IkReal x6835=((1.0)*x6834);
CheckValue<IkReal> x6839=IKPowWithIntegerCheck(((-1.0)+x6834),-1);
if(!x6839.valid){
continue;
}
IkReal x6836=x6839.value;
if((((1.0)+(((-1.0)*x6835)))) < -0.00001)
continue;
IkReal x6837=IKsqrt(((1.0)+(((-1.0)*x6835))));
IkReal x6838=(cj0*x6836*x6837);
j4eval[0]=((IKabs((x6838+(((-1.0)*x6835*x6838)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6840=((-1.0)*r20);
IkReal x6841=x6826;
CheckValue<IkReal> x6843 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6840),IKFAST_ATAN2_MAGTHRESH);
if(!x6843.valid){
continue;
}
IkReal x6842=((-1.0)*(x6843.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6842;
IkReal gconst132=x6842;
IkReal gconst133=(r21*x6841);
IkReal gconst134=(x6840*x6841);
IkReal x6844=r22*r22;
IkReal x6845=((1.0)*x6844);
CheckValue<IkReal> x6849=IKPowWithIntegerCheck(((-1.0)+x6844),-1);
if(!x6849.valid){
continue;
}
IkReal x6846=x6849.value;
if((((1.0)+(((-1.0)*x6845)))) < -0.00001)
continue;
IkReal x6847=IKsqrt(((1.0)+(((-1.0)*x6845))));
IkReal x6848=(sj0*x6846*x6847);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6848+(((-1.0)*x6845*x6848))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6850=((-1.0)*r20);
IkReal x6851=x6826;
CheckValue<IkReal> x6853 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6850),IKFAST_ATAN2_MAGTHRESH);
if(!x6853.valid){
continue;
}
IkReal x6852=((-1.0)*(x6853.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6852;
IkReal gconst132=x6852;
IkReal gconst133=(r21*x6851);
IkReal gconst134=(x6850*x6851);
IkReal x6854=r22*r22;
CheckValue<IkReal> x6857=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6854))),-1);
if(!x6857.valid){
continue;
}
IkReal x6855=x6857.value;
IkReal x6856=(((x6855*(r20*r20*r20*r20)))+(((2.0)*x6855*(r20*r20)*(r21*r21)))+((x6855*(r21*r21*r21*r21)))+x6854);
j4eval[0]=x6856;
j4eval[1]=IKsign(x6856);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6858=(gconst134*r20);
IkReal x6859=(cj1*cj2);
IkReal x6860=(gconst133*r21);
IkReal x6861=(sj1*sj2);
CheckValue<IkReal> x6862=IKPowWithIntegerCheck(IKsign(((x6858*x6858)+(r22*r22)+(((-2.0)*x6858*x6860))+(x6860*x6860))),-1);
if(!x6862.valid){
continue;
}
CheckValue<IkReal> x6863 = IKatan2WithCheck(IkReal((((r22*x6861))+(((-1.0)*r22*x6859)))),IkReal(((((-1.0)*x6860*x6861))+((x6859*x6860))+(((-1.0)*x6858*x6859))+((x6858*x6861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6862.value)))+(x6863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6864=IKsin(j4);
IkReal x6865=IKcos(j4);
IkReal x6866=((1.0)*cj2);
IkReal x6867=((1.0)*sj0);
IkReal x6868=(gconst134*r10);
IkReal x6869=(gconst134*r20);
IkReal x6870=(cj1*sj2);
IkReal x6871=((1.0)*gconst134*r00);
IkReal x6872=(gconst133*x6865);
IkReal x6873=((1.0)*x6864);
IkReal x6874=(gconst133*x6864);
IkReal x6875=((1.0)*x6865);
evalcond[0]=(((r22*x6865))+(((-1.0)*x6869*x6873))+((r21*x6874)));
evalcond[1]=((((-1.0)*x6868*x6873))+((r11*x6874))+cj0+((r12*x6865)));
evalcond[2]=(((r02*x6865))+(((-1.0)*x6864*x6871))+(((-1.0)*x6867))+((r01*x6874)));
evalcond[3]=((((-1.0)*x6869*x6875))+((r21*x6872))+(((-1.0)*r22*x6873))+((sj1*sj2))+(((-1.0)*cj1*x6866)));
evalcond[4]=((((-1.0)*x6865*x6871))+(((-1.0)*cj0*x6870))+(((-1.0)*cj0*sj1*x6866))+(((-1.0)*r02*x6873))+((r01*x6872)));
evalcond[5]=((((-1.0)*x6868*x6875))+((r11*x6872))+(((-1.0)*sj0*sj1*x6866))+(((-1.0)*r12*x6873))+(((-1.0)*x6867*x6870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6876=((1.0)*gconst133);
CheckValue<IkReal> x6877 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6876))+((gconst134*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6877.valid){
continue;
}
CheckValue<IkReal> x6878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6876))+(((-1.0)*gconst134*r11)))),-1);
if(!x6878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6877.value)+(((1.5707963267949)*(x6878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6879=IKsin(j4);
IkReal x6880=IKcos(j4);
IkReal x6881=((1.0)*cj2);
IkReal x6882=((1.0)*sj0);
IkReal x6883=(gconst134*r10);
IkReal x6884=(gconst134*r20);
IkReal x6885=(cj1*sj2);
IkReal x6886=((1.0)*gconst134*r00);
IkReal x6887=(gconst133*x6880);
IkReal x6888=((1.0)*x6879);
IkReal x6889=(gconst133*x6879);
IkReal x6890=((1.0)*x6880);
evalcond[0]=((((-1.0)*x6884*x6888))+((r22*x6880))+((r21*x6889)));
evalcond[1]=(((r11*x6889))+cj0+(((-1.0)*x6883*x6888))+((r12*x6880)));
evalcond[2]=(((r02*x6880))+(((-1.0)*x6882))+(((-1.0)*x6879*x6886))+((r01*x6889)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x6881))+((r21*x6887))+(((-1.0)*x6884*x6890))+(((-1.0)*r22*x6888)));
evalcond[4]=((((-1.0)*cj0*x6885))+(((-1.0)*r02*x6888))+((r01*x6887))+(((-1.0)*cj0*sj1*x6881))+(((-1.0)*x6880*x6886)));
evalcond[5]=(((r11*x6887))+(((-1.0)*sj0*sj1*x6881))+(((-1.0)*x6883*x6890))+(((-1.0)*x6882*x6885))+(((-1.0)*r12*x6888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6891=((1.0)*gconst133);
CheckValue<IkReal> x6892=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst134*r01))+(((-1.0)*r00*x6891)))),-1);
if(!x6892.valid){
continue;
}
CheckValue<IkReal> x6893 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r20))+(((-1.0)*cj0*r21*x6891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6892.value)))+(x6893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6894=IKsin(j4);
IkReal x6895=IKcos(j4);
IkReal x6896=((1.0)*cj2);
IkReal x6897=((1.0)*sj0);
IkReal x6898=(gconst134*r10);
IkReal x6899=(gconst134*r20);
IkReal x6900=(cj1*sj2);
IkReal x6901=((1.0)*gconst134*r00);
IkReal x6902=(gconst133*x6895);
IkReal x6903=((1.0)*x6894);
IkReal x6904=(gconst133*x6894);
IkReal x6905=((1.0)*x6895);
evalcond[0]=(((r22*x6895))+((r21*x6904))+(((-1.0)*x6899*x6903)));
evalcond[1]=(((r12*x6895))+cj0+((r11*x6904))+(((-1.0)*x6898*x6903)));
evalcond[2]=(((r01*x6904))+((r02*x6895))+(((-1.0)*x6897))+(((-1.0)*x6894*x6901)));
evalcond[3]=((((-1.0)*r22*x6903))+((sj1*sj2))+(((-1.0)*cj1*x6896))+((r21*x6902))+(((-1.0)*x6899*x6905)));
evalcond[4]=((((-1.0)*r02*x6903))+((r01*x6902))+(((-1.0)*cj0*x6900))+(((-1.0)*cj0*sj1*x6896))+(((-1.0)*x6895*x6901)));
evalcond[5]=((((-1.0)*sj0*sj1*x6896))+(((-1.0)*r12*x6903))+((r11*x6902))+(((-1.0)*x6898*x6905))+(((-1.0)*x6897*x6900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6906=((-1.0)*r21);
IkReal x6908 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6908)==0){
continue;
}
IkReal x6907=pow(x6908,-0.5);
CheckValue<IkReal> x6909 = IKatan2WithCheck(IkReal(x6906),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6909.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6909.value))));
IkReal gconst136=(x6906*x6907);
IkReal gconst137=((1.0)*r20*x6907);
CheckValue<IkReal> x6910 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6910.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6910.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6911=((-1.0)*r21);
CheckValue<IkReal> x6914 = IKatan2WithCheck(IkReal(x6911),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6914.valid){
continue;
}
IkReal x6912=((1.0)*(x6914.value));
IkReal x6913=x6907;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6912)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6912)));
IkReal gconst136=(x6911*x6913);
IkReal gconst137=((1.0)*r20*x6913);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6915=((-1.0)*r21);
CheckValue<IkReal> x6918 = IKatan2WithCheck(IkReal(x6915),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6918.valid){
continue;
}
IkReal x6916=((1.0)*(x6918.value));
IkReal x6917=x6907;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6916)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6916)));
IkReal gconst136=(x6915*x6917);
IkReal gconst137=((1.0)*r20*x6917);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6919=((-1.0)*r21);
CheckValue<IkReal> x6922 = IKatan2WithCheck(IkReal(x6919),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6922.valid){
continue;
}
IkReal x6920=((1.0)*(x6922.value));
IkReal x6921=x6907;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6920)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6920)));
IkReal gconst136=(x6919*x6921);
IkReal gconst137=((1.0)*r20*x6921);
IkReal x6923=r22*r22;
IkReal x6924=((1.0)*r12*sj0);
IkReal x6925=((1.0)*cj0*r02);
CheckValue<IkReal> x6929=IKPowWithIntegerCheck(((-1.0)+x6923),-1);
if(!x6929.valid){
continue;
}
IkReal x6926=x6929.value;
if((((1.0)+(((-1.0)*x6923)))) < -0.00001)
continue;
IkReal x6927=IKsqrt(((1.0)+(((-1.0)*x6923))));
IkReal x6928=(r22*x6926*x6927);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6925*x6928))+(((-1.0)*x6924*x6928)))))+(IKabs(((((-1.0)*x6924))+(((-1.0)*x6925))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6930=((1.0)*sj0);
IkReal x6931=((1.0)*cj0);
CheckValue<IkReal> x6932=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x6932.valid){
continue;
}
CheckValue<IkReal> x6933 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6931))+(((-1.0)*r12*x6930)))),IkReal((((gconst136*r11*sj0))+(((-1.0)*gconst137*r00*x6931))+((cj0*gconst136*r01))+(((-1.0)*gconst137*r10*x6930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6932.value)))+(x6933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6934=IKsin(j4);
IkReal x6935=IKcos(j4);
IkReal x6936=(gconst136*r01);
IkReal x6937=((1.0)*gconst137);
IkReal x6938=((1.0)*cj2);
IkReal x6939=((1.0)*sj0);
IkReal x6940=(cj1*sj2);
IkReal x6941=(gconst136*x6934);
IkReal x6942=((1.0)*x6934);
IkReal x6943=(gconst136*x6935);
evalcond[0]=((((-1.0)*r20*x6934*x6937))+((r22*x6935))+((r21*x6941)));
evalcond[1]=((((-1.0)*r10*x6934*x6937))+cj0+((r12*x6935))+((r11*x6941)));
evalcond[2]=((((-1.0)*r00*x6934*x6937))+((r02*x6935))+(((-1.0)*x6939))+((x6934*x6936)));
evalcond[3]=((((-1.0)*cj1*x6938))+(((-1.0)*r20*x6935*x6937))+((sj1*sj2))+(((-1.0)*r22*x6942))+((r21*x6943)));
evalcond[4]=((((-1.0)*r00*x6935*x6937))+(((-1.0)*cj0*x6940))+(((-1.0)*cj0*sj1*x6938))+(((-1.0)*r02*x6942))+((x6935*x6936)));
evalcond[5]=((((-1.0)*r10*x6935*x6937))+(((-1.0)*r12*x6942))+(((-1.0)*sj0*sj1*x6938))+(((-1.0)*x6939*x6940))+((r11*x6943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6944=((1.0)*gconst136);
CheckValue<IkReal> x6945=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x6944)))),-1);
if(!x6945.valid){
continue;
}
CheckValue<IkReal> x6946 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x6944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6945.value)))+(x6946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6947=IKsin(j4);
IkReal x6948=IKcos(j4);
IkReal x6949=(gconst136*r01);
IkReal x6950=((1.0)*gconst137);
IkReal x6951=((1.0)*cj2);
IkReal x6952=((1.0)*sj0);
IkReal x6953=(cj1*sj2);
IkReal x6954=(gconst136*x6947);
IkReal x6955=((1.0)*x6947);
IkReal x6956=(gconst136*x6948);
evalcond[0]=(((r22*x6948))+(((-1.0)*r20*x6947*x6950))+((r21*x6954)));
evalcond[1]=((((-1.0)*r10*x6947*x6950))+cj0+((r12*x6948))+((r11*x6954)));
evalcond[2]=((((-1.0)*x6952))+((r02*x6948))+((x6947*x6949))+(((-1.0)*r00*x6947*x6950)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x6955))+((r21*x6956))+(((-1.0)*r20*x6948*x6950))+(((-1.0)*cj1*x6951)));
evalcond[4]=((((-1.0)*cj0*x6953))+(((-1.0)*r02*x6955))+((x6948*x6949))+(((-1.0)*r00*x6948*x6950))+(((-1.0)*cj0*sj1*x6951)));
evalcond[5]=((((-1.0)*r10*x6948*x6950))+(((-1.0)*sj0*sj1*x6951))+(((-1.0)*r12*x6955))+(((-1.0)*x6952*x6953))+((r11*x6956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6957=((1.0)*gconst136);
CheckValue<IkReal> x6958=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r01))+(((-1.0)*r00*x6957)))),-1);
if(!x6958.valid){
continue;
}
CheckValue<IkReal> x6959 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x6957))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6958.value)))+(x6959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6960=IKsin(j4);
IkReal x6961=IKcos(j4);
IkReal x6962=(gconst136*r01);
IkReal x6963=((1.0)*gconst137);
IkReal x6964=((1.0)*cj2);
IkReal x6965=((1.0)*sj0);
IkReal x6966=(cj1*sj2);
IkReal x6967=(gconst136*x6960);
IkReal x6968=((1.0)*x6960);
IkReal x6969=(gconst136*x6961);
evalcond[0]=(((r21*x6967))+((r22*x6961))+(((-1.0)*r20*x6960*x6963)));
evalcond[1]=((((-1.0)*r10*x6960*x6963))+cj0+((r11*x6967))+((r12*x6961)));
evalcond[2]=(((r02*x6961))+(((-1.0)*x6965))+(((-1.0)*r00*x6960*x6963))+((x6960*x6962)));
evalcond[3]=((((-1.0)*r20*x6961*x6963))+((r21*x6969))+((sj1*sj2))+(((-1.0)*r22*x6968))+(((-1.0)*cj1*x6964)));
evalcond[4]=((((-1.0)*r02*x6968))+(((-1.0)*cj0*sj1*x6964))+(((-1.0)*r00*x6961*x6963))+((x6961*x6962))+(((-1.0)*cj0*x6966)));
evalcond[5]=((((-1.0)*x6965*x6966))+(((-1.0)*sj0*sj1*x6964))+(((-1.0)*r12*x6968))+(((-1.0)*r10*x6961*x6963))+((r11*x6969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6970=((-1.0)*r10);
IkReal x6972 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6972)==0){
continue;
}
IkReal x6971=pow(x6972,-0.5);
CheckValue<IkReal> x6973 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6970),IKFAST_ATAN2_MAGTHRESH);
if(!x6973.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6973.value));
IkReal gconst139=(r11*x6971);
IkReal gconst140=(x6970*x6971);
CheckValue<IkReal> x6974 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6974.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6974.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6975=((-1.0)*r10);
IkReal x6976=x6971;
CheckValue<IkReal> x6978 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6975),IKFAST_ATAN2_MAGTHRESH);
if(!x6978.valid){
continue;
}
IkReal x6977=((-1.0)*(x6978.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x6977;
IkReal gconst138=x6977;
IkReal gconst139=(r11*x6976);
IkReal gconst140=(x6975*x6976);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6979=((-1.0)*r10);
IkReal x6980=x6971;
CheckValue<IkReal> x6982 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6979),IKFAST_ATAN2_MAGTHRESH);
if(!x6982.valid){
continue;
}
IkReal x6981=((-1.0)*(x6982.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x6981;
IkReal gconst138=x6981;
IkReal gconst139=(r11*x6980);
IkReal gconst140=(x6979*x6980);
IkReal x6983=r12*r12;
IkReal x6984=((1.0)*sj0);
IkReal x6985=(cj0*r02);
IkReal x6986=x6971;
j4eval[0]=((IKabs(((((-1.0)*x6985))+(((-1.0)*r12*x6984)))))+(IKabs((((sj0*x6983*x6986))+(((-1.0)*x6984*x6986))+((r12*x6985*x6986))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6987=((-1.0)*r10);
IkReal x6988=x6971;
CheckValue<IkReal> x6990 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6987),IKFAST_ATAN2_MAGTHRESH);
if(!x6990.valid){
continue;
}
IkReal x6989=((-1.0)*(x6990.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x6989;
IkReal gconst138=x6989;
IkReal gconst139=(r11*x6988);
IkReal gconst140=(x6987*x6988);
IkReal x6991=r12*r12;
IkReal x6992=(cj1*cj2*r22);
IkReal x6993=(r22*sj1*sj2);
CheckValue<IkReal> x6997=IKPowWithIntegerCheck(((-1.0)+x6991),-1);
if(!x6997.valid){
continue;
}
IkReal x6994=x6997.value;
if((((1.0)+(((-1.0)*x6991)))) < -0.00001)
continue;
IkReal x6995=IKsqrt(((1.0)+(((-1.0)*x6991))));
IkReal x6996=(r12*x6994*x6995);
j4eval[0]=((IKabs(((((-1.0)*x6992))+x6993)))+(IKabs((((x6992*x6996))+(((-1.0)*x6993*x6996))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6998=(cj1*cj2);
IkReal x6999=(gconst140*r20);
IkReal x7000=(sj1*sj2);
IkReal x7001=(gconst139*r21);
CheckValue<IkReal> x7002 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6998))+((r22*x7000)))),IkReal(((((-1.0)*x6998*x6999))+((x6998*x7001))+(((-1.0)*x7000*x7001))+((x6999*x7000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7002.valid){
continue;
}
CheckValue<IkReal> x7003=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6999*x7001))+(x7001*x7001)+(r22*r22)+(x6999*x6999))),-1);
if(!x7003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7002.value)+(((1.5707963267949)*(x7003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7004=IKsin(j4);
IkReal x7005=IKcos(j4);
IkReal x7006=(gconst140*r00);
IkReal x7007=(gconst139*r11);
IkReal x7008=((1.0)*cj2);
IkReal x7009=((1.0)*sj0);
IkReal x7010=(gconst140*r10);
IkReal x7011=(gconst140*r20);
IkReal x7012=(cj1*sj2);
IkReal x7013=((1.0)*x7004);
IkReal x7014=(gconst139*x7005);
IkReal x7015=((1.0)*x7005);
IkReal x7016=(gconst139*x7004);
evalcond[0]=((((-1.0)*x7011*x7013))+((r21*x7016))+((r22*x7005)));
evalcond[1]=(cj0+(((-1.0)*x7010*x7013))+((r12*x7005))+((x7004*x7007)));
evalcond[2]=(((r02*x7005))+(((-1.0)*x7009))+((r01*x7016))+(((-1.0)*x7006*x7013)));
evalcond[3]=((((-1.0)*r22*x7013))+(((-1.0)*x7011*x7015))+((r21*x7014))+(((-1.0)*cj1*x7008))+((sj1*sj2)));
evalcond[4]=(((r01*x7014))+(((-1.0)*cj0*sj1*x7008))+(((-1.0)*x7006*x7015))+(((-1.0)*cj0*x7012))+(((-1.0)*r02*x7013)));
evalcond[5]=((((-1.0)*x7009*x7012))+(((-1.0)*x7010*x7015))+((x7005*x7007))+(((-1.0)*sj0*sj1*x7008))+(((-1.0)*r12*x7013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7017=((1.0)*sj0);
IkReal x7018=((1.0)*gconst140);
CheckValue<IkReal> x7019 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7017)))),IkReal(((((-1.0)*gconst140*r10*x7017))+(((-1.0)*cj0*r00*x7018))+((gconst139*r11*sj0))+((cj0*gconst139*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7019.valid){
continue;
}
CheckValue<IkReal> x7020=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r20))+(((-1.0)*r21*x7018)))),-1);
if(!x7020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7019.value)+(((1.5707963267949)*(x7020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7021=IKsin(j4);
IkReal x7022=IKcos(j4);
IkReal x7023=(gconst140*r00);
IkReal x7024=(gconst139*r11);
IkReal x7025=((1.0)*cj2);
IkReal x7026=((1.0)*sj0);
IkReal x7027=(gconst140*r10);
IkReal x7028=(gconst140*r20);
IkReal x7029=(cj1*sj2);
IkReal x7030=((1.0)*x7021);
IkReal x7031=(gconst139*x7022);
IkReal x7032=((1.0)*x7022);
IkReal x7033=(gconst139*x7021);
evalcond[0]=(((r21*x7033))+((r22*x7022))+(((-1.0)*x7028*x7030)));
evalcond[1]=(cj0+((r12*x7022))+(((-1.0)*x7027*x7030))+((x7021*x7024)));
evalcond[2]=(((r01*x7033))+((r02*x7022))+(((-1.0)*x7023*x7030))+(((-1.0)*x7026)));
evalcond[3]=((((-1.0)*r22*x7030))+((sj1*sj2))+(((-1.0)*cj1*x7025))+((r21*x7031))+(((-1.0)*x7028*x7032)));
evalcond[4]=(((r01*x7031))+(((-1.0)*r02*x7030))+(((-1.0)*cj0*sj1*x7025))+(((-1.0)*x7023*x7032))+(((-1.0)*cj0*x7029)));
evalcond[5]=((((-1.0)*sj0*sj1*x7025))+(((-1.0)*r12*x7030))+(((-1.0)*x7026*x7029))+((x7022*x7024))+(((-1.0)*x7027*x7032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7034=((1.0)*gconst139);
CheckValue<IkReal> x7035=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7034))+(((-1.0)*gconst140*r01)))),-1);
if(!x7035.valid){
continue;
}
CheckValue<IkReal> x7036 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst140*r20))+(((-1.0)*cj0*r21*x7034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7035.value)))+(x7036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7037=IKsin(j4);
IkReal x7038=IKcos(j4);
IkReal x7039=(gconst140*r00);
IkReal x7040=(gconst139*r11);
IkReal x7041=((1.0)*cj2);
IkReal x7042=((1.0)*sj0);
IkReal x7043=(gconst140*r10);
IkReal x7044=(gconst140*r20);
IkReal x7045=(cj1*sj2);
IkReal x7046=((1.0)*x7037);
IkReal x7047=(gconst139*x7038);
IkReal x7048=((1.0)*x7038);
IkReal x7049=(gconst139*x7037);
evalcond[0]=((((-1.0)*x7044*x7046))+((r21*x7049))+((r22*x7038)));
evalcond[1]=(((r12*x7038))+cj0+(((-1.0)*x7043*x7046))+((x7037*x7040)));
evalcond[2]=((((-1.0)*x7042))+((r01*x7049))+((r02*x7038))+(((-1.0)*x7039*x7046)));
evalcond[3]=((((-1.0)*r22*x7046))+(((-1.0)*cj1*x7041))+((sj1*sj2))+(((-1.0)*x7044*x7048))+((r21*x7047)));
evalcond[4]=(((r01*x7047))+(((-1.0)*r02*x7046))+(((-1.0)*cj0*x7045))+(((-1.0)*cj0*sj1*x7041))+(((-1.0)*x7039*x7048)));
evalcond[5]=((((-1.0)*r12*x7046))+(((-1.0)*x7043*x7048))+(((-1.0)*sj0*sj1*x7041))+(((-1.0)*x7042*x7045))+((x7038*x7040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7050=((-1.0)*r11);
IkReal x7052 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7052)==0){
continue;
}
IkReal x7051=pow(x7052,-0.5);
CheckValue<IkReal> x7053 = IKatan2WithCheck(IkReal(x7050),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7053.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7053.value))));
IkReal gconst142=(x7050*x7051);
IkReal gconst143=((1.0)*r10*x7051);
CheckValue<IkReal> x7054 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7054.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7054.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7055=((-1.0)*r11);
CheckValue<IkReal> x7058 = IKatan2WithCheck(IkReal(x7055),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7058.valid){
continue;
}
IkReal x7056=((1.0)*(x7058.value));
IkReal x7057=x7051;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7056)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7056)));
IkReal gconst142=(x7055*x7057);
IkReal gconst143=((1.0)*r10*x7057);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7059=((1.0)*sj0);
IkReal x7060=((1.0)*gconst143);
CheckValue<IkReal> x7061 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7059)))),IkReal(((((-1.0)*cj0*r00*x7060))+((cj0*gconst142*r01))+((gconst142*r11*sj0))+(((-1.0)*gconst143*r10*x7059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7061.valid){
continue;
}
CheckValue<IkReal> x7062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7060))+(((-1.0)*gconst142*r20)))),-1);
if(!x7062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7061.value)+(((1.5707963267949)*(x7062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7063=IKsin(j4);
IkReal x7064=IKcos(j4);
IkReal x7065=(gconst143*r20);
IkReal x7066=(gconst142*r01);
IkReal x7067=((1.0)*cj2);
IkReal x7068=((1.0)*sj0);
IkReal x7069=(gconst143*r00);
IkReal x7070=(gconst143*r10);
IkReal x7071=(cj1*sj2);
IkReal x7072=((1.0)*x7063);
IkReal x7073=(gconst142*x7063);
IkReal x7074=((1.0)*x7064);
IkReal x7075=(gconst142*x7064);
evalcond[0]=(((r22*x7064))+(((-1.0)*x7065*x7072))+((r21*x7073)));
evalcond[1]=(((r12*x7064))+((r11*x7073))+cj0+(((-1.0)*x7070*x7072)));
evalcond[2]=((((-1.0)*x7069*x7072))+(((-1.0)*x7068))+((x7063*x7066))+((r02*x7064)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x7065*x7074))+((r21*x7075))+(((-1.0)*r22*x7072))+(((-1.0)*cj1*x7067)));
evalcond[4]=((((-1.0)*x7069*x7074))+((x7064*x7066))+(((-1.0)*r02*x7072))+(((-1.0)*cj0*x7071))+(((-1.0)*cj0*sj1*x7067)));
evalcond[5]=(((r11*x7075))+(((-1.0)*x7068*x7071))+(((-1.0)*x7070*x7074))+(((-1.0)*sj0*sj1*x7067))+(((-1.0)*r12*x7072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7076=((1.0)*gconst142);
CheckValue<IkReal> x7077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7076))+(((-1.0)*gconst143*r01)))),-1);
if(!x7077.valid){
continue;
}
CheckValue<IkReal> x7078 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7076))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7077.value)))+(x7078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7079=IKsin(j4);
IkReal x7080=IKcos(j4);
IkReal x7081=(gconst143*r20);
IkReal x7082=(gconst142*r01);
IkReal x7083=((1.0)*cj2);
IkReal x7084=((1.0)*sj0);
IkReal x7085=(gconst143*r00);
IkReal x7086=(gconst143*r10);
IkReal x7087=(cj1*sj2);
IkReal x7088=((1.0)*x7079);
IkReal x7089=(gconst142*x7079);
IkReal x7090=((1.0)*x7080);
IkReal x7091=(gconst142*x7080);
evalcond[0]=(((r21*x7089))+((r22*x7080))+(((-1.0)*x7081*x7088)));
evalcond[1]=(((r11*x7089))+cj0+((r12*x7080))+(((-1.0)*x7086*x7088)));
evalcond[2]=(((r02*x7080))+((x7079*x7082))+(((-1.0)*x7085*x7088))+(((-1.0)*x7084)));
evalcond[3]=((((-1.0)*x7081*x7090))+(((-1.0)*cj1*x7083))+((r21*x7091))+((sj1*sj2))+(((-1.0)*r22*x7088)));
evalcond[4]=((((-1.0)*cj0*x7087))+(((-1.0)*cj0*sj1*x7083))+(((-1.0)*r02*x7088))+(((-1.0)*x7085*x7090))+((x7080*x7082)));
evalcond[5]=(((r11*x7091))+(((-1.0)*x7084*x7087))+(((-1.0)*x7086*x7090))+(((-1.0)*sj0*sj1*x7083))+(((-1.0)*r12*x7088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7092=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7092;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7093=((1.0)*sj5);
IkReal x7094=((((-1.0)*r00*x7093))+(((-1.0)*cj5*r01)));
j4eval[0]=x7094;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7093))))));
j4eval[2]=IKsign(x7094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7095=cj5*cj5;
IkReal x7096=r11*r11;
IkReal x7097=(cj5*r10);
IkReal x7098=(r11*sj5);
IkReal x7099=(((x7095*x7096))+(((-1.0)*x7096))+(((-1.0)*x7095*(r10*r10)))+(((2.0)*x7097*x7098))+(((-1.0)*(r12*r12))));
j4eval[0]=x7099;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7097))+x7098))));
j4eval[2]=IKsign(x7099);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7100=cj5*cj5;
IkReal x7101=r11*r11;
IkReal x7102=(cj5*r10);
IkReal x7103=(r11*sj5);
CheckValue<IkReal> x7104=IKPowWithIntegerCheck(IKsign((((x7100*x7101))+(((-1.0)*x7101))+(((2.0)*x7102*x7103))+(((-1.0)*(r12*r12)))+(((-1.0)*x7100*(r10*r10))))),-1);
if(!x7104.valid){
continue;
}
CheckValue<IkReal> x7105 = IKatan2WithCheck(IkReal((x7103+(((-1.0)*x7102)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7104.value)))+(x7105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7106=IKsin(j4);
IkReal x7107=IKcos(j4);
IkReal x7108=((1.0)*cj5);
IkReal x7109=(r21*sj5);
IkReal x7110=((1.0)*cj2);
IkReal x7111=(sj5*x7106);
IkReal x7112=((1.0)*x7106);
IkReal x7113=(sj5*x7107);
evalcond[0]=(((r22*x7107))+((x7106*x7109))+(((-1.0)*r20*x7106*x7108)));
evalcond[1]=((((-1.0)*r00*x7106*x7108))+((r02*x7107))+((r01*x7111)));
evalcond[2]=((1.0)+((r11*x7111))+((r12*x7107))+(((-1.0)*r10*x7106*x7108)));
evalcond[3]=(((r11*x7113))+(((-1.0)*r12*x7112))+(((-1.0)*r10*x7107*x7108)));
evalcond[4]=((((-1.0)*r20*x7107*x7108))+((sj1*sj2))+(((-1.0)*r22*x7112))+((x7107*x7109))+(((-1.0)*cj1*x7110)));
evalcond[5]=((((-1.0)*r00*x7107*x7108))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7110))+(((-1.0)*r02*x7112))+((r01*x7113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7114=((1.0)*sj5);
CheckValue<IkReal> x7115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7114))+(((-1.0)*cj5*r01)))),-1);
if(!x7115.valid){
continue;
}
CheckValue<IkReal> x7116 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7115.value)))+(x7116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7117=IKsin(j4);
IkReal x7118=IKcos(j4);
IkReal x7119=((1.0)*cj5);
IkReal x7120=(r21*sj5);
IkReal x7121=((1.0)*cj2);
IkReal x7122=(sj5*x7117);
IkReal x7123=((1.0)*x7117);
IkReal x7124=(sj5*x7118);
evalcond[0]=((((-1.0)*r20*x7117*x7119))+((r22*x7118))+((x7117*x7120)));
evalcond[1]=(((r01*x7122))+((r02*x7118))+(((-1.0)*r00*x7117*x7119)));
evalcond[2]=((1.0)+((r12*x7118))+((r11*x7122))+(((-1.0)*r10*x7117*x7119)));
evalcond[3]=((((-1.0)*r12*x7123))+(((-1.0)*r10*x7118*x7119))+((r11*x7124)));
evalcond[4]=((((-1.0)*r22*x7123))+((sj1*sj2))+((x7118*x7120))+(((-1.0)*cj1*x7121))+(((-1.0)*r20*x7118*x7119)));
evalcond[5]=(((r01*x7124))+(((-1.0)*r00*x7118*x7119))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x7123))+(((-1.0)*sj1*x7121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7125=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7125.valid){
continue;
}
CheckValue<IkReal> x7126 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7125.value)))+(x7126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7127=IKsin(j4);
IkReal x7128=IKcos(j4);
IkReal x7129=((1.0)*cj5);
IkReal x7130=(r21*sj5);
IkReal x7131=((1.0)*cj2);
IkReal x7132=(sj5*x7127);
IkReal x7133=((1.0)*x7127);
IkReal x7134=(sj5*x7128);
evalcond[0]=((((-1.0)*r20*x7127*x7129))+((x7127*x7130))+((r22*x7128)));
evalcond[1]=(((r01*x7132))+(((-1.0)*r00*x7127*x7129))+((r02*x7128)));
evalcond[2]=((1.0)+((r11*x7132))+(((-1.0)*r10*x7127*x7129))+((r12*x7128)));
evalcond[3]=(((r11*x7134))+(((-1.0)*r12*x7133))+(((-1.0)*r10*x7128*x7129)));
evalcond[4]=((((-1.0)*r20*x7128*x7129))+((sj1*sj2))+(((-1.0)*r22*x7133))+(((-1.0)*cj1*x7131))+((x7128*x7130)));
evalcond[5]=(((r01*x7134))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x7128*x7129))+(((-1.0)*sj1*x7131))+(((-1.0)*r02*x7133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7135=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7135;
j4eval[1]=IKsign(x7135);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7136=((1.0)*sj5);
IkReal x7137=((((-1.0)*r20*x7136))+(((-1.0)*cj5*r21)));
j4eval[0]=x7137;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7136))+((cj5*r00))))));
j4eval[2]=IKsign(x7137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7138=cj5*cj5;
IkReal x7139=r11*r11;
IkReal x7140=(r11*sj5);
IkReal x7141=(cj5*r10);
IkReal x7142=(x7139+(r12*r12)+(((-2.0)*x7140*x7141))+((x7138*(r10*r10)))+(((-1.0)*x7138*x7139)));
j4eval[0]=x7142;
j4eval[1]=IKsign(x7142);
j4eval[2]=((IKabs(r12))+(IKabs((x7140+(((-1.0)*x7141))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7143=cj5*cj5;
IkReal x7144=r11*r11;
IkReal x7145=(cj5*r10);
IkReal x7146=(r11*sj5);
CheckValue<IkReal> x7147=IKPowWithIntegerCheck(IKsign((x7144+(r12*r12)+(((-1.0)*x7143*x7144))+(((-2.0)*x7145*x7146))+((x7143*(r10*r10))))),-1);
if(!x7147.valid){
continue;
}
CheckValue<IkReal> x7148 = IKatan2WithCheck(IkReal((x7146+(((-1.0)*x7145)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7147.value)))+(x7148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7149=IKsin(j4);
IkReal x7150=IKcos(j4);
IkReal x7151=((1.0)*cj5);
IkReal x7152=(r21*sj5);
IkReal x7153=(sj5*x7149);
IkReal x7154=((1.0)*x7149);
IkReal x7155=(sj5*x7150);
evalcond[0]=(((x7149*x7152))+((r22*x7150))+(((-1.0)*r20*x7149*x7151)));
evalcond[1]=(((r02*x7150))+(((-1.0)*r00*x7149*x7151))+((r01*x7153)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x7149*x7151))+((r12*x7150))+((r11*x7153)));
evalcond[3]=((((-1.0)*r12*x7154))+(((-1.0)*r10*x7150*x7151))+((r11*x7155)));
evalcond[4]=(((cj2*sj1))+((r01*x7155))+((cj1*sj2))+(((-1.0)*r00*x7150*x7151))+(((-1.0)*r02*x7154)));
evalcond[5]=((((-1.0)*r22*x7154))+((x7150*x7152))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x7150*x7151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7156=((1.0)*sj5);
CheckValue<IkReal> x7157=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7156)))),-1);
if(!x7157.valid){
continue;
}
CheckValue<IkReal> x7158 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7156))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7157.value)))+(x7158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7159=IKsin(j4);
IkReal x7160=IKcos(j4);
IkReal x7161=((1.0)*cj5);
IkReal x7162=(r21*sj5);
IkReal x7163=(sj5*x7159);
IkReal x7164=((1.0)*x7159);
IkReal x7165=(sj5*x7160);
evalcond[0]=(((x7159*x7162))+(((-1.0)*r20*x7159*x7161))+((r22*x7160)));
evalcond[1]=((((-1.0)*r00*x7159*x7161))+((r01*x7163))+((r02*x7160)));
evalcond[2]=((-1.0)+((r11*x7163))+(((-1.0)*r10*x7159*x7161))+((r12*x7160)));
evalcond[3]=((((-1.0)*r10*x7160*x7161))+((r11*x7165))+(((-1.0)*r12*x7164)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x7164))+((cj1*sj2))+((r01*x7165))+(((-1.0)*r00*x7160*x7161)));
evalcond[5]=((((-1.0)*r20*x7160*x7161))+(((-1.0)*r22*x7164))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7160*x7162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7166=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7166.valid){
continue;
}
CheckValue<IkReal> x7167 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7166.value)))+(x7167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7168=IKsin(j4);
IkReal x7169=IKcos(j4);
IkReal x7170=((1.0)*cj5);
IkReal x7171=(r21*sj5);
IkReal x7172=(sj5*x7168);
IkReal x7173=((1.0)*x7168);
IkReal x7174=(sj5*x7169);
evalcond[0]=((((-1.0)*r20*x7168*x7170))+((r22*x7169))+((x7168*x7171)));
evalcond[1]=((((-1.0)*r00*x7168*x7170))+((r01*x7172))+((r02*x7169)));
evalcond[2]=((-1.0)+((r11*x7172))+((r12*x7169))+(((-1.0)*r10*x7168*x7170)));
evalcond[3]=(((r11*x7174))+(((-1.0)*r12*x7173))+(((-1.0)*r10*x7169*x7170)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r00*x7169*x7170))+((cj1*sj2))+(((-1.0)*r02*x7173))+((r01*x7174)));
evalcond[5]=(((x7169*x7171))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7173))+(((-1.0)*r20*x7169*x7170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7175=((-1.0)*r00);
IkReal x7177 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7177)==0){
continue;
}
IkReal x7176=pow(x7177,-0.5);
CheckValue<IkReal> x7178 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7175),IKFAST_ATAN2_MAGTHRESH);
if(!x7178.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7178.value));
IkReal gconst145=(r01*x7176);
IkReal gconst146=(x7175*x7176);
CheckValue<IkReal> x7179 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7179.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7179.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7180=((-1.0)*r00);
IkReal x7181=x7176;
CheckValue<IkReal> x7183 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7180),IKFAST_ATAN2_MAGTHRESH);
if(!x7183.valid){
continue;
}
IkReal x7182=((-1.0)*(x7183.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7182;
IkReal gconst144=x7182;
IkReal gconst145=(r01*x7181);
IkReal gconst146=(x7180*x7181);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7184=((-1.0)*r00);
IkReal x7185=x7176;
CheckValue<IkReal> x7187 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7184),IKFAST_ATAN2_MAGTHRESH);
if(!x7187.valid){
continue;
}
IkReal x7186=((-1.0)*(x7187.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7186;
IkReal gconst144=x7186;
IkReal gconst145=(r01*x7185);
IkReal gconst146=(x7184*x7185);
IkReal x7188=r02*r02;
IkReal x7189=(r12*sj0);
IkReal x7190=((1.0)*cj0);
IkReal x7191=x7176;
j4eval[0]=((IKabs(((((-1.0)*x7189))+(((-1.0)*r02*x7190)))))+(IKabs((((cj0*x7188*x7191))+((r02*x7189*x7191))+(((-1.0)*x7190*x7191))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7192=((-1.0)*r00);
IkReal x7193=x7176;
CheckValue<IkReal> x7195 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7192),IKFAST_ATAN2_MAGTHRESH);
if(!x7195.valid){
continue;
}
IkReal x7194=((-1.0)*(x7195.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7194;
IkReal gconst144=x7194;
IkReal gconst145=(r01*x7193);
IkReal gconst146=(x7192*x7193);
IkReal x7196=r02*r02;
IkReal x7197=(r22*sj1*sj2);
IkReal x7198=(cj1*cj2*r22);
CheckValue<IkReal> x7202=IKPowWithIntegerCheck(((-1.0)+x7196),-1);
if(!x7202.valid){
continue;
}
IkReal x7199=x7202.value;
if((((1.0)+(((-1.0)*x7196)))) < -0.00001)
continue;
IkReal x7200=IKsqrt(((1.0)+(((-1.0)*x7196))));
IkReal x7201=(r02*x7199*x7200);
j4eval[0]=((IKabs((x7197+(((-1.0)*x7198)))))+(IKabs((((x7198*x7201))+(((-1.0)*x7197*x7201))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7203=(sj1*sj2);
IkReal x7204=(gconst146*r20);
IkReal x7205=(cj1*cj2);
IkReal x7206=(gconst145*r21);
CheckValue<IkReal> x7207=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7204*x7204)+(((-2.0)*x7204*x7206))+(x7206*x7206))),-1);
if(!x7207.valid){
continue;
}
CheckValue<IkReal> x7208 = IKatan2WithCheck(IkReal((((r22*x7203))+(((-1.0)*r22*x7205)))),IkReal((((x7203*x7204))+(((-1.0)*x7204*x7205))+((x7205*x7206))+(((-1.0)*x7203*x7206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7207.value)))+(x7208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7209=IKsin(j4);
IkReal x7210=IKcos(j4);
IkReal x7211=(gconst145*r21);
IkReal x7212=((1.0)*cj2);
IkReal x7213=((1.0)*sj0);
IkReal x7214=(gconst145*r11);
IkReal x7215=(gconst145*r01);
IkReal x7216=(cj1*sj2);
IkReal x7217=((1.0)*x7209);
IkReal x7218=(gconst146*x7217);
IkReal x7219=((1.0)*gconst146*x7210);
evalcond[0]=(((x7209*x7211))+((r22*x7210))+(((-1.0)*r20*x7218)));
evalcond[1]=(((r12*x7210))+cj0+((x7209*x7214))+(((-1.0)*r10*x7218)));
evalcond[2]=(((r02*x7210))+((x7209*x7215))+(((-1.0)*r00*x7218))+(((-1.0)*x7213)));
evalcond[3]=((((-1.0)*cj1*x7212))+((sj1*sj2))+((x7210*x7211))+(((-1.0)*r20*x7219))+(((-1.0)*r22*x7217)));
evalcond[4]=((((-1.0)*cj0*x7216))+(((-1.0)*r00*x7219))+((x7210*x7215))+(((-1.0)*cj0*sj1*x7212))+(((-1.0)*r02*x7217)));
evalcond[5]=((((-1.0)*x7213*x7216))+((x7210*x7214))+(((-1.0)*r10*x7219))+(((-1.0)*sj0*sj1*x7212))+(((-1.0)*r12*x7217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7220=((1.0)*sj0);
IkReal x7221=((1.0)*cj0);
CheckValue<IkReal> x7222 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7221))+(((-1.0)*r12*x7220)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*gconst146*r00*x7221))+(((-1.0)*gconst146*r10*x7220))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7222.valid){
continue;
}
CheckValue<IkReal> x7223=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*gconst145*r20)))),-1);
if(!x7223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7222.value)+(((1.5707963267949)*(x7223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7224=IKsin(j4);
IkReal x7225=IKcos(j4);
IkReal x7226=(gconst145*r21);
IkReal x7227=((1.0)*cj2);
IkReal x7228=((1.0)*sj0);
IkReal x7229=(gconst145*r11);
IkReal x7230=(gconst145*r01);
IkReal x7231=(cj1*sj2);
IkReal x7232=((1.0)*x7224);
IkReal x7233=(gconst146*x7232);
IkReal x7234=((1.0)*gconst146*x7225);
evalcond[0]=((((-1.0)*r20*x7233))+((x7224*x7226))+((r22*x7225)));
evalcond[1]=((((-1.0)*r10*x7233))+cj0+((x7224*x7229))+((r12*x7225)));
evalcond[2]=(((r02*x7225))+(((-1.0)*x7228))+(((-1.0)*r00*x7233))+((x7224*x7230)));
evalcond[3]=((((-1.0)*r20*x7234))+(((-1.0)*cj1*x7227))+((sj1*sj2))+(((-1.0)*r22*x7232))+((x7225*x7226)));
evalcond[4]=((((-1.0)*cj0*x7231))+((x7225*x7230))+(((-1.0)*cj0*sj1*x7227))+(((-1.0)*r02*x7232))+(((-1.0)*r00*x7234)));
evalcond[5]=((((-1.0)*r10*x7234))+(((-1.0)*x7228*x7231))+(((-1.0)*sj0*sj1*x7227))+(((-1.0)*r12*x7232))+((x7225*x7229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7235=((1.0)*gconst145);
CheckValue<IkReal> x7236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7235))+(((-1.0)*gconst146*r11)))),-1);
if(!x7236.valid){
continue;
}
CheckValue<IkReal> x7237 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst146*r20*sj0))+(((-1.0)*r21*sj0*x7235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7236.value)))+(x7237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7238=IKsin(j4);
IkReal x7239=IKcos(j4);
IkReal x7240=(gconst145*r21);
IkReal x7241=((1.0)*cj2);
IkReal x7242=((1.0)*sj0);
IkReal x7243=(gconst145*r11);
IkReal x7244=(gconst145*r01);
IkReal x7245=(cj1*sj2);
IkReal x7246=((1.0)*x7238);
IkReal x7247=(gconst146*x7246);
IkReal x7248=((1.0)*gconst146*x7239);
evalcond[0]=((((-1.0)*r20*x7247))+((x7238*x7240))+((r22*x7239)));
evalcond[1]=(cj0+(((-1.0)*r10*x7247))+((x7238*x7243))+((r12*x7239)));
evalcond[2]=(((x7238*x7244))+(((-1.0)*r00*x7247))+((r02*x7239))+(((-1.0)*x7242)));
evalcond[3]=((((-1.0)*r20*x7248))+(((-1.0)*r22*x7246))+((sj1*sj2))+((x7239*x7240))+(((-1.0)*cj1*x7241)));
evalcond[4]=((((-1.0)*cj0*sj1*x7241))+(((-1.0)*r02*x7246))+(((-1.0)*cj0*x7245))+(((-1.0)*r00*x7248))+((x7239*x7244)));
evalcond[5]=((((-1.0)*r12*x7246))+(((-1.0)*r10*x7248))+(((-1.0)*x7242*x7245))+((x7239*x7243))+(((-1.0)*sj0*sj1*x7241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7249=((-1.0)*r01);
IkReal x7251 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7251)==0){
continue;
}
IkReal x7250=pow(x7251,-0.5);
CheckValue<IkReal> x7252 = IKatan2WithCheck(IkReal(x7249),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7252.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7252.value))));
IkReal gconst148=(x7249*x7250);
IkReal gconst149=((1.0)*r00*x7250);
CheckValue<IkReal> x7253 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7253.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7253.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7254=((-1.0)*r01);
CheckValue<IkReal> x7257 = IKatan2WithCheck(IkReal(x7254),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7257.valid){
continue;
}
IkReal x7255=((1.0)*(x7257.value));
IkReal x7256=x7250;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7255)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7255)));
IkReal gconst148=(x7254*x7256);
IkReal gconst149=((1.0)*r00*x7256);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7258=((-1.0)*r01);
CheckValue<IkReal> x7261 = IKatan2WithCheck(IkReal(x7258),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7261.valid){
continue;
}
IkReal x7259=((1.0)*(x7261.value));
IkReal x7260=x7250;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7259)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7259)));
IkReal gconst148=(x7258*x7260);
IkReal gconst149=((1.0)*r00*x7260);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7262=((1.0)*sj0);
IkReal x7263=((1.0)*gconst149);
CheckValue<IkReal> x7264 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7262)))),IkReal(((((-1.0)*cj0*r00*x7263))+((cj0*gconst148*r01))+(((-1.0)*gconst149*r10*x7262))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7264.valid){
continue;
}
CheckValue<IkReal> x7265=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7263)))),-1);
if(!x7265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7264.value)+(((1.5707963267949)*(x7265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7266=IKsin(j4);
IkReal x7267=IKcos(j4);
IkReal x7268=((1.0)*gconst149);
IkReal x7269=((1.0)*cj2);
IkReal x7270=((1.0)*sj0);
IkReal x7271=(cj1*sj2);
IkReal x7272=(gconst148*x7267);
IkReal x7273=(gconst148*x7266);
IkReal x7274=((1.0)*x7266);
evalcond[0]=(((r22*x7267))+(((-1.0)*r20*x7266*x7268))+((r21*x7273)));
evalcond[1]=((((-1.0)*r10*x7266*x7268))+cj0+((r12*x7267))+((r11*x7273)));
evalcond[2]=(((r02*x7267))+((r01*x7273))+(((-1.0)*r00*x7266*x7268))+(((-1.0)*x7270)));
evalcond[3]=((((-1.0)*r22*x7274))+((sj1*sj2))+(((-1.0)*r20*x7267*x7268))+((r21*x7272))+(((-1.0)*cj1*x7269)));
evalcond[4]=((((-1.0)*cj0*x7271))+(((-1.0)*r02*x7274))+((r01*x7272))+(((-1.0)*r00*x7267*x7268))+(((-1.0)*cj0*sj1*x7269)));
evalcond[5]=((((-1.0)*sj0*sj1*x7269))+(((-1.0)*r12*x7274))+((r11*x7272))+(((-1.0)*x7270*x7271))+(((-1.0)*r10*x7267*x7268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7275=((1.0)*gconst148);
CheckValue<IkReal> x7276=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r11))+(((-1.0)*r10*x7275)))),-1);
if(!x7276.valid){
continue;
}
CheckValue<IkReal> x7277 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst149*r20*sj0))+(((-1.0)*r21*sj0*x7275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7276.value)))+(x7277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7278=IKsin(j4);
IkReal x7279=IKcos(j4);
IkReal x7280=((1.0)*gconst149);
IkReal x7281=((1.0)*cj2);
IkReal x7282=((1.0)*sj0);
IkReal x7283=(cj1*sj2);
IkReal x7284=(gconst148*x7279);
IkReal x7285=(gconst148*x7278);
IkReal x7286=((1.0)*x7278);
evalcond[0]=((((-1.0)*r20*x7278*x7280))+((r21*x7285))+((r22*x7279)));
evalcond[1]=(((r11*x7285))+cj0+((r12*x7279))+(((-1.0)*r10*x7278*x7280)));
evalcond[2]=((((-1.0)*x7282))+(((-1.0)*r00*x7278*x7280))+((r01*x7285))+((r02*x7279)));
evalcond[3]=((((-1.0)*cj1*x7281))+(((-1.0)*r20*x7279*x7280))+((sj1*sj2))+((r21*x7284))+(((-1.0)*r22*x7286)));
evalcond[4]=((((-1.0)*r00*x7279*x7280))+(((-1.0)*cj0*sj1*x7281))+((r01*x7284))+(((-1.0)*r02*x7286))+(((-1.0)*cj0*x7283)));
evalcond[5]=((((-1.0)*x7282*x7283))+((r11*x7284))+(((-1.0)*r10*x7279*x7280))+(((-1.0)*r12*x7286))+(((-1.0)*sj0*sj1*x7281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7287=((1.0)*gconst148);
CheckValue<IkReal> x7288 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7287))+((cj0*gconst149*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7288.valid){
continue;
}
CheckValue<IkReal> x7289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x7287)))),-1);
if(!x7289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7288.value)+(((1.5707963267949)*(x7289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7290=IKsin(j4);
IkReal x7291=IKcos(j4);
IkReal x7292=((1.0)*gconst149);
IkReal x7293=((1.0)*cj2);
IkReal x7294=((1.0)*sj0);
IkReal x7295=(cj1*sj2);
IkReal x7296=(gconst148*x7291);
IkReal x7297=(gconst148*x7290);
IkReal x7298=((1.0)*x7290);
evalcond[0]=(((r21*x7297))+((r22*x7291))+(((-1.0)*r20*x7290*x7292)));
evalcond[1]=(((r12*x7291))+cj0+((r11*x7297))+(((-1.0)*r10*x7290*x7292)));
evalcond[2]=((((-1.0)*x7294))+((r02*x7291))+((r01*x7297))+(((-1.0)*r00*x7290*x7292)));
evalcond[3]=((((-1.0)*cj1*x7293))+(((-1.0)*r22*x7298))+((r21*x7296))+((sj1*sj2))+(((-1.0)*r20*x7291*x7292)));
evalcond[4]=((((-1.0)*r00*x7291*x7292))+(((-1.0)*cj0*x7295))+(((-1.0)*r02*x7298))+((r01*x7296))+(((-1.0)*cj0*sj1*x7293)));
evalcond[5]=((((-1.0)*sj0*sj1*x7293))+((r11*x7296))+(((-1.0)*x7294*x7295))+(((-1.0)*r12*x7298))+(((-1.0)*r10*x7291*x7292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7299=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7299;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x7299);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7300=((1.0)*sj5);
IkReal x7301=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7300)));
j4eval[0]=x7301;
j4eval[1]=IKsign(x7301);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x7300)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7302=cj5*cj5;
IkReal x7303=r01*r01;
IkReal x7304=(cj5*r00);
IkReal x7305=(r01*sj5);
IkReal x7306=((((-2.0)*x7304*x7305))+x7303+(r02*r02)+(((-1.0)*x7302*x7303))+((x7302*(r00*r00))));
j4eval[0]=x7306;
j4eval[1]=((IKabs(r02))+(IKabs((x7305+(((-1.0)*x7304))))));
j4eval[2]=IKsign(x7306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7307=cj5*cj5;
IkReal x7308=r01*r01;
IkReal x7309=(r01*sj5);
IkReal x7310=(cj5*r00);
CheckValue<IkReal> x7311=IKPowWithIntegerCheck(IKsign((x7308+((x7307*(r00*r00)))+(((-1.0)*x7307*x7308))+(((-2.0)*x7309*x7310))+(r02*r02))),-1);
if(!x7311.valid){
continue;
}
CheckValue<IkReal> x7312 = IKatan2WithCheck(IkReal((x7309+(((-1.0)*x7310)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7311.value)))+(x7312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7313=IKsin(j4);
IkReal x7314=IKcos(j4);
IkReal x7315=((1.0)*cj5);
IkReal x7316=(r21*sj5);
IkReal x7317=((1.0)*cj2);
IkReal x7318=(sj5*x7313);
IkReal x7319=((1.0)*x7313);
IkReal x7320=(sj5*x7314);
evalcond[0]=(((r22*x7314))+((x7313*x7316))+(((-1.0)*r20*x7313*x7315)));
evalcond[1]=(((r12*x7314))+(((-1.0)*r10*x7313*x7315))+((r11*x7318)));
evalcond[2]=((-1.0)+((r02*x7314))+(((-1.0)*r00*x7313*x7315))+((r01*x7318)));
evalcond[3]=(((r01*x7320))+(((-1.0)*r00*x7314*x7315))+(((-1.0)*r02*x7319)));
evalcond[4]=(((sj1*sj2))+((x7314*x7316))+(((-1.0)*r22*x7319))+(((-1.0)*r20*x7314*x7315))+(((-1.0)*cj1*x7317)));
evalcond[5]=((((-1.0)*sj1*x7317))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x7319))+(((-1.0)*r10*x7314*x7315))+((r11*x7320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7321=((1.0)*sj5);
CheckValue<IkReal> x7322=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7321)))),-1);
if(!x7322.valid){
continue;
}
CheckValue<IkReal> x7323 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7322.value)))+(x7323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7324=IKsin(j4);
IkReal x7325=IKcos(j4);
IkReal x7326=((1.0)*cj5);
IkReal x7327=(r21*sj5);
IkReal x7328=((1.0)*cj2);
IkReal x7329=(sj5*x7324);
IkReal x7330=((1.0)*x7324);
IkReal x7331=(sj5*x7325);
evalcond[0]=(((r22*x7325))+(((-1.0)*r20*x7324*x7326))+((x7324*x7327)));
evalcond[1]=((((-1.0)*r10*x7324*x7326))+((r12*x7325))+((r11*x7329)));
evalcond[2]=((-1.0)+((r01*x7329))+(((-1.0)*r00*x7324*x7326))+((r02*x7325)));
evalcond[3]=((((-1.0)*r02*x7330))+(((-1.0)*r00*x7325*x7326))+((r01*x7331)));
evalcond[4]=(((sj1*sj2))+((x7325*x7327))+(((-1.0)*r20*x7325*x7326))+(((-1.0)*r22*x7330))+(((-1.0)*cj1*x7328)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x7330))+(((-1.0)*r10*x7325*x7326))+((r11*x7331))+(((-1.0)*sj1*x7328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7332 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7332.valid){
continue;
}
CheckValue<IkReal> x7333=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7332.value)+(((1.5707963267949)*(x7333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7334=IKsin(j4);
IkReal x7335=IKcos(j4);
IkReal x7336=((1.0)*cj5);
IkReal x7337=(r21*sj5);
IkReal x7338=((1.0)*cj2);
IkReal x7339=(sj5*x7334);
IkReal x7340=((1.0)*x7334);
IkReal x7341=(sj5*x7335);
evalcond[0]=(((r22*x7335))+((x7334*x7337))+(((-1.0)*r20*x7334*x7336)));
evalcond[1]=((((-1.0)*r10*x7334*x7336))+((r12*x7335))+((r11*x7339)));
evalcond[2]=((-1.0)+((r02*x7335))+(((-1.0)*r00*x7334*x7336))+((r01*x7339)));
evalcond[3]=(((r01*x7341))+(((-1.0)*r02*x7340))+(((-1.0)*r00*x7335*x7336)));
evalcond[4]=((((-1.0)*r22*x7340))+(((-1.0)*r20*x7335*x7336))+((x7335*x7337))+((sj1*sj2))+(((-1.0)*cj1*x7338)));
evalcond[5]=((((-1.0)*r12*x7340))+((r11*x7341))+(((-1.0)*sj1*x7338))+(((-1.0)*cj1*sj2))+(((-1.0)*r10*x7335*x7336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7342=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7342;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x7342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7343=((1.0)*sj5);
IkReal x7344=((((-1.0)*cj5*r21))+(((-1.0)*r20*x7343)));
j4eval[0]=x7344;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x7343))))));
j4eval[2]=IKsign(x7344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7345=cj5*cj5;
IkReal x7346=r01*r01;
IkReal x7347=(r01*sj5);
IkReal x7348=(cj5*r00);
IkReal x7349=((((2.0)*x7347*x7348))+(((-1.0)*x7345*(r00*r00)))+(((-1.0)*(r02*r02)))+((x7345*x7346))+(((-1.0)*x7346)));
j4eval[0]=x7349;
j4eval[1]=IKsign(x7349);
j4eval[2]=((IKabs(r02))+(IKabs((x7347+(((-1.0)*x7348))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7350=cj5*cj5;
IkReal x7351=r01*r01;
IkReal x7352=(r01*sj5);
IkReal x7353=(cj5*r00);
CheckValue<IkReal> x7354 = IKatan2WithCheck(IkReal((x7352+(((-1.0)*x7353)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7354.valid){
continue;
}
CheckValue<IkReal> x7355=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7350*(r00*r00)))+((x7350*x7351))+(((-1.0)*(r02*r02)))+(((2.0)*x7352*x7353))+(((-1.0)*x7351)))),-1);
if(!x7355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7354.value)+(((1.5707963267949)*(x7355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7356=IKsin(j4);
IkReal x7357=IKcos(j4);
IkReal x7358=((1.0)*cj5);
IkReal x7359=(r21*sj5);
IkReal x7360=(sj5*x7356);
IkReal x7361=((1.0)*x7356);
IkReal x7362=(sj5*x7357);
evalcond[0]=((((-1.0)*r20*x7356*x7358))+((x7356*x7359))+((r22*x7357)));
evalcond[1]=(((r11*x7360))+((r12*x7357))+(((-1.0)*r10*x7356*x7358)));
evalcond[2]=((1.0)+((r01*x7360))+(((-1.0)*r00*x7356*x7358))+((r02*x7357)));
evalcond[3]=(((r01*x7362))+(((-1.0)*r00*x7357*x7358))+(((-1.0)*r02*x7361)));
evalcond[4]=(((cj2*sj1))+((r11*x7362))+((cj1*sj2))+(((-1.0)*r12*x7361))+(((-1.0)*r10*x7357*x7358)));
evalcond[5]=((((-1.0)*r20*x7357*x7358))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7361))+((x7357*x7359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7363=((1.0)*sj5);
CheckValue<IkReal> x7364 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x7363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7364.valid){
continue;
}
CheckValue<IkReal> x7365=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7363))+(((-1.0)*cj5*r21)))),-1);
if(!x7365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7364.value)+(((1.5707963267949)*(x7365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7366=IKsin(j4);
IkReal x7367=IKcos(j4);
IkReal x7368=((1.0)*cj5);
IkReal x7369=(r21*sj5);
IkReal x7370=(sj5*x7366);
IkReal x7371=((1.0)*x7366);
IkReal x7372=(sj5*x7367);
evalcond[0]=((((-1.0)*r20*x7366*x7368))+((x7366*x7369))+((r22*x7367)));
evalcond[1]=(((r12*x7367))+(((-1.0)*r10*x7366*x7368))+((r11*x7370)));
evalcond[2]=((1.0)+(((-1.0)*r00*x7366*x7368))+((r01*x7370))+((r02*x7367)));
evalcond[3]=((((-1.0)*r00*x7367*x7368))+((r01*x7372))+(((-1.0)*r02*x7371)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r10*x7367*x7368))+((cj1*sj2))+((r11*x7372))+(((-1.0)*r12*x7371)));
evalcond[5]=((((-1.0)*r20*x7367*x7368))+((x7367*x7369))+(((-1.0)*r22*x7371))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7373=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7373.valid){
continue;
}
CheckValue<IkReal> x7374 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7373.value)))+(x7374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7375=IKsin(j4);
IkReal x7376=IKcos(j4);
IkReal x7377=((1.0)*cj5);
IkReal x7378=(r21*sj5);
IkReal x7379=(sj5*x7375);
IkReal x7380=((1.0)*x7375);
IkReal x7381=(sj5*x7376);
evalcond[0]=(((x7375*x7378))+(((-1.0)*r20*x7375*x7377))+((r22*x7376)));
evalcond[1]=((((-1.0)*r10*x7375*x7377))+((r12*x7376))+((r11*x7379)));
evalcond[2]=((1.0)+((r02*x7376))+(((-1.0)*r00*x7375*x7377))+((r01*x7379)));
evalcond[3]=((((-1.0)*r02*x7380))+(((-1.0)*r00*x7376*x7377))+((r01*x7381)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r10*x7376*x7377))+((cj1*sj2))+(((-1.0)*r12*x7380))+((r11*x7381)));
evalcond[5]=((((-1.0)*r22*x7380))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7376*x7378))+(((-1.0)*r20*x7376*x7377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7382=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7382);
rxp1_1=(px*r21);
rxp1_2=(r11*x7382);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7383=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7383);
rxp1_1=(px*r21);
rxp1_2=(r11*x7383);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7384=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7384);
rxp1_1=(px*r21);
rxp1_2=(r11*x7384);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7387=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x7387.valid){
continue;
}
IkReal x7385=x7387.value;
IkReal x7386=(sj0*x7385);
cj4array[0]=(((cj2*sj1*x7386))+((cj1*sj2*x7386)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7388=IKsin(j4);
IkReal x7389=IKcos(j4);
IkReal x7390=(r21*sj5);
IkReal x7391=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x7388);
evalcond[1]=((((-1.0)*sj0))+((r02*x7389)));
evalcond[2]=(((x7388*x7390))+(((-1.0)*x7388*x7391)));
evalcond[3]=(((r11*sj5*x7388))+(((-1.0)*cj5*r10*x7388)));
evalcond[4]=(((x7389*x7390))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7389*x7391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7393=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x7393.valid){
continue;
}
IkReal x7392=x7393.value;
cj4array[0]=((((-1.0)*sj1*sj2*x7392))+((cj1*cj2*x7392)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7394=IKsin(j4);
IkReal x7395=IKcos(j4);
IkReal x7396=((1.0)*sj0);
IkReal x7397=((1.0)*cj5);
IkReal x7398=(sj5*x7394);
evalcond[0]=((-1.0)*r02*x7394);
evalcond[1]=(((r02*x7395))+(((-1.0)*x7396)));
evalcond[2]=((((-1.0)*r20*x7394*x7397))+((r21*x7398)));
evalcond[3]=((((-1.0)*r10*x7394*x7397))+((r11*x7398)));
evalcond[4]=(((r11*sj5*x7395))+(((-1.0)*cj1*sj2*x7396))+(((-1.0)*r10*x7395*x7397))+(((-1.0)*cj2*sj1*x7396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7399=IKPowWithIntegerCheck(r02,-1);
if(!x7399.valid){
continue;
}
cj4array[0]=(sj0*(x7399.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7400=IKsin(j4);
IkReal x7401=IKcos(j4);
IkReal x7402=((1.0)*sj0);
IkReal x7403=(r21*sj5);
IkReal x7404=((1.0)*cj5);
IkReal x7405=(r11*sj5);
evalcond[0]=((-1.0)*r02*x7400);
evalcond[1]=((((-1.0)*r20*x7400*x7404))+((x7400*x7403)));
evalcond[2]=(((x7400*x7405))+(((-1.0)*r10*x7400*x7404)));
evalcond[3]=(((x7401*x7403))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x7401*x7404)));
evalcond[4]=((((-1.0)*cj1*sj2*x7402))+((x7401*x7405))+(((-1.0)*r10*x7401*x7404))+(((-1.0)*cj2*sj1*x7402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7406=((1.0)*sj0);
IkReal x7407=((1.0)*cj0);
CheckValue<IkReal> x7408 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7406))+(((-1.0)*r02*x7407)))),IkReal(((((-1.0)*cj5*r00*x7407))+((r11*sj0*sj5))+(((-1.0)*cj5*r10*x7406))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7408.valid){
continue;
}
CheckValue<IkReal> x7409=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x7409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7408.value)+(((1.5707963267949)*(x7409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7410=IKsin(j4);
IkReal x7411=IKcos(j4);
IkReal x7412=((1.0)*cj5);
IkReal x7413=(r21*sj5);
IkReal x7414=((1.0)*cj2);
IkReal x7415=((1.0)*sj0);
IkReal x7416=(cj1*sj2);
IkReal x7417=(sj5*x7410);
IkReal x7418=((1.0)*x7410);
IkReal x7419=(sj5*x7411);
evalcond[0]=(((x7410*x7413))+(((-1.0)*r20*x7410*x7412))+((r22*x7411)));
evalcond[1]=(cj0+(((-1.0)*r10*x7410*x7412))+((r12*x7411))+((r11*x7417)));
evalcond[2]=(((r02*x7411))+(((-1.0)*x7415))+(((-1.0)*r00*x7410*x7412))+((r01*x7417)));
evalcond[3]=((((-1.0)*cj1*x7414))+((sj1*sj2))+((x7411*x7413))+(((-1.0)*r20*x7411*x7412))+(((-1.0)*r22*x7418)));
evalcond[4]=((((-1.0)*r00*x7411*x7412))+(((-1.0)*cj0*x7416))+(((-1.0)*cj0*sj1*x7414))+((r01*x7419))+(((-1.0)*r02*x7418)));
evalcond[5]=((((-1.0)*r12*x7418))+(((-1.0)*x7415*x7416))+(((-1.0)*r10*x7411*x7412))+(((-1.0)*sj0*sj1*x7414))+((r11*x7419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7420=((1.0)*sj5);
CheckValue<IkReal> x7421 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7421.valid){
continue;
}
CheckValue<IkReal> x7422=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7420)))),-1);
if(!x7422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7421.value)+(((1.5707963267949)*(x7422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7423=IKsin(j4);
IkReal x7424=IKcos(j4);
IkReal x7425=((1.0)*cj5);
IkReal x7426=(r21*sj5);
IkReal x7427=((1.0)*cj2);
IkReal x7428=((1.0)*sj0);
IkReal x7429=(cj1*sj2);
IkReal x7430=(sj5*x7423);
IkReal x7431=((1.0)*x7423);
IkReal x7432=(sj5*x7424);
evalcond[0]=(((x7423*x7426))+(((-1.0)*r20*x7423*x7425))+((r22*x7424)));
evalcond[1]=(cj0+((r11*x7430))+((r12*x7424))+(((-1.0)*r10*x7423*x7425)));
evalcond[2]=(((r01*x7430))+((r02*x7424))+(((-1.0)*x7428))+(((-1.0)*r00*x7423*x7425)));
evalcond[3]=((((-1.0)*r20*x7424*x7425))+(((-1.0)*r22*x7431))+((x7424*x7426))+((sj1*sj2))+(((-1.0)*cj1*x7427)));
evalcond[4]=(((r01*x7432))+(((-1.0)*r00*x7424*x7425))+(((-1.0)*r02*x7431))+(((-1.0)*cj0*sj1*x7427))+(((-1.0)*cj0*x7429)));
evalcond[5]=((((-1.0)*r12*x7431))+(((-1.0)*r10*x7424*x7425))+(((-1.0)*x7428*x7429))+((r11*x7432))+(((-1.0)*sj0*sj1*x7427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7433=((1.0)*sj5);
CheckValue<IkReal> x7434 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7433))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7434.valid){
continue;
}
CheckValue<IkReal> x7435=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7433))+(((-1.0)*cj5*r01)))),-1);
if(!x7435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7434.value)+(((1.5707963267949)*(x7435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7436=IKsin(j4);
IkReal x7437=IKcos(j4);
IkReal x7438=((1.0)*cj5);
IkReal x7439=(r21*sj5);
IkReal x7440=((1.0)*cj2);
IkReal x7441=((1.0)*sj0);
IkReal x7442=(cj1*sj2);
IkReal x7443=(sj5*x7436);
IkReal x7444=((1.0)*x7436);
IkReal x7445=(sj5*x7437);
evalcond[0]=((((-1.0)*r20*x7436*x7438))+((x7436*x7439))+((r22*x7437)));
evalcond[1]=(cj0+((r11*x7443))+(((-1.0)*r10*x7436*x7438))+((r12*x7437)));
evalcond[2]=((((-1.0)*x7441))+((r02*x7437))+(((-1.0)*r00*x7436*x7438))+((r01*x7443)));
evalcond[3]=((((-1.0)*cj1*x7440))+((x7437*x7439))+((sj1*sj2))+(((-1.0)*r22*x7444))+(((-1.0)*r20*x7437*x7438)));
evalcond[4]=((((-1.0)*cj0*x7442))+(((-1.0)*cj0*sj1*x7440))+(((-1.0)*r00*x7437*x7438))+((r01*x7445))+(((-1.0)*r02*x7444)));
evalcond[5]=(((r11*x7445))+(((-1.0)*sj0*sj1*x7440))+(((-1.0)*r10*x7437*x7438))+(((-1.0)*x7441*x7442))+(((-1.0)*r12*x7444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7446=cj5*cj5;
IkReal x7447=r21*r21;
IkReal x7448=(sj1*sj2);
IkReal x7449=(r21*sj5);
IkReal x7450=(cj1*cj2);
IkReal x7451=(cj5*r20);
CheckValue<IkReal> x7452=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x7446*x7447))+(((-2.0)*x7449*x7451))+x7447+((x7446*(r20*r20))))),-1);
if(!x7452.valid){
continue;
}
CheckValue<IkReal> x7453 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7450))+((r22*x7448)))),IkReal(((((-1.0)*x7448*x7449))+((x7449*x7450))+((x7448*x7451))+(((-1.0)*x7450*x7451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7452.value)))+(x7453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7454=IKsin(j4);
IkReal x7455=IKcos(j4);
IkReal x7456=(r21*sj5);
IkReal x7457=(cj5*r20);
IkReal x7458=((1.0)*x7454);
evalcond[0]=(((x7454*x7456))+(((-1.0)*x7457*x7458))+((r22*x7455)));
evalcond[1]=(((x7455*x7456))+(((-1.0)*x7455*x7457))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7459=(cj5*sj4);
IkReal x7460=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x7459))+((r01*x7460))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x7460))+((r10*x7459))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x7459))+((r01*x7460))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x7460))+((r10*x7459))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x7459))+((r01*x7460))+((cj4*r02))), ((((-1.0)*r11*x7460))+((r10*x7459))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7461=IKcos(j0);
IkReal x7462=IKsin(j0);
IkReal x7463=(cj5*r01);
IkReal x7464=(r11*sj5);
IkReal x7465=((0.098)*sj5);
IkReal x7466=((1.0)*cj5);
IkReal x7467=((0.398)*sj2);
IkReal x7468=((1.0)*sj4);
IkReal x7469=((1.0)*cj2);
IkReal x7470=((0.398)*cj2);
IkReal x7471=(cj5*r11);
IkReal x7472=(r01*sj5);
IkReal x7473=((1.0)*cj1*sj2);
IkReal x7474=(sj1*x7461);
IkReal x7475=(cj1*x7462);
IkReal x7476=(sj1*x7462);
IkReal x7477=(cj1*x7461);
evalcond[0]=(((sj4*x7464))+(((-1.0)*r10*sj4*x7466))+x7461+((cj4*r12)));
evalcond[1]=(((sj4*x7472))+(((-1.0)*r00*sj4*x7466))+(((-1.0)*x7462))+((cj4*r02)));
evalcond[2]=(((r00*sj5))+((sj2*x7474))+x7463+(((-1.0)*x7469*x7477)));
evalcond[3]=(((r10*sj5))+((sj2*x7476))+x7471+(((-1.0)*x7469*x7475)));
evalcond[4]=((((-1.0)*r02*x7468))+(((-1.0)*x7461*x7473))+(((-1.0)*cj4*r00*x7466))+((cj4*x7472))+(((-1.0)*x7469*x7474)));
evalcond[5]=((((-1.0)*cj4*r10*x7466))+(((-1.0)*x7462*x7473))+(((-1.0)*r12*x7468))+((cj4*x7464))+(((-1.0)*x7469*x7476)));
evalcond[6]=((((-1.0)*x7467*x7474))+(((0.418)*x7477))+((x7470*x7477))+(((-1.0)*px))+(((-0.122)*x7462))+(((0.098)*x7463))+(((-1.53e-6)*x7474))+((r00*x7465)));
evalcond[7]=(((r10*x7465))+(((-1.0)*x7467*x7476))+(((0.418)*x7475))+((x7470*x7475))+(((0.098)*x7471))+(((-1.0)*py))+(((0.122)*x7461))+(((-1.53e-6)*x7476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7478=((1.0)*cj5);
IkReal x7479=((1.0)*sj5);
CheckValue<IkReal> x7480 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7478))+(((-1.0)*r10*x7479)))),IkReal(((((-1.0)*r00*x7479))+(((-1.0)*r01*x7478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7480.valid){
continue;
}
CheckValue<IkReal> x7481=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x7481.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7480.value)+(((1.5707963267949)*(x7481.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7482=IKcos(j0);
IkReal x7483=IKsin(j0);
IkReal x7484=(cj5*r01);
IkReal x7485=((0.098)*sj5);
IkReal x7486=(cj5*r11);
IkReal x7487=((1.53e-6)*sj1);
IkReal x7488=((1.0)*cj2);
IkReal x7489=((0.398)*cj1*cj2);
IkReal x7490=(cj1*x7483);
IkReal x7491=(cj1*x7482);
IkReal x7492=(sj1*sj2*x7482);
IkReal x7493=(sj1*sj2*x7483);
evalcond[0]=(((r00*sj5))+(((-1.0)*x7488*x7491))+x7492+x7484);
evalcond[1]=(((r10*sj5))+(((-1.0)*x7488*x7490))+x7493+x7486);
evalcond[2]=((((-1.0)*x7482*x7487))+((r00*x7485))+(((-0.398)*x7492))+(((-1.0)*px))+(((0.418)*x7491))+((x7482*x7489))+(((-0.122)*x7483))+(((0.098)*x7484)));
evalcond[3]=((((-0.398)*x7493))+(((-1.0)*py))+((r10*x7485))+(((0.418)*x7490))+((x7483*x7489))+(((0.098)*x7486))+(((0.122)*x7482))+(((-1.0)*x7483*x7487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7494=((1.0)*sj5);
IkReal x7495=((((-1.0)*r00*x7494))+(((-1.0)*cj5*r01)));
j4eval[0]=x7495;
j4eval[1]=IKsign(x7495);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7494))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7496=((1.0)*sj5);
IkReal x7497=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7496)));
j4eval[0]=x7497;
j4eval[1]=IKsign(x7497);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x7496))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7498=((1.0)*sj0);
IkReal x7499=((1.0)*cj0);
IkReal x7500=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7500;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x7498))+(((-1.0)*cj5*r00*x7499))+((cj0*r01*sj5)))))+(IKabs(((((-1.0)*r02*x7499))+(((-1.0)*r12*x7498))))));
j4eval[2]=IKsign(x7500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7501=((-1.0)*r20);
IkReal x7503 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7503)==0){
continue;
}
IkReal x7502=pow(x7503,-0.5);
CheckValue<IkReal> x7504 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7501),IKFAST_ATAN2_MAGTHRESH);
if(!x7504.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7504.value));
IkReal gconst133=(r21*x7502);
IkReal gconst134=(x7501*x7502);
CheckValue<IkReal> x7505 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7505.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7505.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7506=((-1.0)*r20);
IkReal x7507=x7502;
CheckValue<IkReal> x7509 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7506),IKFAST_ATAN2_MAGTHRESH);
if(!x7509.valid){
continue;
}
IkReal x7508=((-1.0)*(x7509.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7508;
IkReal gconst132=x7508;
IkReal gconst133=(r21*x7507);
IkReal gconst134=(x7506*x7507);
IkReal x7510=r22*r22;
IkReal x7511=((1.0)*x7510);
CheckValue<IkReal> x7515=IKPowWithIntegerCheck(((-1.0)+x7510),-1);
if(!x7515.valid){
continue;
}
IkReal x7512=x7515.value;
if((((1.0)+(((-1.0)*x7511)))) < -0.00001)
continue;
IkReal x7513=IKsqrt(((1.0)+(((-1.0)*x7511))));
IkReal x7514=(cj0*x7512*x7513);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x7511*x7514))+x7514))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7516=((-1.0)*r20);
IkReal x7517=x7502;
CheckValue<IkReal> x7519 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7516),IKFAST_ATAN2_MAGTHRESH);
if(!x7519.valid){
continue;
}
IkReal x7518=((-1.0)*(x7519.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7518;
IkReal gconst132=x7518;
IkReal gconst133=(r21*x7517);
IkReal gconst134=(x7516*x7517);
IkReal x7520=r22*r22;
IkReal x7521=((1.0)*x7520);
CheckValue<IkReal> x7525=IKPowWithIntegerCheck(((-1.0)+x7520),-1);
if(!x7525.valid){
continue;
}
IkReal x7522=x7525.value;
if((((1.0)+(((-1.0)*x7521)))) < -0.00001)
continue;
IkReal x7523=IKsqrt(((1.0)+(((-1.0)*x7521))));
IkReal x7524=(sj0*x7522*x7523);
j4eval[0]=((IKabs(((((-1.0)*x7521*x7524))+x7524)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7526=((-1.0)*r20);
IkReal x7527=x7502;
CheckValue<IkReal> x7529 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7526),IKFAST_ATAN2_MAGTHRESH);
if(!x7529.valid){
continue;
}
IkReal x7528=((-1.0)*(x7529.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7528;
IkReal gconst132=x7528;
IkReal gconst133=(r21*x7527);
IkReal gconst134=(x7526*x7527);
IkReal x7530=r22*r22;
CheckValue<IkReal> x7533=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7530))),-1);
if(!x7533.valid){
continue;
}
IkReal x7531=x7533.value;
IkReal x7532=(((x7531*(r20*r20*r20*r20)))+(((2.0)*x7531*(r20*r20)*(r21*r21)))+((x7531*(r21*r21*r21*r21)))+x7530);
j4eval[0]=x7532;
j4eval[1]=IKsign(x7532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7534=(gconst134*r20);
IkReal x7535=(cj1*cj2);
IkReal x7536=(gconst133*r21);
IkReal x7537=(sj1*sj2);
CheckValue<IkReal> x7538 = IKatan2WithCheck(IkReal((((r22*x7537))+(((-1.0)*r22*x7535)))),IkReal(((((-1.0)*x7536*x7537))+((x7534*x7537))+((x7535*x7536))+(((-1.0)*x7534*x7535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7538.valid){
continue;
}
CheckValue<IkReal> x7539=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7534*x7536))+(x7534*x7534)+(x7536*x7536))),-1);
if(!x7539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7538.value)+(((1.5707963267949)*(x7539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7540=IKsin(j4);
IkReal x7541=IKcos(j4);
IkReal x7542=((1.0)*cj2);
IkReal x7543=((1.0)*sj0);
IkReal x7544=(gconst134*r10);
IkReal x7545=(gconst134*r20);
IkReal x7546=(cj1*sj2);
IkReal x7547=((1.0)*gconst134*r00);
IkReal x7548=(gconst133*x7541);
IkReal x7549=((1.0)*x7540);
IkReal x7550=(gconst133*x7540);
IkReal x7551=((1.0)*x7541);
evalcond[0]=(((r21*x7550))+((r22*x7541))+(((-1.0)*x7545*x7549)));
evalcond[1]=(cj0+(((-1.0)*x7544*x7549))+((r12*x7541))+((r11*x7550)));
evalcond[2]=(((r02*x7541))+(((-1.0)*x7540*x7547))+(((-1.0)*x7543))+((r01*x7550)));
evalcond[3]=(((r21*x7548))+(((-1.0)*r22*x7549))+((sj1*sj2))+(((-1.0)*x7545*x7551))+(((-1.0)*cj1*x7542)));
evalcond[4]=((((-1.0)*cj0*sj1*x7542))+(((-1.0)*cj0*x7546))+((r01*x7548))+(((-1.0)*x7541*x7547))+(((-1.0)*r02*x7549)));
evalcond[5]=((((-1.0)*x7543*x7546))+(((-1.0)*x7544*x7551))+((r11*x7548))+(((-1.0)*r12*x7549))+(((-1.0)*sj0*sj1*x7542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7552=((1.0)*gconst133);
CheckValue<IkReal> x7553 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst134*r20*sj0))+(((-1.0)*r21*sj0*x7552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7553.valid){
continue;
}
CheckValue<IkReal> x7554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7552))+(((-1.0)*gconst134*r11)))),-1);
if(!x7554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7553.value)+(((1.5707963267949)*(x7554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7555=IKsin(j4);
IkReal x7556=IKcos(j4);
IkReal x7557=((1.0)*cj2);
IkReal x7558=((1.0)*sj0);
IkReal x7559=(gconst134*r10);
IkReal x7560=(gconst134*r20);
IkReal x7561=(cj1*sj2);
IkReal x7562=((1.0)*gconst134*r00);
IkReal x7563=(gconst133*x7556);
IkReal x7564=((1.0)*x7555);
IkReal x7565=(gconst133*x7555);
IkReal x7566=((1.0)*x7556);
evalcond[0]=(((r21*x7565))+((r22*x7556))+(((-1.0)*x7560*x7564)));
evalcond[1]=(cj0+(((-1.0)*x7559*x7564))+((r11*x7565))+((r12*x7556)));
evalcond[2]=((((-1.0)*x7555*x7562))+((r02*x7556))+(((-1.0)*x7558))+((r01*x7565)));
evalcond[3]=((((-1.0)*r22*x7564))+((r21*x7563))+((sj1*sj2))+(((-1.0)*x7560*x7566))+(((-1.0)*cj1*x7557)));
evalcond[4]=((((-1.0)*cj0*sj1*x7557))+(((-1.0)*r02*x7564))+(((-1.0)*x7556*x7562))+((r01*x7563))+(((-1.0)*cj0*x7561)));
evalcond[5]=((((-1.0)*x7559*x7566))+((r11*x7563))+(((-1.0)*r12*x7564))+(((-1.0)*sj0*sj1*x7557))+(((-1.0)*x7558*x7561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7567=((1.0)*gconst133);
CheckValue<IkReal> x7568 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7567))+((cj0*gconst134*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7568.valid){
continue;
}
CheckValue<IkReal> x7569=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7567))+(((-1.0)*gconst134*r01)))),-1);
if(!x7569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7568.value)+(((1.5707963267949)*(x7569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7570=IKsin(j4);
IkReal x7571=IKcos(j4);
IkReal x7572=((1.0)*cj2);
IkReal x7573=((1.0)*sj0);
IkReal x7574=(gconst134*r10);
IkReal x7575=(gconst134*r20);
IkReal x7576=(cj1*sj2);
IkReal x7577=((1.0)*gconst134*r00);
IkReal x7578=(gconst133*x7571);
IkReal x7579=((1.0)*x7570);
IkReal x7580=(gconst133*x7570);
IkReal x7581=((1.0)*x7571);
evalcond[0]=((((-1.0)*x7575*x7579))+((r22*x7571))+((r21*x7580)));
evalcond[1]=(cj0+((r12*x7571))+(((-1.0)*x7574*x7579))+((r11*x7580)));
evalcond[2]=((((-1.0)*x7573))+((r02*x7571))+((r01*x7580))+(((-1.0)*x7570*x7577)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x7572))+(((-1.0)*r22*x7579))+(((-1.0)*x7575*x7581))+((r21*x7578)));
evalcond[4]=((((-1.0)*x7571*x7577))+(((-1.0)*cj0*sj1*x7572))+((r01*x7578))+(((-1.0)*cj0*x7576))+(((-1.0)*r02*x7579)));
evalcond[5]=((((-1.0)*x7574*x7581))+(((-1.0)*r12*x7579))+(((-1.0)*x7573*x7576))+(((-1.0)*sj0*sj1*x7572))+((r11*x7578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7582=((-1.0)*r21);
IkReal x7584 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7584)==0){
continue;
}
IkReal x7583=pow(x7584,-0.5);
CheckValue<IkReal> x7585 = IKatan2WithCheck(IkReal(x7582),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7585.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7585.value))));
IkReal gconst136=(x7582*x7583);
IkReal gconst137=((1.0)*r20*x7583);
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7586.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7587=((-1.0)*r21);
CheckValue<IkReal> x7590 = IKatan2WithCheck(IkReal(x7587),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7590.valid){
continue;
}
IkReal x7588=((1.0)*(x7590.value));
IkReal x7589=x7583;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7588)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7588)));
IkReal gconst136=(x7587*x7589);
IkReal gconst137=((1.0)*r20*x7589);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7591=((-1.0)*r21);
CheckValue<IkReal> x7594 = IKatan2WithCheck(IkReal(x7591),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7594.valid){
continue;
}
IkReal x7592=((1.0)*(x7594.value));
IkReal x7593=x7583;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7592)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7592)));
IkReal gconst136=(x7591*x7593);
IkReal gconst137=((1.0)*r20*x7593);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7595=((-1.0)*r21);
CheckValue<IkReal> x7598 = IKatan2WithCheck(IkReal(x7595),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7598.valid){
continue;
}
IkReal x7596=((1.0)*(x7598.value));
IkReal x7597=x7583;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7596)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7596)));
IkReal gconst136=(x7595*x7597);
IkReal gconst137=((1.0)*r20*x7597);
IkReal x7599=r22*r22;
IkReal x7600=((1.0)*r12*sj0);
IkReal x7601=((1.0)*cj0*r02);
CheckValue<IkReal> x7605=IKPowWithIntegerCheck(((-1.0)+x7599),-1);
if(!x7605.valid){
continue;
}
IkReal x7602=x7605.value;
if((((1.0)+(((-1.0)*x7599)))) < -0.00001)
continue;
IkReal x7603=IKsqrt(((1.0)+(((-1.0)*x7599))));
IkReal x7604=(r22*x7602*x7603);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7601*x7604))+(((-1.0)*x7600*x7604)))))+(IKabs(((((-1.0)*x7600))+(((-1.0)*x7601))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7606=((1.0)*sj0);
IkReal x7607=((1.0)*cj0);
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7607))+(((-1.0)*r12*x7606)))),IkReal((((gconst136*r11*sj0))+((cj0*gconst136*r01))+(((-1.0)*gconst137*r00*x7607))+(((-1.0)*gconst137*r10*x7606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
CheckValue<IkReal> x7609=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7608.value)+(((1.5707963267949)*(x7609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7610=IKsin(j4);
IkReal x7611=IKcos(j4);
IkReal x7612=(gconst136*r01);
IkReal x7613=((1.0)*gconst137);
IkReal x7614=((1.0)*cj2);
IkReal x7615=((1.0)*sj0);
IkReal x7616=(cj1*sj2);
IkReal x7617=(gconst136*x7610);
IkReal x7618=((1.0)*x7610);
IkReal x7619=(gconst136*x7611);
evalcond[0]=(((r21*x7617))+(((-1.0)*r20*x7610*x7613))+((r22*x7611)));
evalcond[1]=(((r12*x7611))+cj0+((r11*x7617))+(((-1.0)*r10*x7610*x7613)));
evalcond[2]=((((-1.0)*x7615))+(((-1.0)*r00*x7610*x7613))+((r02*x7611))+((x7610*x7612)));
evalcond[3]=(((r21*x7619))+(((-1.0)*r22*x7618))+((sj1*sj2))+(((-1.0)*cj1*x7614))+(((-1.0)*r20*x7611*x7613)));
evalcond[4]=((((-1.0)*r00*x7611*x7613))+(((-1.0)*cj0*x7616))+(((-1.0)*r02*x7618))+(((-1.0)*cj0*sj1*x7614))+((x7611*x7612)));
evalcond[5]=((((-1.0)*r12*x7618))+((r11*x7619))+(((-1.0)*x7615*x7616))+(((-1.0)*r10*x7611*x7613))+(((-1.0)*sj0*sj1*x7614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7620=((1.0)*gconst136);
CheckValue<IkReal> x7621=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r11))+(((-1.0)*r10*x7620)))),-1);
if(!x7621.valid){
continue;
}
CheckValue<IkReal> x7622 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*r21*sj0*x7620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7621.value)))+(x7622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7623=IKsin(j4);
IkReal x7624=IKcos(j4);
IkReal x7625=(gconst136*r01);
IkReal x7626=((1.0)*gconst137);
IkReal x7627=((1.0)*cj2);
IkReal x7628=((1.0)*sj0);
IkReal x7629=(cj1*sj2);
IkReal x7630=(gconst136*x7623);
IkReal x7631=((1.0)*x7623);
IkReal x7632=(gconst136*x7624);
evalcond[0]=(((r21*x7630))+((r22*x7624))+(((-1.0)*r20*x7623*x7626)));
evalcond[1]=(cj0+((r11*x7630))+((r12*x7624))+(((-1.0)*r10*x7623*x7626)));
evalcond[2]=((((-1.0)*r00*x7623*x7626))+((r02*x7624))+(((-1.0)*x7628))+((x7623*x7625)));
evalcond[3]=((((-1.0)*r22*x7631))+((r21*x7632))+((sj1*sj2))+(((-1.0)*cj1*x7627))+(((-1.0)*r20*x7624*x7626)));
evalcond[4]=(((x7624*x7625))+(((-1.0)*r02*x7631))+(((-1.0)*r00*x7624*x7626))+(((-1.0)*cj0*x7629))+(((-1.0)*cj0*sj1*x7627)));
evalcond[5]=((((-1.0)*sj0*sj1*x7627))+((r11*x7632))+(((-1.0)*r10*x7624*x7626))+(((-1.0)*x7628*x7629))+(((-1.0)*r12*x7631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7633=((1.0)*gconst136);
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7633))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
CheckValue<IkReal> x7635=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r01))+(((-1.0)*r00*x7633)))),-1);
if(!x7635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7634.value)+(((1.5707963267949)*(x7635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7636=IKsin(j4);
IkReal x7637=IKcos(j4);
IkReal x7638=(gconst136*r01);
IkReal x7639=((1.0)*gconst137);
IkReal x7640=((1.0)*cj2);
IkReal x7641=((1.0)*sj0);
IkReal x7642=(cj1*sj2);
IkReal x7643=(gconst136*x7636);
IkReal x7644=((1.0)*x7636);
IkReal x7645=(gconst136*x7637);
evalcond[0]=((((-1.0)*r20*x7636*x7639))+((r21*x7643))+((r22*x7637)));
evalcond[1]=(cj0+((r12*x7637))+(((-1.0)*r10*x7636*x7639))+((r11*x7643)));
evalcond[2]=(((r02*x7637))+(((-1.0)*r00*x7636*x7639))+(((-1.0)*x7641))+((x7636*x7638)));
evalcond[3]=((((-1.0)*r22*x7644))+(((-1.0)*r20*x7637*x7639))+((sj1*sj2))+((r21*x7645))+(((-1.0)*cj1*x7640)));
evalcond[4]=((((-1.0)*cj0*sj1*x7640))+(((-1.0)*cj0*x7642))+(((-1.0)*r02*x7644))+((x7637*x7638))+(((-1.0)*r00*x7637*x7639)));
evalcond[5]=((((-1.0)*sj0*sj1*x7640))+(((-1.0)*r12*x7644))+(((-1.0)*r10*x7637*x7639))+(((-1.0)*x7641*x7642))+((r11*x7645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7646=((-1.0)*r10);
IkReal x7648 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7648)==0){
continue;
}
IkReal x7647=pow(x7648,-0.5);
CheckValue<IkReal> x7649 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7646),IKFAST_ATAN2_MAGTHRESH);
if(!x7649.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7649.value));
IkReal gconst139=(r11*x7647);
IkReal gconst140=(x7646*x7647);
CheckValue<IkReal> x7650 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7650.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7650.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7651=((-1.0)*r10);
IkReal x7652=x7647;
CheckValue<IkReal> x7654 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7651),IKFAST_ATAN2_MAGTHRESH);
if(!x7654.valid){
continue;
}
IkReal x7653=((-1.0)*(x7654.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7653;
IkReal gconst138=x7653;
IkReal gconst139=(r11*x7652);
IkReal gconst140=(x7651*x7652);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7655=((-1.0)*r10);
IkReal x7656=x7647;
CheckValue<IkReal> x7658 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7655),IKFAST_ATAN2_MAGTHRESH);
if(!x7658.valid){
continue;
}
IkReal x7657=((-1.0)*(x7658.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7657;
IkReal gconst138=x7657;
IkReal gconst139=(r11*x7656);
IkReal gconst140=(x7655*x7656);
IkReal x7659=r12*r12;
IkReal x7660=((1.0)*sj0);
IkReal x7661=(cj0*r02);
IkReal x7662=x7647;
j4eval[0]=((IKabs(((((-1.0)*r12*x7660))+(((-1.0)*x7661)))))+(IKabs((((sj0*x7659*x7662))+((r12*x7661*x7662))+(((-1.0)*x7660*x7662))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7663=((-1.0)*r10);
IkReal x7664=x7647;
CheckValue<IkReal> x7666 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7663),IKFAST_ATAN2_MAGTHRESH);
if(!x7666.valid){
continue;
}
IkReal x7665=((-1.0)*(x7666.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7665;
IkReal gconst138=x7665;
IkReal gconst139=(r11*x7664);
IkReal gconst140=(x7663*x7664);
IkReal x7667=r12*r12;
IkReal x7668=(cj1*cj2*r22);
IkReal x7669=(r22*sj1*sj2);
CheckValue<IkReal> x7673=IKPowWithIntegerCheck(((-1.0)+x7667),-1);
if(!x7673.valid){
continue;
}
IkReal x7670=x7673.value;
if((((1.0)+(((-1.0)*x7667)))) < -0.00001)
continue;
IkReal x7671=IKsqrt(((1.0)+(((-1.0)*x7667))));
IkReal x7672=(r12*x7670*x7671);
j4eval[0]=((IKabs(((((-1.0)*x7668))+x7669)))+(IKabs(((((-1.0)*x7669*x7672))+((x7668*x7672))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7674=(cj1*cj2);
IkReal x7675=(gconst140*r20);
IkReal x7676=(sj1*sj2);
IkReal x7677=(gconst139*r21);
CheckValue<IkReal> x7678 = IKatan2WithCheck(IkReal((((r22*x7676))+(((-1.0)*r22*x7674)))),IkReal((((x7675*x7676))+(((-1.0)*x7676*x7677))+(((-1.0)*x7674*x7675))+((x7674*x7677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7678.valid){
continue;
}
CheckValue<IkReal> x7679=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7675*x7677))+(r22*r22)+(x7675*x7675)+(x7677*x7677))),-1);
if(!x7679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7678.value)+(((1.5707963267949)*(x7679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7680=IKsin(j4);
IkReal x7681=IKcos(j4);
IkReal x7682=(gconst140*r00);
IkReal x7683=(gconst139*r11);
IkReal x7684=((1.0)*cj2);
IkReal x7685=((1.0)*sj0);
IkReal x7686=(gconst140*r10);
IkReal x7687=(gconst140*r20);
IkReal x7688=(cj1*sj2);
IkReal x7689=((1.0)*x7680);
IkReal x7690=(gconst139*x7681);
IkReal x7691=((1.0)*x7681);
IkReal x7692=(gconst139*x7680);
evalcond[0]=((((-1.0)*x7687*x7689))+((r21*x7692))+((r22*x7681)));
evalcond[1]=(((x7680*x7683))+cj0+((r12*x7681))+(((-1.0)*x7686*x7689)));
evalcond[2]=((((-1.0)*x7682*x7689))+((r01*x7692))+(((-1.0)*x7685))+((r02*x7681)));
evalcond[3]=((((-1.0)*x7687*x7691))+(((-1.0)*r22*x7689))+((sj1*sj2))+(((-1.0)*cj1*x7684))+((r21*x7690)));
evalcond[4]=((((-1.0)*cj0*sj1*x7684))+(((-1.0)*x7682*x7691))+((r01*x7690))+(((-1.0)*cj0*x7688))+(((-1.0)*r02*x7689)));
evalcond[5]=((((-1.0)*sj0*sj1*x7684))+((x7681*x7683))+(((-1.0)*x7686*x7691))+(((-1.0)*r12*x7689))+(((-1.0)*x7685*x7688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7693=((1.0)*sj0);
IkReal x7694=((1.0)*gconst140);
CheckValue<IkReal> x7695 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7693))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst140*r10*x7693))+((gconst139*r11*sj0))+(((-1.0)*cj0*r00*x7694))+((cj0*gconst139*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7695.valid){
continue;
}
CheckValue<IkReal> x7696=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7694))+(((-1.0)*gconst139*r20)))),-1);
if(!x7696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7695.value)+(((1.5707963267949)*(x7696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7697=IKsin(j4);
IkReal x7698=IKcos(j4);
IkReal x7699=(gconst140*r00);
IkReal x7700=(gconst139*r11);
IkReal x7701=((1.0)*cj2);
IkReal x7702=((1.0)*sj0);
IkReal x7703=(gconst140*r10);
IkReal x7704=(gconst140*r20);
IkReal x7705=(cj1*sj2);
IkReal x7706=((1.0)*x7697);
IkReal x7707=(gconst139*x7698);
IkReal x7708=((1.0)*x7698);
IkReal x7709=(gconst139*x7697);
evalcond[0]=(((r21*x7709))+(((-1.0)*x7704*x7706))+((r22*x7698)));
evalcond[1]=(cj0+((r12*x7698))+(((-1.0)*x7703*x7706))+((x7697*x7700)));
evalcond[2]=(((r02*x7698))+(((-1.0)*x7702))+((r01*x7709))+(((-1.0)*x7699*x7706)));
evalcond[3]=(((r21*x7707))+(((-1.0)*r22*x7706))+((sj1*sj2))+(((-1.0)*cj1*x7701))+(((-1.0)*x7704*x7708)));
evalcond[4]=((((-1.0)*cj0*sj1*x7701))+((r01*x7707))+(((-1.0)*r02*x7706))+(((-1.0)*x7699*x7708))+(((-1.0)*cj0*x7705)));
evalcond[5]=(((x7698*x7700))+(((-1.0)*r12*x7706))+(((-1.0)*x7702*x7705))+(((-1.0)*x7703*x7708))+(((-1.0)*sj0*sj1*x7701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7710=((1.0)*gconst139);
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst140*r20))+(((-1.0)*cj0*r21*x7710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
CheckValue<IkReal> x7712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7710))+(((-1.0)*gconst140*r01)))),-1);
if(!x7712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7711.value)+(((1.5707963267949)*(x7712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7713=IKsin(j4);
IkReal x7714=IKcos(j4);
IkReal x7715=(gconst140*r00);
IkReal x7716=(gconst139*r11);
IkReal x7717=((1.0)*cj2);
IkReal x7718=((1.0)*sj0);
IkReal x7719=(gconst140*r10);
IkReal x7720=(gconst140*r20);
IkReal x7721=(cj1*sj2);
IkReal x7722=((1.0)*x7713);
IkReal x7723=(gconst139*x7714);
IkReal x7724=((1.0)*x7714);
IkReal x7725=(gconst139*x7713);
evalcond[0]=(((r21*x7725))+((r22*x7714))+(((-1.0)*x7720*x7722)));
evalcond[1]=(cj0+((r12*x7714))+(((-1.0)*x7719*x7722))+((x7713*x7716)));
evalcond[2]=((((-1.0)*x7715*x7722))+((r02*x7714))+((r01*x7725))+(((-1.0)*x7718)));
evalcond[3]=(((sj1*sj2))+((r21*x7723))+(((-1.0)*cj1*x7717))+(((-1.0)*x7720*x7724))+(((-1.0)*r22*x7722)));
evalcond[4]=((((-1.0)*x7715*x7724))+((r01*x7723))+(((-1.0)*cj0*x7721))+(((-1.0)*cj0*sj1*x7717))+(((-1.0)*r02*x7722)));
evalcond[5]=((((-1.0)*x7719*x7724))+(((-1.0)*x7718*x7721))+((x7714*x7716))+(((-1.0)*sj0*sj1*x7717))+(((-1.0)*r12*x7722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7726=((-1.0)*r11);
IkReal x7728 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7728)==0){
continue;
}
IkReal x7727=pow(x7728,-0.5);
CheckValue<IkReal> x7729 = IKatan2WithCheck(IkReal(x7726),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7729.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7729.value))));
IkReal gconst142=(x7726*x7727);
IkReal gconst143=((1.0)*r10*x7727);
CheckValue<IkReal> x7730 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7730.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7730.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7731=((-1.0)*r11);
CheckValue<IkReal> x7734 = IKatan2WithCheck(IkReal(x7731),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7734.valid){
continue;
}
IkReal x7732=((1.0)*(x7734.value));
IkReal x7733=x7727;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7732)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7732)));
IkReal gconst142=(x7731*x7733);
IkReal gconst143=((1.0)*r10*x7733);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7735=((1.0)*sj0);
IkReal x7736=((1.0)*gconst143);
CheckValue<IkReal> x7737 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7735))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst142*r01))+((gconst142*r11*sj0))+(((-1.0)*gconst143*r10*x7735))+(((-1.0)*cj0*r00*x7736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7737.valid){
continue;
}
CheckValue<IkReal> x7738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7736))+(((-1.0)*gconst142*r20)))),-1);
if(!x7738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7737.value)+(((1.5707963267949)*(x7738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7739=IKsin(j4);
IkReal x7740=IKcos(j4);
IkReal x7741=(gconst143*r20);
IkReal x7742=(gconst142*r01);
IkReal x7743=((1.0)*cj2);
IkReal x7744=((1.0)*sj0);
IkReal x7745=(gconst143*r00);
IkReal x7746=(gconst143*r10);
IkReal x7747=(cj1*sj2);
IkReal x7748=((1.0)*x7739);
IkReal x7749=(gconst142*x7739);
IkReal x7750=((1.0)*x7740);
IkReal x7751=(gconst142*x7740);
evalcond[0]=((((-1.0)*x7741*x7748))+((r22*x7740))+((r21*x7749)));
evalcond[1]=(((r12*x7740))+cj0+(((-1.0)*x7746*x7748))+((r11*x7749)));
evalcond[2]=(((r02*x7740))+(((-1.0)*x7744))+((x7739*x7742))+(((-1.0)*x7745*x7748)));
evalcond[3]=((((-1.0)*r22*x7748))+(((-1.0)*x7741*x7750))+((sj1*sj2))+(((-1.0)*cj1*x7743))+((r21*x7751)));
evalcond[4]=((((-1.0)*cj0*x7747))+(((-1.0)*r02*x7748))+((x7740*x7742))+(((-1.0)*cj0*sj1*x7743))+(((-1.0)*x7745*x7750)));
evalcond[5]=((((-1.0)*x7744*x7747))+(((-1.0)*sj0*sj1*x7743))+(((-1.0)*r12*x7748))+(((-1.0)*x7746*x7750))+((r11*x7751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7752=((1.0)*gconst142);
CheckValue<IkReal> x7753=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r01))+(((-1.0)*r00*x7752)))),-1);
if(!x7753.valid){
continue;
}
CheckValue<IkReal> x7754 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x7752))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7753.value)))+(x7754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7755=IKsin(j4);
IkReal x7756=IKcos(j4);
IkReal x7757=(gconst143*r20);
IkReal x7758=(gconst142*r01);
IkReal x7759=((1.0)*cj2);
IkReal x7760=((1.0)*sj0);
IkReal x7761=(gconst143*r00);
IkReal x7762=(gconst143*r10);
IkReal x7763=(cj1*sj2);
IkReal x7764=((1.0)*x7755);
IkReal x7765=(gconst142*x7755);
IkReal x7766=((1.0)*x7756);
IkReal x7767=(gconst142*x7756);
evalcond[0]=((((-1.0)*x7757*x7764))+((r21*x7765))+((r22*x7756)));
evalcond[1]=(cj0+(((-1.0)*x7762*x7764))+((r11*x7765))+((r12*x7756)));
evalcond[2]=(((r02*x7756))+((x7755*x7758))+(((-1.0)*x7761*x7764))+(((-1.0)*x7760)));
evalcond[3]=((((-1.0)*r22*x7764))+(((-1.0)*x7757*x7766))+((sj1*sj2))+((r21*x7767))+(((-1.0)*cj1*x7759)));
evalcond[4]=((((-1.0)*cj0*x7763))+(((-1.0)*r02*x7764))+((x7756*x7758))+(((-1.0)*x7761*x7766))+(((-1.0)*cj0*sj1*x7759)));
evalcond[5]=((((-1.0)*x7760*x7763))+(((-1.0)*sj0*sj1*x7759))+(((-1.0)*r12*x7764))+(((-1.0)*x7762*x7766))+((r11*x7767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7768=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7768;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7769=((1.0)*sj5);
IkReal x7770=((((-1.0)*r00*x7769))+(((-1.0)*cj5*r01)));
j4eval[0]=x7770;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x7769)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7770);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7771=cj5*cj5;
IkReal x7772=r11*r11;
IkReal x7773=(cj5*r10);
IkReal x7774=(r11*sj5);
IkReal x7775=((((2.0)*x7773*x7774))+((x7771*x7772))+(((-1.0)*x7771*(r10*r10)))+(((-1.0)*x7772))+(((-1.0)*(r12*r12))));
j4eval[0]=x7775;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7773))+x7774))));
j4eval[2]=IKsign(x7775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7776=cj5*cj5;
IkReal x7777=r11*r11;
IkReal x7778=(cj5*r10);
IkReal x7779=(r11*sj5);
CheckValue<IkReal> x7780 = IKatan2WithCheck(IkReal(((((-1.0)*x7778))+x7779)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7780.valid){
continue;
}
CheckValue<IkReal> x7781=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7776*(r10*r10)))+(((2.0)*x7778*x7779))+(((-1.0)*x7777))+((x7776*x7777))+(((-1.0)*(r12*r12))))),-1);
if(!x7781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7780.value)+(((1.5707963267949)*(x7781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7782=IKsin(j4);
IkReal x7783=IKcos(j4);
IkReal x7784=((1.0)*cj5);
IkReal x7785=(r21*sj5);
IkReal x7786=((1.0)*cj2);
IkReal x7787=(sj5*x7782);
IkReal x7788=((1.0)*x7782);
IkReal x7789=(sj5*x7783);
evalcond[0]=((((-1.0)*r20*x7782*x7784))+((x7782*x7785))+((r22*x7783)));
evalcond[1]=((((-1.0)*r00*x7782*x7784))+((r01*x7787))+((r02*x7783)));
evalcond[2]=((1.0)+(((-1.0)*r10*x7782*x7784))+((r11*x7787))+((r12*x7783)));
evalcond[3]=((((-1.0)*r10*x7783*x7784))+((r11*x7789))+(((-1.0)*r12*x7788)));
evalcond[4]=((((-1.0)*cj1*x7786))+(((-1.0)*r20*x7783*x7784))+((sj1*sj2))+((x7783*x7785))+(((-1.0)*r22*x7788)));
evalcond[5]=(((r01*x7789))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x7788))+(((-1.0)*r00*x7783*x7784))+(((-1.0)*sj1*x7786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7790=((1.0)*sj5);
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
CheckValue<IkReal> x7792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7790))+(((-1.0)*cj5*r01)))),-1);
if(!x7792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7791.value)+(((1.5707963267949)*(x7792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7793=IKsin(j4);
IkReal x7794=IKcos(j4);
IkReal x7795=((1.0)*cj5);
IkReal x7796=(r21*sj5);
IkReal x7797=((1.0)*cj2);
IkReal x7798=(sj5*x7793);
IkReal x7799=((1.0)*x7793);
IkReal x7800=(sj5*x7794);
evalcond[0]=((((-1.0)*r20*x7793*x7795))+((x7793*x7796))+((r22*x7794)));
evalcond[1]=(((r02*x7794))+((r01*x7798))+(((-1.0)*r00*x7793*x7795)));
evalcond[2]=((1.0)+((r12*x7794))+((r11*x7798))+(((-1.0)*r10*x7793*x7795)));
evalcond[3]=(((r11*x7800))+(((-1.0)*r12*x7799))+(((-1.0)*r10*x7794*x7795)));
evalcond[4]=((((-1.0)*r22*x7799))+((sj1*sj2))+((x7794*x7796))+(((-1.0)*cj1*x7797))+(((-1.0)*r20*x7794*x7795)));
evalcond[5]=(((r01*x7800))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x7794*x7795))+(((-1.0)*sj1*x7797))+(((-1.0)*r02*x7799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7801=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7801.valid){
continue;
}
CheckValue<IkReal> x7802 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7801.value)))+(x7802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7803=IKsin(j4);
IkReal x7804=IKcos(j4);
IkReal x7805=((1.0)*cj5);
IkReal x7806=(r21*sj5);
IkReal x7807=((1.0)*cj2);
IkReal x7808=(sj5*x7803);
IkReal x7809=((1.0)*x7803);
IkReal x7810=(sj5*x7804);
evalcond[0]=(((x7803*x7806))+((r22*x7804))+(((-1.0)*r20*x7803*x7805)));
evalcond[1]=((((-1.0)*r00*x7803*x7805))+((r01*x7808))+((r02*x7804)));
evalcond[2]=((1.0)+((r11*x7808))+((r12*x7804))+(((-1.0)*r10*x7803*x7805)));
evalcond[3]=(((r11*x7810))+(((-1.0)*r12*x7809))+(((-1.0)*r10*x7804*x7805)));
evalcond[4]=((((-1.0)*cj1*x7807))+((sj1*sj2))+(((-1.0)*r22*x7809))+(((-1.0)*r20*x7804*x7805))+((x7804*x7806)));
evalcond[5]=((((-1.0)*r02*x7809))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x7804*x7805))+(((-1.0)*sj1*x7807))+((r01*x7810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7811=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7811;
j4eval[1]=IKsign(x7811);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7812=((1.0)*sj5);
IkReal x7813=((((-1.0)*r20*x7812))+(((-1.0)*cj5*r21)));
j4eval[0]=x7813;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7812))+((cj5*r00))))));
j4eval[2]=IKsign(x7813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7814=cj5*cj5;
IkReal x7815=r11*r11;
IkReal x7816=(r11*sj5);
IkReal x7817=(cj5*r10);
IkReal x7818=((r12*r12)+(((-1.0)*x7814*x7815))+x7815+(((-2.0)*x7816*x7817))+((x7814*(r10*r10))));
j4eval[0]=x7818;
j4eval[1]=IKsign(x7818);
j4eval[2]=((IKabs(((((-1.0)*x7817))+x7816)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7819=cj5*cj5;
IkReal x7820=r11*r11;
IkReal x7821=(cj5*r10);
IkReal x7822=(r11*sj5);
CheckValue<IkReal> x7823 = IKatan2WithCheck(IkReal(((((-1.0)*x7821))+x7822)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7823.valid){
continue;
}
CheckValue<IkReal> x7824=IKPowWithIntegerCheck(IKsign(((r12*r12)+x7820+((x7819*(r10*r10)))+(((-2.0)*x7821*x7822))+(((-1.0)*x7819*x7820)))),-1);
if(!x7824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7823.value)+(((1.5707963267949)*(x7824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7825=IKsin(j4);
IkReal x7826=IKcos(j4);
IkReal x7827=((1.0)*cj5);
IkReal x7828=(r21*sj5);
IkReal x7829=(sj5*x7825);
IkReal x7830=((1.0)*x7825);
IkReal x7831=(sj5*x7826);
evalcond[0]=(((x7825*x7828))+((r22*x7826))+(((-1.0)*r20*x7825*x7827)));
evalcond[1]=((((-1.0)*r00*x7825*x7827))+((r02*x7826))+((r01*x7829)));
evalcond[2]=((-1.0)+((r12*x7826))+(((-1.0)*r10*x7825*x7827))+((r11*x7829)));
evalcond[3]=((((-1.0)*r10*x7826*x7827))+(((-1.0)*r12*x7830))+((r11*x7831)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x7830))+((r01*x7831))+(((-1.0)*r00*x7826*x7827)));
evalcond[5]=((((-1.0)*r22*x7830))+((x7826*x7828))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x7826*x7827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7832=((1.0)*sj5);
CheckValue<IkReal> x7833=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7832))+(((-1.0)*cj5*r21)))),-1);
if(!x7833.valid){
continue;
}
CheckValue<IkReal> x7834 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7832))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7833.value)))+(x7834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7835=IKsin(j4);
IkReal x7836=IKcos(j4);
IkReal x7837=((1.0)*cj5);
IkReal x7838=(r21*sj5);
IkReal x7839=(sj5*x7835);
IkReal x7840=((1.0)*x7835);
IkReal x7841=(sj5*x7836);
evalcond[0]=(((x7835*x7838))+(((-1.0)*r20*x7835*x7837))+((r22*x7836)));
evalcond[1]=((((-1.0)*r00*x7835*x7837))+((r01*x7839))+((r02*x7836)));
evalcond[2]=((-1.0)+((r12*x7836))+(((-1.0)*r10*x7835*x7837))+((r11*x7839)));
evalcond[3]=((((-1.0)*r12*x7840))+(((-1.0)*r10*x7836*x7837))+((r11*x7841)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r00*x7836*x7837))+(((-1.0)*r02*x7840))+((r01*x7841)));
evalcond[5]=(((x7836*x7838))+(((-1.0)*r22*x7840))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x7836*x7837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7842=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7842.valid){
continue;
}
CheckValue<IkReal> x7843 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7842.value)))+(x7843.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7844=IKsin(j4);
IkReal x7845=IKcos(j4);
IkReal x7846=((1.0)*cj5);
IkReal x7847=(r21*sj5);
IkReal x7848=(sj5*x7844);
IkReal x7849=((1.0)*x7844);
IkReal x7850=(sj5*x7845);
evalcond[0]=((((-1.0)*r20*x7844*x7846))+((x7844*x7847))+((r22*x7845)));
evalcond[1]=(((r01*x7848))+(((-1.0)*r00*x7844*x7846))+((r02*x7845)));
evalcond[2]=((-1.0)+((r12*x7845))+(((-1.0)*r10*x7844*x7846))+((r11*x7848)));
evalcond[3]=(((r11*x7850))+(((-1.0)*r10*x7845*x7846))+(((-1.0)*r12*x7849)));
evalcond[4]=((((-1.0)*r00*x7845*x7846))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x7849))+((r01*x7850)));
evalcond[5]=((((-1.0)*r22*x7849))+(((-1.0)*r20*x7845*x7846))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7845*x7847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7851=((-1.0)*r00);
IkReal x7853 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7853)==0){
continue;
}
IkReal x7852=pow(x7853,-0.5);
CheckValue<IkReal> x7854 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7851),IKFAST_ATAN2_MAGTHRESH);
if(!x7854.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7854.value));
IkReal gconst145=(r01*x7852);
IkReal gconst146=(x7851*x7852);
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7855.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7856=((-1.0)*r00);
IkReal x7857=x7852;
CheckValue<IkReal> x7859 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7856),IKFAST_ATAN2_MAGTHRESH);
if(!x7859.valid){
continue;
}
IkReal x7858=((-1.0)*(x7859.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7858;
IkReal gconst144=x7858;
IkReal gconst145=(r01*x7857);
IkReal gconst146=(x7856*x7857);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7860=((-1.0)*r00);
IkReal x7861=x7852;
CheckValue<IkReal> x7863 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7860),IKFAST_ATAN2_MAGTHRESH);
if(!x7863.valid){
continue;
}
IkReal x7862=((-1.0)*(x7863.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7862;
IkReal gconst144=x7862;
IkReal gconst145=(r01*x7861);
IkReal gconst146=(x7860*x7861);
IkReal x7864=r02*r02;
IkReal x7865=(r12*sj0);
IkReal x7866=((1.0)*cj0);
IkReal x7867=x7852;
j4eval[0]=((IKabs((((cj0*x7864*x7867))+((r02*x7865*x7867))+(((-1.0)*x7866*x7867)))))+(IKabs(((((-1.0)*x7865))+(((-1.0)*r02*x7866))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7868=((-1.0)*r00);
IkReal x7869=x7852;
CheckValue<IkReal> x7871 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7868),IKFAST_ATAN2_MAGTHRESH);
if(!x7871.valid){
continue;
}
IkReal x7870=((-1.0)*(x7871.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7870;
IkReal gconst144=x7870;
IkReal gconst145=(r01*x7869);
IkReal gconst146=(x7868*x7869);
IkReal x7872=r02*r02;
IkReal x7873=(r22*sj1*sj2);
IkReal x7874=(cj1*cj2*r22);
CheckValue<IkReal> x7878=IKPowWithIntegerCheck(((-1.0)+x7872),-1);
if(!x7878.valid){
continue;
}
IkReal x7875=x7878.value;
if((((1.0)+(((-1.0)*x7872)))) < -0.00001)
continue;
IkReal x7876=IKsqrt(((1.0)+(((-1.0)*x7872))));
IkReal x7877=(r02*x7875*x7876);
j4eval[0]=((IKabs(((((-1.0)*x7874))+x7873)))+(IKabs(((((-1.0)*x7873*x7877))+((x7874*x7877))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7879=(sj1*sj2);
IkReal x7880=(gconst146*r20);
IkReal x7881=(cj1*cj2);
IkReal x7882=(gconst145*r21);
CheckValue<IkReal> x7883=IKPowWithIntegerCheck(IKsign(((x7880*x7880)+(r22*r22)+(x7882*x7882)+(((-2.0)*x7880*x7882)))),-1);
if(!x7883.valid){
continue;
}
CheckValue<IkReal> x7884 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7881))+((r22*x7879)))),IkReal(((((-1.0)*x7879*x7882))+((x7881*x7882))+((x7879*x7880))+(((-1.0)*x7880*x7881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7883.value)))+(x7884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7885=IKsin(j4);
IkReal x7886=IKcos(j4);
IkReal x7887=(gconst145*r21);
IkReal x7888=((1.0)*cj2);
IkReal x7889=((1.0)*sj0);
IkReal x7890=(gconst145*r11);
IkReal x7891=(gconst145*r01);
IkReal x7892=(cj1*sj2);
IkReal x7893=((1.0)*x7885);
IkReal x7894=(gconst146*x7893);
IkReal x7895=((1.0)*gconst146*x7886);
evalcond[0]=(((x7885*x7887))+(((-1.0)*r20*x7894))+((r22*x7886)));
evalcond[1]=(cj0+((r12*x7886))+(((-1.0)*r10*x7894))+((x7885*x7890)));
evalcond[2]=((((-1.0)*x7889))+(((-1.0)*r00*x7894))+((x7885*x7891))+((r02*x7886)));
evalcond[3]=(((x7886*x7887))+(((-1.0)*r20*x7895))+(((-1.0)*cj1*x7888))+((sj1*sj2))+(((-1.0)*r22*x7893)));
evalcond[4]=((((-1.0)*cj0*sj1*x7888))+((x7886*x7891))+(((-1.0)*r00*x7895))+(((-1.0)*cj0*x7892))+(((-1.0)*r02*x7893)));
evalcond[5]=((((-1.0)*r12*x7893))+(((-1.0)*x7889*x7892))+(((-1.0)*sj0*sj1*x7888))+((x7886*x7890))+(((-1.0)*r10*x7895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7896=((1.0)*sj0);
IkReal x7897=((1.0)*cj0);
CheckValue<IkReal> x7898 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7896))+(((-1.0)*r02*x7897)))),IkReal(((((-1.0)*gconst146*r00*x7897))+((cj0*gconst145*r01))+(((-1.0)*gconst146*r10*x7896))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7898.valid){
continue;
}
CheckValue<IkReal> x7899=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*gconst145*r20)))),-1);
if(!x7899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7898.value)+(((1.5707963267949)*(x7899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7900=IKsin(j4);
IkReal x7901=IKcos(j4);
IkReal x7902=(gconst145*r21);
IkReal x7903=((1.0)*cj2);
IkReal x7904=((1.0)*sj0);
IkReal x7905=(gconst145*r11);
IkReal x7906=(gconst145*r01);
IkReal x7907=(cj1*sj2);
IkReal x7908=((1.0)*x7900);
IkReal x7909=(gconst146*x7908);
IkReal x7910=((1.0)*gconst146*x7901);
evalcond[0]=((((-1.0)*r20*x7909))+((r22*x7901))+((x7900*x7902)));
evalcond[1]=(cj0+((r12*x7901))+((x7900*x7905))+(((-1.0)*r10*x7909)));
evalcond[2]=(((r02*x7901))+(((-1.0)*r00*x7909))+(((-1.0)*x7904))+((x7900*x7906)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x7910))+(((-1.0)*cj1*x7903))+(((-1.0)*r22*x7908))+((x7901*x7902)));
evalcond[4]=((((-1.0)*cj0*sj1*x7903))+(((-1.0)*cj0*x7907))+((x7901*x7906))+(((-1.0)*r00*x7910))+(((-1.0)*r02*x7908)));
evalcond[5]=((((-1.0)*r12*x7908))+(((-1.0)*sj0*sj1*x7903))+(((-1.0)*r10*x7910))+(((-1.0)*x7904*x7907))+((x7901*x7905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7911=((1.0)*gconst145);
CheckValue<IkReal> x7912=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r11))+(((-1.0)*r10*x7911)))),-1);
if(!x7912.valid){
continue;
}
CheckValue<IkReal> x7913 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7911))+((gconst146*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7912.value)))+(x7913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7914=IKsin(j4);
IkReal x7915=IKcos(j4);
IkReal x7916=(gconst145*r21);
IkReal x7917=((1.0)*cj2);
IkReal x7918=((1.0)*sj0);
IkReal x7919=(gconst145*r11);
IkReal x7920=(gconst145*r01);
IkReal x7921=(cj1*sj2);
IkReal x7922=((1.0)*x7914);
IkReal x7923=(gconst146*x7922);
IkReal x7924=((1.0)*gconst146*x7915);
evalcond[0]=(((r22*x7915))+(((-1.0)*r20*x7923))+((x7914*x7916)));
evalcond[1]=(cj0+((r12*x7915))+(((-1.0)*r10*x7923))+((x7914*x7919)));
evalcond[2]=((((-1.0)*x7918))+((r02*x7915))+((x7914*x7920))+(((-1.0)*r00*x7923)));
evalcond[3]=((((-1.0)*r22*x7922))+((sj1*sj2))+(((-1.0)*cj1*x7917))+(((-1.0)*r20*x7924))+((x7915*x7916)));
evalcond[4]=((((-1.0)*r02*x7922))+(((-1.0)*cj0*sj1*x7917))+(((-1.0)*cj0*x7921))+((x7915*x7920))+(((-1.0)*r00*x7924)));
evalcond[5]=((((-1.0)*r10*x7924))+(((-1.0)*r12*x7922))+((x7915*x7919))+(((-1.0)*x7918*x7921))+(((-1.0)*sj0*sj1*x7917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7925=((-1.0)*r01);
IkReal x7927 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7927)==0){
continue;
}
IkReal x7926=pow(x7927,-0.5);
CheckValue<IkReal> x7928 = IKatan2WithCheck(IkReal(x7925),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7928.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7928.value))));
IkReal gconst148=(x7925*x7926);
IkReal gconst149=((1.0)*r00*x7926);
CheckValue<IkReal> x7929 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7929.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7929.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7930=((-1.0)*r01);
CheckValue<IkReal> x7933 = IKatan2WithCheck(IkReal(x7930),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7933.valid){
continue;
}
IkReal x7931=((1.0)*(x7933.value));
IkReal x7932=x7926;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7931)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7931)));
IkReal gconst148=(x7930*x7932);
IkReal gconst149=((1.0)*r00*x7932);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7934=((-1.0)*r01);
CheckValue<IkReal> x7937 = IKatan2WithCheck(IkReal(x7934),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7937.valid){
continue;
}
IkReal x7935=((1.0)*(x7937.value));
IkReal x7936=x7926;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7935)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7935)));
IkReal gconst148=(x7934*x7936);
IkReal gconst149=((1.0)*r00*x7936);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7938=((1.0)*sj0);
IkReal x7939=((1.0)*gconst149);
CheckValue<IkReal> x7940=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7939)))),-1);
if(!x7940.valid){
continue;
}
CheckValue<IkReal> x7941 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7938))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x7939))+((cj0*gconst148*r01))+(((-1.0)*gconst149*r10*x7938))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7940.value)))+(x7941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7942=IKsin(j4);
IkReal x7943=IKcos(j4);
IkReal x7944=((1.0)*gconst149);
IkReal x7945=((1.0)*cj2);
IkReal x7946=((1.0)*sj0);
IkReal x7947=(cj1*sj2);
IkReal x7948=(gconst148*x7943);
IkReal x7949=(gconst148*x7942);
IkReal x7950=((1.0)*x7942);
evalcond[0]=(((r21*x7949))+(((-1.0)*r20*x7942*x7944))+((r22*x7943)));
evalcond[1]=(cj0+((r11*x7949))+((r12*x7943))+(((-1.0)*r10*x7942*x7944)));
evalcond[2]=(((r02*x7943))+(((-1.0)*r00*x7942*x7944))+((r01*x7949))+(((-1.0)*x7946)));
evalcond[3]=(((r21*x7948))+(((-1.0)*r22*x7950))+((sj1*sj2))+(((-1.0)*r20*x7943*x7944))+(((-1.0)*cj1*x7945)));
evalcond[4]=((((-1.0)*cj0*x7947))+(((-1.0)*r00*x7943*x7944))+(((-1.0)*r02*x7950))+(((-1.0)*cj0*sj1*x7945))+((r01*x7948)));
evalcond[5]=(((r11*x7948))+(((-1.0)*r10*x7943*x7944))+(((-1.0)*sj0*sj1*x7945))+(((-1.0)*x7946*x7947))+(((-1.0)*r12*x7950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7951=((1.0)*gconst148);
CheckValue<IkReal> x7952 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst149*r20*sj0))+(((-1.0)*r21*sj0*x7951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7952.valid){
continue;
}
CheckValue<IkReal> x7953=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r11))+(((-1.0)*r10*x7951)))),-1);
if(!x7953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7952.value)+(((1.5707963267949)*(x7953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7954=IKsin(j4);
IkReal x7955=IKcos(j4);
IkReal x7956=((1.0)*gconst149);
IkReal x7957=((1.0)*cj2);
IkReal x7958=((1.0)*sj0);
IkReal x7959=(cj1*sj2);
IkReal x7960=(gconst148*x7955);
IkReal x7961=(gconst148*x7954);
IkReal x7962=((1.0)*x7954);
evalcond[0]=(((r21*x7961))+((r22*x7955))+(((-1.0)*r20*x7954*x7956)));
evalcond[1]=(((r12*x7955))+((r11*x7961))+cj0+(((-1.0)*r10*x7954*x7956)));
evalcond[2]=((((-1.0)*r00*x7954*x7956))+((r01*x7961))+(((-1.0)*x7958))+((r02*x7955)));
evalcond[3]=(((r21*x7960))+(((-1.0)*cj1*x7957))+(((-1.0)*r22*x7962))+((sj1*sj2))+(((-1.0)*r20*x7955*x7956)));
evalcond[4]=((((-1.0)*cj0*sj1*x7957))+(((-1.0)*r00*x7955*x7956))+((r01*x7960))+(((-1.0)*cj0*x7959))+(((-1.0)*r02*x7962)));
evalcond[5]=((((-1.0)*x7958*x7959))+(((-1.0)*r10*x7955*x7956))+((r11*x7960))+(((-1.0)*sj0*sj1*x7957))+(((-1.0)*r12*x7962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7963=((1.0)*gconst148);
CheckValue<IkReal> x7964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r01))+(((-1.0)*r00*x7963)))),-1);
if(!x7964.valid){
continue;
}
CheckValue<IkReal> x7965 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst149*r20))+(((-1.0)*cj0*r21*x7963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7964.value)))+(x7965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7966=IKsin(j4);
IkReal x7967=IKcos(j4);
IkReal x7968=((1.0)*gconst149);
IkReal x7969=((1.0)*cj2);
IkReal x7970=((1.0)*sj0);
IkReal x7971=(cj1*sj2);
IkReal x7972=(gconst148*x7967);
IkReal x7973=(gconst148*x7966);
IkReal x7974=((1.0)*x7966);
evalcond[0]=((((-1.0)*r20*x7966*x7968))+((r22*x7967))+((r21*x7973)));
evalcond[1]=(cj0+((r11*x7973))+((r12*x7967))+(((-1.0)*r10*x7966*x7968)));
evalcond[2]=(((r01*x7973))+(((-1.0)*x7970))+((r02*x7967))+(((-1.0)*r00*x7966*x7968)));
evalcond[3]=((((-1.0)*r22*x7974))+(((-1.0)*cj1*x7969))+((sj1*sj2))+(((-1.0)*r20*x7967*x7968))+((r21*x7972)));
evalcond[4]=(((r01*x7972))+(((-1.0)*cj0*x7971))+(((-1.0)*r02*x7974))+(((-1.0)*r00*x7967*x7968))+(((-1.0)*cj0*sj1*x7969)));
evalcond[5]=(((r11*x7972))+(((-1.0)*sj0*sj1*x7969))+(((-1.0)*x7970*x7971))+(((-1.0)*r12*x7974))+(((-1.0)*r10*x7967*x7968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7975=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7975;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x7975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7976=((1.0)*sj5);
IkReal x7977=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7976)));
j4eval[0]=x7977;
j4eval[1]=IKsign(x7977);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7976))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7978=cj5*cj5;
IkReal x7979=r01*r01;
IkReal x7980=(cj5*r00);
IkReal x7981=(r01*sj5);
IkReal x7982=(((x7978*(r00*r00)))+(((-1.0)*x7978*x7979))+(((-2.0)*x7980*x7981))+x7979+(r02*r02));
j4eval[0]=x7982;
j4eval[1]=((IKabs(r02))+(IKabs((x7981+(((-1.0)*x7980))))));
j4eval[2]=IKsign(x7982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7983=cj5*cj5;
IkReal x7984=r01*r01;
IkReal x7985=(r01*sj5);
IkReal x7986=(cj5*r00);
CheckValue<IkReal> x7987=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7983*x7984))+((x7983*(r00*r00)))+x7984+(r02*r02)+(((-2.0)*x7985*x7986)))),-1);
if(!x7987.valid){
continue;
}
CheckValue<IkReal> x7988 = IKatan2WithCheck(IkReal((x7985+(((-1.0)*x7986)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7987.value)))+(x7988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7989=IKsin(j4);
IkReal x7990=IKcos(j4);
IkReal x7991=((1.0)*cj5);
IkReal x7992=(r21*sj5);
IkReal x7993=((1.0)*cj2);
IkReal x7994=(sj5*x7989);
IkReal x7995=((1.0)*x7989);
IkReal x7996=(sj5*x7990);
evalcond[0]=((((-1.0)*r20*x7989*x7991))+((r22*x7990))+((x7989*x7992)));
evalcond[1]=(((r11*x7994))+(((-1.0)*r10*x7989*x7991))+((r12*x7990)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x7989*x7991))+((r01*x7994))+((r02*x7990)));
evalcond[3]=(((r01*x7996))+(((-1.0)*r02*x7995))+(((-1.0)*r00*x7990*x7991)));
evalcond[4]=(((x7990*x7992))+((sj1*sj2))+(((-1.0)*cj1*x7993))+(((-1.0)*r20*x7990*x7991))+(((-1.0)*r22*x7995)));
evalcond[5]=((((-1.0)*sj1*x7993))+((r11*x7996))+(((-1.0)*r12*x7995))+(((-1.0)*cj1*sj2))+(((-1.0)*r10*x7990*x7991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7997=((1.0)*sj5);
CheckValue<IkReal> x7998=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7997)))),-1);
if(!x7998.valid){
continue;
}
CheckValue<IkReal> x7999 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x7997))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7998.value)))+(x7999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8000=IKsin(j4);
IkReal x8001=IKcos(j4);
IkReal x8002=((1.0)*cj5);
IkReal x8003=(r21*sj5);
IkReal x8004=((1.0)*cj2);
IkReal x8005=(sj5*x8000);
IkReal x8006=((1.0)*x8000);
IkReal x8007=(sj5*x8001);
evalcond[0]=(((x8000*x8003))+((r22*x8001))+(((-1.0)*r20*x8000*x8002)));
evalcond[1]=(((r11*x8005))+((r12*x8001))+(((-1.0)*r10*x8000*x8002)));
evalcond[2]=((-1.0)+((r01*x8005))+(((-1.0)*r00*x8000*x8002))+((r02*x8001)));
evalcond[3]=(((r01*x8007))+(((-1.0)*r00*x8001*x8002))+(((-1.0)*r02*x8006)));
evalcond[4]=(((x8001*x8003))+((sj1*sj2))+(((-1.0)*cj1*x8004))+(((-1.0)*r22*x8006))+(((-1.0)*r20*x8001*x8002)));
evalcond[5]=(((r11*x8007))+(((-1.0)*cj1*sj2))+(((-1.0)*r10*x8001*x8002))+(((-1.0)*r12*x8006))+(((-1.0)*sj1*x8004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8008 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8008.valid){
continue;
}
CheckValue<IkReal> x8009=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8008.value)+(((1.5707963267949)*(x8009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8010=IKsin(j4);
IkReal x8011=IKcos(j4);
IkReal x8012=((1.0)*cj5);
IkReal x8013=(r21*sj5);
IkReal x8014=((1.0)*cj2);
IkReal x8015=(sj5*x8010);
IkReal x8016=((1.0)*x8010);
IkReal x8017=(sj5*x8011);
evalcond[0]=(((r22*x8011))+(((-1.0)*r20*x8010*x8012))+((x8010*x8013)));
evalcond[1]=(((r12*x8011))+(((-1.0)*r10*x8010*x8012))+((r11*x8015)));
evalcond[2]=((-1.0)+((r02*x8011))+((r01*x8015))+(((-1.0)*r00*x8010*x8012)));
evalcond[3]=((((-1.0)*r02*x8016))+((r01*x8017))+(((-1.0)*r00*x8011*x8012)));
evalcond[4]=((((-1.0)*r22*x8016))+(((-1.0)*cj1*x8014))+((sj1*sj2))+(((-1.0)*r20*x8011*x8012))+((x8011*x8013)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x8017))+(((-1.0)*sj1*x8014))+(((-1.0)*r10*x8011*x8012))+(((-1.0)*r12*x8016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8018=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8018;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x8018);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8019=((1.0)*sj5);
IkReal x8020=((((-1.0)*r20*x8019))+(((-1.0)*cj5*r21)));
j4eval[0]=x8020;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x8019)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8021=cj5*cj5;
IkReal x8022=r01*r01;
IkReal x8023=(r01*sj5);
IkReal x8024=(cj5*r00);
IkReal x8025=((((-1.0)*x8022))+(((-1.0)*(r02*r02)))+(((2.0)*x8023*x8024))+(((-1.0)*x8021*(r00*r00)))+((x8021*x8022)));
j4eval[0]=x8025;
j4eval[1]=IKsign(x8025);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8024))+x8023))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8026=cj5*cj5;
IkReal x8027=r01*r01;
IkReal x8028=(r01*sj5);
IkReal x8029=(cj5*r00);
CheckValue<IkReal> x8030=IKPowWithIntegerCheck(IKsign((((x8026*x8027))+(((2.0)*x8028*x8029))+(((-1.0)*x8027))+(((-1.0)*(r02*r02)))+(((-1.0)*x8026*(r00*r00))))),-1);
if(!x8030.valid){
continue;
}
CheckValue<IkReal> x8031 = IKatan2WithCheck(IkReal(((((-1.0)*x8029))+x8028)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8030.value)))+(x8031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8032=IKsin(j4);
IkReal x8033=IKcos(j4);
IkReal x8034=((1.0)*cj5);
IkReal x8035=(r21*sj5);
IkReal x8036=(sj5*x8032);
IkReal x8037=((1.0)*x8032);
IkReal x8038=(sj5*x8033);
evalcond[0]=(((x8032*x8035))+(((-1.0)*r20*x8032*x8034))+((r22*x8033)));
evalcond[1]=(((r12*x8033))+((r11*x8036))+(((-1.0)*r10*x8032*x8034)));
evalcond[2]=((1.0)+(((-1.0)*r00*x8032*x8034))+((r02*x8033))+((r01*x8036)));
evalcond[3]=((((-1.0)*r00*x8033*x8034))+(((-1.0)*r02*x8037))+((r01*x8038)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x8037))+((cj1*sj2))+(((-1.0)*r10*x8033*x8034))+((r11*x8038)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8037))+((x8033*x8035))+(((-1.0)*r20*x8033*x8034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8039=((1.0)*sj5);
CheckValue<IkReal> x8040 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x8039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8040.valid){
continue;
}
CheckValue<IkReal> x8041=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8039))+(((-1.0)*cj5*r21)))),-1);
if(!x8041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8040.value)+(((1.5707963267949)*(x8041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8042=IKsin(j4);
IkReal x8043=IKcos(j4);
IkReal x8044=((1.0)*cj5);
IkReal x8045=(r21*sj5);
IkReal x8046=(sj5*x8042);
IkReal x8047=((1.0)*x8042);
IkReal x8048=(sj5*x8043);
evalcond[0]=((((-1.0)*r20*x8042*x8044))+((r22*x8043))+((x8042*x8045)));
evalcond[1]=((((-1.0)*r10*x8042*x8044))+((r11*x8046))+((r12*x8043)));
evalcond[2]=((1.0)+((r01*x8046))+(((-1.0)*r00*x8042*x8044))+((r02*x8043)));
evalcond[3]=(((r01*x8048))+(((-1.0)*r00*x8043*x8044))+(((-1.0)*r02*x8047)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r10*x8043*x8044))+((r11*x8048))+(((-1.0)*r12*x8047)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x8043*x8044))+((x8043*x8045))+(((-1.0)*r22*x8047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8049=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8049.valid){
continue;
}
CheckValue<IkReal> x8050 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8049.value)))+(x8050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8051=IKsin(j4);
IkReal x8052=IKcos(j4);
IkReal x8053=((1.0)*cj5);
IkReal x8054=(r21*sj5);
IkReal x8055=(sj5*x8051);
IkReal x8056=((1.0)*x8051);
IkReal x8057=(sj5*x8052);
evalcond[0]=(((x8051*x8054))+((r22*x8052))+(((-1.0)*r20*x8051*x8053)));
evalcond[1]=(((r11*x8055))+((r12*x8052))+(((-1.0)*r10*x8051*x8053)));
evalcond[2]=((1.0)+((r02*x8052))+(((-1.0)*r00*x8051*x8053))+((r01*x8055)));
evalcond[3]=((((-1.0)*r02*x8056))+((r01*x8057))+(((-1.0)*r00*x8052*x8053)));
evalcond[4]=((((-1.0)*r12*x8056))+((cj2*sj1))+((cj1*sj2))+((r11*x8057))+(((-1.0)*r10*x8052*x8053)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x8052*x8053))+(((-1.0)*r22*x8056))+((x8052*x8054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8058=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8058);
rxp1_1=(px*r21);
rxp1_2=(r11*x8058);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8059=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8059);
rxp1_1=(px*r21);
rxp1_2=(r11*x8059);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8060=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8060);
rxp1_1=(px*r21);
rxp1_2=(r11*x8060);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8063=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x8063.valid){
continue;
}
IkReal x8061=x8063.value;
IkReal x8062=(sj0*x8061);
cj4array[0]=(((cj1*sj2*x8062))+((cj2*sj1*x8062)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8064=IKsin(j4);
IkReal x8065=IKcos(j4);
IkReal x8066=(r21*sj5);
IkReal x8067=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x8064);
evalcond[1]=((((-1.0)*sj0))+((r02*x8065)));
evalcond[2]=((((-1.0)*x8064*x8067))+((x8064*x8066)));
evalcond[3]=(((r11*sj5*x8064))+(((-1.0)*cj5*r10*x8064)));
evalcond[4]=(((x8065*x8066))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8065*x8067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8069=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x8069.valid){
continue;
}
IkReal x8068=x8069.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8068))+((cj1*cj2*x8068)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8070=IKsin(j4);
IkReal x8071=IKcos(j4);
IkReal x8072=((1.0)*sj0);
IkReal x8073=((1.0)*cj5);
IkReal x8074=(sj5*x8070);
evalcond[0]=((-1.0)*r02*x8070);
evalcond[1]=(((r02*x8071))+(((-1.0)*x8072)));
evalcond[2]=((((-1.0)*r20*x8070*x8073))+((r21*x8074)));
evalcond[3]=(((r11*x8074))+(((-1.0)*r10*x8070*x8073)));
evalcond[4]=((((-1.0)*r10*x8071*x8073))+(((-1.0)*cj1*sj2*x8072))+((r11*sj5*x8071))+(((-1.0)*cj2*sj1*x8072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8075=IKPowWithIntegerCheck(r02,-1);
if(!x8075.valid){
continue;
}
cj4array[0]=(sj0*(x8075.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8076=IKsin(j4);
IkReal x8077=IKcos(j4);
IkReal x8078=((1.0)*sj0);
IkReal x8079=(r21*sj5);
IkReal x8080=((1.0)*cj5);
IkReal x8081=(r11*sj5);
evalcond[0]=((-1.0)*r02*x8076);
evalcond[1]=(((x8076*x8079))+(((-1.0)*r20*x8076*x8080)));
evalcond[2]=(((x8076*x8081))+(((-1.0)*r10*x8076*x8080)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8077*x8079))+(((-1.0)*r20*x8077*x8080)));
evalcond[4]=((((-1.0)*cj1*sj2*x8078))+((x8077*x8081))+(((-1.0)*r10*x8077*x8080))+(((-1.0)*cj2*sj1*x8078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8082=((1.0)*sj0);
IkReal x8083=((1.0)*cj0);
CheckValue<IkReal> x8084 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8083))+(((-1.0)*r12*x8082)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x8083))+(((-1.0)*cj5*r10*x8082))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8084.valid){
continue;
}
CheckValue<IkReal> x8085=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8084.value)+(((1.5707963267949)*(x8085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8086=IKsin(j4);
IkReal x8087=IKcos(j4);
IkReal x8088=((1.0)*cj5);
IkReal x8089=(r21*sj5);
IkReal x8090=((1.0)*cj2);
IkReal x8091=((1.0)*sj0);
IkReal x8092=(cj1*sj2);
IkReal x8093=(sj5*x8086);
IkReal x8094=((1.0)*x8086);
IkReal x8095=(sj5*x8087);
evalcond[0]=((((-1.0)*r20*x8086*x8088))+((x8086*x8089))+((r22*x8087)));
evalcond[1]=(cj0+(((-1.0)*r10*x8086*x8088))+((r11*x8093))+((r12*x8087)));
evalcond[2]=((((-1.0)*r00*x8086*x8088))+(((-1.0)*x8091))+((r01*x8093))+((r02*x8087)));
evalcond[3]=(((x8087*x8089))+(((-1.0)*r20*x8087*x8088))+((sj1*sj2))+(((-1.0)*r22*x8094))+(((-1.0)*cj1*x8090)));
evalcond[4]=((((-1.0)*r00*x8087*x8088))+(((-1.0)*r02*x8094))+(((-1.0)*cj0*sj1*x8090))+((r01*x8095))+(((-1.0)*cj0*x8092)));
evalcond[5]=((((-1.0)*sj0*sj1*x8090))+(((-1.0)*x8091*x8092))+((r11*x8095))+(((-1.0)*r12*x8094))+(((-1.0)*r10*x8087*x8088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8096=((1.0)*sj5);
CheckValue<IkReal> x8097=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8096)))),-1);
if(!x8097.valid){
continue;
}
CheckValue<IkReal> x8098 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x8096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8097.value)))+(x8098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8099=IKsin(j4);
IkReal x8100=IKcos(j4);
IkReal x8101=((1.0)*cj5);
IkReal x8102=(r21*sj5);
IkReal x8103=((1.0)*cj2);
IkReal x8104=((1.0)*sj0);
IkReal x8105=(cj1*sj2);
IkReal x8106=(sj5*x8099);
IkReal x8107=((1.0)*x8099);
IkReal x8108=(sj5*x8100);
evalcond[0]=(((r22*x8100))+(((-1.0)*r20*x8099*x8101))+((x8099*x8102)));
evalcond[1]=(cj0+((r11*x8106))+((r12*x8100))+(((-1.0)*r10*x8099*x8101)));
evalcond[2]=((((-1.0)*r00*x8099*x8101))+(((-1.0)*x8104))+((r02*x8100))+((r01*x8106)));
evalcond[3]=(((x8100*x8102))+((sj1*sj2))+(((-1.0)*r20*x8100*x8101))+(((-1.0)*r22*x8107))+(((-1.0)*cj1*x8103)));
evalcond[4]=((((-1.0)*cj0*x8105))+(((-1.0)*cj0*sj1*x8103))+(((-1.0)*r00*x8100*x8101))+((r01*x8108))+(((-1.0)*r02*x8107)));
evalcond[5]=((((-1.0)*x8104*x8105))+(((-1.0)*sj0*sj1*x8103))+(((-1.0)*r10*x8100*x8101))+((r11*x8108))+(((-1.0)*r12*x8107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8109=((1.0)*sj5);
CheckValue<IkReal> x8110=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x8109)))),-1);
if(!x8110.valid){
continue;
}
CheckValue<IkReal> x8111 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x8109))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8110.value)))+(x8111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8112=IKsin(j4);
IkReal x8113=IKcos(j4);
IkReal x8114=((1.0)*cj5);
IkReal x8115=(r21*sj5);
IkReal x8116=((1.0)*cj2);
IkReal x8117=((1.0)*sj0);
IkReal x8118=(cj1*sj2);
IkReal x8119=(sj5*x8112);
IkReal x8120=((1.0)*x8112);
IkReal x8121=(sj5*x8113);
evalcond[0]=((((-1.0)*r20*x8112*x8114))+((x8112*x8115))+((r22*x8113)));
evalcond[1]=(cj0+(((-1.0)*r10*x8112*x8114))+((r12*x8113))+((r11*x8119)));
evalcond[2]=(((r02*x8113))+(((-1.0)*x8117))+((r01*x8119))+(((-1.0)*r00*x8112*x8114)));
evalcond[3]=((((-1.0)*r20*x8113*x8114))+((sj1*sj2))+((x8113*x8115))+(((-1.0)*r22*x8120))+(((-1.0)*cj1*x8116)));
evalcond[4]=((((-1.0)*cj0*sj1*x8116))+((r01*x8121))+(((-1.0)*r02*x8120))+(((-1.0)*cj0*x8118))+(((-1.0)*r00*x8113*x8114)));
evalcond[5]=((((-1.0)*r12*x8120))+(((-1.0)*r10*x8113*x8114))+(((-1.0)*sj0*sj1*x8116))+(((-1.0)*x8117*x8118))+((r11*x8121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8122=cj1*cj1;
IkReal x8123=cj2*cj2;
IkReal x8124=(sj1*sj2);
IkReal x8125=((99500.0)*py);
IkReal x8126=((0.30447)*sj2);
IkReal x8127=((9751.0)*sj5);
IkReal x8128=((0.037485)*sj1);
IkReal x8129=(cj5*r11);
IkReal x8130=(cj1*cj2);
IkReal x8131=(cj5*r01);
IkReal x8132=((10241.0)*cj1);
IkReal x8133=(r00*sj5);
IkReal x8134=(r10*sj5);
IkReal x8135=((99500.0)*px);
IkReal x8136=((104500.0)*cj1);
IkReal x8137=((0.3825)*sj1);
IkReal x8138=(sj1*x8131);
CheckValue<IkReal> x8139=IKPowWithIntegerCheck(IKsign(((43322.0000005852)+(((-1.0)*x8122*x8126))+(((4079.99999941478)*x8122))+(((-83182.0)*cj1*x8124))+(((-0.30447)*sj1*x8130))+(((-0.31977)*cj1*sj1))+(((-79202.0)*x8124*x8130))+(((83182.0)*cj2*x8122))+(((79202.0)*x8122*x8123))+(((-39601.0)*x8123))+x8126)),-1);
if(!x8139.valid){
continue;
}
CheckValue<IkReal> x8140 = IKatan2WithCheck(IkReal((((py*x8136))+(((-1.0)*x8132*x8134))+(((-1.0)*r10*x8127*x8130))+(((-1.0)*x8124*x8125))+((x8128*x8134))+(((-1.0)*py*x8137))+(((-9751.0)*x8129*x8130))+(((9751.0)*x8124*x8129))+(((-1.0)*x8129*x8132))+((x8128*x8129))+(((-30500.0)*px))+((x8125*x8130))+(((2989.0)*x8131))+(((2989.0)*x8133))+((r10*x8124*x8127)))),IkReal(((((-1.0)*r00*x8127*x8130))+(((-1.0)*px*x8137))+(((-1.0)*x8132*x8133))+(((-1.0)*x8124*x8135))+(((-2989.0)*x8129))+(((-1.0)*x8131*x8132))+(((30500.0)*py))+((x8130*x8135))+(((9751.0)*x8124*x8131))+((x8128*x8133))+((x8128*x8131))+((px*x8136))+(((-9751.0)*x8130*x8131))+((r00*x8124*x8127))+(((-2989.0)*x8134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8140.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8139.value)))+(x8140.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8141=IKcos(j0);
IkReal x8142=IKsin(j0);
IkReal x8143=((1.53e-6)*sj1);
IkReal x8144=((0.398)*cj2);
IkReal x8145=((0.098)*cj5);
IkReal x8146=((0.098)*sj5);
IkReal x8147=((0.398)*sj1*sj2);
IkReal x8148=(cj1*x8141);
IkReal x8149=(cj1*x8142);
evalcond[0]=((((-1.0)*x8141*x8143))+(((-1.0)*x8141*x8147))+(((-1.0)*px))+((r00*x8146))+((x8144*x8148))+((r01*x8145))+(((-0.122)*x8142))+(((0.418)*x8148)));
evalcond[1]=((((0.122)*x8141))+((r10*x8146))+(((-1.0)*py))+((x8144*x8149))+((r11*x8145))+(((-1.0)*x8142*x8147))+(((-1.0)*x8142*x8143))+(((0.418)*x8149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8150=((1.0)*sj5);
IkReal x8151=((((-1.0)*r00*x8150))+(((-1.0)*cj5*r01)));
j4eval[0]=x8151;
j4eval[1]=IKsign(x8151);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x8150))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8152=((1.0)*sj5);
IkReal x8153=((((-1.0)*cj5*r11))+(((-1.0)*r10*x8152)));
j4eval[0]=x8153;
j4eval[1]=IKsign(x8153);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x8152))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8154=((1.0)*sj0);
IkReal x8155=((1.0)*cj0);
IkReal x8156=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8156;
j4eval[1]=((IKabs(((((-1.0)*r02*x8155))+(((-1.0)*r12*x8154)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x8154))+(((-1.0)*cj5*r00*x8155))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x8156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8157=((-1.0)*r20);
IkReal x8159 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8159)==0){
continue;
}
IkReal x8158=pow(x8159,-0.5);
CheckValue<IkReal> x8160 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8157),IKFAST_ATAN2_MAGTHRESH);
if(!x8160.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8160.value));
IkReal gconst1=(r21*x8158);
IkReal gconst2=(x8157*x8158);
CheckValue<IkReal> x8161 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8161.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8161.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8162=((-1.0)*r20);
IkReal x8163=x8158;
CheckValue<IkReal> x8165 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8162),IKFAST_ATAN2_MAGTHRESH);
if(!x8165.valid){
continue;
}
IkReal x8164=((-1.0)*(x8165.value));
sj5=gconst1;
cj5=gconst2;
j5=x8164;
IkReal gconst0=x8164;
IkReal gconst1=(r21*x8163);
IkReal gconst2=(x8162*x8163);
IkReal x8166=r22*r22;
IkReal x8167=((1.0)*x8166);
CheckValue<IkReal> x8171=IKPowWithIntegerCheck(((-1.0)+x8166),-1);
if(!x8171.valid){
continue;
}
IkReal x8168=x8171.value;
if((((1.0)+(((-1.0)*x8167)))) < -0.00001)
continue;
IkReal x8169=IKsqrt(((1.0)+(((-1.0)*x8167))));
IkReal x8170=(cj0*x8168*x8169);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x8167*x8170))+x8170))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8172=((-1.0)*r20);
IkReal x8173=x8158;
CheckValue<IkReal> x8175 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8172),IKFAST_ATAN2_MAGTHRESH);
if(!x8175.valid){
continue;
}
IkReal x8174=((-1.0)*(x8175.value));
sj5=gconst1;
cj5=gconst2;
j5=x8174;
IkReal gconst0=x8174;
IkReal gconst1=(r21*x8173);
IkReal gconst2=(x8172*x8173);
IkReal x8176=r22*r22;
IkReal x8177=((1.0)*x8176);
CheckValue<IkReal> x8181=IKPowWithIntegerCheck(((-1.0)+x8176),-1);
if(!x8181.valid){
continue;
}
IkReal x8178=x8181.value;
if((((1.0)+(((-1.0)*x8177)))) < -0.00001)
continue;
IkReal x8179=IKsqrt(((1.0)+(((-1.0)*x8177))));
IkReal x8180=(sj0*x8178*x8179);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8180+(((-1.0)*x8177*x8180))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8182=((-1.0)*r20);
IkReal x8183=x8158;
CheckValue<IkReal> x8185 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8182),IKFAST_ATAN2_MAGTHRESH);
if(!x8185.valid){
continue;
}
IkReal x8184=((-1.0)*(x8185.value));
sj5=gconst1;
cj5=gconst2;
j5=x8184;
IkReal gconst0=x8184;
IkReal gconst1=(r21*x8183);
IkReal gconst2=(x8182*x8183);
IkReal x8186=r22*r22;
CheckValue<IkReal> x8190=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8186))),-1);
if(!x8190.valid){
continue;
}
IkReal x8187=x8190.value;
IkReal x8188=(cj3*x8187);
IkReal x8189=(((x8188*(r20*r20*r20*r20)))+((cj3*x8186))+(((2.0)*x8188*(r20*r20)*(r21*r21)))+((x8188*(r21*r21*r21*r21))));
j4eval[0]=x8189;
j4eval[1]=IKsign(x8189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8191=((-1.0)*r20);
IkReal x8192=x8158;
CheckValue<IkReal> x8194 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8191),IKFAST_ATAN2_MAGTHRESH);
if(!x8194.valid){
continue;
}
IkReal x8193=((-1.0)*(x8194.value));
sj5=gconst1;
cj5=gconst2;
j5=x8193;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8193;
IkReal gconst1=(r21*x8192);
IkReal gconst2=(x8191*x8192);
IkReal x8195=r22*r22;
IkReal x8196=((1.0)*x8195);
CheckValue<IkReal> x8200=IKPowWithIntegerCheck(((-1.0)+x8195),-1);
if(!x8200.valid){
continue;
}
IkReal x8197=x8200.value;
if((((1.0)+(((-1.0)*x8196)))) < -0.00001)
continue;
IkReal x8198=IKsqrt(((1.0)+(((-1.0)*x8196))));
IkReal x8199=(cj0*x8197*x8198);
j4eval[0]=((IKabs(((((-1.0)*x8196*x8199))+x8199)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8201=((-1.0)*r20);
IkReal x8202=x8158;
CheckValue<IkReal> x8204 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8201),IKFAST_ATAN2_MAGTHRESH);
if(!x8204.valid){
continue;
}
IkReal x8203=((-1.0)*(x8204.value));
sj5=gconst1;
cj5=gconst2;
j5=x8203;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8203;
IkReal gconst1=(r21*x8202);
IkReal gconst2=(x8201*x8202);
IkReal x8205=r22*r22;
IkReal x8206=((1.0)*x8205);
CheckValue<IkReal> x8210=IKPowWithIntegerCheck(((-1.0)+x8205),-1);
if(!x8210.valid){
continue;
}
IkReal x8207=x8210.value;
if((((1.0)+(((-1.0)*x8206)))) < -0.00001)
continue;
IkReal x8208=IKsqrt(((1.0)+(((-1.0)*x8206))));
IkReal x8209=(sj0*x8207*x8208);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x8206*x8209))+x8209))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8211=((-1.0)*r20);
IkReal x8212=x8158;
CheckValue<IkReal> x8214 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8211),IKFAST_ATAN2_MAGTHRESH);
if(!x8214.valid){
continue;
}
IkReal x8213=((-1.0)*(x8214.value));
sj5=gconst1;
cj5=gconst2;
j5=x8213;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8213;
IkReal gconst1=(r21*x8212);
IkReal gconst2=(x8211*x8212);
IkReal x8215=((1.0)*(r22*r22));
CheckValue<IkReal> x8219=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8215))),-1);
if(!x8219.valid){
continue;
}
IkReal x8216=x8219.value;
IkReal x8217=((1.0)*x8216);
IkReal x8218=((((-2.0)*x8216*(r20*r20)*(r21*r21)))+(((-1.0)*x8215))+(((-1.0)*x8217*(r20*r20*r20*r20)))+(((-1.0)*x8217*(r21*r21*r21*r21))));
j4eval[0]=x8218;
j4eval[1]=IKsign(x8218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8220=((-1.0)*r20);
IkReal x8221=x8158;
CheckValue<IkReal> x8223 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8220),IKFAST_ATAN2_MAGTHRESH);
if(!x8223.valid){
continue;
}
IkReal x8222=((-1.0)*(x8223.value));
sj5=gconst1;
cj5=gconst2;
j5=x8222;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8222;
IkReal gconst1=(r21*x8221);
IkReal gconst2=(x8220*x8221);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8224=((-1.0)*r20);
IkReal x8225=x8158;
CheckValue<IkReal> x8227 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8224),IKFAST_ATAN2_MAGTHRESH);
if(!x8227.valid){
continue;
}
IkReal x8226=((-1.0)*(x8227.value));
sj5=gconst1;
cj5=gconst2;
j5=x8226;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8226;
IkReal gconst1=(r21*x8225);
IkReal gconst2=(x8224*x8225);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8228=((-1.0)*r20);
IkReal x8229=x8158;
CheckValue<IkReal> x8231 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8228),IKFAST_ATAN2_MAGTHRESH);
if(!x8231.valid){
continue;
}
IkReal x8230=((-1.0)*(x8231.value));
sj5=gconst1;
cj5=gconst2;
j5=x8230;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8230;
IkReal gconst1=(r21*x8229);
IkReal gconst2=(x8228*x8229);
IkReal x8232=r22*r22;
IkReal x8233=(cj1*cj2*r12);
CheckValue<IkReal> x8238=IKPowWithIntegerCheck(((-1.0)+x8232),-1);
if(!x8238.valid){
continue;
}
IkReal x8234=x8238.value;
IkReal x8235=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x8232)))) < -0.00001)
continue;
IkReal x8236=IKsqrt(((1.0)+(((-1.0)*x8232))));
IkReal x8237=(r22*x8234*x8236);
j4eval[0]=((IKabs(((((-1.0)*x8235))+x8233)))+(IKabs((((x8233*x8237))+(((-1.0)*x8235*x8237))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8239=(cj1*cj2);
IkReal x8240=(gconst2*r10);
IkReal x8241=(gconst1*r11);
IkReal x8242=((1.0)*sj1*sj2);
CheckValue<IkReal> x8243=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8243.valid){
continue;
}
CheckValue<IkReal> x8244 = IKatan2WithCheck(IkReal(((((-1.0)*x8241*x8242))+((x8239*x8241))+(((-1.0)*x8239*x8240))+((sj1*sj2*x8240)))),IkReal((((r12*x8239))+(((-1.0)*r12*x8242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8243.value)))+(x8244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8245=IKsin(j4);
IkReal x8246=IKcos(j4);
IkReal x8247=(gconst2*r00);
IkReal x8248=((1.0)*cj2);
IkReal x8249=(gconst1*x8245);
IkReal x8250=((1.0)*x8245);
IkReal x8251=(gconst2*x8246);
IkReal x8252=((1.0)*gconst1*x8246);
evalcond[0]=((((-1.0)*gconst2*r20*x8250))+((r21*x8249))+((r22*x8246)));
evalcond[1]=(((r02*x8246))+(((-1.0)*x8247*x8250))+((r01*x8249)));
evalcond[2]=(((r10*x8251))+(((-1.0)*r11*x8252))+((r12*x8245)));
evalcond[3]=((1.0)+((r11*x8249))+((r12*x8246))+(((-1.0)*gconst2*r10*x8250)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*x8252))+((r20*x8251))+((r22*x8245))+(((-1.0)*cj1*x8248)));
evalcond[5]=((((-1.0)*sj1*x8248))+((x8246*x8247))+((r02*x8245))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x8252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8253=(gconst1*r11);
IkReal x8254=(gconst2*r10);
CheckValue<IkReal> x8255 = IKatan2WithCheck(IkReal(((((-1.0)*x8253))+x8254)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8255.valid){
continue;
}
CheckValue<IkReal> x8256=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8254*x8254)+(x8253*x8253)+(((-2.0)*x8253*x8254)))),-1);
if(!x8256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8255.value)+(((1.5707963267949)*(x8256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8257=IKsin(j4);
IkReal x8258=IKcos(j4);
IkReal x8259=(gconst2*r00);
IkReal x8260=((1.0)*cj2);
IkReal x8261=(gconst1*x8257);
IkReal x8262=((1.0)*x8257);
IkReal x8263=(gconst2*x8258);
IkReal x8264=((1.0)*gconst1*x8258);
evalcond[0]=((((-1.0)*gconst2*r20*x8262))+((r21*x8261))+((r22*x8258)));
evalcond[1]=((((-1.0)*x8259*x8262))+((r02*x8258))+((r01*x8261)));
evalcond[2]=(((r12*x8257))+(((-1.0)*r11*x8264))+((r10*x8263)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x8262))+((r12*x8258))+((r11*x8261)));
evalcond[4]=((((-1.0)*r21*x8264))+((r20*x8263))+((sj1*sj2))+(((-1.0)*cj1*x8260))+((r22*x8257)));
evalcond[5]=((((-1.0)*sj1*x8260))+((x8258*x8259))+(((-1.0)*cj1*sj2))+((r02*x8257))+(((-1.0)*r01*x8264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8265=((1.0)*gconst1);
CheckValue<IkReal> x8266 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8265))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8266.valid){
continue;
}
CheckValue<IkReal> x8267=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8265)))),-1);
if(!x8267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8266.value)+(((1.5707963267949)*(x8267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8268=IKsin(j4);
IkReal x8269=IKcos(j4);
IkReal x8270=(gconst2*r00);
IkReal x8271=((1.0)*cj2);
IkReal x8272=(gconst1*x8268);
IkReal x8273=((1.0)*x8268);
IkReal x8274=(gconst2*x8269);
IkReal x8275=((1.0)*gconst1*x8269);
evalcond[0]=((((-1.0)*gconst2*r20*x8273))+((r21*x8272))+((r22*x8269)));
evalcond[1]=(((r02*x8269))+(((-1.0)*x8270*x8273))+((r01*x8272)));
evalcond[2]=(((r12*x8268))+(((-1.0)*r11*x8275))+((r10*x8274)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x8273))+((r12*x8269))+((r11*x8272)));
evalcond[4]=(((r20*x8274))+(((-1.0)*r21*x8275))+((sj1*sj2))+(((-1.0)*cj1*x8271))+((r22*x8268)));
evalcond[5]=((((-1.0)*sj1*x8271))+((r02*x8268))+(((-1.0)*cj1*sj2))+((x8269*x8270))+(((-1.0)*r01*x8275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8276=((-1.0)*r20);
IkReal x8277=x8158;
CheckValue<IkReal> x8279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8276),IKFAST_ATAN2_MAGTHRESH);
if(!x8279.valid){
continue;
}
IkReal x8278=((-1.0)*(x8279.value));
sj5=gconst1;
cj5=gconst2;
j5=x8278;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8278;
IkReal gconst1=(r21*x8277);
IkReal gconst2=(x8276*x8277);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8280=((-1.0)*r20);
IkReal x8281=x8158;
CheckValue<IkReal> x8283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8280),IKFAST_ATAN2_MAGTHRESH);
if(!x8283.valid){
continue;
}
IkReal x8282=((-1.0)*(x8283.value));
sj5=gconst1;
cj5=gconst2;
j5=x8282;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8282;
IkReal gconst1=(r21*x8281);
IkReal gconst2=(x8280*x8281);
IkReal x8284=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8288=IKPowWithIntegerCheck(x8284,-1);
if(!x8288.valid){
continue;
}
IkReal x8285=x8288.value;
IkReal x8286=((1.0)*x8285);
IkReal x8287=((((-1.0)*x8286*(r10*r10)*(r20*r20)))+(((-1.0)*x8286*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8285)));
j4eval[0]=x8287;
j4eval[1]=IKsign(x8287);
j4eval[2]=r12;
j4eval[3]=x8284;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8289=((-1.0)*r20);
IkReal x8290=x8158;
CheckValue<IkReal> x8292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8289),IKFAST_ATAN2_MAGTHRESH);
if(!x8292.valid){
continue;
}
IkReal x8291=((-1.0)*(x8292.value));
sj5=gconst1;
cj5=gconst2;
j5=x8291;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8291;
IkReal gconst1=(r21*x8290);
IkReal gconst2=(x8289*x8290);
IkReal x8293=r22*r22;
IkReal x8294=(cj1*sj2);
IkReal x8295=(cj2*sj1);
IkReal x8296=((1.0)+(((-1.0)*x8293)));
CheckValue<IkReal> x8303=IKPowWithIntegerCheck(x8296,-1);
if(!x8303.valid){
continue;
}
IkReal x8297=x8303.value;
CheckValue<IkReal> x8304=IKPowWithIntegerCheck(((-1.0)+x8293),-1);
if(!x8304.valid){
continue;
}
IkReal x8298=x8304.value;
IkReal x8299=((1.0)*x8297);
if((x8296) < -0.00001)
continue;
IkReal x8300=IKsqrt(x8296);
IkReal x8301=((1.0)*r02*r22*x8298*x8300);
IkReal x8302=((((-2.0)*r00*r01*r20*r21*x8297))+(((-1.0)*x8299*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8299*(r01*r01)*(r21*r21))));
j4eval[0]=x8302;
j4eval[1]=((IKabs((((r02*x8295))+((r02*x8294)))))+(IKabs(((((-1.0)*x8295*x8301))+(((-1.0)*x8294*x8301))))));
j4eval[2]=IKsign(x8302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8305=(cj2*sj1);
IkReal x8306=(cj1*sj2);
IkReal x8307=(gconst2*r00);
IkReal x8308=((1.0)*gconst1*r01);
CheckValue<IkReal> x8309 = IKatan2WithCheck(IkReal((((r02*x8306))+((r02*x8305)))),IkReal((((x8306*x8307))+((x8305*x8307))+(((-1.0)*x8305*x8308))+(((-1.0)*x8306*x8308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8309.valid){
continue;
}
CheckValue<IkReal> x8310=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst1*r01*x8307))+(((-1.0)*gconst1*r01*x8308))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8307*x8307))))),-1);
if(!x8310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8309.value)+(((1.5707963267949)*(x8310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8311=IKsin(j4);
IkReal x8312=IKcos(j4);
IkReal x8313=(gconst2*r00);
IkReal x8314=(gconst2*r10);
IkReal x8315=(gconst2*r20);
IkReal x8316=(gconst1*x8311);
IkReal x8317=((1.0)*x8311);
IkReal x8318=((1.0)*gconst1*x8312);
evalcond[0]=(((r21*x8316))+(((-1.0)*x8315*x8317))+((r22*x8312)));
evalcond[1]=((((-1.0)*x8313*x8317))+((r01*x8316))+((r02*x8312)));
evalcond[2]=(((x8312*x8314))+((r12*x8311))+(((-1.0)*r11*x8318)));
evalcond[3]=((-1.0)+(((-1.0)*x8314*x8317))+((r11*x8316))+((r12*x8312)));
evalcond[4]=(((cj2*sj1))+((x8312*x8313))+((cj1*sj2))+((r02*x8311))+(((-1.0)*r01*x8318)));
evalcond[5]=((((-1.0)*r21*x8318))+((x8312*x8315))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8319=(gconst1*r11);
IkReal x8320=(gconst2*r10);
CheckValue<IkReal> x8321=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8320*x8320)))+(((2.0)*x8319*x8320))+(((-1.0)*(x8319*x8319)))+(((-1.0)*(r12*r12))))),-1);
if(!x8321.valid){
continue;
}
CheckValue<IkReal> x8322 = IKatan2WithCheck(IkReal((x8320+(((-1.0)*x8319)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8321.value)))+(x8322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8323=IKsin(j4);
IkReal x8324=IKcos(j4);
IkReal x8325=(gconst2*r00);
IkReal x8326=(gconst2*r10);
IkReal x8327=(gconst2*r20);
IkReal x8328=(gconst1*x8323);
IkReal x8329=((1.0)*x8323);
IkReal x8330=((1.0)*gconst1*x8324);
evalcond[0]=(((r22*x8324))+((r21*x8328))+(((-1.0)*x8327*x8329)));
evalcond[1]=(((r02*x8324))+(((-1.0)*x8325*x8329))+((r01*x8328)));
evalcond[2]=((((-1.0)*r11*x8330))+((r12*x8323))+((x8324*x8326)));
evalcond[3]=((-1.0)+((r12*x8324))+((r11*x8328))+(((-1.0)*x8326*x8329)));
evalcond[4]=(((cj2*sj1))+((r02*x8323))+(((-1.0)*r01*x8330))+((cj1*sj2))+((x8324*x8325)));
evalcond[5]=((((-1.0)*r21*x8330))+((r22*x8323))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8324*x8327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8331 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8331.valid){
continue;
}
CheckValue<IkReal> x8332=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8331.value)+(((1.5707963267949)*(x8332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8333=IKsin(j4);
IkReal x8334=IKcos(j4);
IkReal x8335=(gconst2*r00);
IkReal x8336=(gconst2*r10);
IkReal x8337=(gconst2*r20);
IkReal x8338=(gconst1*x8333);
IkReal x8339=((1.0)*x8333);
IkReal x8340=((1.0)*gconst1*x8334);
evalcond[0]=(((r21*x8338))+((r22*x8334))+(((-1.0)*x8337*x8339)));
evalcond[1]=(((r01*x8338))+(((-1.0)*x8335*x8339))+((r02*x8334)));
evalcond[2]=((((-1.0)*r11*x8340))+((r12*x8333))+((x8334*x8336)));
evalcond[3]=((-1.0)+((r12*x8334))+((r11*x8338))+(((-1.0)*x8336*x8339)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x8340))+((x8334*x8335))+((r02*x8333)));
evalcond[5]=((((-1.0)*r21*x8340))+((r22*x8333))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8334*x8337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8341=((-1.0)*r20);
IkReal x8342=x8158;
CheckValue<IkReal> x8344 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8341),IKFAST_ATAN2_MAGTHRESH);
if(!x8344.valid){
continue;
}
IkReal x8343=((-1.0)*(x8344.value));
sj5=gconst1;
cj5=gconst2;
j5=x8343;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8343;
IkReal gconst1=(r21*x8342);
IkReal gconst2=(x8341*x8342);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8345=((-1.0)*r20);
IkReal x8346=x8158;
CheckValue<IkReal> x8348 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8345),IKFAST_ATAN2_MAGTHRESH);
if(!x8348.valid){
continue;
}
IkReal x8347=((-1.0)*(x8348.value));
sj5=gconst1;
cj5=gconst2;
j5=x8347;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8347;
IkReal gconst1=(r21*x8346);
IkReal gconst2=(x8345*x8346);
IkReal x8349=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8353=IKPowWithIntegerCheck(x8349,-1);
if(!x8353.valid){
continue;
}
IkReal x8350=x8353.value;
IkReal x8351=((1.0)*x8350);
IkReal x8352=((((-1.0)*x8351*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8350))+(((-1.0)*(r02*r02)))+(((-1.0)*x8351*(r01*r01)*(r21*r21))));
j4eval[0]=x8352;
j4eval[1]=IKsign(x8352);
j4eval[2]=r02;
j4eval[3]=x8349;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8354=((-1.0)*r20);
IkReal x8355=x8158;
CheckValue<IkReal> x8357 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8354),IKFAST_ATAN2_MAGTHRESH);
if(!x8357.valid){
continue;
}
IkReal x8356=((-1.0)*(x8357.value));
sj5=gconst1;
cj5=gconst2;
j5=x8356;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8356;
IkReal gconst1=(r21*x8355);
IkReal gconst2=(x8354*x8355);
IkReal x8358=r22*r22;
IkReal x8359=(cj1*cj2*r02);
CheckValue<IkReal> x8364=IKPowWithIntegerCheck(((-1.0)+x8358),-1);
if(!x8364.valid){
continue;
}
IkReal x8360=x8364.value;
IkReal x8361=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x8358)))) < -0.00001)
continue;
IkReal x8362=IKsqrt(((1.0)+(((-1.0)*x8358))));
IkReal x8363=(r22*x8360*x8362);
j4eval[0]=((IKabs(((((-1.0)*x8361*x8363))+((x8359*x8363)))))+(IKabs((x8359+(((-1.0)*x8361))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8365=(gconst1*r01);
IkReal x8366=((1.0)*gconst2);
IkReal x8367=(cj1*cj2);
IkReal x8368=((1.0)*sj1*sj2);
CheckValue<IkReal> x8369 = IKatan2WithCheck(IkReal(((((-1.0)*x8365*x8368))+(((-1.0)*r00*x8366*x8367))+((gconst2*r00*sj1*sj2))+((x8365*x8367)))),IkReal(((((-1.0)*r02*x8368))+((r02*x8367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8369.valid){
continue;
}
CheckValue<IkReal> x8370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8366))+(((-1.0)*gconst1*r10)))),-1);
if(!x8370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8369.value)+(((1.5707963267949)*(x8370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8371=IKsin(j4);
IkReal x8372=IKcos(j4);
IkReal x8373=(gconst2*r00);
IkReal x8374=((1.0)*cj2);
IkReal x8375=(gconst1*x8371);
IkReal x8376=((1.0)*x8371);
IkReal x8377=(gconst2*x8372);
IkReal x8378=((1.0)*gconst1*x8372);
evalcond[0]=(((r21*x8375))+(((-1.0)*gconst2*r20*x8376))+((r22*x8372)));
evalcond[1]=((((-1.0)*gconst2*r10*x8376))+((r12*x8372))+((r11*x8375)));
evalcond[2]=(((x8372*x8373))+(((-1.0)*r01*x8378))+((r02*x8371)));
evalcond[3]=((-1.0)+(((-1.0)*x8373*x8376))+((r02*x8372))+((r01*x8375)));
evalcond[4]=((((-1.0)*cj1*x8374))+((r20*x8377))+((sj1*sj2))+((r22*x8371))+(((-1.0)*r21*x8378)));
evalcond[5]=(((r10*x8377))+(((-1.0)*cj1*sj2))+((r12*x8371))+(((-1.0)*sj1*x8374))+(((-1.0)*r11*x8378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8379=(gconst2*r00);
IkReal x8380=(gconst1*r01);
CheckValue<IkReal> x8381 = IKatan2WithCheck(IkReal((x8379+(((-1.0)*x8380)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8381.valid){
continue;
}
CheckValue<IkReal> x8382=IKPowWithIntegerCheck(IKsign(((((2.0)*x8379*x8380))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8379*x8379)))+(((-1.0)*(x8380*x8380))))),-1);
if(!x8382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8381.value)+(((1.5707963267949)*(x8382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8383=IKsin(j4);
IkReal x8384=IKcos(j4);
IkReal x8385=(gconst2*r00);
IkReal x8386=((1.0)*cj2);
IkReal x8387=(gconst1*x8383);
IkReal x8388=((1.0)*x8383);
IkReal x8389=(gconst2*x8384);
IkReal x8390=((1.0)*gconst1*x8384);
evalcond[0]=(((r21*x8387))+((r22*x8384))+(((-1.0)*gconst2*r20*x8388)));
evalcond[1]=((((-1.0)*gconst2*r10*x8388))+((r12*x8384))+((r11*x8387)));
evalcond[2]=(((r02*x8383))+((x8384*x8385))+(((-1.0)*r01*x8390)));
evalcond[3]=((-1.0)+((r02*x8384))+(((-1.0)*x8385*x8388))+((r01*x8387)));
evalcond[4]=(((sj1*sj2))+((r22*x8383))+(((-1.0)*cj1*x8386))+((r20*x8389))+(((-1.0)*r21*x8390)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8386))+((r12*x8383))+((r10*x8389))+(((-1.0)*r11*x8390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8391=((1.0)*gconst1);
CheckValue<IkReal> x8392=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8391)))),-1);
if(!x8392.valid){
continue;
}
CheckValue<IkReal> x8393 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8392.value)))+(x8393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8394=IKsin(j4);
IkReal x8395=IKcos(j4);
IkReal x8396=(gconst2*r00);
IkReal x8397=((1.0)*cj2);
IkReal x8398=(gconst1*x8394);
IkReal x8399=((1.0)*x8394);
IkReal x8400=(gconst2*x8395);
IkReal x8401=((1.0)*gconst1*x8395);
evalcond[0]=(((r22*x8395))+((r21*x8398))+(((-1.0)*gconst2*r20*x8399)));
evalcond[1]=((((-1.0)*gconst2*r10*x8399))+((r12*x8395))+((r11*x8398)));
evalcond[2]=((((-1.0)*r01*x8401))+((x8395*x8396))+((r02*x8394)));
evalcond[3]=((-1.0)+((r02*x8395))+((r01*x8398))+(((-1.0)*x8396*x8399)));
evalcond[4]=((((-1.0)*r21*x8401))+((sj1*sj2))+((r22*x8394))+(((-1.0)*cj1*x8397))+((r20*x8400)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8397))+(((-1.0)*r11*x8401))+((r10*x8400))+((r12*x8394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8402=((-1.0)*r20);
IkReal x8403=x8158;
CheckValue<IkReal> x8405 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8402),IKFAST_ATAN2_MAGTHRESH);
if(!x8405.valid){
continue;
}
IkReal x8404=((-1.0)*(x8405.value));
sj5=gconst1;
cj5=gconst2;
j5=x8404;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8404;
IkReal gconst1=(r21*x8403);
IkReal gconst2=(x8402*x8403);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8406=((-1.0)*r20);
IkReal x8407=x8158;
CheckValue<IkReal> x8409 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8406),IKFAST_ATAN2_MAGTHRESH);
if(!x8409.valid){
continue;
}
IkReal x8408=((-1.0)*(x8409.value));
sj5=gconst1;
cj5=gconst2;
j5=x8408;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8408;
IkReal gconst1=(r21*x8407);
IkReal gconst2=(x8406*x8407);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8410=((-1.0)*r20);
IkReal x8411=x8158;
CheckValue<IkReal> x8413 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8410),IKFAST_ATAN2_MAGTHRESH);
if(!x8413.valid){
continue;
}
IkReal x8412=((-1.0)*(x8413.value));
sj5=gconst1;
cj5=gconst2;
j5=x8412;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8412;
IkReal gconst1=(r21*x8411);
IkReal gconst2=(x8410*x8411);
IkReal x8414=r22*r22;
IkReal x8415=((1.0)+(((-1.0)*x8414)));
IkReal x8416=(cj2*r12*sj1);
IkReal x8417=(cj1*r12*sj2);
CheckValue<IkReal> x8424=IKPowWithIntegerCheck(x8415,-1);
if(!x8424.valid){
continue;
}
IkReal x8418=x8424.value;
CheckValue<IkReal> x8425=IKPowWithIntegerCheck(((-1.0)+x8414),-1);
if(!x8425.valid){
continue;
}
IkReal x8419=x8425.value;
IkReal x8420=((1.0)*x8418);
if((x8415) < -0.00001)
continue;
IkReal x8421=IKsqrt(x8415);
IkReal x8422=((1.0)*r22*x8419*x8421);
IkReal x8423=((((-2.0)*r10*r11*r20*r21*x8418))+(((-1.0)*x8420*(r10*r10)*(r20*r20)))+(((-1.0)*x8420*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x8423;
j4eval[1]=IKsign(x8423);
j4eval[2]=((IKabs((x8417+x8416)))+(IKabs(((((-1.0)*x8416*x8422))+(((-1.0)*x8417*x8422))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8426=(cj2*sj1);
IkReal x8427=(gconst2*r10);
IkReal x8428=(cj1*sj2);
IkReal x8429=((1.0)*gconst1*r11);
CheckValue<IkReal> x8430=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8427*x8427)))+(((-1.0)*(r12*r12)))+(((-1.0)*gconst1*r11*x8429))+(((2.0)*gconst1*r11*x8427)))),-1);
if(!x8430.valid){
continue;
}
CheckValue<IkReal> x8431 = IKatan2WithCheck(IkReal((((r12*x8428))+((r12*x8426)))),IkReal(((((-1.0)*x8426*x8429))+((x8427*x8428))+(((-1.0)*x8428*x8429))+((x8426*x8427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8430.value)))+(x8431.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8432=IKsin(j4);
IkReal x8433=IKcos(j4);
IkReal x8434=(gconst2*r00);
IkReal x8435=(gconst2*r10);
IkReal x8436=(gconst2*r20);
IkReal x8437=(gconst1*x8432);
IkReal x8438=((1.0)*x8432);
IkReal x8439=((1.0)*gconst1*x8433);
evalcond[0]=(((r21*x8437))+((r22*x8433))+(((-1.0)*x8436*x8438)));
evalcond[1]=((((-1.0)*x8435*x8438))+((r12*x8433))+((r11*x8437)));
evalcond[2]=((((-1.0)*r01*x8439))+((r02*x8432))+((x8433*x8434)));
evalcond[3]=((1.0)+((r01*x8437))+((r02*x8433))+(((-1.0)*x8434*x8438)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x8439))+((r12*x8432))+((x8433*x8435)));
evalcond[5]=((((-1.0)*r21*x8439))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8432))+((x8433*x8436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8440=(gconst1*r01);
IkReal x8441=(gconst2*r00);
CheckValue<IkReal> x8442=IKPowWithIntegerCheck(IKsign(((x8441*x8441)+(r02*r02)+(x8440*x8440)+(((-2.0)*x8440*x8441)))),-1);
if(!x8442.valid){
continue;
}
CheckValue<IkReal> x8443 = IKatan2WithCheck(IkReal((x8441+(((-1.0)*x8440)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8442.value)))+(x8443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8444=IKsin(j4);
IkReal x8445=IKcos(j4);
IkReal x8446=(gconst2*r00);
IkReal x8447=(gconst2*r10);
IkReal x8448=(gconst2*r20);
IkReal x8449=(gconst1*x8444);
IkReal x8450=((1.0)*x8444);
IkReal x8451=((1.0)*gconst1*x8445);
evalcond[0]=(((r22*x8445))+((r21*x8449))+(((-1.0)*x8448*x8450)));
evalcond[1]=(((r12*x8445))+((r11*x8449))+(((-1.0)*x8447*x8450)));
evalcond[2]=((((-1.0)*r01*x8451))+((r02*x8444))+((x8445*x8446)));
evalcond[3]=((1.0)+((r02*x8445))+(((-1.0)*x8446*x8450))+((r01*x8449)));
evalcond[4]=(((r12*x8444))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x8451))+((x8445*x8447)));
evalcond[5]=(((r22*x8444))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8445*x8448))+(((-1.0)*r21*x8451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8452 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8452.valid){
continue;
}
CheckValue<IkReal> x8453=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8452.value)+(((1.5707963267949)*(x8453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8454=IKsin(j4);
IkReal x8455=IKcos(j4);
IkReal x8456=(gconst2*r00);
IkReal x8457=(gconst2*r10);
IkReal x8458=(gconst2*r20);
IkReal x8459=(gconst1*x8454);
IkReal x8460=((1.0)*x8454);
IkReal x8461=((1.0)*gconst1*x8455);
evalcond[0]=(((r21*x8459))+((r22*x8455))+(((-1.0)*x8458*x8460)));
evalcond[1]=(((r11*x8459))+(((-1.0)*x8457*x8460))+((r12*x8455)));
evalcond[2]=(((x8455*x8456))+((r02*x8454))+(((-1.0)*r01*x8461)));
evalcond[3]=((1.0)+((r02*x8455))+((r01*x8459))+(((-1.0)*x8456*x8460)));
evalcond[4]=(((cj2*sj1))+((x8455*x8457))+((cj1*sj2))+(((-1.0)*r11*x8461))+((r12*x8454)));
evalcond[5]=(((x8455*x8458))+((r22*x8454))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x8461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8462=((-1.0)*r20);
IkReal x8463=((-1.0)*px);
CheckValue<IkReal> x8465 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8462),IKFAST_ATAN2_MAGTHRESH);
if(!x8465.valid){
continue;
}
IkReal x8464=((-1.0)*(x8465.value));
sj5=gconst1;
cj5=gconst2;
j5=x8464;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8463);
rxp1_1=(px*r21);
rxp1_2=(r11*x8463);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8464;
IkReal gconst1=r21;
IkReal gconst2=x8462;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8466=((-1.0)*r20);
IkReal x8467=((-1.0)*px);
CheckValue<IkReal> x8469 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8466),IKFAST_ATAN2_MAGTHRESH);
if(!x8469.valid){
continue;
}
IkReal x8468=((-1.0)*(x8469.value));
sj5=gconst1;
cj5=gconst2;
j5=x8468;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8467);
rxp1_1=(px*r21);
rxp1_2=(r11*x8467);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8468;
IkReal gconst1=r21;
IkReal gconst2=x8466;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8470=((-1.0)*r20);
IkReal x8471=((-1.0)*px);
CheckValue<IkReal> x8473 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8470),IKFAST_ATAN2_MAGTHRESH);
if(!x8473.valid){
continue;
}
IkReal x8472=((-1.0)*(x8473.value));
sj5=gconst1;
cj5=gconst2;
j5=x8472;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8471);
rxp1_1=(px*r21);
rxp1_2=(r11*x8471);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8472;
IkReal gconst1=r21;
IkReal gconst2=x8470;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8476=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8476.valid){
continue;
}
IkReal x8474=x8476.value;
IkReal x8475=(sj0*x8474);
cj4array[0]=(((cj2*sj1*x8475))+((cj1*sj2*x8475)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8477=IKsin(j4);
IkReal x8478=IKcos(j4);
IkReal x8479=(gconst1*x8477);
IkReal x8480=((1.0)*gconst2*x8477);
evalcond[0]=(r02*x8477);
evalcond[1]=((((-1.0)*sj0))+((r02*x8478)));
evalcond[2]=((((-1.0)*r20*x8480))+((r21*x8479)));
evalcond[3]=(((r11*x8479))+(((-1.0)*r10*x8480)));
evalcond[4]=(((gconst2*r20*x8478))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8482=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8482.valid){
continue;
}
IkReal x8481=x8482.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8481))+((cj1*cj2*x8481)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8483=IKsin(j4);
IkReal x8484=IKcos(j4);
IkReal x8485=(gconst2*r10);
IkReal x8486=((1.0)*sj0);
IkReal x8487=(gconst1*r11);
IkReal x8488=((1.0)*x8483);
evalcond[0]=(r02*x8483);
evalcond[1]=((((-1.0)*x8486))+((r02*x8484)));
evalcond[2]=((((-1.0)*gconst2*r20*x8488))+((gconst1*r21*x8483)));
evalcond[3]=(((x8483*x8487))+(((-1.0)*x8485*x8488)));
evalcond[4]=(((x8484*x8485))+(((-1.0)*cj1*sj2*x8486))+(((-1.0)*x8484*x8487))+(((-1.0)*cj2*sj1*x8486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8489=IKPowWithIntegerCheck(r02,-1);
if(!x8489.valid){
continue;
}
cj4array[0]=(sj0*(x8489.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8490=IKsin(j4);
IkReal x8491=IKcos(j4);
IkReal x8492=((1.0)*sj0);
IkReal x8493=(gconst2*r10);
IkReal x8494=(gconst1*r11);
IkReal x8495=(gconst1*r21);
IkReal x8496=(gconst2*r20);
IkReal x8497=((1.0)*x8491);
IkReal x8498=((1.0)*x8490);
evalcond[0]=(r02*x8490);
evalcond[1]=(((x8490*x8495))+(((-1.0)*x8496*x8498)));
evalcond[2]=(((x8490*x8494))+(((-1.0)*x8493*x8498)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8491*x8496))+(((-1.0)*x8495*x8497)));
evalcond[4]=((((-1.0)*cj1*sj2*x8492))+((x8491*x8493))+(((-1.0)*x8494*x8497))+(((-1.0)*cj2*sj1*x8492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8499=(sj1*sj2);
IkReal x8500=(gconst2*r20);
IkReal x8501=(cj1*cj2);
IkReal x8502=(gconst1*r21);
CheckValue<IkReal> x8503=IKPowWithIntegerCheck(IKsign(((((2.0)*x8500*x8502))+(((-1.0)*(x8500*x8500)))+(((-1.0)*(x8502*x8502)))+(((-1.0)*(r22*r22))))),-1);
if(!x8503.valid){
continue;
}
CheckValue<IkReal> x8504 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8501))+((r22*x8499)))),IkReal(((((-1.0)*x8499*x8502))+((x8499*x8500))+(((-1.0)*x8500*x8501))+((x8501*x8502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8503.value)))+(x8504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8505=IKsin(j4);
IkReal x8506=IKcos(j4);
IkReal x8507=(gconst2*r00);
IkReal x8508=((1.0)*cj2);
IkReal x8509=((1.0)*sj0);
IkReal x8510=(gconst2*r10);
IkReal x8511=(cj1*sj2);
IkReal x8512=(gconst2*r20);
IkReal x8513=(gconst1*x8505);
IkReal x8514=((1.0)*x8505);
IkReal x8515=((1.0)*gconst1*x8506);
evalcond[0]=((((-1.0)*x8512*x8514))+((r22*x8506))+((r21*x8513)));
evalcond[1]=(cj0+((r11*x8513))+((r12*x8506))+(((-1.0)*x8510*x8514)));
evalcond[2]=(((r02*x8506))+(((-1.0)*x8509))+(((-1.0)*x8507*x8514))+((r01*x8513)));
evalcond[3]=(((x8506*x8512))+((r22*x8505))+(((-1.0)*cj1*x8508))+((sj1*sj2))+(((-1.0)*r21*x8515)));
evalcond[4]=(((r02*x8505))+((x8506*x8507))+(((-1.0)*cj0*sj1*x8508))+(((-1.0)*r01*x8515))+(((-1.0)*cj0*x8511)));
evalcond[5]=(((x8506*x8510))+(((-1.0)*sj0*sj1*x8508))+((r12*x8505))+(((-1.0)*x8509*x8511))+(((-1.0)*r11*x8515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8516=((1.0)*gconst1);
CheckValue<IkReal> x8517=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8516)))),-1);
if(!x8517.valid){
continue;
}
CheckValue<IkReal> x8518 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x8516))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8517.value)))+(x8518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8519=IKsin(j4);
IkReal x8520=IKcos(j4);
IkReal x8521=(gconst2*r00);
IkReal x8522=((1.0)*cj2);
IkReal x8523=((1.0)*sj0);
IkReal x8524=(gconst2*r10);
IkReal x8525=(cj1*sj2);
IkReal x8526=(gconst2*r20);
IkReal x8527=(gconst1*x8519);
IkReal x8528=((1.0)*x8519);
IkReal x8529=((1.0)*gconst1*x8520);
evalcond[0]=(((r21*x8527))+(((-1.0)*x8526*x8528))+((r22*x8520)));
evalcond[1]=(cj0+((r12*x8520))+((r11*x8527))+(((-1.0)*x8524*x8528)));
evalcond[2]=(((r02*x8520))+(((-1.0)*x8523))+((r01*x8527))+(((-1.0)*x8521*x8528)));
evalcond[3]=((((-1.0)*r21*x8529))+((r22*x8519))+(((-1.0)*cj1*x8522))+((sj1*sj2))+((x8520*x8526)));
evalcond[4]=(((r02*x8519))+(((-1.0)*r01*x8529))+(((-1.0)*cj0*x8525))+(((-1.0)*cj0*sj1*x8522))+((x8520*x8521)));
evalcond[5]=((((-1.0)*x8523*x8525))+(((-1.0)*sj0*sj1*x8522))+((r12*x8519))+((x8520*x8524))+(((-1.0)*r11*x8529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8530=((1.0)*gconst1);
CheckValue<IkReal> x8531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8530))+(((-1.0)*gconst2*r01)))),-1);
if(!x8531.valid){
continue;
}
CheckValue<IkReal> x8532 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x8530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8531.value)))+(x8532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8533=IKsin(j4);
IkReal x8534=IKcos(j4);
IkReal x8535=(gconst2*r00);
IkReal x8536=((1.0)*cj2);
IkReal x8537=((1.0)*sj0);
IkReal x8538=(gconst2*r10);
IkReal x8539=(cj1*sj2);
IkReal x8540=(gconst2*r20);
IkReal x8541=(gconst1*x8533);
IkReal x8542=((1.0)*x8533);
IkReal x8543=((1.0)*gconst1*x8534);
evalcond[0]=(((r22*x8534))+(((-1.0)*x8540*x8542))+((r21*x8541)));
evalcond[1]=(cj0+((r12*x8534))+((r11*x8541))+(((-1.0)*x8538*x8542)));
evalcond[2]=((((-1.0)*x8535*x8542))+(((-1.0)*x8537))+((r01*x8541))+((r02*x8534)));
evalcond[3]=(((r22*x8533))+((x8534*x8540))+((sj1*sj2))+(((-1.0)*cj1*x8536))+(((-1.0)*r21*x8543)));
evalcond[4]=((((-1.0)*r01*x8543))+((x8534*x8535))+(((-1.0)*cj0*sj1*x8536))+((r02*x8533))+(((-1.0)*cj0*x8539)));
evalcond[5]=((((-1.0)*x8537*x8539))+((x8534*x8538))+(((-1.0)*r11*x8543))+((r12*x8533))+(((-1.0)*sj0*sj1*x8536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8544=((-1.0)*r20);
IkReal x8545=x8158;
CheckValue<IkReal> x8547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8544),IKFAST_ATAN2_MAGTHRESH);
if(!x8547.valid){
continue;
}
IkReal x8546=((-1.0)*(x8547.value));
sj5=gconst1;
cj5=gconst2;
j5=x8546;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8546;
IkReal gconst1=(r21*x8545);
IkReal gconst2=(x8544*x8545);
IkReal x8548=r22*r22;
IkReal x8549=((1.0)*x8548);
CheckValue<IkReal> x8553=IKPowWithIntegerCheck(((-1.0)+x8548),-1);
if(!x8553.valid){
continue;
}
IkReal x8550=x8553.value;
if((((1.0)+(((-1.0)*x8549)))) < -0.00001)
continue;
IkReal x8551=IKsqrt(((1.0)+(((-1.0)*x8549))));
IkReal x8552=(cj0*x8550*x8551);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x8552+(((-1.0)*x8549*x8552))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8554=((-1.0)*r20);
IkReal x8555=x8158;
CheckValue<IkReal> x8557 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8554),IKFAST_ATAN2_MAGTHRESH);
if(!x8557.valid){
continue;
}
IkReal x8556=((-1.0)*(x8557.value));
sj5=gconst1;
cj5=gconst2;
j5=x8556;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8556;
IkReal gconst1=(r21*x8555);
IkReal gconst2=(x8554*x8555);
IkReal x8558=r22*r22;
IkReal x8559=((1.0)*x8558);
CheckValue<IkReal> x8563=IKPowWithIntegerCheck(((-1.0)+x8558),-1);
if(!x8563.valid){
continue;
}
IkReal x8560=x8563.value;
if((((1.0)+(((-1.0)*x8559)))) < -0.00001)
continue;
IkReal x8561=IKsqrt(((1.0)+(((-1.0)*x8559))));
IkReal x8562=(sj0*x8560*x8561);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8562+(((-1.0)*x8559*x8562))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8564=((-1.0)*r20);
IkReal x8565=x8158;
CheckValue<IkReal> x8567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8564),IKFAST_ATAN2_MAGTHRESH);
if(!x8567.valid){
continue;
}
IkReal x8566=((-1.0)*(x8567.value));
sj5=gconst1;
cj5=gconst2;
j5=x8566;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8566;
IkReal gconst1=(r21*x8565);
IkReal gconst2=(x8564*x8565);
IkReal x8568=r22*r22;
CheckValue<IkReal> x8571=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8568))),-1);
if(!x8571.valid){
continue;
}
IkReal x8569=x8571.value;
IkReal x8570=(x8568+(((2.0)*x8569*(r20*r20)*(r21*r21)))+((x8569*(r21*r21*r21*r21)))+((x8569*(r20*r20*r20*r20))));
j4eval[0]=x8570;
j4eval[1]=IKsign(x8570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8572=((-1.0)*r20);
IkReal x8573=x8158;
CheckValue<IkReal> x8575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8572),IKFAST_ATAN2_MAGTHRESH);
if(!x8575.valid){
continue;
}
IkReal x8574=((-1.0)*(x8575.value));
sj5=gconst1;
cj5=gconst2;
j5=x8574;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8574;
IkReal gconst1=(r21*x8573);
IkReal gconst2=(x8572*x8573);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8576=((-1.0)*r20);
IkReal x8577=x8158;
CheckValue<IkReal> x8579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8576),IKFAST_ATAN2_MAGTHRESH);
if(!x8579.valid){
continue;
}
IkReal x8578=((-1.0)*(x8579.value));
sj5=gconst1;
cj5=gconst2;
j5=x8578;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8578;
IkReal gconst1=(r21*x8577);
IkReal gconst2=(x8576*x8577);
IkReal x8580=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8584=IKPowWithIntegerCheck(x8580,-1);
if(!x8584.valid){
continue;
}
IkReal x8581=x8584.value;
IkReal x8582=((1.0)*x8581);
IkReal x8583=((((-1.0)*x8582*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8581))+(((-1.0)*(r12*r12)))+(((-1.0)*x8582*(r11*r11)*(r21*r21))));
j4eval[0]=x8583;
j4eval[1]=r12;
j4eval[2]=x8580;
j4eval[3]=IKsign(x8583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8585=((-1.0)*r20);
IkReal x8586=x8158;
CheckValue<IkReal> x8588 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8585),IKFAST_ATAN2_MAGTHRESH);
if(!x8588.valid){
continue;
}
IkReal x8587=((-1.0)*(x8588.value));
sj5=gconst1;
cj5=gconst2;
j5=x8587;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8587;
IkReal gconst1=(r21*x8586);
IkReal gconst2=(x8585*x8586);
IkReal x8589=r22*r22;
CheckValue<IkReal> x8592=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8589))),-1);
if(!x8592.valid){
continue;
}
IkReal x8590=x8592.value;
IkReal x8591=((((2.0)*x8590*(r20*r20)*(r21*r21)))+x8589+((x8590*(r20*r20*r20*r20)))+((x8590*(r21*r21*r21*r21))));
j4eval[0]=x8591;
j4eval[1]=IKsign(x8591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8593=(sj1*sj2);
IkReal x8594=(gconst2*r20);
IkReal x8595=(cj1*cj2);
IkReal x8596=(gconst1*r21);
CheckValue<IkReal> x8597=IKPowWithIntegerCheck(IKsign(((x8594*x8594)+(((-2.0)*x8594*x8596))+(r22*r22)+(x8596*x8596))),-1);
if(!x8597.valid){
continue;
}
CheckValue<IkReal> x8598 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8595))+((r22*x8593)))),IkReal((((x8595*x8596))+(((-1.0)*x8593*x8596))+((x8593*x8594))+(((-1.0)*x8594*x8595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8597.value)))+(x8598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8599=IKsin(j4);
IkReal x8600=IKcos(j4);
IkReal x8601=((1.0)*cj2);
IkReal x8602=(gconst2*r00);
IkReal x8603=(gconst1*x8600);
IkReal x8604=(gconst1*x8599);
IkReal x8605=((1.0)*x8599);
IkReal x8606=((1.0)*gconst2*x8600);
evalcond[0]=(((r22*x8600))+((r21*x8604))+(((-1.0)*gconst2*r20*x8605)));
evalcond[1]=((((-1.0)*x8602*x8605))+((r01*x8604))+((r02*x8600)));
evalcond[2]=((1.0)+((r12*x8600))+((r11*x8604))+(((-1.0)*gconst2*r10*x8605)));
evalcond[3]=(((r11*x8603))+(((-1.0)*r12*x8605))+(((-1.0)*r10*x8606)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x8605))+(((-1.0)*r20*x8606))+(((-1.0)*cj1*x8601))+((r21*x8603)));
evalcond[5]=((((-1.0)*r02*x8605))+(((-1.0)*sj1*x8601))+((r01*x8603))+(((-1.0)*cj1*sj2))+(((-1.0)*x8600*x8602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8607=(gconst1*r11);
IkReal x8608=(gconst2*r10);
CheckValue<IkReal> x8609 = IKatan2WithCheck(IkReal((x8607+(((-1.0)*x8608)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8609.valid){
continue;
}
CheckValue<IkReal> x8610=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8607*x8607)))+(((2.0)*x8607*x8608))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8608*x8608))))),-1);
if(!x8610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8609.value)+(((1.5707963267949)*(x8610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8611=IKsin(j4);
IkReal x8612=IKcos(j4);
IkReal x8613=((1.0)*cj2);
IkReal x8614=(gconst2*r00);
IkReal x8615=(gconst1*x8612);
IkReal x8616=(gconst1*x8611);
IkReal x8617=((1.0)*x8611);
IkReal x8618=((1.0)*gconst2*x8612);
evalcond[0]=(((r22*x8612))+((r21*x8616))+(((-1.0)*gconst2*r20*x8617)));
evalcond[1]=((((-1.0)*x8614*x8617))+((r01*x8616))+((r02*x8612)));
evalcond[2]=((1.0)+((r12*x8612))+(((-1.0)*gconst2*r10*x8617))+((r11*x8616)));
evalcond[3]=(((r11*x8615))+(((-1.0)*r12*x8617))+(((-1.0)*r10*x8618)));
evalcond[4]=((((-1.0)*r22*x8617))+((sj1*sj2))+(((-1.0)*r20*x8618))+(((-1.0)*cj1*x8613))+((r21*x8615)));
evalcond[5]=((((-1.0)*r02*x8617))+(((-1.0)*sj1*x8613))+((r01*x8615))+(((-1.0)*cj1*sj2))+(((-1.0)*x8612*x8614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8619=((1.0)*gconst1);
CheckValue<IkReal> x8620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8619))+(((-1.0)*gconst2*r01)))),-1);
if(!x8620.valid){
continue;
}
CheckValue<IkReal> x8621 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8619))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8620.value)))+(x8621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8622=IKsin(j4);
IkReal x8623=IKcos(j4);
IkReal x8624=((1.0)*cj2);
IkReal x8625=(gconst2*r00);
IkReal x8626=(gconst1*x8623);
IkReal x8627=(gconst1*x8622);
IkReal x8628=((1.0)*x8622);
IkReal x8629=((1.0)*gconst2*x8623);
evalcond[0]=(((r21*x8627))+((r22*x8623))+(((-1.0)*gconst2*r20*x8628)));
evalcond[1]=((((-1.0)*x8625*x8628))+((r02*x8623))+((r01*x8627)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x8628))+((r12*x8623))+((r11*x8627)));
evalcond[3]=((((-1.0)*r12*x8628))+(((-1.0)*r10*x8629))+((r11*x8626)));
evalcond[4]=(((r21*x8626))+(((-1.0)*cj1*x8624))+((sj1*sj2))+(((-1.0)*r22*x8628))+(((-1.0)*r20*x8629)));
evalcond[5]=((((-1.0)*sj1*x8624))+(((-1.0)*cj1*sj2))+(((-1.0)*x8623*x8625))+((r01*x8626))+(((-1.0)*r02*x8628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8630=((-1.0)*r20);
IkReal x8631=x8158;
CheckValue<IkReal> x8633 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8630),IKFAST_ATAN2_MAGTHRESH);
if(!x8633.valid){
continue;
}
IkReal x8632=((-1.0)*(x8633.value));
sj5=gconst1;
cj5=gconst2;
j5=x8632;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8632;
IkReal gconst1=(r21*x8631);
IkReal gconst2=(x8630*x8631);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8634=((-1.0)*r20);
IkReal x8635=x8158;
CheckValue<IkReal> x8637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8634),IKFAST_ATAN2_MAGTHRESH);
if(!x8637.valid){
continue;
}
IkReal x8636=((-1.0)*(x8637.value));
sj5=gconst1;
cj5=gconst2;
j5=x8636;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8636;
IkReal gconst1=(r21*x8635);
IkReal gconst2=(x8634*x8635);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8638=((-1.0)*r20);
IkReal x8639=x8158;
CheckValue<IkReal> x8641 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8638),IKFAST_ATAN2_MAGTHRESH);
if(!x8641.valid){
continue;
}
IkReal x8640=((-1.0)*(x8641.value));
sj5=gconst1;
cj5=gconst2;
j5=x8640;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8640;
IkReal gconst1=(r21*x8639);
IkReal gconst2=(x8638*x8639);
IkReal x8642=r22*r22;
IkReal x8643=(cj1*r02*sj2);
IkReal x8644=(cj2*r02*sj1);
CheckValue<IkReal> x8648=IKPowWithIntegerCheck(((-1.0)+x8642),-1);
if(!x8648.valid){
continue;
}
IkReal x8645=x8648.value;
if((((1.0)+(((-1.0)*x8642)))) < -0.00001)
continue;
IkReal x8646=IKsqrt(((1.0)+(((-1.0)*x8642))));
IkReal x8647=((1.0)*r22*x8645*x8646);
j4eval[0]=((IKabs(((((-1.0)*x8644*x8647))+(((-1.0)*x8643*x8647)))))+(IKabs((x8644+x8643))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8649=(gconst1*r01);
IkReal x8650=(cj2*sj1);
IkReal x8651=(gconst2*r00);
IkReal x8652=(cj1*sj2);
CheckValue<IkReal> x8653=IKPowWithIntegerCheck(IKsign(((x8651*x8651)+(((-2.0)*x8649*x8651))+(r02*r02)+(x8649*x8649))),-1);
if(!x8653.valid){
continue;
}
CheckValue<IkReal> x8654 = IKatan2WithCheck(IkReal((((r02*x8650))+((r02*x8652)))),IkReal((((x8650*x8651))+((x8651*x8652))+(((-1.0)*x8649*x8652))+(((-1.0)*x8649*x8650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8653.value)))+(x8654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8655=IKsin(j4);
IkReal x8656=IKcos(j4);
IkReal x8657=(gconst2*r00);
IkReal x8658=(gconst1*x8656);
IkReal x8659=(gconst1*x8655);
IkReal x8660=((1.0)*x8655);
IkReal x8661=((1.0)*gconst2*x8656);
evalcond[0]=(((r21*x8659))+((r22*x8656))+(((-1.0)*gconst2*r20*x8660)));
evalcond[1]=(((r01*x8659))+(((-1.0)*x8657*x8660))+((r02*x8656)));
evalcond[2]=((-1.0)+((r12*x8656))+((r11*x8659))+(((-1.0)*gconst2*r10*x8660)));
evalcond[3]=((((-1.0)*r12*x8660))+((r11*x8658))+(((-1.0)*r10*x8661)));
evalcond[4]=(((r01*x8658))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x8660))+(((-1.0)*x8656*x8657)));
evalcond[5]=(((r21*x8658))+(((-1.0)*r22*x8660))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x8661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8662=(gconst2*r10);
IkReal x8663=(gconst1*r11);
CheckValue<IkReal> x8664=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8663*x8663)+(((-2.0)*x8662*x8663))+(x8662*x8662))),-1);
if(!x8664.valid){
continue;
}
CheckValue<IkReal> x8665 = IKatan2WithCheck(IkReal((x8663+(((-1.0)*x8662)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8664.value)))+(x8665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8666=IKsin(j4);
IkReal x8667=IKcos(j4);
IkReal x8668=(gconst2*r00);
IkReal x8669=(gconst1*x8667);
IkReal x8670=(gconst1*x8666);
IkReal x8671=((1.0)*x8666);
IkReal x8672=((1.0)*gconst2*x8667);
evalcond[0]=(((r22*x8667))+(((-1.0)*gconst2*r20*x8671))+((r21*x8670)));
evalcond[1]=((((-1.0)*x8668*x8671))+((r01*x8670))+((r02*x8667)));
evalcond[2]=((-1.0)+((r11*x8670))+((r12*x8667))+(((-1.0)*gconst2*r10*x8671)));
evalcond[3]=(((r11*x8669))+(((-1.0)*r12*x8671))+(((-1.0)*r10*x8672)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x8671))+((r01*x8669))+(((-1.0)*x8667*x8668)));
evalcond[5]=((((-1.0)*r22*x8671))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x8672))+((r21*x8669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8673 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8673.valid){
continue;
}
CheckValue<IkReal> x8674=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8673.value)+(((1.5707963267949)*(x8674.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8675=IKsin(j4);
IkReal x8676=IKcos(j4);
IkReal x8677=(gconst2*r00);
IkReal x8678=(gconst1*x8676);
IkReal x8679=(gconst1*x8675);
IkReal x8680=((1.0)*x8675);
IkReal x8681=((1.0)*gconst2*x8676);
evalcond[0]=(((r22*x8676))+((r21*x8679))+(((-1.0)*gconst2*r20*x8680)));
evalcond[1]=(((r01*x8679))+(((-1.0)*x8677*x8680))+((r02*x8676)));
evalcond[2]=((-1.0)+((r11*x8679))+((r12*x8676))+(((-1.0)*gconst2*r10*x8680)));
evalcond[3]=(((r11*x8678))+(((-1.0)*r12*x8680))+(((-1.0)*r10*x8681)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x8680))+((cj1*sj2))+((r01*x8678))+(((-1.0)*x8676*x8677)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8680))+(((-1.0)*r20*x8681))+((r21*x8678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8682=((-1.0)*r20);
IkReal x8683=x8158;
CheckValue<IkReal> x8685 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8682),IKFAST_ATAN2_MAGTHRESH);
if(!x8685.valid){
continue;
}
IkReal x8684=((-1.0)*(x8685.value));
sj5=gconst1;
cj5=gconst2;
j5=x8684;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8684;
IkReal gconst1=(r21*x8683);
IkReal gconst2=(x8682*x8683);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8686=((-1.0)*r20);
IkReal x8687=x8158;
CheckValue<IkReal> x8689 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8686),IKFAST_ATAN2_MAGTHRESH);
if(!x8689.valid){
continue;
}
IkReal x8688=((-1.0)*(x8689.value));
sj5=gconst1;
cj5=gconst2;
j5=x8688;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8688;
IkReal gconst1=(r21*x8687);
IkReal gconst2=(x8686*x8687);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8690=((-1.0)*r20);
IkReal x8691=x8158;
CheckValue<IkReal> x8693 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8690),IKFAST_ATAN2_MAGTHRESH);
if(!x8693.valid){
continue;
}
IkReal x8692=((-1.0)*(x8693.value));
sj5=gconst1;
cj5=gconst2;
j5=x8692;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8692;
IkReal gconst1=(r21*x8691);
IkReal gconst2=(x8690*x8691);
IkReal x8694=r22*r22;
CheckValue<IkReal> x8697=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8694))),-1);
if(!x8697.valid){
continue;
}
IkReal x8695=x8697.value;
IkReal x8696=(x8694+((x8695*(r21*r21*r21*r21)))+(((2.0)*x8695*(r20*r20)*(r21*r21)))+((x8695*(r20*r20*r20*r20))));
j4eval[0]=x8696;
j4eval[1]=IKsign(x8696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8698=(sj1*sj2);
IkReal x8699=(gconst2*r20);
IkReal x8700=(cj1*cj2);
IkReal x8701=(gconst1*r21);
CheckValue<IkReal> x8702 = IKatan2WithCheck(IkReal((((r22*x8698))+(((-1.0)*r22*x8700)))),IkReal((((x8698*x8699))+(((-1.0)*x8698*x8701))+(((-1.0)*x8699*x8700))+((x8700*x8701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8702.valid){
continue;
}
CheckValue<IkReal> x8703=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8699*x8701))+(x8701*x8701)+(x8699*x8699)+(r22*r22))),-1);
if(!x8703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8702.value)+(((1.5707963267949)*(x8703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8704=IKsin(j4);
IkReal x8705=IKcos(j4);
IkReal x8706=((1.0)*cj2);
IkReal x8707=(gconst2*r20);
IkReal x8708=(gconst2*r00);
IkReal x8709=(gconst2*r10);
IkReal x8710=(gconst1*x8705);
IkReal x8711=(gconst1*x8704);
IkReal x8712=((1.0)*x8704);
IkReal x8713=((1.0)*x8705);
evalcond[0]=((((-1.0)*x8707*x8712))+((r22*x8705))+((r21*x8711)));
evalcond[1]=((((-1.0)*x8709*x8712))+((r12*x8705))+((r11*x8711)));
evalcond[2]=((-1.0)+(((-1.0)*x8708*x8712))+((r02*x8705))+((r01*x8711)));
evalcond[3]=((((-1.0)*r02*x8712))+(((-1.0)*x8708*x8713))+((r01*x8710)));
evalcond[4]=((((-1.0)*x8707*x8713))+(((-1.0)*cj1*x8706))+((sj1*sj2))+(((-1.0)*r22*x8712))+((r21*x8710)));
evalcond[5]=((((-1.0)*x8709*x8713))+(((-1.0)*sj1*x8706))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x8712))+((r11*x8710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8714=(gconst1*r01);
IkReal x8715=(gconst2*r00);
CheckValue<IkReal> x8716=IKPowWithIntegerCheck(IKsign(((x8715*x8715)+(((-2.0)*x8714*x8715))+(x8714*x8714)+(r02*r02))),-1);
if(!x8716.valid){
continue;
}
CheckValue<IkReal> x8717 = IKatan2WithCheck(IkReal((x8714+(((-1.0)*x8715)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8716.value)))+(x8717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8718=IKsin(j4);
IkReal x8719=IKcos(j4);
IkReal x8720=((1.0)*cj2);
IkReal x8721=(gconst2*r20);
IkReal x8722=(gconst2*r00);
IkReal x8723=(gconst2*r10);
IkReal x8724=(gconst1*x8719);
IkReal x8725=(gconst1*x8718);
IkReal x8726=((1.0)*x8718);
IkReal x8727=((1.0)*x8719);
evalcond[0]=(((r21*x8725))+(((-1.0)*x8721*x8726))+((r22*x8719)));
evalcond[1]=((((-1.0)*x8723*x8726))+((r11*x8725))+((r12*x8719)));
evalcond[2]=((-1.0)+((r02*x8719))+((r01*x8725))+(((-1.0)*x8722*x8726)));
evalcond[3]=((((-1.0)*r02*x8726))+((r01*x8724))+(((-1.0)*x8722*x8727)));
evalcond[4]=(((r21*x8724))+(((-1.0)*x8721*x8727))+((sj1*sj2))+(((-1.0)*cj1*x8720))+(((-1.0)*r22*x8726)));
evalcond[5]=((((-1.0)*x8723*x8727))+((r11*x8724))+(((-1.0)*sj1*x8720))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x8726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8728=((1.0)*gconst1);
CheckValue<IkReal> x8729=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8728)))),-1);
if(!x8729.valid){
continue;
}
CheckValue<IkReal> x8730 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8728))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8729.value)))+(x8730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8731=IKsin(j4);
IkReal x8732=IKcos(j4);
IkReal x8733=((1.0)*cj2);
IkReal x8734=(gconst2*r20);
IkReal x8735=(gconst2*r00);
IkReal x8736=(gconst2*r10);
IkReal x8737=(gconst1*x8732);
IkReal x8738=(gconst1*x8731);
IkReal x8739=((1.0)*x8731);
IkReal x8740=((1.0)*x8732);
evalcond[0]=(((r21*x8738))+((r22*x8732))+(((-1.0)*x8734*x8739)));
evalcond[1]=(((r11*x8738))+((r12*x8732))+(((-1.0)*x8736*x8739)));
evalcond[2]=((-1.0)+((r02*x8732))+(((-1.0)*x8735*x8739))+((r01*x8738)));
evalcond[3]=((((-1.0)*r02*x8739))+(((-1.0)*x8735*x8740))+((r01*x8737)));
evalcond[4]=(((r21*x8737))+((sj1*sj2))+(((-1.0)*cj1*x8733))+(((-1.0)*r22*x8739))+(((-1.0)*x8734*x8740)));
evalcond[5]=((((-1.0)*x8736*x8740))+((r11*x8737))+(((-1.0)*sj1*x8733))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x8739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8741=((-1.0)*r20);
IkReal x8742=x8158;
CheckValue<IkReal> x8744 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8741),IKFAST_ATAN2_MAGTHRESH);
if(!x8744.valid){
continue;
}
IkReal x8743=((-1.0)*(x8744.value));
sj5=gconst1;
cj5=gconst2;
j5=x8743;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8743;
IkReal gconst1=(r21*x8742);
IkReal gconst2=(x8741*x8742);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8745=((-1.0)*r20);
IkReal x8746=x8158;
CheckValue<IkReal> x8748 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8745),IKFAST_ATAN2_MAGTHRESH);
if(!x8748.valid){
continue;
}
IkReal x8747=((-1.0)*(x8748.value));
sj5=gconst1;
cj5=gconst2;
j5=x8747;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8747;
IkReal gconst1=(r21*x8746);
IkReal gconst2=(x8745*x8746);
IkReal x8749=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8753=IKPowWithIntegerCheck(x8749,-1);
if(!x8753.valid){
continue;
}
IkReal x8750=x8753.value;
IkReal x8751=((1.0)*x8750);
IkReal x8752=((((-1.0)*(r02*r02)))+(((-1.0)*x8751*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8750))+(((-1.0)*x8751*(r00*r00)*(r20*r20))));
j4eval[0]=x8752;
j4eval[1]=IKsign(x8752);
j4eval[2]=r02;
j4eval[3]=x8749;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8754=((-1.0)*r20);
IkReal x8755=x8158;
CheckValue<IkReal> x8757 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8754),IKFAST_ATAN2_MAGTHRESH);
if(!x8757.valid){
continue;
}
IkReal x8756=((-1.0)*(x8757.value));
sj5=gconst1;
cj5=gconst2;
j5=x8756;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8756;
IkReal gconst1=(r21*x8755);
IkReal gconst2=(x8754*x8755);
IkReal x8758=r22*r22;
IkReal x8759=(cj1*r12*sj2);
IkReal x8760=(cj2*r12*sj1);
CheckValue<IkReal> x8764=IKPowWithIntegerCheck(((-1.0)+x8758),-1);
if(!x8764.valid){
continue;
}
IkReal x8761=x8764.value;
if((((1.0)+(((-1.0)*x8758)))) < -0.00001)
continue;
IkReal x8762=IKsqrt(((1.0)+(((-1.0)*x8758))));
IkReal x8763=((1.0)*r22*x8761*x8762);
j4eval[0]=((IKabs(((((-1.0)*x8759*x8763))+(((-1.0)*x8760*x8763)))))+(IKabs((x8760+x8759))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8765=(cj2*sj1);
IkReal x8766=(gconst2*r10);
IkReal x8767=(cj1*sj2);
IkReal x8768=((1.0)*gconst1*r11);
CheckValue<IkReal> x8769=IKPowWithIntegerCheck(IKsign(((((gconst1*gconst1)*(r11*r11)))+(r12*r12)+(x8766*x8766)+(((-2.0)*gconst1*r11*x8766)))),-1);
if(!x8769.valid){
continue;
}
CheckValue<IkReal> x8770 = IKatan2WithCheck(IkReal((((r12*x8765))+((r12*x8767)))),IkReal((((x8765*x8766))+((x8766*x8767))+(((-1.0)*x8767*x8768))+(((-1.0)*x8765*x8768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8769.value)))+(x8770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8771=IKsin(j4);
IkReal x8772=IKcos(j4);
IkReal x8773=(gconst2*r20);
IkReal x8774=(gconst2*r00);
IkReal x8775=(gconst2*r10);
IkReal x8776=(gconst1*x8772);
IkReal x8777=(gconst1*x8771);
IkReal x8778=((1.0)*x8771);
IkReal x8779=((1.0)*x8772);
evalcond[0]=((((-1.0)*x8773*x8778))+((r21*x8777))+((r22*x8772)));
evalcond[1]=((((-1.0)*x8775*x8778))+((r12*x8772))+((r11*x8777)));
evalcond[2]=((1.0)+((r01*x8777))+(((-1.0)*x8774*x8778))+((r02*x8772)));
evalcond[3]=((((-1.0)*r02*x8778))+((r01*x8776))+(((-1.0)*x8774*x8779)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x8778))+(((-1.0)*x8775*x8779))+((r11*x8776)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8773*x8779))+(((-1.0)*r22*x8778))+((r21*x8776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8780=(gconst1*r01);
IkReal x8781=(gconst2*r00);
CheckValue<IkReal> x8782 = IKatan2WithCheck(IkReal((x8780+(((-1.0)*x8781)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8782.valid){
continue;
}
CheckValue<IkReal> x8783=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8781*x8781)))+(((-1.0)*(r02*r02)))+(((2.0)*x8780*x8781))+(((-1.0)*(x8780*x8780))))),-1);
if(!x8783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8782.value)+(((1.5707963267949)*(x8783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8784=IKsin(j4);
IkReal x8785=IKcos(j4);
IkReal x8786=(gconst2*r20);
IkReal x8787=(gconst2*r00);
IkReal x8788=(gconst2*r10);
IkReal x8789=(gconst1*x8785);
IkReal x8790=(gconst1*x8784);
IkReal x8791=((1.0)*x8784);
IkReal x8792=((1.0)*x8785);
evalcond[0]=(((r21*x8790))+(((-1.0)*x8786*x8791))+((r22*x8785)));
evalcond[1]=((((-1.0)*x8788*x8791))+((r11*x8790))+((r12*x8785)));
evalcond[2]=((1.0)+((r02*x8785))+((r01*x8790))+(((-1.0)*x8787*x8791)));
evalcond[3]=((((-1.0)*r02*x8791))+(((-1.0)*x8787*x8792))+((r01*x8789)));
evalcond[4]=((((-1.0)*r12*x8791))+((cj2*sj1))+((r11*x8789))+(((-1.0)*x8788*x8792))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x8786*x8792))+((r21*x8789))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8793 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8793.valid){
continue;
}
CheckValue<IkReal> x8794=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8793.value)+(((1.5707963267949)*(x8794.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8795=IKsin(j4);
IkReal x8796=IKcos(j4);
IkReal x8797=(gconst2*r20);
IkReal x8798=(gconst2*r00);
IkReal x8799=(gconst2*r10);
IkReal x8800=(gconst1*x8796);
IkReal x8801=(gconst1*x8795);
IkReal x8802=((1.0)*x8795);
IkReal x8803=((1.0)*x8796);
evalcond[0]=(((r21*x8801))+(((-1.0)*x8797*x8802))+((r22*x8796)));
evalcond[1]=(((r12*x8796))+((r11*x8801))+(((-1.0)*x8799*x8802)));
evalcond[2]=((1.0)+(((-1.0)*x8798*x8802))+((r02*x8796))+((r01*x8801)));
evalcond[3]=((((-1.0)*r02*x8802))+(((-1.0)*x8798*x8803))+((r01*x8800)));
evalcond[4]=((((-1.0)*r12*x8802))+((cj2*sj1))+((cj1*sj2))+((r11*x8800))+(((-1.0)*x8799*x8803)));
evalcond[5]=(((r21*x8800))+(((-1.0)*r22*x8802))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8797*x8803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8804=((-1.0)*r20);
IkReal x8805=((-1.0)*px);
CheckValue<IkReal> x8807 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8804),IKFAST_ATAN2_MAGTHRESH);
if(!x8807.valid){
continue;
}
IkReal x8806=((-1.0)*(x8807.value));
sj5=gconst1;
cj5=gconst2;
j5=x8806;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8805);
rxp1_1=(px*r21);
rxp1_2=(r11*x8805);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8806;
IkReal gconst1=r21;
IkReal gconst2=x8804;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8808=((-1.0)*r20);
IkReal x8809=((-1.0)*px);
CheckValue<IkReal> x8811 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8808),IKFAST_ATAN2_MAGTHRESH);
if(!x8811.valid){
continue;
}
IkReal x8810=((-1.0)*(x8811.value));
sj5=gconst1;
cj5=gconst2;
j5=x8810;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8809);
rxp1_1=(px*r21);
rxp1_2=(r11*x8809);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8810;
IkReal gconst1=r21;
IkReal gconst2=x8808;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8812=((-1.0)*r20);
IkReal x8813=((-1.0)*px);
CheckValue<IkReal> x8815 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8812),IKFAST_ATAN2_MAGTHRESH);
if(!x8815.valid){
continue;
}
IkReal x8814=((-1.0)*(x8815.value));
sj5=gconst1;
cj5=gconst2;
j5=x8814;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8813);
rxp1_1=(px*r21);
rxp1_2=(r11*x8813);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8814;
IkReal gconst1=r21;
IkReal gconst2=x8812;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8818=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8818.valid){
continue;
}
IkReal x8816=x8818.value;
IkReal x8817=(sj0*x8816);
cj4array[0]=(((cj2*sj1*x8817))+((cj1*sj2*x8817)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8819=IKsin(j4);
IkReal x8820=IKcos(j4);
IkReal x8821=((1.0)*gconst2);
IkReal x8822=(gconst1*r21);
evalcond[0]=((-1.0)*r02*x8819);
evalcond[1]=((((-1.0)*sj0))+((r02*x8820)));
evalcond[2]=(((x8819*x8822))+(((-1.0)*r20*x8819*x8821)));
evalcond[3]=((((-1.0)*r10*x8819*x8821))+((gconst1*r11*x8819)));
evalcond[4]=((((-1.0)*r20*x8820*x8821))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8820*x8822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8824=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8824.valid){
continue;
}
IkReal x8823=x8824.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8823))+((cj1*cj2*x8823)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8825=IKsin(j4);
IkReal x8826=IKcos(j4);
IkReal x8827=((1.0)*sj0);
IkReal x8828=(gconst1*x8825);
IkReal x8829=((1.0)*gconst2*x8825);
evalcond[0]=((-1.0)*r02*x8825);
evalcond[1]=(((r02*x8826))+(((-1.0)*x8827)));
evalcond[2]=(((r21*x8828))+(((-1.0)*r20*x8829)));
evalcond[3]=(((r11*x8828))+(((-1.0)*r10*x8829)));
evalcond[4]=((((-1.0)*gconst2*r10*x8826))+((gconst1*r11*x8826))+(((-1.0)*cj1*sj2*x8827))+(((-1.0)*cj2*sj1*x8827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8830=IKPowWithIntegerCheck(r02,-1);
if(!x8830.valid){
continue;
}
cj4array[0]=(sj0*(x8830.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8831=IKsin(j4);
IkReal x8832=IKcos(j4);
IkReal x8833=(gconst1*r21);
IkReal x8834=((1.0)*sj0);
IkReal x8835=(gconst1*r11);
IkReal x8836=((1.0)*gconst2*r10);
IkReal x8837=((1.0)*gconst2*r20);
evalcond[0]=((-1.0)*r02*x8831);
evalcond[1]=(((x8831*x8833))+(((-1.0)*x8831*x8837)));
evalcond[2]=(((x8831*x8835))+(((-1.0)*x8831*x8836)));
evalcond[3]=((((-1.0)*x8832*x8837))+((x8832*x8833))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x8832*x8836))+(((-1.0)*cj1*sj2*x8834))+((x8832*x8835))+(((-1.0)*cj2*sj1*x8834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8838=(sj1*sj2);
IkReal x8839=(gconst2*r20);
IkReal x8840=(cj1*cj2);
IkReal x8841=(gconst1*r21);
CheckValue<IkReal> x8842 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8840))+((r22*x8838)))),IkReal(((((-1.0)*x8839*x8840))+((x8840*x8841))+((x8838*x8839))+(((-1.0)*x8838*x8841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8842.valid){
continue;
}
CheckValue<IkReal> x8843=IKPowWithIntegerCheck(IKsign(((x8839*x8839)+(x8841*x8841)+(r22*r22)+(((-2.0)*x8839*x8841)))),-1);
if(!x8843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8842.value)+(((1.5707963267949)*(x8843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8844=IKsin(j4);
IkReal x8845=IKcos(j4);
IkReal x8846=((1.0)*sj0);
IkReal x8847=((1.0)*cj2);
IkReal x8848=(gconst2*r00);
IkReal x8849=(cj1*sj2);
IkReal x8850=(gconst1*x8845);
IkReal x8851=(gconst1*x8844);
IkReal x8852=((1.0)*x8844);
IkReal x8853=((1.0)*gconst2*x8845);
evalcond[0]=(((r22*x8845))+(((-1.0)*gconst2*r20*x8852))+((r21*x8851)));
evalcond[1]=((((-1.0)*gconst2*r10*x8852))+cj0+((r12*x8845))+((r11*x8851)));
evalcond[2]=(((r02*x8845))+((r01*x8851))+(((-1.0)*x8848*x8852))+(((-1.0)*x8846)));
evalcond[3]=((((-1.0)*r22*x8852))+((sj1*sj2))+(((-1.0)*cj1*x8847))+((r21*x8850))+(((-1.0)*r20*x8853)));
evalcond[4]=((((-1.0)*cj0*sj1*x8847))+((r01*x8850))+(((-1.0)*cj0*x8849))+(((-1.0)*x8845*x8848))+(((-1.0)*r02*x8852)));
evalcond[5]=((((-1.0)*r12*x8852))+(((-1.0)*cj2*sj1*x8846))+(((-1.0)*r10*x8853))+((r11*x8850))+(((-1.0)*x8846*x8849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8854=((1.0)*gconst1);
CheckValue<IkReal> x8855=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8854)))),-1);
if(!x8855.valid){
continue;
}
CheckValue<IkReal> x8856 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x8854))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8855.value)))+(x8856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8857=IKsin(j4);
IkReal x8858=IKcos(j4);
IkReal x8859=((1.0)*sj0);
IkReal x8860=((1.0)*cj2);
IkReal x8861=(gconst2*r00);
IkReal x8862=(cj1*sj2);
IkReal x8863=(gconst1*x8858);
IkReal x8864=(gconst1*x8857);
IkReal x8865=((1.0)*x8857);
IkReal x8866=((1.0)*gconst2*x8858);
evalcond[0]=(((r21*x8864))+(((-1.0)*gconst2*r20*x8865))+((r22*x8858)));
evalcond[1]=(cj0+((r11*x8864))+(((-1.0)*gconst2*r10*x8865))+((r12*x8858)));
evalcond[2]=((((-1.0)*x8859))+((r01*x8864))+((r02*x8858))+(((-1.0)*x8861*x8865)));
evalcond[3]=((((-1.0)*cj1*x8860))+((r21*x8863))+(((-1.0)*r22*x8865))+((sj1*sj2))+(((-1.0)*r20*x8866)));
evalcond[4]=(((r01*x8863))+(((-1.0)*x8858*x8861))+(((-1.0)*cj0*x8862))+(((-1.0)*cj0*sj1*x8860))+(((-1.0)*r02*x8865)));
evalcond[5]=((((-1.0)*r10*x8866))+((r11*x8863))+(((-1.0)*r12*x8865))+(((-1.0)*cj2*sj1*x8859))+(((-1.0)*x8859*x8862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8867=((1.0)*gconst1);
CheckValue<IkReal> x8868=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8867)))),-1);
if(!x8868.valid){
continue;
}
CheckValue<IkReal> x8869 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x8867))+((cj0*gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8868.value)))+(x8869.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8870=IKsin(j4);
IkReal x8871=IKcos(j4);
IkReal x8872=((1.0)*sj0);
IkReal x8873=((1.0)*cj2);
IkReal x8874=(gconst2*r00);
IkReal x8875=(cj1*sj2);
IkReal x8876=(gconst1*x8871);
IkReal x8877=(gconst1*x8870);
IkReal x8878=((1.0)*x8870);
IkReal x8879=((1.0)*gconst2*x8871);
evalcond[0]=((((-1.0)*gconst2*r20*x8878))+((r21*x8877))+((r22*x8871)));
evalcond[1]=((((-1.0)*gconst2*r10*x8878))+cj0+((r11*x8877))+((r12*x8871)));
evalcond[2]=(((r02*x8871))+(((-1.0)*x8872))+((r01*x8877))+(((-1.0)*x8874*x8878)));
evalcond[3]=((((-1.0)*cj1*x8873))+(((-1.0)*r22*x8878))+((sj1*sj2))+((r21*x8876))+(((-1.0)*r20*x8879)));
evalcond[4]=((((-1.0)*r02*x8878))+((r01*x8876))+(((-1.0)*cj0*sj1*x8873))+(((-1.0)*x8871*x8874))+(((-1.0)*cj0*x8875)));
evalcond[5]=((((-1.0)*x8872*x8875))+((r11*x8876))+(((-1.0)*r10*x8879))+(((-1.0)*r12*x8878))+(((-1.0)*cj2*sj1*x8872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8880=((-1.0)*r20);
IkReal x8881=x8158;
CheckValue<IkReal> x8883 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8880),IKFAST_ATAN2_MAGTHRESH);
if(!x8883.valid){
continue;
}
IkReal x8882=((-1.0)*(x8883.value));
sj5=gconst1;
cj5=gconst2;
j5=x8882;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8882;
IkReal gconst1=(r21*x8881);
IkReal gconst2=(x8880*x8881);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8884=((-1.0)*r20);
IkReal x8885=x8158;
CheckValue<IkReal> x8887 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8884),IKFAST_ATAN2_MAGTHRESH);
if(!x8887.valid){
continue;
}
IkReal x8886=((-1.0)*(x8887.value));
sj5=gconst1;
cj5=gconst2;
j5=x8886;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8886;
IkReal gconst1=(r21*x8885);
IkReal gconst2=(x8884*x8885);
CheckValue<IkReal> x8895=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8895.valid){
continue;
}
IkReal x8888=x8895.value;
IkReal x8889=(cj3*x8888);
IkReal x8890=(r11*x8889);
IkReal x8891=(r01*x8889);
IkReal x8892=(r00*x8889);
IkReal x8893=(r10*x8889);
IkReal x8894=(r20*r21*x8889);
j4eval[0]=IKsign((((r00*r20*r21*x8890))+((r10*r20*r21*x8891))+((cj3*r02*r12))+((r01*x8890*(r21*r21)))+((r10*x8892*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8896=gconst2*gconst2;
IkReal x8897=gconst1*gconst1;
IkReal x8898=((1.0)*r02);
IkReal x8899=(cj3*r01);
IkReal x8900=(gconst1*gconst2);
IkReal x8901=(cj3*r10);
IkReal x8902=((1.0)*r00);
IkReal x8903=(r10*sj3);
IkReal x8904=(r11*sj3);
IkReal x8905=(cj3*r11);
CheckValue<IkReal> x8906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*sj3*x8898))+(((-1.0)*r01*x8897*x8904))+((r01*x8900*x8903))+(((-1.0)*x8896*x8902*x8903))+((r00*x8900*x8904)))),-1);
if(!x8906.valid){
continue;
}
CheckValue<IkReal> x8907 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x8898*x8901))+(((-1.0)*gconst2*x8898*x8905)))),IkReal(((((-1.0)*x8900*x8901*x8902))+((r10*x8897*x8899))+(((-1.0)*x8896*x8902*x8905))+((r11*x8899*x8900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8906.value)))+(x8907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8908=IKsin(j4);
IkReal x8909=IKcos(j4);
IkReal x8910=(sj1*sj2);
IkReal x8911=(gconst2*r10);
IkReal x8912=((1.0)*gconst1);
IkReal x8913=(gconst2*r20);
IkReal x8914=((1.0)*cj2);
IkReal x8915=(gconst2*r00);
IkReal x8916=(cj1*sj2);
IkReal x8917=((1.0)*cj3);
IkReal x8918=(cj1*x8914);
IkReal x8919=(sj3*x8909);
IkReal x8920=(gconst1*x8908);
IkReal x8921=(r12*x8908);
IkReal x8922=((1.0)*gconst2*r21);
IkReal x8923=((1.0)*x8908);
IkReal x8924=((1.0)*gconst2*sj3);
IkReal x8925=(sj3*x8908);
IkReal x8926=(x8909*x8917);
IkReal x8927=(cj3*gconst1*x8909);
evalcond[0]=(((r21*x8920))+(((-1.0)*x8913*x8923))+((r22*x8909)));
evalcond[1]=((((-1.0)*x8915*x8923))+((r01*x8920))+((r02*x8909)));
evalcond[2]=((1.0)+((r12*x8909))+(((-1.0)*x8911*x8923))+((r11*x8920)));
evalcond[3]=((((-1.0)*cj3*r10*x8912))+((x8911*x8919))+(((-1.0)*gconst2*r11*x8917))+(((-1.0)*r11*x8912*x8919))+((sj3*x8921)));
evalcond[4]=((((-1.0)*x8911*x8926))+(((-1.0)*r10*sj3*x8912))+(((-1.0)*r11*x8924))+(((-1.0)*x8917*x8921))+((r11*x8927)));
evalcond[5]=((((-1.0)*x8918))+((x8913*x8919))+((r22*x8925))+x8910+(((-1.0)*gconst2*r21*x8917))+(((-1.0)*cj3*r20*x8912))+(((-1.0)*r21*x8912*x8919)));
evalcond[6]=(((cj2*sj1))+x8916+(((-1.0)*sj3*x8922))+((r21*x8927))+(((-1.0)*r22*x8908*x8917))+(((-1.0)*x8913*x8926))+(((-1.0)*r20*sj3*x8912)));
evalcond[7]=((((-1.0)*x8916))+((x8915*x8919))+(((-1.0)*sj1*x8914))+((r02*x8925))+(((-1.0)*gconst2*r01*x8917))+(((-1.0)*r01*x8912*x8919))+(((-1.0)*cj3*r00*x8912)));
evalcond[8]=((((-1.0)*x8918))+(((-1.0)*r00*sj3*x8912))+(((-1.0)*r02*x8908*x8917))+x8910+(((-1.0)*x8915*x8926))+(((-1.0)*r01*x8924))+((r01*x8927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8928=gconst1*gconst1;
IkReal x8929=gconst2*gconst2;
IkReal x8930=((1.0)*r10);
IkReal x8931=(r01*r11);
IkReal x8932=(gconst1*gconst2*sj3);
IkReal x8933=(cj3*gconst1*gconst2);
IkReal x8934=((1.0)*r11*sj3);
IkReal x8935=(r00*x8929);
CheckValue<IkReal> x8936=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*r01*x8930*x8933))+((cj3*x8928*x8931))+(((-1.0)*r00*r11*x8933))+((cj3*r10*x8935)))),-1);
if(!x8936.valid){
continue;
}
CheckValue<IkReal> x8937 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*r02*sj3*x8930))+(((-1.0)*gconst2*r02*x8934)))),IkReal(((((-1.0)*r00*x8930*x8932))+((r01*r10*sj3*x8928))+((x8931*x8932))+(((-1.0)*x8934*x8935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8936.value)))+(x8937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8938=IKsin(j4);
IkReal x8939=IKcos(j4);
IkReal x8940=(sj1*sj2);
IkReal x8941=(gconst2*r10);
IkReal x8942=((1.0)*gconst1);
IkReal x8943=(gconst2*r20);
IkReal x8944=((1.0)*cj2);
IkReal x8945=(gconst2*r00);
IkReal x8946=(cj1*sj2);
IkReal x8947=((1.0)*cj3);
IkReal x8948=(cj1*x8944);
IkReal x8949=(sj3*x8939);
IkReal x8950=(gconst1*x8938);
IkReal x8951=(r12*x8938);
IkReal x8952=((1.0)*gconst2*r21);
IkReal x8953=((1.0)*x8938);
IkReal x8954=((1.0)*gconst2*sj3);
IkReal x8955=(sj3*x8938);
IkReal x8956=(x8939*x8947);
IkReal x8957=(cj3*gconst1*x8939);
evalcond[0]=((((-1.0)*x8943*x8953))+((r21*x8950))+((r22*x8939)));
evalcond[1]=((((-1.0)*x8945*x8953))+((r01*x8950))+((r02*x8939)));
evalcond[2]=((1.0)+((r12*x8939))+(((-1.0)*x8941*x8953))+((r11*x8950)));
evalcond[3]=((((-1.0)*gconst2*r11*x8947))+(((-1.0)*r11*x8942*x8949))+((sj3*x8951))+(((-1.0)*cj3*r10*x8942))+((x8941*x8949)));
evalcond[4]=((((-1.0)*r10*sj3*x8942))+(((-1.0)*x8947*x8951))+(((-1.0)*r11*x8954))+(((-1.0)*x8941*x8956))+((r11*x8957)));
evalcond[5]=(((r22*x8955))+(((-1.0)*cj3*r20*x8942))+(((-1.0)*gconst2*r21*x8947))+x8940+((x8943*x8949))+(((-1.0)*r21*x8942*x8949))+(((-1.0)*x8948)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*sj3*x8952))+x8946+(((-1.0)*r20*sj3*x8942))+(((-1.0)*x8943*x8956))+(((-1.0)*r22*x8938*x8947))+((r21*x8957)));
evalcond[7]=((((-1.0)*r01*x8942*x8949))+(((-1.0)*sj1*x8944))+((r02*x8955))+((x8945*x8949))+(((-1.0)*x8946))+(((-1.0)*gconst2*r01*x8947))+(((-1.0)*cj3*r00*x8942)));
evalcond[8]=((((-1.0)*r02*x8938*x8947))+(((-1.0)*r01*x8954))+x8940+(((-1.0)*r00*sj3*x8942))+(((-1.0)*x8945*x8956))+((r01*x8957))+(((-1.0)*x8948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8958=((1.0)*gconst1);
CheckValue<IkReal> x8959 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8959.valid){
continue;
}
CheckValue<IkReal> x8960=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8958))+(((-1.0)*gconst2*r01)))),-1);
if(!x8960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8959.value)+(((1.5707963267949)*(x8960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8961=IKsin(j4);
IkReal x8962=IKcos(j4);
IkReal x8963=(sj1*sj2);
IkReal x8964=(gconst2*r10);
IkReal x8965=((1.0)*gconst1);
IkReal x8966=(gconst2*r20);
IkReal x8967=((1.0)*cj2);
IkReal x8968=(gconst2*r00);
IkReal x8969=(cj1*sj2);
IkReal x8970=((1.0)*cj3);
IkReal x8971=(cj1*x8967);
IkReal x8972=(sj3*x8962);
IkReal x8973=(gconst1*x8961);
IkReal x8974=(r12*x8961);
IkReal x8975=((1.0)*gconst2*r21);
IkReal x8976=((1.0)*x8961);
IkReal x8977=((1.0)*gconst2*sj3);
IkReal x8978=(sj3*x8961);
IkReal x8979=(x8962*x8970);
IkReal x8980=(cj3*gconst1*x8962);
evalcond[0]=(((r21*x8973))+((r22*x8962))+(((-1.0)*x8966*x8976)));
evalcond[1]=(((r02*x8962))+((r01*x8973))+(((-1.0)*x8968*x8976)));
evalcond[2]=((1.0)+((r11*x8973))+(((-1.0)*x8964*x8976))+((r12*x8962)));
evalcond[3]=(((sj3*x8974))+(((-1.0)*gconst2*r11*x8970))+((x8964*x8972))+(((-1.0)*cj3*r10*x8965))+(((-1.0)*r11*x8965*x8972)));
evalcond[4]=((((-1.0)*r10*sj3*x8965))+(((-1.0)*x8964*x8979))+((r11*x8980))+(((-1.0)*r11*x8977))+(((-1.0)*x8970*x8974)));
evalcond[5]=((((-1.0)*cj3*r20*x8965))+(((-1.0)*r21*x8965*x8972))+(((-1.0)*gconst2*r21*x8970))+(((-1.0)*x8971))+x8963+((x8966*x8972))+((r22*x8978)));
evalcond[6]=(((cj2*sj1))+x8969+(((-1.0)*r22*x8961*x8970))+(((-1.0)*r20*sj3*x8965))+(((-1.0)*x8966*x8979))+((r21*x8980))+(((-1.0)*sj3*x8975)));
evalcond[7]=((((-1.0)*sj1*x8967))+((x8968*x8972))+(((-1.0)*gconst2*r01*x8970))+(((-1.0)*x8969))+((r02*x8978))+(((-1.0)*cj3*r00*x8965))+(((-1.0)*r01*x8965*x8972)));
evalcond[8]=(((r01*x8980))+(((-1.0)*x8971))+x8963+(((-1.0)*r00*sj3*x8965))+(((-1.0)*x8968*x8979))+(((-1.0)*r01*x8977))+(((-1.0)*r02*x8961*x8970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8981=((-1.0)*r20);
IkReal x8982=x8158;
CheckValue<IkReal> x8984 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8981),IKFAST_ATAN2_MAGTHRESH);
if(!x8984.valid){
continue;
}
IkReal x8983=((-1.0)*(x8984.value));
sj5=gconst1;
cj5=gconst2;
j5=x8983;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8983;
IkReal gconst1=(r21*x8982);
IkReal gconst2=(x8981*x8982);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8985=((-1.0)*r20);
IkReal x8986=x8158;
CheckValue<IkReal> x8988 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8985),IKFAST_ATAN2_MAGTHRESH);
if(!x8988.valid){
continue;
}
IkReal x8987=((-1.0)*(x8988.value));
sj5=gconst1;
cj5=gconst2;
j5=x8987;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8987;
IkReal gconst1=(r21*x8986);
IkReal gconst2=(x8985*x8986);
CheckValue<IkReal> x8996=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8996.valid){
continue;
}
IkReal x8989=x8996.value;
IkReal x8990=(cj3*x8989);
IkReal x8991=(r11*x8990);
IkReal x8992=(r01*x8990);
IkReal x8993=(r00*x8990);
IkReal x8994=(r10*x8990);
IkReal x8995=(r20*r21*x8990);
j4eval[0]=IKsign((((r01*x8991*(r21*r21)))+((cj3*r02*r12))+((r00*r20*r21*x8991))+((r10*x8993*(r20*r20)))+((r10*r20*r21*x8992))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8997=gconst2*gconst2;
IkReal x8998=gconst1*gconst1;
IkReal x8999=((1.0)*r02);
IkReal x9000=(cj3*r01);
IkReal x9001=(gconst1*gconst2);
IkReal x9002=(cj3*r10);
IkReal x9003=((1.0)*r00);
IkReal x9004=(r10*sj3);
IkReal x9005=(r11*sj3);
IkReal x9006=(cj3*r11);
CheckValue<IkReal> x9007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*sj3*x8999))+(((-1.0)*r01*x8998*x9005))+((r00*x9001*x9005))+((r01*x9001*x9004))+(((-1.0)*x8997*x9003*x9004)))),-1);
if(!x9007.valid){
continue;
}
CheckValue<IkReal> x9008 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x8999*x9006))+(((-1.0)*gconst1*x8999*x9002)))),IkReal((((r11*x9000*x9001))+((r10*x8998*x9000))+(((-1.0)*x9001*x9002*x9003))+(((-1.0)*x8997*x9003*x9006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9007.value)))+(x9008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9009=IKsin(j4);
IkReal x9010=IKcos(j4);
IkReal x9011=(cj2*sj1);
IkReal x9012=(cj1*sj2);
IkReal x9013=(gconst2*r10);
IkReal x9014=((1.0)*gconst1);
IkReal x9015=(sj1*sj2);
IkReal x9016=(gconst2*r20);
IkReal x9017=(cj1*cj2);
IkReal x9018=(gconst2*r00);
IkReal x9019=((1.0)*cj3);
IkReal x9020=(sj3*x9010);
IkReal x9021=(gconst1*x9009);
IkReal x9022=(r12*x9009);
IkReal x9023=((1.0)*gconst2*r21);
IkReal x9024=((1.0)*x9009);
IkReal x9025=((1.0)*gconst2*sj3);
IkReal x9026=(sj3*x9009);
IkReal x9027=(x9011+x9012);
IkReal x9028=(x9010*x9019);
IkReal x9029=(cj3*gconst1*x9010);
evalcond[0]=((((-1.0)*x9016*x9024))+((r21*x9021))+((r22*x9010)));
evalcond[1]=((((-1.0)*x9018*x9024))+((r01*x9021))+((r02*x9010)));
evalcond[2]=((-1.0)+((r12*x9010))+((r11*x9021))+(((-1.0)*x9013*x9024)));
evalcond[3]=(((x9013*x9020))+(((-1.0)*cj3*r10*x9014))+((sj3*x9022))+(((-1.0)*r11*x9014*x9020))+(((-1.0)*gconst2*r11*x9019)));
evalcond[4]=((((-1.0)*r11*x9025))+(((-1.0)*r10*sj3*x9014))+((r11*x9029))+(((-1.0)*x9013*x9028))+(((-1.0)*x9019*x9022)));
evalcond[5]=((((-1.0)*r01*x9014*x9020))+((x9018*x9020))+x9027+((r02*x9026))+(((-1.0)*cj3*r00*x9014))+(((-1.0)*gconst2*r01*x9019)));
evalcond[6]=((((-1.0)*x9017))+(((-1.0)*cj3*r20*x9014))+(((-1.0)*gconst2*r21*x9019))+((r22*x9026))+x9015+((x9016*x9020))+(((-1.0)*r21*x9014*x9020)));
evalcond[7]=((((-1.0)*r22*x9009*x9019))+(((-1.0)*sj3*x9023))+(((-1.0)*x9016*x9028))+(((-1.0)*r20*sj3*x9014))+((r21*x9029))+x9027);
evalcond[8]=((((-1.0)*x9018*x9028))+(((-1.0)*x9015))+(((-1.0)*r00*sj3*x9014))+((r01*x9029))+x9017+(((-1.0)*r01*x9025))+(((-1.0)*r02*x9009*x9019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9030=gconst1*gconst1;
IkReal x9031=gconst2*gconst2;
IkReal x9032=((1.0)*r10);
IkReal x9033=(r01*r11);
IkReal x9034=(gconst1*gconst2*sj3);
IkReal x9035=(cj3*gconst1*gconst2);
IkReal x9036=((1.0)*r11*sj3);
IkReal x9037=(r00*x9031);
CheckValue<IkReal> x9038 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r02*x9036))+(((-1.0)*gconst1*r02*sj3*x9032)))),IkReal(((((-1.0)*x9036*x9037))+(((-1.0)*r00*x9032*x9034))+((x9033*x9034))+((r01*r10*sj3*x9030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9038.valid){
continue;
}
CheckValue<IkReal> x9039=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((cj3*x9030*x9033))+(((-1.0)*r01*x9032*x9035))+(((-1.0)*r00*r11*x9035))+((cj3*r10*x9037)))),-1);
if(!x9039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9038.value)+(((1.5707963267949)*(x9039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9040=IKsin(j4);
IkReal x9041=IKcos(j4);
IkReal x9042=(cj2*sj1);
IkReal x9043=(cj1*sj2);
IkReal x9044=(gconst2*r10);
IkReal x9045=((1.0)*gconst1);
IkReal x9046=(sj1*sj2);
IkReal x9047=(gconst2*r20);
IkReal x9048=(cj1*cj2);
IkReal x9049=(gconst2*r00);
IkReal x9050=((1.0)*cj3);
IkReal x9051=(sj3*x9041);
IkReal x9052=(gconst1*x9040);
IkReal x9053=(r12*x9040);
IkReal x9054=((1.0)*gconst2*r21);
IkReal x9055=((1.0)*x9040);
IkReal x9056=((1.0)*gconst2*sj3);
IkReal x9057=(sj3*x9040);
IkReal x9058=(x9043+x9042);
IkReal x9059=(x9041*x9050);
IkReal x9060=(cj3*gconst1*x9041);
evalcond[0]=((((-1.0)*x9047*x9055))+((r22*x9041))+((r21*x9052)));
evalcond[1]=((((-1.0)*x9049*x9055))+((r01*x9052))+((r02*x9041)));
evalcond[2]=((-1.0)+((r12*x9041))+((r11*x9052))+(((-1.0)*x9044*x9055)));
evalcond[3]=(((x9044*x9051))+(((-1.0)*gconst2*r11*x9050))+(((-1.0)*cj3*r10*x9045))+((sj3*x9053))+(((-1.0)*r11*x9045*x9051)));
evalcond[4]=(((r11*x9060))+(((-1.0)*r11*x9056))+(((-1.0)*r10*sj3*x9045))+(((-1.0)*x9050*x9053))+(((-1.0)*x9044*x9059)));
evalcond[5]=((((-1.0)*r01*x9045*x9051))+((x9049*x9051))+(((-1.0)*cj3*r00*x9045))+x9058+(((-1.0)*gconst2*r01*x9050))+((r02*x9057)));
evalcond[6]=(((x9047*x9051))+(((-1.0)*x9048))+(((-1.0)*cj3*r20*x9045))+x9046+(((-1.0)*r21*x9045*x9051))+(((-1.0)*gconst2*r21*x9050))+((r22*x9057)));
evalcond[7]=((((-1.0)*r22*x9040*x9050))+x9058+(((-1.0)*sj3*x9054))+((r21*x9060))+(((-1.0)*x9047*x9059))+(((-1.0)*r20*sj3*x9045)));
evalcond[8]=((((-1.0)*x9046))+((r01*x9060))+(((-1.0)*x9049*x9059))+(((-1.0)*r02*x9040*x9050))+(((-1.0)*r01*x9056))+x9048+(((-1.0)*r00*sj3*x9045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9061 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9061.valid){
continue;
}
CheckValue<IkReal> x9062=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9061.value)+(((1.5707963267949)*(x9062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9063=IKsin(j4);
IkReal x9064=IKcos(j4);
IkReal x9065=(cj2*sj1);
IkReal x9066=(cj1*sj2);
IkReal x9067=(gconst2*r10);
IkReal x9068=((1.0)*gconst1);
IkReal x9069=(sj1*sj2);
IkReal x9070=(gconst2*r20);
IkReal x9071=(cj1*cj2);
IkReal x9072=(gconst2*r00);
IkReal x9073=((1.0)*cj3);
IkReal x9074=(sj3*x9064);
IkReal x9075=(gconst1*x9063);
IkReal x9076=(r12*x9063);
IkReal x9077=((1.0)*gconst2*r21);
IkReal x9078=((1.0)*x9063);
IkReal x9079=((1.0)*gconst2*sj3);
IkReal x9080=(sj3*x9063);
IkReal x9081=(x9065+x9066);
IkReal x9082=(x9064*x9073);
IkReal x9083=(cj3*gconst1*x9064);
evalcond[0]=(((r22*x9064))+((r21*x9075))+(((-1.0)*x9070*x9078)));
evalcond[1]=((((-1.0)*x9072*x9078))+((r02*x9064))+((r01*x9075)));
evalcond[2]=((-1.0)+((r12*x9064))+((r11*x9075))+(((-1.0)*x9067*x9078)));
evalcond[3]=((((-1.0)*gconst2*r11*x9073))+((x9067*x9074))+(((-1.0)*r11*x9068*x9074))+((sj3*x9076))+(((-1.0)*cj3*r10*x9068)));
evalcond[4]=(((r11*x9083))+(((-1.0)*r10*sj3*x9068))+(((-1.0)*r11*x9079))+(((-1.0)*x9067*x9082))+(((-1.0)*x9073*x9076)));
evalcond[5]=((((-1.0)*r01*x9068*x9074))+(((-1.0)*cj3*r00*x9068))+x9081+((x9072*x9074))+((r02*x9080))+(((-1.0)*gconst2*r01*x9073)));
evalcond[6]=((((-1.0)*x9071))+x9069+(((-1.0)*gconst2*r21*x9073))+(((-1.0)*cj3*r20*x9068))+((x9070*x9074))+(((-1.0)*r21*x9068*x9074))+((r22*x9080)));
evalcond[7]=((((-1.0)*x9070*x9082))+(((-1.0)*r20*sj3*x9068))+(((-1.0)*r22*x9063*x9073))+x9081+(((-1.0)*sj3*x9077))+((r21*x9083)));
evalcond[8]=((((-1.0)*r02*x9063*x9073))+(((-1.0)*x9072*x9082))+((r01*x9083))+x9071+(((-1.0)*x9069))+(((-1.0)*r01*x9079))+(((-1.0)*r00*sj3*x9068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9084=((-1.0)*r20);
IkReal x9085=x8158;
CheckValue<IkReal> x9087 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9084),IKFAST_ATAN2_MAGTHRESH);
if(!x9087.valid){
continue;
}
IkReal x9086=((-1.0)*(x9087.value));
sj5=gconst1;
cj5=gconst2;
j5=x9086;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9086;
IkReal gconst1=(r21*x9085);
IkReal gconst2=(x9084*x9085);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9088=((-1.0)*r20);
IkReal x9089=x8158;
CheckValue<IkReal> x9091 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9088),IKFAST_ATAN2_MAGTHRESH);
if(!x9091.valid){
continue;
}
IkReal x9090=((-1.0)*(x9091.value));
sj5=gconst1;
cj5=gconst2;
j5=x9090;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9090;
IkReal gconst1=(r21*x9089);
IkReal gconst2=(x9088*x9089);
CheckValue<IkReal> x9099=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9099.valid){
continue;
}
IkReal x9092=x9099.value;
IkReal x9093=(cj3*x9092);
IkReal x9094=(r11*x9093);
IkReal x9095=(r01*x9093);
IkReal x9096=(r00*x9093);
IkReal x9097=(r10*x9093);
IkReal x9098=(r20*r21*x9093);
j4eval[0]=IKsign((((cj3*r02*r12))+((r00*r20*r21*x9094))+((r10*x9096*(r20*r20)))+((r10*r20*r21*x9095))+((r01*x9094*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9100=gconst2*gconst2;
IkReal x9101=gconst1*gconst1;
IkReal x9102=(cj3*r11);
IkReal x9103=((1.0)*sj3);
IkReal x9104=(gconst1*gconst2);
IkReal x9105=(r00*r10);
IkReal x9106=((1.0)*cj3);
IkReal x9107=(r01*r10);
CheckValue<IkReal> x9108=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9100*x9103*x9105))+((r00*r11*sj3*x9104))+((sj3*x9104*x9107))+(((-1.0)*r01*r11*x9101*x9103))+(((-1.0)*r02*r12*x9103)))),-1);
if(!x9108.valid){
continue;
}
CheckValue<IkReal> x9109 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*r12*x9106))+(((-1.0)*gconst1*r00*r12*x9106)))),IkReal((((r01*x9102*x9104))+(((-1.0)*x9100*x9106*x9107))+(((-1.0)*x9104*x9105*x9106))+((r00*x9101*x9102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9108.value)))+(x9109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9110=IKsin(j4);
IkReal x9111=IKcos(j4);
IkReal x9112=(sj1*sj2);
IkReal x9113=(gconst2*r10);
IkReal x9114=((1.0)*gconst1);
IkReal x9115=(gconst2*r20);
IkReal x9116=((1.0)*cj2);
IkReal x9117=(gconst2*r00);
IkReal x9118=(cj1*sj2);
IkReal x9119=(cj1*x9116);
IkReal x9120=(sj3*x9111);
IkReal x9121=(gconst1*x9110);
IkReal x9122=(sj3*x9110);
IkReal x9123=((1.0)*gconst2*r21);
IkReal x9124=((1.0)*gconst2*sj3);
IkReal x9125=((1.0)*cj3*gconst2);
IkReal x9126=((1.0)*x9110);
IkReal x9127=((1.0)*cj3*x9111);
IkReal x9128=(cj3*x9126);
IkReal x9129=(cj3*gconst1*x9111);
evalcond[0]=((((-1.0)*x9115*x9126))+((r22*x9111))+((r21*x9121)));
evalcond[1]=(((r12*x9111))+(((-1.0)*x9113*x9126))+((r11*x9121)));
evalcond[2]=((-1.0)+(((-1.0)*x9117*x9126))+((r01*x9121))+((r02*x9111)));
evalcond[3]=(((r02*x9122))+(((-1.0)*r01*x9114*x9120))+((x9117*x9120))+(((-1.0)*cj3*r00*x9114))+(((-1.0)*r01*x9125)));
evalcond[4]=((((-1.0)*r00*sj3*x9114))+(((-1.0)*r02*x9128))+(((-1.0)*x9117*x9127))+((r01*x9129))+(((-1.0)*r01*x9124)));
evalcond[5]=(((r22*x9122))+x9112+(((-1.0)*x9119))+((x9115*x9120))+(((-1.0)*cj3*x9123))+(((-1.0)*r21*x9114*x9120))+(((-1.0)*cj3*r20*x9114)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x9115*x9127))+x9118+(((-1.0)*r22*x9128))+(((-1.0)*sj3*x9123))+((r21*x9129))+(((-1.0)*r20*sj3*x9114)));
evalcond[7]=((((-1.0)*r11*x9125))+(((-1.0)*r11*x9114*x9120))+(((-1.0)*cj3*r10*x9114))+((x9113*x9120))+(((-1.0)*x9118))+(((-1.0)*sj1*x9116))+((r12*x9122)));
evalcond[8]=((((-1.0)*r11*x9124))+(((-1.0)*r12*x9128))+x9112+(((-1.0)*x9113*x9127))+(((-1.0)*x9119))+(((-1.0)*r10*sj3*x9114))+((r11*x9129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9130=gconst1*gconst1;
IkReal x9131=gconst2*gconst2;
IkReal x9132=(r00*sj3);
IkReal x9133=(gconst1*gconst2);
IkReal x9134=((1.0)*r10);
IkReal x9135=(r01*sj3);
IkReal x9136=(cj3*r01);
IkReal x9137=((1.0)*r12);
IkReal x9138=(cj3*r00);
IkReal x9139=(r11*x9130);
CheckValue<IkReal> x9140=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*x9133*x9134*x9136))+((r10*x9131*x9138))+((x9136*x9139))+(((-1.0)*r11*x9133*x9138)))),-1);
if(!x9140.valid){
continue;
}
CheckValue<IkReal> x9141 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x9132*x9137))+(((-1.0)*gconst2*x9135*x9137)))),IkReal((((x9132*x9139))+(((-1.0)*x9132*x9133*x9134))+(((-1.0)*x9131*x9134*x9135))+((r11*x9133*x9135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9140.value)))+(x9141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9142=IKsin(j4);
IkReal x9143=IKcos(j4);
IkReal x9144=(sj1*sj2);
IkReal x9145=(gconst2*r10);
IkReal x9146=((1.0)*gconst1);
IkReal x9147=(gconst2*r20);
IkReal x9148=((1.0)*cj2);
IkReal x9149=(gconst2*r00);
IkReal x9150=(cj1*sj2);
IkReal x9151=(cj1*x9148);
IkReal x9152=(sj3*x9143);
IkReal x9153=(gconst1*x9142);
IkReal x9154=(sj3*x9142);
IkReal x9155=((1.0)*gconst2*r21);
IkReal x9156=((1.0)*gconst2*sj3);
IkReal x9157=((1.0)*cj3*gconst2);
IkReal x9158=((1.0)*x9142);
IkReal x9159=((1.0)*cj3*x9143);
IkReal x9160=(cj3*x9158);
IkReal x9161=(cj3*gconst1*x9143);
evalcond[0]=((((-1.0)*x9147*x9158))+((r21*x9153))+((r22*x9143)));
evalcond[1]=(((r11*x9153))+(((-1.0)*x9145*x9158))+((r12*x9143)));
evalcond[2]=((-1.0)+((r01*x9153))+(((-1.0)*x9149*x9158))+((r02*x9143)));
evalcond[3]=(((r02*x9154))+((x9149*x9152))+(((-1.0)*r01*x9157))+(((-1.0)*r01*x9146*x9152))+(((-1.0)*cj3*r00*x9146)));
evalcond[4]=(((r01*x9161))+(((-1.0)*r00*sj3*x9146))+(((-1.0)*r02*x9160))+(((-1.0)*r01*x9156))+(((-1.0)*x9149*x9159)));
evalcond[5]=(((r22*x9154))+x9144+((x9147*x9152))+(((-1.0)*r21*x9146*x9152))+(((-1.0)*cj3*r20*x9146))+(((-1.0)*x9151))+(((-1.0)*cj3*x9155)));
evalcond[6]=((((-1.0)*x9147*x9159))+((cj2*sj1))+(((-1.0)*r20*sj3*x9146))+(((-1.0)*r22*x9160))+x9150+((r21*x9161))+(((-1.0)*sj3*x9155)));
evalcond[7]=((((-1.0)*r11*x9146*x9152))+(((-1.0)*r11*x9157))+((x9145*x9152))+(((-1.0)*cj3*r10*x9146))+(((-1.0)*sj1*x9148))+((r12*x9154))+(((-1.0)*x9150)));
evalcond[8]=((((-1.0)*r11*x9156))+(((-1.0)*x9145*x9159))+x9144+(((-1.0)*r12*x9160))+(((-1.0)*r10*sj3*x9146))+((r11*x9161))+(((-1.0)*x9151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9162=((1.0)*gconst1);
CheckValue<IkReal> x9163 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9162))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9163.valid){
continue;
}
CheckValue<IkReal> x9164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9162))+(((-1.0)*gconst2*r11)))),-1);
if(!x9164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9163.value)+(((1.5707963267949)*(x9164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9165=IKsin(j4);
IkReal x9166=IKcos(j4);
IkReal x9167=(sj1*sj2);
IkReal x9168=(gconst2*r10);
IkReal x9169=((1.0)*gconst1);
IkReal x9170=(gconst2*r20);
IkReal x9171=((1.0)*cj2);
IkReal x9172=(gconst2*r00);
IkReal x9173=(cj1*sj2);
IkReal x9174=(cj1*x9171);
IkReal x9175=(sj3*x9166);
IkReal x9176=(gconst1*x9165);
IkReal x9177=(sj3*x9165);
IkReal x9178=((1.0)*gconst2*r21);
IkReal x9179=((1.0)*gconst2*sj3);
IkReal x9180=((1.0)*cj3*gconst2);
IkReal x9181=((1.0)*x9165);
IkReal x9182=((1.0)*cj3*x9166);
IkReal x9183=(cj3*x9181);
IkReal x9184=(cj3*gconst1*x9166);
evalcond[0]=((((-1.0)*x9170*x9181))+((r22*x9166))+((r21*x9176)));
evalcond[1]=(((r12*x9166))+(((-1.0)*x9168*x9181))+((r11*x9176)));
evalcond[2]=((-1.0)+((r02*x9166))+((r01*x9176))+(((-1.0)*x9172*x9181)));
evalcond[3]=((((-1.0)*cj3*r00*x9169))+((r02*x9177))+(((-1.0)*r01*x9169*x9175))+(((-1.0)*r01*x9180))+((x9172*x9175)));
evalcond[4]=((((-1.0)*r01*x9179))+(((-1.0)*r02*x9183))+(((-1.0)*r00*sj3*x9169))+(((-1.0)*x9172*x9182))+((r01*x9184)));
evalcond[5]=(((x9170*x9175))+(((-1.0)*cj3*r20*x9169))+x9167+(((-1.0)*x9174))+(((-1.0)*cj3*x9178))+(((-1.0)*r21*x9169*x9175))+((r22*x9177)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x9170*x9182))+(((-1.0)*r22*x9183))+x9173+(((-1.0)*r20*sj3*x9169))+(((-1.0)*sj3*x9178))+((r21*x9184)));
evalcond[7]=((((-1.0)*x9173))+(((-1.0)*r11*x9169*x9175))+((x9168*x9175))+(((-1.0)*cj3*r10*x9169))+((r12*x9177))+(((-1.0)*sj1*x9171))+(((-1.0)*r11*x9180)));
evalcond[8]=((((-1.0)*r10*sj3*x9169))+(((-1.0)*r12*x9183))+((r11*x9184))+x9167+(((-1.0)*x9174))+(((-1.0)*r11*x9179))+(((-1.0)*x9168*x9182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9185=((-1.0)*r20);
IkReal x9186=x8158;
CheckValue<IkReal> x9188 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9185),IKFAST_ATAN2_MAGTHRESH);
if(!x9188.valid){
continue;
}
IkReal x9187=((-1.0)*(x9188.value));
sj5=gconst1;
cj5=gconst2;
j5=x9187;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9187;
IkReal gconst1=(r21*x9186);
IkReal gconst2=(x9185*x9186);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9189=((-1.0)*r20);
IkReal x9190=x8158;
CheckValue<IkReal> x9192 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9189),IKFAST_ATAN2_MAGTHRESH);
if(!x9192.valid){
continue;
}
IkReal x9191=((-1.0)*(x9192.value));
sj5=gconst1;
cj5=gconst2;
j5=x9191;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9191;
IkReal gconst1=(r21*x9190);
IkReal gconst2=(x9189*x9190);
CheckValue<IkReal> x9200=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9200.valid){
continue;
}
IkReal x9193=x9200.value;
IkReal x9194=(cj3*x9193);
IkReal x9195=(r11*x9194);
IkReal x9196=(r01*x9194);
IkReal x9197=(r00*x9194);
IkReal x9198=(r10*x9194);
IkReal x9199=(r20*r21*x9194);
j4eval[0]=IKsign((((r01*x9195*(r21*r21)))+((cj3*r02*r12))+((r10*r20*r21*x9196))+((r10*x9197*(r20*r20)))+((r00*r20*r21*x9195))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9201=gconst2*gconst2;
IkReal x9202=gconst1*gconst1;
IkReal x9203=(cj3*r11);
IkReal x9204=((1.0)*sj3);
IkReal x9205=(gconst1*gconst2);
IkReal x9206=(r00*r10);
IkReal x9207=((1.0)*cj3);
IkReal x9208=(r01*r10);
CheckValue<IkReal> x9209=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9204))+((sj3*x9205*x9208))+((r00*r11*sj3*x9205))+(((-1.0)*x9201*x9204*x9206))+(((-1.0)*r01*r11*x9202*x9204)))),-1);
if(!x9209.valid){
continue;
}
CheckValue<IkReal> x9210 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r01*r12*x9207))+(((-1.0)*gconst1*r00*r12*x9207)))),IkReal((((r01*x9203*x9205))+((r00*x9202*x9203))+(((-1.0)*x9201*x9207*x9208))+(((-1.0)*x9205*x9206*x9207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9209.value)))+(x9210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9211=IKsin(j4);
IkReal x9212=IKcos(j4);
IkReal x9213=(cj2*sj1);
IkReal x9214=(cj1*sj2);
IkReal x9215=(gconst2*r10);
IkReal x9216=((1.0)*gconst1);
IkReal x9217=(sj1*sj2);
IkReal x9218=(gconst2*r20);
IkReal x9219=(cj1*cj2);
IkReal x9220=(gconst2*r00);
IkReal x9221=(sj3*x9212);
IkReal x9222=(gconst1*x9211);
IkReal x9223=(sj3*x9211);
IkReal x9224=((1.0)*gconst2*r21);
IkReal x9225=((1.0)*gconst2*sj3);
IkReal x9226=((1.0)*cj3*gconst2);
IkReal x9227=((1.0)*x9211);
IkReal x9228=(x9213+x9214);
IkReal x9229=((1.0)*cj3*x9212);
IkReal x9230=(cj3*x9227);
IkReal x9231=(cj3*gconst1*x9212);
evalcond[0]=(((r21*x9222))+((r22*x9212))+(((-1.0)*x9218*x9227)));
evalcond[1]=(((r12*x9212))+((r11*x9222))+(((-1.0)*x9215*x9227)));
evalcond[2]=((1.0)+((r01*x9222))+(((-1.0)*x9220*x9227))+((r02*x9212)));
evalcond[3]=((((-1.0)*r01*x9226))+(((-1.0)*r01*x9216*x9221))+((r02*x9223))+(((-1.0)*cj3*r00*x9216))+((x9220*x9221)));
evalcond[4]=((((-1.0)*r01*x9225))+(((-1.0)*x9220*x9229))+(((-1.0)*r00*sj3*x9216))+((r01*x9231))+(((-1.0)*r02*x9230)));
evalcond[5]=(x9228+((r12*x9223))+((x9215*x9221))+(((-1.0)*r11*x9216*x9221))+(((-1.0)*cj3*r10*x9216))+(((-1.0)*r11*x9226)));
evalcond[6]=(x9217+((r22*x9223))+((x9218*x9221))+(((-1.0)*r21*x9216*x9221))+(((-1.0)*cj3*r20*x9216))+(((-1.0)*cj3*x9224))+(((-1.0)*x9219)));
evalcond[7]=(x9228+(((-1.0)*sj3*x9224))+((r21*x9231))+(((-1.0)*x9218*x9229))+(((-1.0)*r20*sj3*x9216))+(((-1.0)*r22*x9230)));
evalcond[8]=((((-1.0)*r12*x9230))+x9219+(((-1.0)*r10*sj3*x9216))+(((-1.0)*r11*x9225))+((r11*x9231))+(((-1.0)*x9217))+(((-1.0)*x9215*x9229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9232=gconst1*gconst1;
IkReal x9233=gconst2*gconst2;
IkReal x9234=(r00*sj3);
IkReal x9235=(gconst1*gconst2);
IkReal x9236=((1.0)*r10);
IkReal x9237=(r01*sj3);
IkReal x9238=(cj3*r01);
IkReal x9239=((1.0)*r12);
IkReal x9240=(cj3*r00);
IkReal x9241=(r11*x9232);
CheckValue<IkReal> x9242=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9235*x9240))+((x9238*x9241))+((cj3*r02*r12))+(((-1.0)*x9235*x9236*x9238))+((r10*x9233*x9240)))),-1);
if(!x9242.valid){
continue;
}
CheckValue<IkReal> x9243 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x9237*x9239))+(((-1.0)*gconst1*x9234*x9239)))),IkReal((((r11*x9235*x9237))+(((-1.0)*x9233*x9236*x9237))+((x9234*x9241))+(((-1.0)*x9234*x9235*x9236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9242.value)))+(x9243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9244=IKsin(j4);
IkReal x9245=IKcos(j4);
IkReal x9246=(cj2*sj1);
IkReal x9247=(cj1*sj2);
IkReal x9248=(gconst2*r10);
IkReal x9249=((1.0)*gconst1);
IkReal x9250=(sj1*sj2);
IkReal x9251=(gconst2*r20);
IkReal x9252=(cj1*cj2);
IkReal x9253=(gconst2*r00);
IkReal x9254=(sj3*x9245);
IkReal x9255=(gconst1*x9244);
IkReal x9256=(sj3*x9244);
IkReal x9257=((1.0)*gconst2*r21);
IkReal x9258=((1.0)*gconst2*sj3);
IkReal x9259=((1.0)*cj3*gconst2);
IkReal x9260=((1.0)*x9244);
IkReal x9261=(x9247+x9246);
IkReal x9262=((1.0)*cj3*x9245);
IkReal x9263=(cj3*x9260);
IkReal x9264=(cj3*gconst1*x9245);
evalcond[0]=(((r21*x9255))+((r22*x9245))+(((-1.0)*x9251*x9260)));
evalcond[1]=(((r12*x9245))+((r11*x9255))+(((-1.0)*x9248*x9260)));
evalcond[2]=((1.0)+((r02*x9245))+((r01*x9255))+(((-1.0)*x9253*x9260)));
evalcond[3]=(((x9253*x9254))+(((-1.0)*cj3*r00*x9249))+(((-1.0)*r01*x9249*x9254))+((r02*x9256))+(((-1.0)*r01*x9259)));
evalcond[4]=(((r01*x9264))+(((-1.0)*r01*x9258))+(((-1.0)*r02*x9263))+(((-1.0)*x9253*x9262))+(((-1.0)*r00*sj3*x9249)));
evalcond[5]=(x9261+(((-1.0)*r11*x9259))+(((-1.0)*r11*x9249*x9254))+((r12*x9256))+(((-1.0)*cj3*r10*x9249))+((x9248*x9254)));
evalcond[6]=(((x9251*x9254))+x9250+((r22*x9256))+(((-1.0)*cj3*r20*x9249))+(((-1.0)*r21*x9249*x9254))+(((-1.0)*x9252))+(((-1.0)*cj3*x9257)));
evalcond[7]=((((-1.0)*r20*sj3*x9249))+(((-1.0)*r22*x9263))+x9261+(((-1.0)*sj3*x9257))+(((-1.0)*x9251*x9262))+((r21*x9264)));
evalcond[8]=(x9252+(((-1.0)*r11*x9258))+(((-1.0)*x9250))+(((-1.0)*r12*x9263))+(((-1.0)*x9248*x9262))+(((-1.0)*r10*sj3*x9249))+((r11*x9264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9265 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9265.valid){
continue;
}
CheckValue<IkReal> x9266=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9265.value)+(((1.5707963267949)*(x9266.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9267=IKsin(j4);
IkReal x9268=IKcos(j4);
IkReal x9269=(cj2*sj1);
IkReal x9270=(cj1*sj2);
IkReal x9271=(gconst2*r10);
IkReal x9272=((1.0)*gconst1);
IkReal x9273=(sj1*sj2);
IkReal x9274=(gconst2*r20);
IkReal x9275=(cj1*cj2);
IkReal x9276=(gconst2*r00);
IkReal x9277=(sj3*x9268);
IkReal x9278=(gconst1*x9267);
IkReal x9279=(sj3*x9267);
IkReal x9280=((1.0)*gconst2*r21);
IkReal x9281=((1.0)*gconst2*sj3);
IkReal x9282=((1.0)*cj3*gconst2);
IkReal x9283=((1.0)*x9267);
IkReal x9284=(x9270+x9269);
IkReal x9285=((1.0)*cj3*x9268);
IkReal x9286=(cj3*x9283);
IkReal x9287=(cj3*gconst1*x9268);
evalcond[0]=(((r22*x9268))+(((-1.0)*x9274*x9283))+((r21*x9278)));
evalcond[1]=((((-1.0)*x9271*x9283))+((r12*x9268))+((r11*x9278)));
evalcond[2]=((1.0)+(((-1.0)*x9276*x9283))+((r01*x9278))+((r02*x9268)));
evalcond[3]=(((r02*x9279))+((x9276*x9277))+(((-1.0)*r01*x9272*x9277))+(((-1.0)*cj3*r00*x9272))+(((-1.0)*r01*x9282)));
evalcond[4]=((((-1.0)*r00*sj3*x9272))+(((-1.0)*x9276*x9285))+((r01*x9287))+(((-1.0)*r02*x9286))+(((-1.0)*r01*x9281)));
evalcond[5]=((((-1.0)*r11*x9282))+((r12*x9279))+x9284+(((-1.0)*cj3*r10*x9272))+((x9271*x9277))+(((-1.0)*r11*x9272*x9277)));
evalcond[6]=((((-1.0)*cj3*x9280))+x9273+(((-1.0)*cj3*r20*x9272))+(((-1.0)*x9275))+((x9274*x9277))+((r22*x9279))+(((-1.0)*r21*x9272*x9277)));
evalcond[7]=((((-1.0)*sj3*x9280))+x9284+(((-1.0)*r20*sj3*x9272))+(((-1.0)*r22*x9286))+((r21*x9287))+(((-1.0)*x9274*x9285)));
evalcond[8]=((((-1.0)*x9271*x9285))+(((-1.0)*r11*x9281))+(((-1.0)*r12*x9286))+((r11*x9287))+x9275+(((-1.0)*x9273))+(((-1.0)*r10*sj3*x9272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9288=((-1.0)*r20);
IkReal x9289=((-1.0)*px);
CheckValue<IkReal> x9291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9288),IKFAST_ATAN2_MAGTHRESH);
if(!x9291.valid){
continue;
}
IkReal x9290=((-1.0)*(x9291.value));
sj5=gconst1;
cj5=gconst2;
j5=x9290;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9289);
rxp1_1=(px*r21);
rxp1_2=(r11*x9289);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9290;
IkReal gconst1=r21;
IkReal gconst2=x9288;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9292=((-1.0)*r20);
IkReal x9293=((-1.0)*px);
CheckValue<IkReal> x9295 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9292),IKFAST_ATAN2_MAGTHRESH);
if(!x9295.valid){
continue;
}
IkReal x9294=((-1.0)*(x9295.value));
sj5=gconst1;
cj5=gconst2;
j5=x9294;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9293);
rxp1_1=(px*r21);
rxp1_2=(r11*x9293);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9294;
IkReal gconst1=r21;
IkReal gconst2=x9292;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9296=((-1.0)*r20);
IkReal x9297=((-1.0)*px);
CheckValue<IkReal> x9299 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9296),IKFAST_ATAN2_MAGTHRESH);
if(!x9299.valid){
continue;
}
IkReal x9298=((-1.0)*(x9299.value));
sj5=gconst1;
cj5=gconst2;
j5=x9298;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9297);
rxp1_1=(px*r21);
rxp1_2=(r11*x9297);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9298;
IkReal gconst1=r21;
IkReal gconst2=x9296;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9300=((-1.0)*r20);
IkReal x9301=((-1.0)*px);
CheckValue<IkReal> x9303 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9300),IKFAST_ATAN2_MAGTHRESH);
if(!x9303.valid){
continue;
}
IkReal x9302=((-1.0)*(x9303.value));
sj5=gconst1;
cj5=gconst2;
j5=x9302;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9301);
rxp1_1=(px*r21);
rxp1_2=(r11*x9301);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9302;
IkReal gconst1=r21;
IkReal gconst2=x9300;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9304=((-1.0)*r20);
IkReal x9305=((-1.0)*px);
CheckValue<IkReal> x9307 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9304),IKFAST_ATAN2_MAGTHRESH);
if(!x9307.valid){
continue;
}
IkReal x9306=((-1.0)*(x9307.value));
sj5=gconst1;
cj5=gconst2;
j5=x9306;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9305);
rxp1_1=(px*r21);
rxp1_2=(r11*x9305);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9306;
IkReal gconst1=r21;
IkReal gconst2=x9304;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9308=((-1.0)*r20);
IkReal x9309=((-1.0)*px);
CheckValue<IkReal> x9311 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9308),IKFAST_ATAN2_MAGTHRESH);
if(!x9311.valid){
continue;
}
IkReal x9310=((-1.0)*(x9311.value));
sj5=gconst1;
cj5=gconst2;
j5=x9310;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9309);
rxp1_1=(px*r21);
rxp1_2=(r11*x9309);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9310;
IkReal gconst1=r21;
IkReal gconst2=x9308;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9314=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9314.valid){
continue;
}
IkReal x9312=x9314.value;
IkReal x9313=(sj0*x9312);
cj4array[0]=((((-1.0)*sj1*sj2*x9313))+((cj1*cj2*x9313)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9315=IKsin(j4);
IkReal x9316=IKcos(j4);
IkReal x9317=((1.0)*gconst2);
IkReal x9318=(gconst1*r21);
evalcond[0]=((-1.0)*r02*x9315);
evalcond[1]=((((-1.0)*sj0))+((r02*x9316)));
evalcond[2]=(((x9315*x9318))+(((-1.0)*r20*x9315*x9317)));
evalcond[3]=((((-1.0)*r10*x9315*x9317))+((gconst1*r11*x9315)));
evalcond[4]=((((-1.0)*r20*x9316*x9317))+((cj2*sj1))+((cj1*sj2))+((x9316*x9318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9321=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9321.valid){
continue;
}
IkReal x9319=x9321.value;
IkReal x9320=((1.0)*x9319);
cj4array[0]=((((-1.0)*cj2*sj1*x9320))+(((-1.0)*cj1*sj2*x9320)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9322=IKsin(j4);
IkReal x9323=IKcos(j4);
IkReal x9324=((1.0)*sj0);
IkReal x9325=(gconst1*x9322);
IkReal x9326=((1.0)*gconst2*x9322);
evalcond[0]=((-1.0)*r02*x9322);
evalcond[1]=((((-1.0)*x9324))+((r02*x9323)));
evalcond[2]=((((-1.0)*r20*x9326))+((r21*x9325)));
evalcond[3]=(((r11*x9325))+(((-1.0)*r10*x9326)));
evalcond[4]=(((gconst1*r11*x9323))+(((-1.0)*gconst2*r10*x9323))+(((-1.0)*cj1*cj2*x9324))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9327=IKPowWithIntegerCheck(r02,-1);
if(!x9327.valid){
continue;
}
cj4array[0]=(sj0*(x9327.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9328=IKsin(j4);
IkReal x9329=IKcos(j4);
IkReal x9330=(gconst1*r21);
IkReal x9331=(gconst1*r11);
IkReal x9332=((1.0)*gconst2*r10);
IkReal x9333=((1.0)*gconst2*r20);
evalcond[0]=((-1.0)*r02*x9328);
evalcond[1]=(((x9328*x9330))+(((-1.0)*x9328*x9333)));
evalcond[2]=(((x9328*x9331))+(((-1.0)*x9328*x9332)));
evalcond[3]=(((cj2*sj1))+((x9329*x9330))+((cj1*sj2))+(((-1.0)*x9329*x9333)));
evalcond[4]=(((x9329*x9331))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9329*x9332))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9334=((-1.0)*r20);
IkReal x9335=((-1.0)*px);
CheckValue<IkReal> x9337 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9334),IKFAST_ATAN2_MAGTHRESH);
if(!x9337.valid){
continue;
}
IkReal x9336=((-1.0)*(x9337.value));
sj5=gconst1;
cj5=gconst2;
j5=x9336;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9335);
rxp1_1=(px*r21);
rxp1_2=(r11*x9335);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9336;
IkReal gconst1=r21;
IkReal gconst2=x9334;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9338=((-1.0)*r20);
IkReal x9339=((-1.0)*px);
CheckValue<IkReal> x9341 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9338),IKFAST_ATAN2_MAGTHRESH);
if(!x9341.valid){
continue;
}
IkReal x9340=((-1.0)*(x9341.value));
sj5=gconst1;
cj5=gconst2;
j5=x9340;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9339);
rxp1_1=(px*r21);
rxp1_2=(r11*x9339);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9340;
IkReal gconst1=r21;
IkReal gconst2=x9338;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9342=((-1.0)*r20);
IkReal x9343=((-1.0)*px);
CheckValue<IkReal> x9345 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9342),IKFAST_ATAN2_MAGTHRESH);
if(!x9345.valid){
continue;
}
IkReal x9344=((-1.0)*(x9345.value));
sj5=gconst1;
cj5=gconst2;
j5=x9344;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9343);
rxp1_1=(px*r21);
rxp1_2=(r11*x9343);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9344;
IkReal gconst1=r21;
IkReal gconst2=x9342;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9348=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9348.valid){
continue;
}
IkReal x9346=x9348.value;
IkReal x9347=(sj0*x9346);
cj4array[0]=((((-1.0)*sj1*sj2*x9347))+((cj1*cj2*x9347)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9349=IKsin(j4);
IkReal x9350=IKcos(j4);
IkReal x9351=(gconst1*x9349);
IkReal x9352=((1.0)*gconst2*x9349);
evalcond[0]=(r02*x9349);
evalcond[1]=((((-1.0)*sj0))+((r02*x9350)));
evalcond[2]=(((r21*x9351))+(((-1.0)*r20*x9352)));
evalcond[3]=((((-1.0)*r10*x9352))+((r11*x9351)));
evalcond[4]=(((cj2*sj1))+((gconst2*r20*x9350))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9355=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9355.valid){
continue;
}
IkReal x9353=x9355.value;
IkReal x9354=((1.0)*x9353);
cj4array[0]=((((-1.0)*cj2*sj1*x9354))+(((-1.0)*cj1*sj2*x9354)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9356=IKsin(j4);
IkReal x9357=IKcos(j4);
IkReal x9358=((1.0)*sj0);
IkReal x9359=(gconst2*r10);
IkReal x9360=(gconst1*r11);
IkReal x9361=((1.0)*x9356);
evalcond[0]=(r02*x9356);
evalcond[1]=((((-1.0)*x9358))+((r02*x9357)));
evalcond[2]=(((gconst1*r21*x9356))+(((-1.0)*gconst2*r20*x9361)));
evalcond[3]=((((-1.0)*x9359*x9361))+((x9356*x9360)));
evalcond[4]=((((-1.0)*cj1*cj2*x9358))+((sj0*sj1*sj2))+(((-1.0)*x9357*x9360))+((x9357*x9359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9362=IKPowWithIntegerCheck(r02,-1);
if(!x9362.valid){
continue;
}
cj4array[0]=(sj0*(x9362.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9363=IKsin(j4);
IkReal x9364=IKcos(j4);
IkReal x9365=(gconst2*r10);
IkReal x9366=(gconst1*r11);
IkReal x9367=(gconst1*r21);
IkReal x9368=(gconst2*r20);
IkReal x9369=((1.0)*x9363);
IkReal x9370=((1.0)*x9364);
evalcond[0]=(r02*x9363);
evalcond[1]=(((x9363*x9367))+(((-1.0)*x9368*x9369)));
evalcond[2]=((((-1.0)*x9365*x9369))+((x9363*x9366)));
evalcond[3]=(((x9364*x9368))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9367*x9370)));
evalcond[4]=(((x9364*x9365))+(((-1.0)*x9366*x9370))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9372=IKPowWithIntegerCheck(r02,-1);
if(!x9372.valid){
continue;
}
IkReal x9371=x9372.value;
CheckValue<IkReal> x9373=IKPowWithIntegerCheck(sj3,-1);
if(!x9373.valid){
continue;
}
if( IKabs((x9371*(x9373.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x9371)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9371*(x9373.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x9371))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9371*(x9373.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x9371));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9374=IKsin(j4);
IkReal x9375=IKcos(j4);
IkReal x9376=(gconst2*r10);
IkReal x9377=(gconst1*r11);
IkReal x9378=(sj1*sj2);
IkReal x9379=(gconst2*r20);
IkReal x9380=((1.0)*cj3);
IkReal x9381=(gconst1*r10);
IkReal x9382=(gconst2*r21);
IkReal x9383=((1.0)*sj3);
IkReal x9384=(cj2*sj1);
IkReal x9385=((1.0)*sj0);
IkReal x9386=(gconst1*r21);
IkReal x9387=((1.0)*cj0);
IkReal x9388=(gconst1*r20);
IkReal x9389=(gconst2*r11);
IkReal x9390=(cj1*sj2);
IkReal x9391=(sj3*x9375);
IkReal x9392=((1.0)*cj1*cj2);
IkReal x9393=(cj3*x9375);
IkReal x9394=(r02*x9374);
IkReal x9395=((1.0)*x9374);
evalcond[0]=(((r02*x9375))+(((-1.0)*x9385)));
evalcond[1]=(((x9374*x9386))+(((-1.0)*x9379*x9395)));
evalcond[2]=(((x9374*x9377))+(((-1.0)*x9376*x9395))+cj0);
evalcond[3]=((((-1.0)*x9387*x9390))+(((-1.0)*x9384*x9387))+((sj3*x9394)));
evalcond[4]=(((cj0*x9378))+(((-1.0)*x9380*x9394))+(((-1.0)*cj1*cj2*x9387)));
evalcond[5]=(x9384+x9390+((x9386*x9393))+(((-1.0)*x9375*x9379*x9380))+(((-1.0)*x9383*x9388))+(((-1.0)*x9382*x9383)));
evalcond[6]=(x9378+(((-1.0)*x9375*x9383*x9386))+(((-1.0)*x9380*x9382))+(((-1.0)*x9380*x9388))+((x9379*x9391))+(((-1.0)*x9392)));
evalcond[7]=((((-1.0)*cj1*cj2*x9385))+(((-1.0)*x9381*x9383))+((sj0*x9378))+(((-1.0)*x9375*x9376*x9380))+((x9377*x9393))+(((-1.0)*x9383*x9389)));
evalcond[8]=(((x9376*x9391))+(((-1.0)*x9385*x9390))+(((-1.0)*x9380*x9389))+(((-1.0)*x9380*x9381))+(((-1.0)*x9384*x9385))+(((-1.0)*x9375*x9377*x9383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9396=((1.0)*gconst2);
CheckValue<IkReal> x9397=IKPowWithIntegerCheck(((((-1.0)*r10*x9396))+((gconst1*r11))),-1);
if(!x9397.valid){
continue;
}
CheckValue<IkReal> x9398=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9396))),-1);
if(!x9398.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9397.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9398.value)*((((gconst2*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst1*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9397.value)))+IKsqr(((x9398.value)*((((gconst2*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst1*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9397.value)), ((x9398.value)*((((gconst2*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst1*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9399=IKsin(j4);
IkReal x9400=IKcos(j4);
IkReal x9401=(gconst2*r10);
IkReal x9402=(gconst1*r11);
IkReal x9403=(sj1*sj2);
IkReal x9404=(gconst2*r20);
IkReal x9405=((1.0)*cj3);
IkReal x9406=(gconst1*r10);
IkReal x9407=(gconst2*r21);
IkReal x9408=((1.0)*sj3);
IkReal x9409=(cj2*sj1);
IkReal x9410=((1.0)*sj0);
IkReal x9411=(gconst1*r21);
IkReal x9412=((1.0)*cj0);
IkReal x9413=(gconst1*r20);
IkReal x9414=(gconst2*r11);
IkReal x9415=(cj1*sj2);
IkReal x9416=(sj3*x9400);
IkReal x9417=((1.0)*cj1*cj2);
IkReal x9418=(cj3*x9400);
IkReal x9419=(r02*x9399);
IkReal x9420=((1.0)*x9399);
evalcond[0]=((((-1.0)*x9410))+((r02*x9400)));
evalcond[1]=(((x9399*x9411))+(((-1.0)*x9404*x9420)));
evalcond[2]=(cj0+((x9399*x9402))+(((-1.0)*x9401*x9420)));
evalcond[3]=((((-1.0)*x9412*x9415))+((sj3*x9419))+(((-1.0)*x9409*x9412)));
evalcond[4]=(((cj0*x9403))+(((-1.0)*cj1*cj2*x9412))+(((-1.0)*x9405*x9419)));
evalcond[5]=((((-1.0)*x9408*x9413))+x9409+x9415+(((-1.0)*x9400*x9404*x9405))+(((-1.0)*x9407*x9408))+((x9411*x9418)));
evalcond[6]=((((-1.0)*x9405*x9407))+(((-1.0)*x9417))+(((-1.0)*x9400*x9408*x9411))+((x9404*x9416))+x9403+(((-1.0)*x9405*x9413)));
evalcond[7]=((((-1.0)*x9406*x9408))+((x9402*x9418))+(((-1.0)*x9408*x9414))+(((-1.0)*x9400*x9401*x9405))+((sj0*x9403))+(((-1.0)*cj1*cj2*x9410)));
evalcond[8]=((((-1.0)*x9400*x9402*x9408))+(((-1.0)*x9405*x9406))+((x9401*x9416))+(((-1.0)*x9410*x9415))+(((-1.0)*x9405*x9414))+(((-1.0)*x9409*x9410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9421=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9421.valid){
continue;
}
CheckValue<IkReal> x9422=IKPowWithIntegerCheck(r02,-1);
if(!x9422.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9421.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x9422.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9421.value)))+IKsqr((sj0*(x9422.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9421.value)), (sj0*(x9422.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9423=IKsin(j4);
IkReal x9424=IKcos(j4);
IkReal x9425=(gconst2*r10);
IkReal x9426=(gconst1*r11);
IkReal x9427=(sj1*sj2);
IkReal x9428=(gconst2*r20);
IkReal x9429=((1.0)*cj3);
IkReal x9430=(gconst1*r10);
IkReal x9431=(gconst2*r21);
IkReal x9432=((1.0)*sj3);
IkReal x9433=(cj2*sj1);
IkReal x9434=((1.0)*sj0);
IkReal x9435=(gconst1*r21);
IkReal x9436=((1.0)*cj0);
IkReal x9437=(gconst1*r20);
IkReal x9438=(gconst2*r11);
IkReal x9439=(cj1*sj2);
IkReal x9440=(sj3*x9424);
IkReal x9441=((1.0)*cj1*cj2);
IkReal x9442=(cj3*x9424);
IkReal x9443=(r02*x9423);
IkReal x9444=((1.0)*x9423);
evalcond[0]=((((-1.0)*x9434))+((r02*x9424)));
evalcond[1]=((((-1.0)*x9428*x9444))+((x9423*x9435)));
evalcond[2]=(cj0+((x9423*x9426))+(((-1.0)*x9425*x9444)));
evalcond[3]=((((-1.0)*x9433*x9436))+((sj3*x9443))+(((-1.0)*x9436*x9439)));
evalcond[4]=((((-1.0)*cj1*cj2*x9436))+((cj0*x9427))+(((-1.0)*x9429*x9443)));
evalcond[5]=(((x9435*x9442))+(((-1.0)*x9431*x9432))+(((-1.0)*x9432*x9437))+x9439+x9433+(((-1.0)*x9424*x9428*x9429)));
evalcond[6]=((((-1.0)*x9441))+x9427+((x9428*x9440))+(((-1.0)*x9424*x9432*x9435))+(((-1.0)*x9429*x9431))+(((-1.0)*x9429*x9437)));
evalcond[7]=((((-1.0)*cj1*cj2*x9434))+(((-1.0)*x9432*x9438))+((sj0*x9427))+((x9426*x9442))+(((-1.0)*x9424*x9425*x9429))+(((-1.0)*x9430*x9432)));
evalcond[8]=(((x9425*x9440))+(((-1.0)*x9434*x9439))+(((-1.0)*x9433*x9434))+(((-1.0)*x9424*x9426*x9432))+(((-1.0)*x9429*x9430))+(((-1.0)*x9429*x9438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9445=gconst1*gconst1;
IkReal x9446=r21*r21;
IkReal x9447=gconst2*gconst2;
IkReal x9448=r20*r20;
IkReal x9449=(gconst1*gconst2);
IkReal x9450=(cj2*sj1);
IkReal x9451=((1.0)*gconst1);
IkReal x9452=(gconst2*r20);
IkReal x9453=(r20*r21);
IkReal x9454=(r22*sj3);
IkReal x9455=((1.0)*sj3);
IkReal x9456=(cj1*sj2);
CheckValue<IkReal> x9457 = IKatan2WithCheck(IkReal((((r22*x9456))+((r22*x9450))+(((-1.0)*gconst2*r21*x9454))+(((-1.0)*r20*x9451*x9454)))),IkReal(((((-1.0)*x9448*x9449*x9455))+((x9452*x9456))+(((-1.0)*x9447*x9453*x9455))+((sj3*x9445*x9453))+((sj3*x9446*x9449))+((x9450*x9452))+(((-1.0)*r21*x9451*x9456))+(((-1.0)*r21*x9450*x9451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9457.valid){
continue;
}
CheckValue<IkReal> x9458=IKPowWithIntegerCheck(IKsign((((cj3*(r22*r22)))+((cj3*x9445*x9446))+(((-2.0)*cj3*x9449*x9453))+((cj3*x9447*x9448)))),-1);
if(!x9458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9457.value)+(((1.5707963267949)*(x9458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9459=IKsin(j4);
IkReal x9460=IKcos(j4);
IkReal x9461=(gconst2*r10);
IkReal x9462=((1.0)*gconst1);
IkReal x9463=(sj1*sj2);
IkReal x9464=(gconst2*r20);
IkReal x9465=(cj2*sj1);
IkReal x9466=((1.0)*sj0);
IkReal x9467=(gconst2*r00);
IkReal x9468=((1.0)*cj3);
IkReal x9469=((1.0)*cj0);
IkReal x9470=(cj1*sj2);
IkReal x9471=(sj3*x9460);
IkReal x9472=((1.0)*cj1*cj2);
IkReal x9473=(gconst1*x9459);
IkReal x9474=(r12*x9459);
IkReal x9475=((1.0)*gconst2*sj3);
IkReal x9476=(r22*x9459);
IkReal x9477=((1.0)*x9459);
IkReal x9478=(r02*x9459);
IkReal x9479=(x9460*x9468);
IkReal x9480=(cj3*gconst1*x9460);
evalcond[0]=(((r22*x9460))+((r21*x9473))+(((-1.0)*x9464*x9477)));
evalcond[1]=((((-1.0)*x9461*x9477))+cj0+((r11*x9473))+((r12*x9460)));
evalcond[2]=((((-1.0)*x9466))+((r01*x9473))+(((-1.0)*x9467*x9477))+((r02*x9460)));
evalcond[3]=((((-1.0)*r21*x9462*x9471))+((x9464*x9471))+(((-1.0)*x9472))+(((-1.0)*cj3*r20*x9462))+(((-1.0)*gconst2*r21*x9468))+((sj3*x9476))+x9463);
evalcond[4]=(((r21*x9480))+(((-1.0)*x9468*x9476))+(((-1.0)*r20*sj3*x9462))+x9470+x9465+(((-1.0)*x9464*x9479))+(((-1.0)*r21*x9475)));
evalcond[5]=((((-1.0)*r01*x9462*x9471))+(((-1.0)*x9469*x9470))+((sj3*x9478))+(((-1.0)*gconst2*r01*x9468))+(((-1.0)*cj3*r00*x9462))+((x9467*x9471))+(((-1.0)*x9465*x9469)));
evalcond[6]=(((r01*x9480))+(((-1.0)*x9468*x9478))+((cj0*x9463))+(((-1.0)*cj1*cj2*x9469))+(((-1.0)*r01*x9475))+(((-1.0)*x9467*x9479))+(((-1.0)*r00*sj3*x9462)));
evalcond[7]=((((-1.0)*x9466*x9470))+(((-1.0)*gconst2*r11*x9468))+(((-1.0)*cj3*r10*x9462))+((sj3*x9474))+((x9461*x9471))+(((-1.0)*x9465*x9466))+(((-1.0)*r11*x9462*x9471)));
evalcond[8]=((((-1.0)*x9461*x9479))+((sj0*x9463))+((r11*x9480))+(((-1.0)*x9468*x9474))+(((-1.0)*cj1*cj2*x9466))+(((-1.0)*r11*x9475))+(((-1.0)*r10*sj3*x9462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9481=((1.0)*gconst1);
CheckValue<IkReal> x9482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9481))+(((-1.0)*gconst2*r11)))),-1);
if(!x9482.valid){
continue;
}
CheckValue<IkReal> x9483 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst2*r20*sj0))+(((-1.0)*r21*sj0*x9481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9482.value)))+(x9483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9484=IKsin(j4);
IkReal x9485=IKcos(j4);
IkReal x9486=(gconst2*r10);
IkReal x9487=((1.0)*gconst1);
IkReal x9488=(sj1*sj2);
IkReal x9489=(gconst2*r20);
IkReal x9490=(cj2*sj1);
IkReal x9491=((1.0)*sj0);
IkReal x9492=(gconst2*r00);
IkReal x9493=((1.0)*cj3);
IkReal x9494=((1.0)*cj0);
IkReal x9495=(cj1*sj2);
IkReal x9496=(sj3*x9485);
IkReal x9497=((1.0)*cj1*cj2);
IkReal x9498=(gconst1*x9484);
IkReal x9499=(r12*x9484);
IkReal x9500=((1.0)*gconst2*sj3);
IkReal x9501=(r22*x9484);
IkReal x9502=((1.0)*x9484);
IkReal x9503=(r02*x9484);
IkReal x9504=(x9485*x9493);
IkReal x9505=(cj3*gconst1*x9485);
evalcond[0]=((((-1.0)*x9489*x9502))+((r21*x9498))+((r22*x9485)));
evalcond[1]=(cj0+((r12*x9485))+(((-1.0)*x9486*x9502))+((r11*x9498)));
evalcond[2]=(((r02*x9485))+(((-1.0)*x9492*x9502))+((r01*x9498))+(((-1.0)*x9491)));
evalcond[3]=(((x9489*x9496))+(((-1.0)*cj3*r20*x9487))+x9488+(((-1.0)*gconst2*r21*x9493))+(((-1.0)*x9497))+((sj3*x9501))+(((-1.0)*r21*x9487*x9496)));
evalcond[4]=(((r21*x9505))+(((-1.0)*x9489*x9504))+(((-1.0)*r20*sj3*x9487))+(((-1.0)*x9493*x9501))+x9490+x9495+(((-1.0)*r21*x9500)));
evalcond[5]=(((x9492*x9496))+(((-1.0)*x9490*x9494))+(((-1.0)*cj3*r00*x9487))+(((-1.0)*x9494*x9495))+(((-1.0)*gconst2*r01*x9493))+(((-1.0)*r01*x9487*x9496))+((sj3*x9503)));
evalcond[6]=((((-1.0)*cj1*cj2*x9494))+(((-1.0)*x9493*x9503))+(((-1.0)*x9492*x9504))+(((-1.0)*r00*sj3*x9487))+((cj0*x9488))+((r01*x9505))+(((-1.0)*r01*x9500)));
evalcond[7]=((((-1.0)*cj3*r10*x9487))+(((-1.0)*x9491*x9495))+(((-1.0)*x9490*x9491))+(((-1.0)*gconst2*r11*x9493))+((x9486*x9496))+((sj3*x9499))+(((-1.0)*r11*x9487*x9496)));
evalcond[8]=(((sj0*x9488))+(((-1.0)*x9493*x9499))+(((-1.0)*r10*sj3*x9487))+(((-1.0)*r11*x9500))+(((-1.0)*cj1*cj2*x9491))+((r11*x9505))+(((-1.0)*x9486*x9504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9506=((1.0)*gconst1);
CheckValue<IkReal> x9507 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*r21*x9506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9507.valid){
continue;
}
CheckValue<IkReal> x9508=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9506))+(((-1.0)*gconst2*r01)))),-1);
if(!x9508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9507.value)+(((1.5707963267949)*(x9508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9509=IKsin(j4);
IkReal x9510=IKcos(j4);
IkReal x9511=(gconst2*r10);
IkReal x9512=((1.0)*gconst1);
IkReal x9513=(sj1*sj2);
IkReal x9514=(gconst2*r20);
IkReal x9515=(cj2*sj1);
IkReal x9516=((1.0)*sj0);
IkReal x9517=(gconst2*r00);
IkReal x9518=((1.0)*cj3);
IkReal x9519=((1.0)*cj0);
IkReal x9520=(cj1*sj2);
IkReal x9521=(sj3*x9510);
IkReal x9522=((1.0)*cj1*cj2);
IkReal x9523=(gconst1*x9509);
IkReal x9524=(r12*x9509);
IkReal x9525=((1.0)*gconst2*sj3);
IkReal x9526=(r22*x9509);
IkReal x9527=((1.0)*x9509);
IkReal x9528=(r02*x9509);
IkReal x9529=(x9510*x9518);
IkReal x9530=(cj3*gconst1*x9510);
evalcond[0]=(((r22*x9510))+((r21*x9523))+(((-1.0)*x9514*x9527)));
evalcond[1]=(cj0+((r11*x9523))+(((-1.0)*x9511*x9527))+((r12*x9510)));
evalcond[2]=((((-1.0)*x9516))+((r01*x9523))+(((-1.0)*x9517*x9527))+((r02*x9510)));
evalcond[3]=((((-1.0)*r21*x9512*x9521))+((x9514*x9521))+(((-1.0)*gconst2*r21*x9518))+x9513+((sj3*x9526))+(((-1.0)*x9522))+(((-1.0)*cj3*r20*x9512)));
evalcond[4]=((((-1.0)*r20*sj3*x9512))+(((-1.0)*r21*x9525))+(((-1.0)*x9518*x9526))+x9515+x9520+(((-1.0)*x9514*x9529))+((r21*x9530)));
evalcond[5]=(((x9517*x9521))+(((-1.0)*x9519*x9520))+(((-1.0)*x9515*x9519))+(((-1.0)*cj3*r00*x9512))+((sj3*x9528))+(((-1.0)*gconst2*r01*x9518))+(((-1.0)*r01*x9512*x9521)));
evalcond[6]=((((-1.0)*r01*x9525))+(((-1.0)*cj1*cj2*x9519))+((cj0*x9513))+(((-1.0)*r00*sj3*x9512))+(((-1.0)*x9518*x9528))+((r01*x9530))+(((-1.0)*x9517*x9529)));
evalcond[7]=((((-1.0)*gconst2*r11*x9518))+(((-1.0)*r11*x9512*x9521))+(((-1.0)*x9515*x9516))+((sj3*x9524))+(((-1.0)*x9516*x9520))+(((-1.0)*cj3*r10*x9512))+((x9511*x9521)));
evalcond[8]=((((-1.0)*r11*x9525))+(((-1.0)*cj1*cj2*x9516))+((r11*x9530))+(((-1.0)*x9511*x9529))+((sj0*x9513))+(((-1.0)*x9518*x9524))+(((-1.0)*r10*sj3*x9512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9531=((-1.0)*r21);
IkReal x9533 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9533)==0){
continue;
}
IkReal x9532=pow(x9533,-0.5);
CheckValue<IkReal> x9534 = IKatan2WithCheck(IkReal(x9531),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9534.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9534.value))));
IkReal gconst4=(x9531*x9532);
IkReal gconst5=((1.0)*r20*x9532);
CheckValue<IkReal> x9535 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9535.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9535.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9536=((-1.0)*r21);
CheckValue<IkReal> x9539 = IKatan2WithCheck(IkReal(x9536),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9539.valid){
continue;
}
IkReal x9537=((1.0)*(x9539.value));
IkReal x9538=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9537)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9537)));
IkReal gconst4=(x9536*x9538);
IkReal gconst5=((1.0)*r20*x9538);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9540=((-1.0)*r21);
CheckValue<IkReal> x9543 = IKatan2WithCheck(IkReal(x9540),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9543.valid){
continue;
}
IkReal x9541=((1.0)*(x9543.value));
IkReal x9542=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9541)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9541)));
IkReal gconst4=(x9540*x9542);
IkReal gconst5=((1.0)*r20*x9542);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9544=((-1.0)*r21);
CheckValue<IkReal> x9547 = IKatan2WithCheck(IkReal(x9544),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9547.valid){
continue;
}
IkReal x9545=((1.0)*(x9547.value));
IkReal x9546=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9545)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9545)));
IkReal gconst4=(x9544*x9546);
IkReal gconst5=((1.0)*r20*x9546);
IkReal x9548=r22*r22;
IkReal x9549=((1.0)*r12*sj0);
IkReal x9550=((1.0)*cj0*r02);
CheckValue<IkReal> x9554=IKPowWithIntegerCheck(((-1.0)+x9548),-1);
if(!x9554.valid){
continue;
}
IkReal x9551=x9554.value;
if((((1.0)+(((-1.0)*x9548)))) < -0.00001)
continue;
IkReal x9552=IKsqrt(((1.0)+(((-1.0)*x9548))));
IkReal x9553=(r22*x9551*x9552);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x9550))+(((-1.0)*x9549)))))+(IKabs(((((-1.0)*x9550*x9553))+(((-1.0)*x9549*x9553))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9555=((-1.0)*r21);
CheckValue<IkReal> x9558 = IKatan2WithCheck(IkReal(x9555),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9558.valid){
continue;
}
IkReal x9556=((1.0)*(x9558.value));
IkReal x9557=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9556)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9556)));
IkReal gconst4=(x9555*x9557);
IkReal gconst5=((1.0)*r20*x9557);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9559=((-1.0)*r21);
CheckValue<IkReal> x9562 = IKatan2WithCheck(IkReal(x9559),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9562.valid){
continue;
}
IkReal x9560=((1.0)*(x9562.value));
IkReal x9561=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9560)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9560)));
IkReal gconst4=(x9559*x9561);
IkReal gconst5=((1.0)*r20*x9561);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9563=((-1.0)*r21);
CheckValue<IkReal> x9566 = IKatan2WithCheck(IkReal(x9563),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9566.valid){
continue;
}
IkReal x9564=((1.0)*(x9566.value));
IkReal x9565=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9564)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9564)));
IkReal gconst4=(x9563*x9565);
IkReal gconst5=((1.0)*r20*x9565);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9567=((-1.0)*r21);
CheckValue<IkReal> x9570 = IKatan2WithCheck(IkReal(x9567),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9570.valid){
continue;
}
IkReal x9568=((1.0)*(x9570.value));
IkReal x9569=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9568)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9568)));
IkReal gconst4=(x9567*x9569);
IkReal gconst5=((1.0)*r20*x9569);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9571=((-1.0)*r21);
CheckValue<IkReal> x9574 = IKatan2WithCheck(IkReal(x9571),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9574.valid){
continue;
}
IkReal x9572=((1.0)*(x9574.value));
IkReal x9573=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9572)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9572)));
IkReal gconst4=(x9571*x9573);
IkReal gconst5=((1.0)*r20*x9573);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9575=((-1.0)*r21);
CheckValue<IkReal> x9578 = IKatan2WithCheck(IkReal(x9575),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9578.valid){
continue;
}
IkReal x9576=((1.0)*(x9578.value));
IkReal x9577=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9576)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9576)));
IkReal gconst4=(x9575*x9577);
IkReal gconst5=((1.0)*r20*x9577);
IkReal x9579=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9583=IKPowWithIntegerCheck(x9579,-1);
if(!x9583.valid){
continue;
}
IkReal x9580=x9583.value;
IkReal x9581=((1.0)*x9580);
IkReal x9582=((((-2.0)*r10*r11*r20*r21*x9580))+(((-1.0)*x9581*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9581*(r11*r11)*(r21*r21))));
j4eval[0]=x9582;
j4eval[1]=r12;
j4eval[2]=x9579;
j4eval[3]=IKsign(x9582);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9584=(gconst5*r10);
IkReal x9585=(gconst4*r11);
CheckValue<IkReal> x9586 = IKatan2WithCheck(IkReal(((((-1.0)*x9584))+x9585)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9586.valid){
continue;
}
CheckValue<IkReal> x9587=IKPowWithIntegerCheck(IKsign(((((2.0)*x9584*x9585))+(((-1.0)*(x9585*x9585)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9584*x9584))))),-1);
if(!x9587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9586.value)+(((1.5707963267949)*(x9587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9588=IKsin(j4);
IkReal x9589=IKcos(j4);
IkReal x9590=(gconst4*r11);
IkReal x9591=(gconst5*r00);
IkReal x9592=(gconst5*r20);
IkReal x9593=(gconst4*x9589);
IkReal x9594=((1.0)*gconst5*r10);
IkReal x9595=(gconst4*x9588);
IkReal x9596=((1.0)*x9588);
IkReal x9597=((1.0)*x9589);
evalcond[0]=((((-1.0)*x9592*x9596))+((r22*x9589))+((r21*x9595)));
evalcond[1]=(((r01*x9595))+((r02*x9589))+(((-1.0)*x9591*x9596)));
evalcond[2]=((1.0)+(((-1.0)*x9588*x9594))+((x9588*x9590))+((r12*x9589)));
evalcond[3]=(((x9589*x9590))+(((-1.0)*x9589*x9594))+(((-1.0)*r12*x9596)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9596))+(((-1.0)*x9592*x9597))+((cj1*sj2))+((r21*x9593)));
evalcond[5]=(((r01*x9593))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9591*x9597))+(((-1.0)*r02*x9596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9598=((1.0)*gconst4);
CheckValue<IkReal> x9599 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9598))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9599.valid){
continue;
}
CheckValue<IkReal> x9600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9598))+(((-1.0)*gconst5*r01)))),-1);
if(!x9600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9599.value)+(((1.5707963267949)*(x9600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9601=IKsin(j4);
IkReal x9602=IKcos(j4);
IkReal x9603=(gconst4*r11);
IkReal x9604=(gconst5*r00);
IkReal x9605=(gconst5*r20);
IkReal x9606=(gconst4*x9602);
IkReal x9607=((1.0)*gconst5*r10);
IkReal x9608=(gconst4*x9601);
IkReal x9609=((1.0)*x9601);
IkReal x9610=((1.0)*x9602);
evalcond[0]=(((r21*x9608))+((r22*x9602))+(((-1.0)*x9605*x9609)));
evalcond[1]=((((-1.0)*x9604*x9609))+((r01*x9608))+((r02*x9602)));
evalcond[2]=((1.0)+((r12*x9602))+((x9601*x9603))+(((-1.0)*x9601*x9607)));
evalcond[3]=((((-1.0)*x9602*x9607))+((x9602*x9603))+(((-1.0)*r12*x9609)));
evalcond[4]=((((-1.0)*r22*x9609))+((cj2*sj1))+((r21*x9606))+((cj1*sj2))+(((-1.0)*x9605*x9610)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x9606))+(((-1.0)*r02*x9609))+(((-1.0)*x9604*x9610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9611 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9611.valid){
continue;
}
CheckValue<IkReal> x9612=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9611.value)+(((1.5707963267949)*(x9612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9613=IKsin(j4);
IkReal x9614=IKcos(j4);
IkReal x9615=(gconst4*r11);
IkReal x9616=(gconst5*r00);
IkReal x9617=(gconst5*r20);
IkReal x9618=(gconst4*x9614);
IkReal x9619=((1.0)*gconst5*r10);
IkReal x9620=(gconst4*x9613);
IkReal x9621=((1.0)*x9613);
IkReal x9622=((1.0)*x9614);
evalcond[0]=((((-1.0)*x9617*x9621))+((r22*x9614))+((r21*x9620)));
evalcond[1]=(((r01*x9620))+((r02*x9614))+(((-1.0)*x9616*x9621)));
evalcond[2]=((1.0)+(((-1.0)*x9613*x9619))+((r12*x9614))+((x9613*x9615)));
evalcond[3]=((((-1.0)*r12*x9621))+(((-1.0)*x9614*x9619))+((x9614*x9615)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9617*x9622))+(((-1.0)*r22*x9621))+((cj1*sj2))+((r21*x9618)));
evalcond[5]=(((r01*x9618))+(((-1.0)*r02*x9621))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9616*x9622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9623=((-1.0)*r21);
CheckValue<IkReal> x9626 = IKatan2WithCheck(IkReal(x9623),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9626.valid){
continue;
}
IkReal x9624=((1.0)*(x9626.value));
IkReal x9625=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9624)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9624)));
IkReal gconst4=(x9623*x9625);
IkReal gconst5=((1.0)*r20*x9625);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9627=((-1.0)*r21);
CheckValue<IkReal> x9630 = IKatan2WithCheck(IkReal(x9627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9630.valid){
continue;
}
IkReal x9628=((1.0)*(x9630.value));
IkReal x9629=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9628)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9628)));
IkReal gconst4=(x9627*x9629);
IkReal gconst5=((1.0)*r20*x9629);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9631=((-1.0)*r21);
CheckValue<IkReal> x9634 = IKatan2WithCheck(IkReal(x9631),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9634.valid){
continue;
}
IkReal x9632=((1.0)*(x9634.value));
IkReal x9633=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9632)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9632)));
IkReal gconst4=(x9631*x9633);
IkReal gconst5=((1.0)*r20*x9633);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9635=(gconst5*r10);
IkReal x9636=(gconst4*r11);
CheckValue<IkReal> x9637=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9636*x9636)+(x9635*x9635)+(((-2.0)*x9635*x9636)))),-1);
if(!x9637.valid){
continue;
}
CheckValue<IkReal> x9638 = IKatan2WithCheck(IkReal(((((-1.0)*x9636))+x9635)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9637.value)))+(x9638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9639=IKsin(j4);
IkReal x9640=IKcos(j4);
IkReal x9641=(gconst4*r11);
IkReal x9642=(gconst5*r10);
IkReal x9643=(gconst4*r01);
IkReal x9644=(gconst5*r00);
IkReal x9645=(gconst4*r21);
IkReal x9646=(gconst5*r20);
IkReal x9647=((1.0)*x9640);
IkReal x9648=((1.0)*x9639);
evalcond[0]=(((r22*x9640))+((x9639*x9645))+(((-1.0)*x9646*x9648)));
evalcond[1]=(((x9639*x9643))+((r02*x9640))+(((-1.0)*x9644*x9648)));
evalcond[2]=(((x9640*x9642))+(((-1.0)*x9641*x9647))+((r12*x9639)));
evalcond[3]=((1.0)+((x9639*x9641))+(((-1.0)*x9642*x9648))+((r12*x9640)));
evalcond[4]=(((cj2*sj1))+((x9640*x9646))+((cj1*sj2))+((r22*x9639))+(((-1.0)*x9645*x9647)));
evalcond[5]=(((x9640*x9644))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9643*x9647))+((r02*x9639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9649=((1.0)*gconst4);
CheckValue<IkReal> x9650 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9649))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9650.valid){
continue;
}
CheckValue<IkReal> x9651=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r01))+(((-1.0)*r00*x9649)))),-1);
if(!x9651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9650.value)+(((1.5707963267949)*(x9651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9652=IKsin(j4);
IkReal x9653=IKcos(j4);
IkReal x9654=(gconst4*r11);
IkReal x9655=(gconst5*r10);
IkReal x9656=(gconst4*r01);
IkReal x9657=(gconst5*r00);
IkReal x9658=(gconst4*r21);
IkReal x9659=(gconst5*r20);
IkReal x9660=((1.0)*x9653);
IkReal x9661=((1.0)*x9652);
evalcond[0]=(((r22*x9653))+((x9652*x9658))+(((-1.0)*x9659*x9661)));
evalcond[1]=((((-1.0)*x9657*x9661))+((r02*x9653))+((x9652*x9656)));
evalcond[2]=((((-1.0)*x9654*x9660))+((r12*x9652))+((x9653*x9655)));
evalcond[3]=((1.0)+(((-1.0)*x9655*x9661))+((r12*x9653))+((x9652*x9654)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9658*x9660))+((r22*x9652))+((x9653*x9659)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9656*x9660))+((r02*x9652))+((x9653*x9657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9662 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9662.valid){
continue;
}
CheckValue<IkReal> x9663=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9662.value)+(((1.5707963267949)*(x9663.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9664=IKsin(j4);
IkReal x9665=IKcos(j4);
IkReal x9666=(gconst4*r11);
IkReal x9667=(gconst5*r10);
IkReal x9668=(gconst4*r01);
IkReal x9669=(gconst5*r00);
IkReal x9670=(gconst4*r21);
IkReal x9671=(gconst5*r20);
IkReal x9672=((1.0)*x9665);
IkReal x9673=((1.0)*x9664);
evalcond[0]=(((x9664*x9670))+(((-1.0)*x9671*x9673))+((r22*x9665)));
evalcond[1]=(((x9664*x9668))+((r02*x9665))+(((-1.0)*x9669*x9673)));
evalcond[2]=((((-1.0)*x9666*x9672))+((x9665*x9667))+((r12*x9664)));
evalcond[3]=((1.0)+((x9664*x9666))+((r12*x9665))+(((-1.0)*x9667*x9673)));
evalcond[4]=(((cj2*sj1))+((x9665*x9671))+((cj1*sj2))+(((-1.0)*x9670*x9672))+((r22*x9664)));
evalcond[5]=(((x9665*x9669))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9668*x9672))+((r02*x9664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9674=((-1.0)*r21);
CheckValue<IkReal> x9677 = IKatan2WithCheck(IkReal(x9674),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9677.valid){
continue;
}
IkReal x9675=((1.0)*(x9677.value));
IkReal x9676=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9675)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9675)));
IkReal gconst4=(x9674*x9676);
IkReal gconst5=((1.0)*r20*x9676);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9678=((-1.0)*r21);
CheckValue<IkReal> x9681 = IKatan2WithCheck(IkReal(x9678),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9681.valid){
continue;
}
IkReal x9679=((1.0)*(x9681.value));
IkReal x9680=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9679)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9679)));
IkReal gconst4=(x9678*x9680);
IkReal gconst5=((1.0)*r20*x9680);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9682=((-1.0)*r21);
CheckValue<IkReal> x9685 = IKatan2WithCheck(IkReal(x9682),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9685.valid){
continue;
}
IkReal x9683=((1.0)*(x9685.value));
IkReal x9684=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9683)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9683)));
IkReal gconst4=(x9682*x9684);
IkReal gconst5=((1.0)*r20*x9684);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9686=(gconst5*r10);
IkReal x9687=(gconst4*r11);
CheckValue<IkReal> x9688=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9687*x9687)+(((-2.0)*x9686*x9687))+(x9686*x9686))),-1);
if(!x9688.valid){
continue;
}
CheckValue<IkReal> x9689 = IKatan2WithCheck(IkReal(((((-1.0)*x9687))+x9686)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9688.value)))+(x9689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9690=IKsin(j4);
IkReal x9691=IKcos(j4);
IkReal x9692=(gconst4*r11);
IkReal x9693=((1.0)*cj1);
IkReal x9694=(gconst5*r10);
IkReal x9695=(gconst4*r01);
IkReal x9696=(gconst5*r00);
IkReal x9697=(gconst4*r21);
IkReal x9698=(gconst5*r20);
IkReal x9699=((1.0)*x9691);
IkReal x9700=((1.0)*x9690);
evalcond[0]=(((r22*x9691))+((x9690*x9697))+(((-1.0)*x9698*x9700)));
evalcond[1]=(((r02*x9691))+((x9690*x9695))+(((-1.0)*x9696*x9700)));
evalcond[2]=(((x9691*x9694))+(((-1.0)*x9692*x9699))+((r12*x9690)));
evalcond[3]=((1.0)+((x9690*x9692))+(((-1.0)*x9694*x9700))+((r12*x9691)));
evalcond[4]=(((x9691*x9698))+((r22*x9690))+(((-1.0)*x9697*x9699))+((sj1*sj2))+(((-1.0)*cj2*x9693)));
evalcond[5]=(((x9691*x9696))+(((-1.0)*cj2*sj1))+((r02*x9690))+(((-1.0)*sj2*x9693))+(((-1.0)*x9695*x9699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9701=((1.0)*gconst4);
CheckValue<IkReal> x9702 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9701))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9702.valid){
continue;
}
CheckValue<IkReal> x9703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r01))+(((-1.0)*r00*x9701)))),-1);
if(!x9703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9702.value)+(((1.5707963267949)*(x9703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9704=IKsin(j4);
IkReal x9705=IKcos(j4);
IkReal x9706=(gconst4*r11);
IkReal x9707=((1.0)*cj1);
IkReal x9708=(gconst5*r10);
IkReal x9709=(gconst4*r01);
IkReal x9710=(gconst5*r00);
IkReal x9711=(gconst4*r21);
IkReal x9712=(gconst5*r20);
IkReal x9713=((1.0)*x9705);
IkReal x9714=((1.0)*x9704);
evalcond[0]=((((-1.0)*x9712*x9714))+((x9704*x9711))+((r22*x9705)));
evalcond[1]=(((x9704*x9709))+((r02*x9705))+(((-1.0)*x9710*x9714)));
evalcond[2]=(((r12*x9704))+((x9705*x9708))+(((-1.0)*x9706*x9713)));
evalcond[3]=((1.0)+((x9704*x9706))+((r12*x9705))+(((-1.0)*x9708*x9714)));
evalcond[4]=((((-1.0)*cj2*x9707))+((x9705*x9712))+((sj1*sj2))+(((-1.0)*x9711*x9713))+((r22*x9704)));
evalcond[5]=((((-1.0)*x9709*x9713))+((x9705*x9710))+((r02*x9704))+(((-1.0)*sj2*x9707))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9715 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9715.valid){
continue;
}
CheckValue<IkReal> x9716=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9715.value)+(((1.5707963267949)*(x9716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9717=IKsin(j4);
IkReal x9718=IKcos(j4);
IkReal x9719=(gconst4*r11);
IkReal x9720=((1.0)*cj1);
IkReal x9721=(gconst5*r10);
IkReal x9722=(gconst4*r01);
IkReal x9723=(gconst5*r00);
IkReal x9724=(gconst4*r21);
IkReal x9725=(gconst5*r20);
IkReal x9726=((1.0)*x9718);
IkReal x9727=((1.0)*x9717);
evalcond[0]=(((r22*x9718))+((x9717*x9724))+(((-1.0)*x9725*x9727)));
evalcond[1]=(((x9717*x9722))+((r02*x9718))+(((-1.0)*x9723*x9727)));
evalcond[2]=(((r12*x9717))+((x9718*x9721))+(((-1.0)*x9719*x9726)));
evalcond[3]=((1.0)+((r12*x9718))+((x9717*x9719))+(((-1.0)*x9721*x9727)));
evalcond[4]=(((r22*x9717))+(((-1.0)*cj2*x9720))+(((-1.0)*x9724*x9726))+((sj1*sj2))+((x9718*x9725)));
evalcond[5]=((((-1.0)*x9722*x9726))+(((-1.0)*cj2*sj1))+((r02*x9717))+(((-1.0)*sj2*x9720))+((x9718*x9723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9728=((-1.0)*r21);
CheckValue<IkReal> x9731 = IKatan2WithCheck(IkReal(x9728),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9731.valid){
continue;
}
IkReal x9729=((1.0)*(x9731.value));
IkReal x9730=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9729)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9729)));
IkReal gconst4=(x9728*x9730);
IkReal gconst5=((1.0)*r20*x9730);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9732=((-1.0)*r21);
CheckValue<IkReal> x9735 = IKatan2WithCheck(IkReal(x9732),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9735.valid){
continue;
}
IkReal x9733=((1.0)*(x9735.value));
IkReal x9734=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9733)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9733)));
IkReal gconst4=(x9732*x9734);
IkReal gconst5=((1.0)*r20*x9734);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9736=((-1.0)*r21);
CheckValue<IkReal> x9739 = IKatan2WithCheck(IkReal(x9736),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9739.valid){
continue;
}
IkReal x9737=((1.0)*(x9739.value));
IkReal x9738=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9737)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9737)));
IkReal gconst4=(x9736*x9738);
IkReal gconst5=((1.0)*r20*x9738);
IkReal x9740=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9744=IKPowWithIntegerCheck(x9740,-1);
if(!x9744.valid){
continue;
}
IkReal x9741=x9744.value;
IkReal x9742=((1.0)*x9741);
IkReal x9743=((((-2.0)*r10*r11*r20*r21*x9741))+(((-1.0)*x9742*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9742*(r11*r11)*(r21*r21))));
j4eval[0]=x9743;
j4eval[1]=r12;
j4eval[2]=x9740;
j4eval[3]=IKsign(x9743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9745=(gconst5*r10);
IkReal x9746=(gconst4*r11);
CheckValue<IkReal> x9747 = IKatan2WithCheck(IkReal(((((-1.0)*x9745))+x9746)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9747.valid){
continue;
}
CheckValue<IkReal> x9748=IKPowWithIntegerCheck(IKsign(((((2.0)*x9745*x9746))+(((-1.0)*(x9746*x9746)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9745*x9745))))),-1);
if(!x9748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9747.value)+(((1.5707963267949)*(x9748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9749=IKsin(j4);
IkReal x9750=IKcos(j4);
IkReal x9751=(gconst4*r11);
IkReal x9752=((1.0)*cj1);
IkReal x9753=(gconst5*r00);
IkReal x9754=(gconst5*r20);
IkReal x9755=(gconst4*x9750);
IkReal x9756=((1.0)*gconst5*r10);
IkReal x9757=(gconst4*x9749);
IkReal x9758=((1.0)*x9749);
IkReal x9759=((1.0)*x9750);
evalcond[0]=(((r22*x9750))+((r21*x9757))+(((-1.0)*x9754*x9758)));
evalcond[1]=(((r01*x9757))+((r02*x9750))+(((-1.0)*x9753*x9758)));
evalcond[2]=((1.0)+(((-1.0)*x9749*x9756))+((r12*x9750))+((x9749*x9751)));
evalcond[3]=(((x9750*x9751))+(((-1.0)*r12*x9758))+(((-1.0)*x9750*x9756)));
evalcond[4]=(((sj1*sj2))+((r21*x9755))+(((-1.0)*r22*x9758))+(((-1.0)*x9754*x9759))+(((-1.0)*cj2*x9752)));
evalcond[5]=(((r01*x9755))+(((-1.0)*r02*x9758))+(((-1.0)*cj2*sj1))+(((-1.0)*x9753*x9759))+(((-1.0)*sj2*x9752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9760=((1.0)*gconst4);
CheckValue<IkReal> x9761 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x9760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9761.valid){
continue;
}
CheckValue<IkReal> x9762=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r01))+(((-1.0)*r00*x9760)))),-1);
if(!x9762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9761.value)+(((1.5707963267949)*(x9762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9763=IKsin(j4);
IkReal x9764=IKcos(j4);
IkReal x9765=(gconst4*r11);
IkReal x9766=((1.0)*cj1);
IkReal x9767=(gconst5*r00);
IkReal x9768=(gconst5*r20);
IkReal x9769=(gconst4*x9764);
IkReal x9770=((1.0)*gconst5*r10);
IkReal x9771=(gconst4*x9763);
IkReal x9772=((1.0)*x9763);
IkReal x9773=((1.0)*x9764);
evalcond[0]=(((r22*x9764))+(((-1.0)*x9768*x9772))+((r21*x9771)));
evalcond[1]=(((r01*x9771))+(((-1.0)*x9767*x9772))+((r02*x9764)));
evalcond[2]=((1.0)+(((-1.0)*x9763*x9770))+((x9763*x9765))+((r12*x9764)));
evalcond[3]=((((-1.0)*x9764*x9770))+((x9764*x9765))+(((-1.0)*r12*x9772)));
evalcond[4]=((((-1.0)*r22*x9772))+(((-1.0)*x9768*x9773))+((sj1*sj2))+((r21*x9769))+(((-1.0)*cj2*x9766)));
evalcond[5]=(((r01*x9769))+(((-1.0)*cj2*sj1))+(((-1.0)*x9767*x9773))+(((-1.0)*r02*x9772))+(((-1.0)*sj2*x9766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9774 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9774.valid){
continue;
}
CheckValue<IkReal> x9775=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9774.value)+(((1.5707963267949)*(x9775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9776=IKsin(j4);
IkReal x9777=IKcos(j4);
IkReal x9778=(gconst4*r11);
IkReal x9779=((1.0)*cj1);
IkReal x9780=(gconst5*r00);
IkReal x9781=(gconst5*r20);
IkReal x9782=(gconst4*x9777);
IkReal x9783=((1.0)*gconst5*r10);
IkReal x9784=(gconst4*x9776);
IkReal x9785=((1.0)*x9776);
IkReal x9786=((1.0)*x9777);
evalcond[0]=((((-1.0)*x9781*x9785))+((r21*x9784))+((r22*x9777)));
evalcond[1]=(((r01*x9784))+((r02*x9777))+(((-1.0)*x9780*x9785)));
evalcond[2]=((1.0)+((r12*x9777))+(((-1.0)*x9776*x9783))+((x9776*x9778)));
evalcond[3]=((((-1.0)*r12*x9785))+(((-1.0)*x9777*x9783))+((x9777*x9778)));
evalcond[4]=((((-1.0)*x9781*x9786))+((r21*x9782))+((sj1*sj2))+(((-1.0)*r22*x9785))+(((-1.0)*cj2*x9779)));
evalcond[5]=(((r01*x9782))+(((-1.0)*cj2*sj1))+(((-1.0)*x9780*x9786))+(((-1.0)*sj2*x9779))+(((-1.0)*r02*x9785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9787=((-1.0)*r21);
CheckValue<IkReal> x9790 = IKatan2WithCheck(IkReal(x9787),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9790.valid){
continue;
}
IkReal x9788=((1.0)*(x9790.value));
IkReal x9789=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9788)));
sj0=0;
cj0=1.0;
j0=0;
r02=0;
npz=(((py*r12))+((pz*r22)));
rxp2_1=(px*r22);
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9788)));
IkReal gconst4=(x9787*x9789);
IkReal gconst5=((1.0)*r20*x9789);
IkReal x9791=x9532;
IkReal x9792=((2.0)*x9791);
j4eval[0]=((IKabs(((((-1.0)*r10*r20*x9792))+(((-1.0)*r11*r21*x9792)))))+(IKabs(((1.0)+(((-1.0)*r12))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+(((-1.0)*r12)));
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+r12);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9793=gconst4*gconst4;
IkReal x9794=gconst5*gconst5;
IkReal x9795=(r11*sj3);
IkReal x9796=(gconst4*gconst5);
IkReal x9797=(r10*sj3);
IkReal x9798=((1.0)*r20);
IkReal x9799=(cj3*r10);
IkReal x9800=((1.0)*r22);
IkReal x9801=(cj3*r11);
IkReal x9802=(r21*x9793);
CheckValue<IkReal> x9803 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x9800*x9801))+(((-1.0)*gconst4*x9799*x9800)))),IkReal((((x9799*x9802))+((r21*x9796*x9801))+(((-1.0)*x9796*x9798*x9799))+(((-1.0)*x9794*x9798*x9801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9803.valid){
continue;
}
CheckValue<IkReal> x9804=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9794*x9797*x9798))+((r21*x9796*x9797))+((r20*x9795*x9796))+(((-1.0)*r12*sj3*x9800))+(((-1.0)*x9795*x9802)))),-1);
if(!x9804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9803.value)+(((1.5707963267949)*(x9804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9805=IKsin(j4);
IkReal x9806=IKcos(j4);
IkReal x9807=(sj1*sj2);
IkReal x9808=(gconst4*r11);
IkReal x9809=(gconst5*r10);
IkReal x9810=((1.0)*cj1);
IkReal x9811=((1.0)*gconst5);
IkReal x9812=(r01*sj3);
IkReal x9813=(gconst4*r01);
IkReal x9814=(cj3*r21);
IkReal x9815=(cj2*sj1);
IkReal x9816=((1.0)*gconst4);
IkReal x9817=(gconst5*r00);
IkReal x9818=(gconst4*r21);
IkReal x9819=(gconst5*r20);
IkReal x9820=(cj2*x9810);
IkReal x9821=(r12*x9805);
IkReal x9822=((1.0)*x9806);
IkReal x9823=((1.0)*x9805);
IkReal x9824=(cj3*x9806);
IkReal x9825=(sj3*x9805);
IkReal x9826=(gconst5*sj3*x9806);
evalcond[0]=(((r22*x9806))+(((-1.0)*r20*x9805*x9811))+((x9805*x9818)));
evalcond[1]=(((r02*x9806))+((x9805*x9813))+(((-1.0)*r00*x9805*x9811)));
evalcond[2]=((1.0)+((r12*x9806))+(((-1.0)*x9809*x9823))+((x9805*x9808)));
evalcond[3]=(((sj3*x9806*x9809))+(((-1.0)*sj3*x9808*x9822))+(((-1.0)*cj3*r10*x9816))+((sj3*x9821))+(((-1.0)*cj3*r11*x9811)));
evalcond[4]=(((x9808*x9824))+(((-1.0)*cj3*x9821))+(((-1.0)*r11*sj3*x9811))+(((-1.0)*r10*sj3*x9816))+(((-1.0)*cj3*x9809*x9822)));
evalcond[5]=(((sj3*x9806*x9819))+(((-1.0)*x9820))+(((-1.0)*r21*sj3*x9806*x9816))+((r22*x9825))+(((-1.0)*x9811*x9814))+x9807+(((-1.0)*cj3*r20*x9816)));
evalcond[6]=(((cj1*sj2))+(((-1.0)*r20*sj3*x9816))+(((-1.0)*cj3*r22*x9823))+(((-1.0)*r20*x9811*x9824))+(((-1.0)*r21*sj3*x9811))+x9815+((gconst4*x9806*x9814)));
evalcond[7]=(((sj3*x9806*x9817))+(((-1.0)*x9815))+(((-1.0)*x9806*x9812*x9816))+(((-1.0)*cj3*r01*x9811))+(((-1.0)*cj3*r00*x9816))+(((-1.0)*sj2*x9810))+((r02*x9825)));
evalcond[8]=((((-1.0)*r00*sj3*x9816))+(((-1.0)*x9820))+((x9813*x9824))+(((-1.0)*cj3*r02*x9823))+(((-1.0)*x9811*x9812))+(((-1.0)*r00*x9811*x9824))+x9807);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9827=((1.0)*gconst4);
CheckValue<IkReal> x9828 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x9827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9828.valid){
continue;
}
CheckValue<IkReal> x9829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9827))+(((-1.0)*gconst5*r01)))),-1);
if(!x9829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9828.value)+(((1.5707963267949)*(x9829.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9830=IKsin(j4);
IkReal x9831=IKcos(j4);
IkReal x9832=(sj1*sj2);
IkReal x9833=(gconst4*r11);
IkReal x9834=(gconst5*r10);
IkReal x9835=((1.0)*cj1);
IkReal x9836=((1.0)*gconst5);
IkReal x9837=(r01*sj3);
IkReal x9838=(gconst4*r01);
IkReal x9839=(cj3*r21);
IkReal x9840=(cj2*sj1);
IkReal x9841=((1.0)*gconst4);
IkReal x9842=(gconst5*r00);
IkReal x9843=(gconst4*r21);
IkReal x9844=(gconst5*r20);
IkReal x9845=(cj2*x9835);
IkReal x9846=(r12*x9830);
IkReal x9847=((1.0)*x9831);
IkReal x9848=((1.0)*x9830);
IkReal x9849=(cj3*x9831);
IkReal x9850=(sj3*x9830);
IkReal x9851=(gconst5*sj3*x9831);
evalcond[0]=(((r22*x9831))+(((-1.0)*r20*x9830*x9836))+((x9830*x9843)));
evalcond[1]=(((x9830*x9838))+((r02*x9831))+(((-1.0)*r00*x9830*x9836)));
evalcond[2]=((1.0)+((x9830*x9833))+((r12*x9831))+(((-1.0)*x9834*x9848)));
evalcond[3]=(((sj3*x9831*x9834))+(((-1.0)*sj3*x9833*x9847))+(((-1.0)*cj3*r10*x9841))+(((-1.0)*cj3*r11*x9836))+((sj3*x9846)));
evalcond[4]=(((x9833*x9849))+(((-1.0)*cj3*x9834*x9847))+(((-1.0)*r10*sj3*x9841))+(((-1.0)*cj3*x9846))+(((-1.0)*r11*sj3*x9836)));
evalcond[5]=((((-1.0)*x9836*x9839))+((sj3*x9831*x9844))+(((-1.0)*r21*sj3*x9831*x9841))+(((-1.0)*x9845))+(((-1.0)*cj3*r20*x9841))+((r22*x9850))+x9832);
evalcond[6]=((((-1.0)*r20*x9836*x9849))+(((-1.0)*r20*sj3*x9841))+((cj1*sj2))+(((-1.0)*cj3*r22*x9848))+(((-1.0)*r21*sj3*x9836))+((gconst4*x9831*x9839))+x9840);
evalcond[7]=((((-1.0)*cj3*r01*x9836))+(((-1.0)*x9840))+(((-1.0)*x9831*x9837*x9841))+(((-1.0)*cj3*r00*x9841))+((r02*x9850))+((sj3*x9831*x9842))+(((-1.0)*sj2*x9835)));
evalcond[8]=((((-1.0)*x9836*x9837))+(((-1.0)*r00*sj3*x9841))+(((-1.0)*r00*x9836*x9849))+((x9838*x9849))+(((-1.0)*x9845))+x9832+(((-1.0)*cj3*r02*x9848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9852 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9852.valid){
continue;
}
CheckValue<IkReal> x9853=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9852.value)+(((1.5707963267949)*(x9853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9854=IKsin(j4);
IkReal x9855=IKcos(j4);
IkReal x9856=(sj1*sj2);
IkReal x9857=(gconst4*r11);
IkReal x9858=(gconst5*r10);
IkReal x9859=((1.0)*cj1);
IkReal x9860=((1.0)*gconst5);
IkReal x9861=(r01*sj3);
IkReal x9862=(gconst4*r01);
IkReal x9863=(cj3*r21);
IkReal x9864=(cj2*sj1);
IkReal x9865=((1.0)*gconst4);
IkReal x9866=(gconst5*r00);
IkReal x9867=(gconst4*r21);
IkReal x9868=(gconst5*r20);
IkReal x9869=(cj2*x9859);
IkReal x9870=(r12*x9854);
IkReal x9871=((1.0)*x9855);
IkReal x9872=((1.0)*x9854);
IkReal x9873=(cj3*x9855);
IkReal x9874=(sj3*x9854);
IkReal x9875=(gconst5*sj3*x9855);
evalcond[0]=((((-1.0)*r20*x9854*x9860))+((x9854*x9867))+((r22*x9855)));
evalcond[1]=((((-1.0)*r00*x9854*x9860))+((r02*x9855))+((x9854*x9862)));
evalcond[2]=((1.0)+((x9854*x9857))+(((-1.0)*x9858*x9872))+((r12*x9855)));
evalcond[3]=(((sj3*x9855*x9858))+(((-1.0)*sj3*x9857*x9871))+(((-1.0)*cj3*r11*x9860))+((sj3*x9870))+(((-1.0)*cj3*r10*x9865)));
evalcond[4]=((((-1.0)*cj3*x9858*x9871))+((x9857*x9873))+(((-1.0)*r11*sj3*x9860))+(((-1.0)*r10*sj3*x9865))+(((-1.0)*cj3*x9870)));
evalcond[5]=((((-1.0)*x9869))+(((-1.0)*cj3*r20*x9865))+(((-1.0)*r21*sj3*x9855*x9865))+(((-1.0)*x9860*x9863))+((sj3*x9855*x9868))+((r22*x9874))+x9856);
evalcond[6]=((((-1.0)*r21*sj3*x9860))+(((-1.0)*cj3*r22*x9872))+((cj1*sj2))+(((-1.0)*r20*sj3*x9865))+((gconst4*x9855*x9863))+(((-1.0)*r20*x9860*x9873))+x9864);
evalcond[7]=(((r02*x9874))+(((-1.0)*cj3*r01*x9860))+(((-1.0)*x9855*x9861*x9865))+(((-1.0)*sj2*x9859))+(((-1.0)*x9864))+((sj3*x9855*x9866))+(((-1.0)*cj3*r00*x9865)));
evalcond[8]=((((-1.0)*x9869))+(((-1.0)*r00*x9860*x9873))+((x9862*x9873))+(((-1.0)*x9860*x9861))+(((-1.0)*cj3*r02*x9872))+(((-1.0)*r00*sj3*x9865))+x9856);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9876=((-1.0)*r21);
CheckValue<IkReal> x9879 = IKatan2WithCheck(IkReal(x9876),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9879.valid){
continue;
}
IkReal x9877=((1.0)*(x9879.value));
IkReal x9878=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9877)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9877)));
IkReal gconst4=(x9876*x9878);
IkReal gconst5=((1.0)*r20*x9878);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9880=((-1.0)*r21);
CheckValue<IkReal> x9883 = IKatan2WithCheck(IkReal(x9880),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9883.valid){
continue;
}
IkReal x9881=((1.0)*(x9883.value));
IkReal x9882=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9881)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9881)));
IkReal gconst4=(x9880*x9882);
IkReal gconst5=((1.0)*r20*x9882);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9884=((-1.0)*r21);
CheckValue<IkReal> x9887 = IKatan2WithCheck(IkReal(x9884),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9887.valid){
continue;
}
IkReal x9885=((1.0)*(x9887.value));
IkReal x9886=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9885)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9885)));
IkReal gconst4=(x9884*x9886);
IkReal gconst5=((1.0)*r20*x9886);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9888=((-1.0)*r21);
CheckValue<IkReal> x9891 = IKatan2WithCheck(IkReal(x9888),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9891.valid){
continue;
}
IkReal x9889=((1.0)*(x9891.value));
IkReal x9890=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9889)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9889)));
IkReal gconst4=(x9888*x9890);
IkReal gconst5=((1.0)*r20*x9890);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9892=((-1.0)*r21);
CheckValue<IkReal> x9895 = IKatan2WithCheck(IkReal(x9892),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9895.valid){
continue;
}
IkReal x9893=((1.0)*(x9895.value));
IkReal x9894=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9893)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9893)));
IkReal gconst4=(x9892*x9894);
IkReal gconst5=((1.0)*r20*x9894);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9896=((-1.0)*r21);
CheckValue<IkReal> x9899 = IKatan2WithCheck(IkReal(x9896),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9899.valid){
continue;
}
IkReal x9897=((1.0)*(x9899.value));
IkReal x9898=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9897)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9897)));
IkReal gconst4=(x9896*x9898);
IkReal gconst5=((1.0)*r20*x9898);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9900=(gconst5*r10);
IkReal x9901=(gconst4*r11);
CheckValue<IkReal> x9902=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9900*x9901))+(x9901*x9901)+(x9900*x9900))),-1);
if(!x9902.valid){
continue;
}
CheckValue<IkReal> x9903 = IKatan2WithCheck(IkReal(((((-1.0)*x9900))+x9901)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9902.value)))+(x9903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9904=IKsin(j4);
IkReal x9905=IKcos(j4);
IkReal x9906=(gconst5*r00);
IkReal x9907=(gconst5*r20);
IkReal x9908=(gconst4*x9904);
IkReal x9909=(gconst4*x9905);
IkReal x9910=((1.0)*gconst5*r10);
IkReal x9911=((1.0)*x9904);
IkReal x9912=((1.0)*x9905);
evalcond[0]=(((r22*x9905))+((r21*x9908))+(((-1.0)*x9907*x9911)));
evalcond[1]=(((r02*x9905))+((r01*x9908))+(((-1.0)*x9906*x9911)));
evalcond[2]=((-1.0)+((r12*x9905))+((r11*x9908))+(((-1.0)*x9904*x9910)));
evalcond[3]=((((-1.0)*x9905*x9910))+((r11*x9909))+(((-1.0)*r12*x9911)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9911))+((r21*x9909))+(((-1.0)*x9907*x9912)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9909))+(((-1.0)*r02*x9911))+(((-1.0)*x9906*x9912))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9913=((1.0)*gconst4);
CheckValue<IkReal> x9914 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x9913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9914.valid){
continue;
}
CheckValue<IkReal> x9915=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x9913))+(((-1.0)*gconst5*r21)))),-1);
if(!x9915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9914.value)+(((1.5707963267949)*(x9915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9916=IKsin(j4);
IkReal x9917=IKcos(j4);
IkReal x9918=(gconst5*r00);
IkReal x9919=(gconst5*r20);
IkReal x9920=(gconst4*x9916);
IkReal x9921=(gconst4*x9917);
IkReal x9922=((1.0)*gconst5*r10);
IkReal x9923=((1.0)*x9916);
IkReal x9924=((1.0)*x9917);
evalcond[0]=((((-1.0)*x9919*x9923))+((r22*x9917))+((r21*x9920)));
evalcond[1]=((((-1.0)*x9918*x9923))+((r01*x9920))+((r02*x9917)));
evalcond[2]=((-1.0)+((r12*x9917))+(((-1.0)*x9916*x9922))+((r11*x9920)));
evalcond[3]=((((-1.0)*r12*x9923))+((r11*x9921))+(((-1.0)*x9917*x9922)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9919*x9924))+((cj1*sj2))+(((-1.0)*r22*x9923))+((r21*x9921)));
evalcond[5]=((((-1.0)*r02*x9923))+(((-1.0)*x9918*x9924))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r01*x9921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9925 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9925.valid){
continue;
}
CheckValue<IkReal> x9926=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9925.value)+(((1.5707963267949)*(x9926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9927=IKsin(j4);
IkReal x9928=IKcos(j4);
IkReal x9929=(gconst5*r00);
IkReal x9930=(gconst5*r20);
IkReal x9931=(gconst4*x9927);
IkReal x9932=(gconst4*x9928);
IkReal x9933=((1.0)*gconst5*r10);
IkReal x9934=((1.0)*x9927);
IkReal x9935=((1.0)*x9928);
evalcond[0]=((((-1.0)*x9930*x9934))+((r21*x9931))+((r22*x9928)));
evalcond[1]=(((r01*x9931))+((r02*x9928))+(((-1.0)*x9929*x9934)));
evalcond[2]=((-1.0)+(((-1.0)*x9927*x9933))+((r11*x9931))+((r12*x9928)));
evalcond[3]=((((-1.0)*x9928*x9933))+((r11*x9932))+(((-1.0)*r12*x9934)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9930*x9935))+((cj1*sj2))+(((-1.0)*r22*x9934))+((r21*x9932)));
evalcond[5]=(((r01*x9932))+(((-1.0)*r02*x9934))+(((-1.0)*sj1*sj2))+(((-1.0)*x9929*x9935))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9936=((-1.0)*r21);
CheckValue<IkReal> x9939 = IKatan2WithCheck(IkReal(x9936),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9939.valid){
continue;
}
IkReal x9937=((1.0)*(x9939.value));
IkReal x9938=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9937)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9937)));
IkReal gconst4=(x9936*x9938);
IkReal gconst5=((1.0)*r20*x9938);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9940=((-1.0)*r21);
CheckValue<IkReal> x9943 = IKatan2WithCheck(IkReal(x9940),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9943.valid){
continue;
}
IkReal x9941=((1.0)*(x9943.value));
IkReal x9942=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9941)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9941)));
IkReal gconst4=(x9940*x9942);
IkReal gconst5=((1.0)*r20*x9942);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9944=((-1.0)*r21);
CheckValue<IkReal> x9947 = IKatan2WithCheck(IkReal(x9944),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9947.valid){
continue;
}
IkReal x9945=((1.0)*(x9947.value));
IkReal x9946=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9945)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9945)));
IkReal gconst4=(x9944*x9946);
IkReal gconst5=((1.0)*r20*x9946);
IkReal x9948=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9952=IKPowWithIntegerCheck(x9948,-1);
if(!x9952.valid){
continue;
}
IkReal x9949=x9952.value;
IkReal x9950=((1.0)*x9949);
IkReal x9951=((((-2.0)*r10*r11*r20*r21*x9949))+(((-1.0)*x9950*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9950*(r11*r11)*(r21*r21))));
j4eval[0]=x9951;
j4eval[1]=r12;
j4eval[2]=x9948;
j4eval[3]=IKsign(x9951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9953=(gconst5*r10);
IkReal x9954=(gconst4*r11);
CheckValue<IkReal> x9955=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9954*x9954)))+(((-1.0)*(x9953*x9953)))+(((-1.0)*(r12*r12)))+(((2.0)*x9953*x9954)))),-1);
if(!x9955.valid){
continue;
}
CheckValue<IkReal> x9956 = IKatan2WithCheck(IkReal(((((-1.0)*x9954))+x9953)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9955.value)))+(x9956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9957=IKsin(j4);
IkReal x9958=IKcos(j4);
IkReal x9959=(gconst4*r11);
IkReal x9960=(gconst5*r10);
IkReal x9961=(gconst4*r01);
IkReal x9962=(gconst5*r00);
IkReal x9963=(gconst4*r21);
IkReal x9964=(gconst5*r20);
IkReal x9965=((1.0)*x9958);
IkReal x9966=((1.0)*x9957);
evalcond[0]=((((-1.0)*x9964*x9966))+((r22*x9958))+((x9957*x9963)));
evalcond[1]=((((-1.0)*x9962*x9966))+((r02*x9958))+((x9957*x9961)));
evalcond[2]=(((x9958*x9960))+((r12*x9957))+(((-1.0)*x9959*x9965)));
evalcond[3]=((-1.0)+(((-1.0)*x9960*x9966))+((x9957*x9959))+((r12*x9958)));
evalcond[4]=(((cj2*sj1))+((x9958*x9964))+((cj1*sj2))+(((-1.0)*x9963*x9965))+((r22*x9957)));
evalcond[5]=((((-1.0)*x9961*x9965))+((x9958*x9962))+(((-1.0)*sj1*sj2))+((r02*x9957))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9967=((1.0)*gconst4);
CheckValue<IkReal> x9968 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x9967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9968.valid){
continue;
}
CheckValue<IkReal> x9969=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x9967)))),-1);
if(!x9969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9968.value)+(((1.5707963267949)*(x9969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9970=IKsin(j4);
IkReal x9971=IKcos(j4);
IkReal x9972=(gconst4*r11);
IkReal x9973=(gconst5*r10);
IkReal x9974=(gconst4*r01);
IkReal x9975=(gconst5*r00);
IkReal x9976=(gconst4*r21);
IkReal x9977=(gconst5*r20);
IkReal x9978=((1.0)*x9971);
IkReal x9979=((1.0)*x9970);
evalcond[0]=(((r22*x9971))+(((-1.0)*x9977*x9979))+((x9970*x9976)));
evalcond[1]=((((-1.0)*x9975*x9979))+((r02*x9971))+((x9970*x9974)));
evalcond[2]=(((r12*x9970))+((x9971*x9973))+(((-1.0)*x9972*x9978)));
evalcond[3]=((-1.0)+((r12*x9971))+(((-1.0)*x9973*x9979))+((x9970*x9972)));
evalcond[4]=(((r22*x9970))+((cj2*sj1))+((cj1*sj2))+((x9971*x9977))+(((-1.0)*x9976*x9978)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9970))+((cj1*cj2))+(((-1.0)*x9974*x9978))+((x9971*x9975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9980 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9980.valid){
continue;
}
CheckValue<IkReal> x9981=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9980.value)+(((1.5707963267949)*(x9981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9982=IKsin(j4);
IkReal x9983=IKcos(j4);
IkReal x9984=(gconst4*r11);
IkReal x9985=(gconst5*r10);
IkReal x9986=(gconst4*r01);
IkReal x9987=(gconst5*r00);
IkReal x9988=(gconst4*r21);
IkReal x9989=(gconst5*r20);
IkReal x9990=((1.0)*x9983);
IkReal x9991=((1.0)*x9982);
evalcond[0]=(((r22*x9983))+((x9982*x9988))+(((-1.0)*x9989*x9991)));
evalcond[1]=(((x9982*x9986))+((r02*x9983))+(((-1.0)*x9987*x9991)));
evalcond[2]=((((-1.0)*x9984*x9990))+((x9983*x9985))+((r12*x9982)));
evalcond[3]=((-1.0)+((x9982*x9984))+((r12*x9983))+(((-1.0)*x9985*x9991)));
evalcond[4]=(((cj2*sj1))+((r22*x9982))+((cj1*sj2))+(((-1.0)*x9988*x9990))+((x9983*x9989)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x9983*x9987))+(((-1.0)*x9986*x9990))+((r02*x9982))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9992=((-1.0)*r21);
CheckValue<IkReal> x9995 = IKatan2WithCheck(IkReal(x9992),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9995.valid){
continue;
}
IkReal x9993=((1.0)*(x9995.value));
IkReal x9994=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9993)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9993)));
IkReal gconst4=(x9992*x9994);
IkReal gconst5=((1.0)*r20*x9994);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9996=((-1.0)*r21);
CheckValue<IkReal> x9999 = IKatan2WithCheck(IkReal(x9996),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9999.valid){
continue;
}
IkReal x9997=((1.0)*(x9999.value));
IkReal x9998=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9997)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9997)));
IkReal gconst4=(x9996*x9998);
IkReal gconst5=((1.0)*r20*x9998);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10000=((-1.0)*r21);
CheckValue<IkReal> x10003 = IKatan2WithCheck(IkReal(x10000),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10003.valid){
continue;
}
IkReal x10001=((1.0)*(x10003.value));
IkReal x10002=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10001)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10001)));
IkReal gconst4=(x10000*x10002);
IkReal gconst5=((1.0)*r20*x10002);
IkReal x10004=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10008=IKPowWithIntegerCheck(x10004,-1);
if(!x10008.valid){
continue;
}
IkReal x10005=x10008.value;
IkReal x10006=((1.0)*x10005);
IkReal x10007=((((-1.0)*x10006*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10006*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10005)));
j4eval[0]=x10007;
j4eval[1]=r12;
j4eval[2]=x10004;
j4eval[3]=IKsign(x10007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10009=(gconst5*r10);
IkReal x10010=(gconst4*r11);
CheckValue<IkReal> x10011 = IKatan2WithCheck(IkReal(((((-1.0)*x10010))+x10009)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10011.valid){
continue;
}
CheckValue<IkReal> x10012=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10010*x10010)))+(((-1.0)*(x10009*x10009)))+(((2.0)*x10009*x10010))+(((-1.0)*(r12*r12))))),-1);
if(!x10012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10011.value)+(((1.5707963267949)*(x10012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10013=IKsin(j4);
IkReal x10014=IKcos(j4);
IkReal x10015=(gconst4*r11);
IkReal x10016=(gconst5*r10);
IkReal x10017=(gconst4*r01);
IkReal x10018=(gconst5*r00);
IkReal x10019=(gconst4*r21);
IkReal x10020=(gconst5*r20);
IkReal x10021=((1.0)*x10014);
IkReal x10022=((1.0)*x10013);
evalcond[0]=(((x10013*x10019))+((r22*x10014))+(((-1.0)*x10020*x10022)));
evalcond[1]=(((x10013*x10017))+((r02*x10014))+(((-1.0)*x10018*x10022)));
evalcond[2]=(((x10014*x10016))+((r12*x10013))+(((-1.0)*x10015*x10021)));
evalcond[3]=((-1.0)+((x10013*x10015))+(((-1.0)*x10016*x10022))+((r12*x10014)));
evalcond[4]=(((cj2*sj1))+((x10014*x10018))+((r02*x10013))+(((-1.0)*x10017*x10021))+((cj1*sj2)));
evalcond[5]=(((r22*x10013))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10019*x10021))+((x10014*x10020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10023=((1.0)*gconst4);
CheckValue<IkReal> x10024=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10023)))),-1);
if(!x10024.valid){
continue;
}
CheckValue<IkReal> x10025 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x10023))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10024.value)))+(x10025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10026=IKsin(j4);
IkReal x10027=IKcos(j4);
IkReal x10028=(gconst4*r11);
IkReal x10029=(gconst5*r10);
IkReal x10030=(gconst4*r01);
IkReal x10031=(gconst5*r00);
IkReal x10032=(gconst4*r21);
IkReal x10033=(gconst5*r20);
IkReal x10034=((1.0)*x10027);
IkReal x10035=((1.0)*x10026);
evalcond[0]=(((x10026*x10032))+(((-1.0)*x10033*x10035))+((r22*x10027)));
evalcond[1]=(((x10026*x10030))+(((-1.0)*x10031*x10035))+((r02*x10027)));
evalcond[2]=(((x10027*x10029))+(((-1.0)*x10028*x10034))+((r12*x10026)));
evalcond[3]=((-1.0)+((x10026*x10028))+(((-1.0)*x10029*x10035))+((r12*x10027)));
evalcond[4]=(((cj2*sj1))+((x10027*x10031))+((cj1*sj2))+(((-1.0)*x10030*x10034))+((r02*x10026)));
evalcond[5]=(((x10027*x10033))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10032*x10034))+((r22*x10026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10036 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10036.valid){
continue;
}
CheckValue<IkReal> x10037=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10036.value)+(((1.5707963267949)*(x10037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10038=IKsin(j4);
IkReal x10039=IKcos(j4);
IkReal x10040=(gconst4*r11);
IkReal x10041=(gconst5*r10);
IkReal x10042=(gconst4*r01);
IkReal x10043=(gconst5*r00);
IkReal x10044=(gconst4*r21);
IkReal x10045=(gconst5*r20);
IkReal x10046=((1.0)*x10039);
IkReal x10047=((1.0)*x10038);
evalcond[0]=((((-1.0)*x10045*x10047))+((r22*x10039))+((x10038*x10044)));
evalcond[1]=((((-1.0)*x10043*x10047))+((r02*x10039))+((x10038*x10042)));
evalcond[2]=(((x10039*x10041))+((r12*x10038))+(((-1.0)*x10040*x10046)));
evalcond[3]=((-1.0)+(((-1.0)*x10041*x10047))+((r12*x10039))+((x10038*x10040)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10042*x10046))+((x10039*x10043))+((r02*x10038)));
evalcond[5]=((((-1.0)*x10044*x10046))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10039*x10045))+((r22*x10038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10048=((-1.0)*r21);
CheckValue<IkReal> x10051 = IKatan2WithCheck(IkReal(x10048),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10051.valid){
continue;
}
IkReal x10049=((1.0)*(x10051.value));
IkReal x10050=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10049)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10049)));
IkReal gconst4=(x10048*x10050);
IkReal gconst5=((1.0)*r20*x10050);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10052=((-1.0)*r21);
CheckValue<IkReal> x10055 = IKatan2WithCheck(IkReal(x10052),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10055.valid){
continue;
}
IkReal x10053=((1.0)*(x10055.value));
IkReal x10054=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10053)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10053)));
IkReal gconst4=(x10052*x10054);
IkReal gconst5=((1.0)*r20*x10054);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10056=((-1.0)*r21);
CheckValue<IkReal> x10059 = IKatan2WithCheck(IkReal(x10056),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10059.valid){
continue;
}
IkReal x10057=((1.0)*(x10059.value));
IkReal x10058=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10057)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10057)));
IkReal gconst4=(x10056*x10058);
IkReal gconst5=((1.0)*r20*x10058);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10060=(gconst5*r10);
IkReal x10061=(gconst4*r11);
CheckValue<IkReal> x10062=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10060*x10060)+(x10061*x10061)+(((-2.0)*x10060*x10061)))),-1);
if(!x10062.valid){
continue;
}
CheckValue<IkReal> x10063 = IKatan2WithCheck(IkReal((x10061+(((-1.0)*x10060)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10062.value)))+(x10063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10064=IKsin(j4);
IkReal x10065=IKcos(j4);
IkReal x10066=(gconst4*r11);
IkReal x10067=(gconst5*r00);
IkReal x10068=(gconst5*r20);
IkReal x10069=(gconst4*x10065);
IkReal x10070=((1.0)*gconst5*r10);
IkReal x10071=(gconst4*x10064);
IkReal x10072=((1.0)*x10064);
IkReal x10073=((1.0)*x10065);
evalcond[0]=((((-1.0)*x10068*x10072))+((r22*x10065))+((r21*x10071)));
evalcond[1]=(((r01*x10071))+(((-1.0)*x10067*x10072))+((r02*x10065)));
evalcond[2]=((-1.0)+((r12*x10065))+((x10064*x10066))+(((-1.0)*x10064*x10070)));
evalcond[3]=(((x10065*x10066))+(((-1.0)*r12*x10072))+(((-1.0)*x10065*x10070)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10069))+(((-1.0)*x10067*x10073))+(((-1.0)*r02*x10072)));
evalcond[5]=((((-1.0)*x10068*x10073))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10069))+(((-1.0)*r22*x10072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10074=((1.0)*gconst4);
CheckValue<IkReal> x10075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10074))+(((-1.0)*gconst5*r21)))),-1);
if(!x10075.valid){
continue;
}
CheckValue<IkReal> x10076 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x10074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10075.value)))+(x10076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10077=IKsin(j4);
IkReal x10078=IKcos(j4);
IkReal x10079=(gconst4*r11);
IkReal x10080=(gconst5*r00);
IkReal x10081=(gconst5*r20);
IkReal x10082=(gconst4*x10078);
IkReal x10083=((1.0)*gconst5*r10);
IkReal x10084=(gconst4*x10077);
IkReal x10085=((1.0)*x10077);
IkReal x10086=((1.0)*x10078);
evalcond[0]=((((-1.0)*x10081*x10085))+((r21*x10084))+((r22*x10078)));
evalcond[1]=((((-1.0)*x10080*x10085))+((r01*x10084))+((r02*x10078)));
evalcond[2]=((-1.0)+((r12*x10078))+(((-1.0)*x10077*x10083))+((x10077*x10079)));
evalcond[3]=((((-1.0)*x10078*x10083))+((x10078*x10079))+(((-1.0)*r12*x10085)));
evalcond[4]=((((-1.0)*x10080*x10086))+((cj2*sj1))+((r01*x10082))+((cj1*sj2))+(((-1.0)*r02*x10085)));
evalcond[5]=((((-1.0)*x10081*x10086))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10082))+(((-1.0)*r22*x10085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10087 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10087.valid){
continue;
}
CheckValue<IkReal> x10088=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10087.value)+(((1.5707963267949)*(x10088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10089=IKsin(j4);
IkReal x10090=IKcos(j4);
IkReal x10091=(gconst4*r11);
IkReal x10092=(gconst5*r00);
IkReal x10093=(gconst5*r20);
IkReal x10094=(gconst4*x10090);
IkReal x10095=((1.0)*gconst5*r10);
IkReal x10096=(gconst4*x10089);
IkReal x10097=((1.0)*x10089);
IkReal x10098=((1.0)*x10090);
evalcond[0]=((((-1.0)*x10093*x10097))+((r22*x10090))+((r21*x10096)));
evalcond[1]=((((-1.0)*x10092*x10097))+((r02*x10090))+((r01*x10096)));
evalcond[2]=((-1.0)+((r12*x10090))+((x10089*x10091))+(((-1.0)*x10089*x10095)));
evalcond[3]=(((x10090*x10091))+(((-1.0)*r12*x10097))+(((-1.0)*x10090*x10095)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10092*x10098))+((cj1*sj2))+(((-1.0)*r02*x10097))+((r01*x10094)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10093*x10098))+((r21*x10094))+(((-1.0)*r22*x10097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10099=((-1.0)*r21);
IkReal x10100=((-1.0)*px);
CheckValue<IkReal> x10102 = IKatan2WithCheck(IkReal(x10099),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10102.valid){
continue;
}
IkReal x10101=((1.0)*(x10102.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10101)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10100);
rxp1_1=(px*r21);
rxp1_2=(r11*x10100);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10101)));
IkReal gconst4=x10099;
IkReal gconst5=((1.0)*r20);
IkReal x10103=((1.0)*r11*r21);
IkReal x10104=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10103))+(((-1.0)*x10104)));
j4eval[1]=(((sj3*x10103))+((sj3*x10104)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10105=((-1.0)*r21);
IkReal x10106=((-1.0)*px);
CheckValue<IkReal> x10108 = IKatan2WithCheck(IkReal(x10105),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10108.valid){
continue;
}
IkReal x10107=((1.0)*(x10108.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10107)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10106);
rxp1_1=(px*r21);
rxp1_2=(r11*x10106);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10107)));
IkReal gconst4=x10105;
IkReal gconst5=((1.0)*r20);
IkReal x10109=((1.0)*cj3);
IkReal x10110=(r10*r20);
IkReal x10111=(r11*r21);
j4eval[0]=((((-1.0)*x10110))+(((-1.0)*x10111)));
j4eval[1]=((((-1.0)*x10109*x10110))+(((-1.0)*x10109*x10111)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10112=((-1.0)*r21);
IkReal x10113=((-1.0)*px);
CheckValue<IkReal> x10115 = IKatan2WithCheck(IkReal(x10112),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10115.valid){
continue;
}
IkReal x10114=((1.0)*(x10115.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10114)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10113);
rxp1_1=(px*r21);
rxp1_2=(r11*x10113);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10114)));
IkReal gconst4=x10112;
IkReal gconst5=((1.0)*r20);
IkReal x10116=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r10*r20*x10116))+((r11*r21*x10116)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10117=IKPowWithIntegerCheck(r02,-1);
if(!x10117.valid){
continue;
}
CheckValue<IkReal> x10118=IKPowWithIntegerCheck(sj3,-1);
if(!x10118.valid){
continue;
}
CheckValue<IkReal> x10119=IKPowWithIntegerCheck(((((-1.0)*gconst4*r11*sj3))+((gconst5*r10*sj3))),-1);
if(!x10119.valid){
continue;
}
if( IKabs(((x10117.value)*(x10118.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10119.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10117.value)*(x10118.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x10119.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10117.value)*(x10118.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x10119.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10120=IKsin(j4);
IkReal x10121=IKcos(j4);
IkReal x10122=(cj2*sj1);
IkReal x10123=(cj1*sj2);
IkReal x10124=(r10*sj3);
IkReal x10125=((1.0)*gconst4);
IkReal x10126=(r20*sj3);
IkReal x10127=(sj1*sj2);
IkReal x10128=((1.0)*gconst5);
IkReal x10129=(r21*sj3);
IkReal x10130=(cj3*r10);
IkReal x10131=(r11*sj3);
IkReal x10132=(cj1*cj2);
IkReal x10133=(cj3*r21);
IkReal x10134=((1.0)*cj3);
IkReal x10135=(cj3*r11);
IkReal x10136=(gconst5*x10121);
IkReal x10137=(gconst4*x10120);
IkReal x10138=(gconst4*x10121);
IkReal x10139=(r02*x10120);
IkReal x10140=(x10123+x10122);
evalcond[0]=(r02*x10121);
evalcond[1]=(x10140+((sj3*x10139)));
evalcond[2]=(((r21*x10137))+(((-1.0)*r20*x10120*x10128)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x10120*x10128))+((r11*x10137)));
evalcond[4]=(x10132+(((-1.0)*x10127))+(((-1.0)*x10134*x10139)));
evalcond[5]=((((-1.0)*x10121*x10125*x10131))+(((-1.0)*x10128*x10135))+((x10124*x10136))+(((-1.0)*x10125*x10130)));
evalcond[6]=((((-1.0)*x10128*x10131))+((x10135*x10138))+(((-1.0)*x10124*x10125))+(((-1.0)*x10121*x10128*x10130)));
evalcond[7]=((((-1.0)*cj3*r20*x10121*x10128))+(((-1.0)*x10128*x10129))+x10140+((x10133*x10138))+(((-1.0)*x10125*x10126)));
evalcond[8]=(((x10126*x10136))+(((-1.0)*x10121*x10125*x10129))+(((-1.0)*cj3*r20*x10125))+(((-1.0)*x10128*x10133))+x10127+(((-1.0)*x10132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10141=(gconst4*r11);
IkReal x10142=((1.0)*gconst5*r10);
CheckValue<IkReal> x10143=IKPowWithIntegerCheck((x10141+(((-1.0)*x10142))),-1);
if(!x10143.valid){
continue;
}
CheckValue<IkReal> x10144=IKPowWithIntegerCheck(((((-1.0)*cj3*x10142))+((cj3*x10141))),-1);
if(!x10144.valid){
continue;
}
if( IKabs(x10143.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10144.value)*((((gconst4*r10*sj3))+((gconst5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10143.value)+IKsqr(((x10144.value)*((((gconst4*r10*sj3))+((gconst5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10143.value, ((x10144.value)*((((gconst4*r10*sj3))+((gconst5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10145=IKsin(j4);
IkReal x10146=IKcos(j4);
IkReal x10147=(cj2*sj1);
IkReal x10148=(cj1*sj2);
IkReal x10149=(r10*sj3);
IkReal x10150=((1.0)*gconst4);
IkReal x10151=(r20*sj3);
IkReal x10152=(sj1*sj2);
IkReal x10153=((1.0)*gconst5);
IkReal x10154=(r21*sj3);
IkReal x10155=(cj3*r10);
IkReal x10156=(r11*sj3);
IkReal x10157=(cj1*cj2);
IkReal x10158=(cj3*r21);
IkReal x10159=((1.0)*cj3);
IkReal x10160=(cj3*r11);
IkReal x10161=(gconst5*x10146);
IkReal x10162=(gconst4*x10145);
IkReal x10163=(gconst4*x10146);
IkReal x10164=(r02*x10145);
IkReal x10165=(x10147+x10148);
evalcond[0]=(r02*x10146);
evalcond[1]=(((sj3*x10164))+x10165);
evalcond[2]=((((-1.0)*r20*x10145*x10153))+((r21*x10162)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x10145*x10153))+((r11*x10162)));
evalcond[4]=(x10157+(((-1.0)*x10152))+(((-1.0)*x10159*x10164)));
evalcond[5]=((((-1.0)*x10150*x10155))+(((-1.0)*x10146*x10150*x10156))+(((-1.0)*x10153*x10160))+((x10149*x10161)));
evalcond[6]=(((x10160*x10163))+(((-1.0)*x10153*x10156))+(((-1.0)*x10149*x10150))+(((-1.0)*x10146*x10153*x10155)));
evalcond[7]=(((x10158*x10163))+(((-1.0)*x10153*x10154))+(((-1.0)*x10150*x10151))+(((-1.0)*cj3*r20*x10146*x10153))+x10165);
evalcond[8]=((((-1.0)*x10153*x10158))+(((-1.0)*cj3*r20*x10150))+x10152+((x10151*x10161))+(((-1.0)*x10146*x10150*x10154))+(((-1.0)*x10157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10166=(gconst5*r10);
IkReal x10167=(gconst4*r11);
CheckValue<IkReal> x10168=IKPowWithIntegerCheck(((((-1.0)*x10166))+x10167),-1);
if(!x10168.valid){
continue;
}
CheckValue<IkReal> x10169=IKPowWithIntegerCheck((((sj3*x10166))+(((-1.0)*sj3*x10167))),-1);
if(!x10169.valid){
continue;
}
if( IKabs(x10168.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10169.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10168.value)+IKsqr(((x10169.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10168.value, ((x10169.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10170=IKsin(j4);
IkReal x10171=IKcos(j4);
IkReal x10172=(cj2*sj1);
IkReal x10173=(cj1*sj2);
IkReal x10174=(r10*sj3);
IkReal x10175=((1.0)*gconst4);
IkReal x10176=(r20*sj3);
IkReal x10177=(sj1*sj2);
IkReal x10178=((1.0)*gconst5);
IkReal x10179=(r21*sj3);
IkReal x10180=(cj3*r10);
IkReal x10181=(r11*sj3);
IkReal x10182=(cj1*cj2);
IkReal x10183=(cj3*r21);
IkReal x10184=((1.0)*cj3);
IkReal x10185=(cj3*r11);
IkReal x10186=(gconst5*x10171);
IkReal x10187=(gconst4*x10170);
IkReal x10188=(gconst4*x10171);
IkReal x10189=(r02*x10170);
IkReal x10190=(x10172+x10173);
evalcond[0]=(r02*x10171);
evalcond[1]=(((sj3*x10189))+x10190);
evalcond[2]=(((r21*x10187))+(((-1.0)*r20*x10170*x10178)));
evalcond[3]=((-1.0)+((r11*x10187))+(((-1.0)*r10*x10170*x10178)));
evalcond[4]=((((-1.0)*x10177))+(((-1.0)*x10184*x10189))+x10182);
evalcond[5]=((((-1.0)*x10178*x10185))+(((-1.0)*x10171*x10175*x10181))+(((-1.0)*x10175*x10180))+((x10174*x10186)));
evalcond[6]=((((-1.0)*x10174*x10175))+(((-1.0)*x10178*x10181))+(((-1.0)*x10171*x10178*x10180))+((x10185*x10188)));
evalcond[7]=((((-1.0)*x10178*x10179))+(((-1.0)*cj3*r20*x10171*x10178))+x10190+(((-1.0)*x10175*x10176))+((x10183*x10188)));
evalcond[8]=((((-1.0)*x10178*x10183))+(((-1.0)*x10171*x10175*x10179))+(((-1.0)*x10182))+x10177+(((-1.0)*cj3*r20*x10175))+((x10176*x10186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10191=gconst4*gconst4;
IkReal x10192=gconst5*gconst5;
IkReal x10193=(r11*sj3);
IkReal x10194=(gconst4*gconst5);
IkReal x10195=(r10*sj3);
IkReal x10196=((1.0)*r20);
IkReal x10197=(cj3*r10);
IkReal x10198=((1.0)*r22);
IkReal x10199=(cj3*r11);
IkReal x10200=(r21*x10191);
CheckValue<IkReal> x10201 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*x10198*x10199))+(((-1.0)*gconst4*x10197*x10198)))),IkReal(((((-1.0)*x10192*x10196*x10199))+(((-1.0)*x10194*x10196*x10197))+((r21*x10194*x10199))+((x10197*x10200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10201.valid){
continue;
}
CheckValue<IkReal> x10202=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10193*x10200))+((r20*x10193*x10194))+(((-1.0)*x10192*x10195*x10196))+((r21*x10194*x10195))+(((-1.0)*r12*sj3*x10198)))),-1);
if(!x10202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10201.value)+(((1.5707963267949)*(x10202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10203=IKsin(j4);
IkReal x10204=IKcos(j4);
IkReal x10205=(cj2*sj1);
IkReal x10206=(cj1*sj2);
IkReal x10207=(gconst4*r11);
IkReal x10208=(sj1*sj2);
IkReal x10209=(gconst5*r10);
IkReal x10210=(cj1*cj2);
IkReal x10211=((1.0)*gconst5);
IkReal x10212=(r01*sj3);
IkReal x10213=(gconst4*r01);
IkReal x10214=(cj3*r21);
IkReal x10215=((1.0)*gconst4);
IkReal x10216=(gconst5*r00);
IkReal x10217=(cj3*r20);
IkReal x10218=(gconst4*r21);
IkReal x10219=(r12*x10203);
IkReal x10220=((1.0)*x10204);
IkReal x10221=((1.0)*x10203);
IkReal x10222=(cj3*x10204);
IkReal x10223=(sj3*x10203);
IkReal x10224=(x10205+x10206);
IkReal x10225=(gconst5*sj3*x10204);
evalcond[0]=(((x10203*x10218))+((r22*x10204))+(((-1.0)*r20*x10203*x10211)));
evalcond[1]=(((x10203*x10213))+((r02*x10204))+(((-1.0)*r00*x10203*x10211)));
evalcond[2]=((-1.0)+((x10203*x10207))+(((-1.0)*x10209*x10221))+((r12*x10204)));
evalcond[3]=((((-1.0)*cj3*r10*x10215))+((sj3*x10219))+(((-1.0)*sj3*x10207*x10220))+(((-1.0)*cj3*r11*x10211))+((sj3*x10204*x10209)));
evalcond[4]=((((-1.0)*cj3*x10209*x10220))+(((-1.0)*r10*sj3*x10215))+(((-1.0)*r11*sj3*x10211))+(((-1.0)*cj3*x10219))+((x10207*x10222)));
evalcond[5]=((((-1.0)*x10204*x10212*x10215))+(((-1.0)*cj3*r01*x10211))+((sj3*x10204*x10216))+((r02*x10223))+(((-1.0)*cj3*r00*x10215))+x10224);
evalcond[6]=((((-1.0)*x10211*x10214))+((r22*x10223))+(((-1.0)*x10215*x10217))+(((-1.0)*r21*sj3*x10204*x10215))+x10208+((r20*x10225))+(((-1.0)*x10210)));
evalcond[7]=((((-1.0)*x10204*x10211*x10217))+(((-1.0)*r20*sj3*x10215))+(((-1.0)*cj3*r22*x10221))+((gconst4*x10204*x10214))+(((-1.0)*r21*sj3*x10211))+x10224);
evalcond[8]=((((-1.0)*x10208))+(((-1.0)*x10211*x10212))+((x10213*x10222))+(((-1.0)*r00*x10211*x10222))+x10210+(((-1.0)*r00*sj3*x10215))+(((-1.0)*cj3*r02*x10221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10226=((1.0)*gconst4);
CheckValue<IkReal> x10227 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x10226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10227.valid){
continue;
}
CheckValue<IkReal> x10228=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10226))+(((-1.0)*gconst5*r21)))),-1);
if(!x10228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10227.value)+(((1.5707963267949)*(x10228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10229=IKsin(j4);
IkReal x10230=IKcos(j4);
IkReal x10231=(cj2*sj1);
IkReal x10232=(cj1*sj2);
IkReal x10233=(gconst4*r11);
IkReal x10234=(sj1*sj2);
IkReal x10235=(gconst5*r10);
IkReal x10236=(cj1*cj2);
IkReal x10237=((1.0)*gconst5);
IkReal x10238=(r01*sj3);
IkReal x10239=(gconst4*r01);
IkReal x10240=(cj3*r21);
IkReal x10241=((1.0)*gconst4);
IkReal x10242=(gconst5*r00);
IkReal x10243=(cj3*r20);
IkReal x10244=(gconst4*r21);
IkReal x10245=(r12*x10229);
IkReal x10246=((1.0)*x10230);
IkReal x10247=((1.0)*x10229);
IkReal x10248=(cj3*x10230);
IkReal x10249=(sj3*x10229);
IkReal x10250=(x10231+x10232);
IkReal x10251=(gconst5*sj3*x10230);
evalcond[0]=((((-1.0)*r20*x10229*x10237))+((r22*x10230))+((x10229*x10244)));
evalcond[1]=(((r02*x10230))+(((-1.0)*r00*x10229*x10237))+((x10229*x10239)));
evalcond[2]=((-1.0)+(((-1.0)*x10235*x10247))+((x10229*x10233))+((r12*x10230)));
evalcond[3]=(((sj3*x10245))+(((-1.0)*sj3*x10233*x10246))+(((-1.0)*cj3*r11*x10237))+(((-1.0)*cj3*r10*x10241))+((sj3*x10230*x10235)));
evalcond[4]=((((-1.0)*r10*sj3*x10241))+(((-1.0)*r11*sj3*x10237))+(((-1.0)*cj3*x10235*x10246))+(((-1.0)*cj3*x10245))+((x10233*x10248)));
evalcond[5]=(((r02*x10249))+(((-1.0)*x10230*x10238*x10241))+(((-1.0)*cj3*r00*x10241))+((sj3*x10230*x10242))+x10250+(((-1.0)*cj3*r01*x10237)));
evalcond[6]=((((-1.0)*x10237*x10240))+(((-1.0)*x10241*x10243))+(((-1.0)*r21*sj3*x10230*x10241))+((r22*x10249))+x10234+(((-1.0)*x10236))+((r20*x10251)));
evalcond[7]=((((-1.0)*x10230*x10237*x10243))+(((-1.0)*cj3*r22*x10247))+x10250+(((-1.0)*r21*sj3*x10237))+(((-1.0)*r20*sj3*x10241))+((gconst4*x10230*x10240)));
evalcond[8]=(((x10239*x10248))+(((-1.0)*x10237*x10238))+(((-1.0)*cj3*r02*x10247))+(((-1.0)*r00*sj3*x10241))+x10236+(((-1.0)*x10234))+(((-1.0)*r00*x10237*x10248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10252 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10252.valid){
continue;
}
CheckValue<IkReal> x10253=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10252.value)+(((1.5707963267949)*(x10253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10254=IKsin(j4);
IkReal x10255=IKcos(j4);
IkReal x10256=(cj2*sj1);
IkReal x10257=(cj1*sj2);
IkReal x10258=(gconst4*r11);
IkReal x10259=(sj1*sj2);
IkReal x10260=(gconst5*r10);
IkReal x10261=(cj1*cj2);
IkReal x10262=((1.0)*gconst5);
IkReal x10263=(r01*sj3);
IkReal x10264=(gconst4*r01);
IkReal x10265=(cj3*r21);
IkReal x10266=((1.0)*gconst4);
IkReal x10267=(gconst5*r00);
IkReal x10268=(cj3*r20);
IkReal x10269=(gconst4*r21);
IkReal x10270=(r12*x10254);
IkReal x10271=((1.0)*x10255);
IkReal x10272=((1.0)*x10254);
IkReal x10273=(cj3*x10255);
IkReal x10274=(sj3*x10254);
IkReal x10275=(x10257+x10256);
IkReal x10276=(gconst5*sj3*x10255);
evalcond[0]=(((r22*x10255))+((x10254*x10269))+(((-1.0)*r20*x10254*x10262)));
evalcond[1]=(((r02*x10255))+(((-1.0)*r00*x10254*x10262))+((x10254*x10264)));
evalcond[2]=((-1.0)+((r12*x10255))+((x10254*x10258))+(((-1.0)*x10260*x10272)));
evalcond[3]=(((sj3*x10255*x10260))+(((-1.0)*sj3*x10258*x10271))+(((-1.0)*cj3*r11*x10262))+(((-1.0)*cj3*r10*x10266))+((sj3*x10270)));
evalcond[4]=(((x10258*x10273))+(((-1.0)*r11*sj3*x10262))+(((-1.0)*r10*sj3*x10266))+(((-1.0)*cj3*x10270))+(((-1.0)*cj3*x10260*x10271)));
evalcond[5]=(((sj3*x10255*x10267))+(((-1.0)*x10255*x10263*x10266))+(((-1.0)*cj3*r01*x10262))+(((-1.0)*cj3*r00*x10266))+x10275+((r02*x10274)));
evalcond[6]=((((-1.0)*x10266*x10268))+(((-1.0)*x10261))+((r20*x10276))+(((-1.0)*x10262*x10265))+x10259+(((-1.0)*r21*sj3*x10255*x10266))+((r22*x10274)));
evalcond[7]=((((-1.0)*x10255*x10262*x10268))+(((-1.0)*r21*sj3*x10262))+(((-1.0)*cj3*r22*x10272))+(((-1.0)*r20*sj3*x10266))+((gconst4*x10255*x10265))+x10275);
evalcond[8]=(((x10264*x10273))+(((-1.0)*x10262*x10263))+x10261+(((-1.0)*r00*sj3*x10266))+(((-1.0)*x10259))+(((-1.0)*r00*x10262*x10273))+(((-1.0)*cj3*r02*x10272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10277=((-1.0)*r21);
CheckValue<IkReal> x10280 = IKatan2WithCheck(IkReal(x10277),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10280.valid){
continue;
}
IkReal x10278=((1.0)*(x10280.value));
IkReal x10279=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10278)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10278)));
IkReal gconst4=(x10277*x10279);
IkReal gconst5=((1.0)*r20*x10279);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10281=((-1.0)*r21);
CheckValue<IkReal> x10284 = IKatan2WithCheck(IkReal(x10281),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10284.valid){
continue;
}
IkReal x10282=((1.0)*(x10284.value));
IkReal x10283=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10282)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10282)));
IkReal gconst4=(x10281*x10283);
IkReal gconst5=((1.0)*r20*x10283);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10285=((-1.0)*r21);
CheckValue<IkReal> x10288 = IKatan2WithCheck(IkReal(x10285),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10288.valid){
continue;
}
IkReal x10286=((1.0)*(x10288.value));
IkReal x10287=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10286)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10286)));
IkReal gconst4=(x10285*x10287);
IkReal gconst5=((1.0)*r20*x10287);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10289=((-1.0)*r21);
CheckValue<IkReal> x10292 = IKatan2WithCheck(IkReal(x10289),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10292.valid){
continue;
}
IkReal x10290=((1.0)*(x10292.value));
IkReal x10291=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10290)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10290)));
IkReal gconst4=(x10289*x10291);
IkReal gconst5=((1.0)*r20*x10291);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10293=((-1.0)*r21);
CheckValue<IkReal> x10296 = IKatan2WithCheck(IkReal(x10293),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10296.valid){
continue;
}
IkReal x10294=((1.0)*(x10296.value));
IkReal x10295=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10294)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10294)));
IkReal gconst4=(x10293*x10295);
IkReal gconst5=((1.0)*r20*x10295);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10297=((-1.0)*r21);
CheckValue<IkReal> x10300 = IKatan2WithCheck(IkReal(x10297),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10300.valid){
continue;
}
IkReal x10298=((1.0)*(x10300.value));
IkReal x10299=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10298)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10298)));
IkReal gconst4=(x10297*x10299);
IkReal gconst5=((1.0)*r20*x10299);
IkReal x10301=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10305=IKPowWithIntegerCheck(x10301,-1);
if(!x10305.valid){
continue;
}
IkReal x10302=x10305.value;
IkReal x10303=((1.0)*x10302);
IkReal x10304=((((-2.0)*r00*r01*r20*r21*x10302))+(((-1.0)*x10303*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10303*(r01*r01)*(r21*r21))));
j4eval[0]=x10304;
j4eval[1]=r02;
j4eval[2]=x10301;
j4eval[3]=IKsign(x10304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10306=(gconst5*r00);
IkReal x10307=(gconst4*r01);
CheckValue<IkReal> x10308 = IKatan2WithCheck(IkReal(((((-1.0)*x10307))+x10306)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10308.valid){
continue;
}
CheckValue<IkReal> x10309=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10306*x10307))+(((-1.0)*(x10306*x10306)))+(((-1.0)*(x10307*x10307))))),-1);
if(!x10309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10308.value)+(((1.5707963267949)*(x10309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10310=IKsin(j4);
IkReal x10311=IKcos(j4);
IkReal x10312=(gconst4*r11);
IkReal x10313=((1.0)*cj1);
IkReal x10314=(gconst5*r10);
IkReal x10315=(gconst4*r01);
IkReal x10316=(gconst5*r00);
IkReal x10317=(gconst4*r21);
IkReal x10318=(gconst5*r20);
IkReal x10319=((1.0)*x10311);
IkReal x10320=((1.0)*x10310);
evalcond[0]=((((-1.0)*x10318*x10320))+((r22*x10311))+((x10310*x10317)));
evalcond[1]=((((-1.0)*x10314*x10320))+((r12*x10311))+((x10310*x10312)));
evalcond[2]=(((r02*x10310))+((x10311*x10316))+(((-1.0)*x10315*x10319)));
evalcond[3]=((-1.0)+((r02*x10311))+((x10310*x10315))+(((-1.0)*x10316*x10320)));
evalcond[4]=(((r22*x10310))+((sj1*sj2))+(((-1.0)*x10317*x10319))+(((-1.0)*cj2*x10313))+((x10311*x10318)));
evalcond[5]=((((-1.0)*x10312*x10319))+((r12*x10310))+(((-1.0)*cj2*sj1))+((x10311*x10314))+(((-1.0)*sj2*x10313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10321=((1.0)*gconst4);
CheckValue<IkReal> x10322=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r11))+(((-1.0)*r10*x10321)))),-1);
if(!x10322.valid){
continue;
}
CheckValue<IkReal> x10323 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x10321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10322.value)))+(x10323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10324=IKsin(j4);
IkReal x10325=IKcos(j4);
IkReal x10326=(gconst4*r11);
IkReal x10327=((1.0)*cj1);
IkReal x10328=(gconst5*r10);
IkReal x10329=(gconst4*r01);
IkReal x10330=(gconst5*r00);
IkReal x10331=(gconst4*r21);
IkReal x10332=(gconst5*r20);
IkReal x10333=((1.0)*x10325);
IkReal x10334=((1.0)*x10324);
evalcond[0]=(((r22*x10325))+((x10324*x10331))+(((-1.0)*x10332*x10334)));
evalcond[1]=((((-1.0)*x10328*x10334))+((x10324*x10326))+((r12*x10325)));
evalcond[2]=(((x10325*x10330))+((r02*x10324))+(((-1.0)*x10329*x10333)));
evalcond[3]=((-1.0)+((r02*x10325))+((x10324*x10329))+(((-1.0)*x10330*x10334)));
evalcond[4]=(((r22*x10324))+((x10325*x10332))+(((-1.0)*cj2*x10327))+((sj1*sj2))+(((-1.0)*x10331*x10333)));
evalcond[5]=(((x10325*x10328))+(((-1.0)*sj2*x10327))+(((-1.0)*cj2*sj1))+((r12*x10324))+(((-1.0)*x10326*x10333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10335 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10335.valid){
continue;
}
CheckValue<IkReal> x10336=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10335.value)+(((1.5707963267949)*(x10336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10337=IKsin(j4);
IkReal x10338=IKcos(j4);
IkReal x10339=(gconst4*r11);
IkReal x10340=((1.0)*cj1);
IkReal x10341=(gconst5*r10);
IkReal x10342=(gconst4*r01);
IkReal x10343=(gconst5*r00);
IkReal x10344=(gconst4*r21);
IkReal x10345=(gconst5*r20);
IkReal x10346=((1.0)*x10338);
IkReal x10347=((1.0)*x10337);
evalcond[0]=(((r22*x10338))+(((-1.0)*x10345*x10347))+((x10337*x10344)));
evalcond[1]=((((-1.0)*x10341*x10347))+((r12*x10338))+((x10337*x10339)));
evalcond[2]=(((r02*x10337))+(((-1.0)*x10342*x10346))+((x10338*x10343)));
evalcond[3]=((-1.0)+((r02*x10338))+(((-1.0)*x10343*x10347))+((x10337*x10342)));
evalcond[4]=((((-1.0)*cj2*x10340))+((r22*x10337))+((sj1*sj2))+(((-1.0)*x10344*x10346))+((x10338*x10345)));
evalcond[5]=((((-1.0)*x10339*x10346))+(((-1.0)*sj2*x10340))+(((-1.0)*cj2*sj1))+((r12*x10337))+((x10338*x10341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10348=((-1.0)*r21);
CheckValue<IkReal> x10351 = IKatan2WithCheck(IkReal(x10348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10351.valid){
continue;
}
IkReal x10349=((1.0)*(x10351.value));
IkReal x10350=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10349)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10349)));
IkReal gconst4=(x10348*x10350);
IkReal gconst5=((1.0)*r20*x10350);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10352=((-1.0)*r21);
CheckValue<IkReal> x10355 = IKatan2WithCheck(IkReal(x10352),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10355.valid){
continue;
}
IkReal x10353=((1.0)*(x10355.value));
IkReal x10354=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10353)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10353)));
IkReal gconst4=(x10352*x10354);
IkReal gconst5=((1.0)*r20*x10354);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10356=((-1.0)*r21);
CheckValue<IkReal> x10359 = IKatan2WithCheck(IkReal(x10356),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10359.valid){
continue;
}
IkReal x10357=((1.0)*(x10359.value));
IkReal x10358=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10357)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10357)));
IkReal gconst4=(x10356*x10358);
IkReal gconst5=((1.0)*r20*x10358);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10360=(gconst4*r01);
IkReal x10361=(gconst5*r00);
CheckValue<IkReal> x10362=IKPowWithIntegerCheck(IKsign(((r02*r02)+(x10360*x10360)+(((-2.0)*x10360*x10361))+(x10361*x10361))),-1);
if(!x10362.valid){
continue;
}
CheckValue<IkReal> x10363 = IKatan2WithCheck(IkReal(((((-1.0)*x10361))+x10360)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10362.value)))+(x10363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10364=IKsin(j4);
IkReal x10365=IKcos(j4);
IkReal x10366=(gconst4*r11);
IkReal x10367=((1.0)*cj1);
IkReal x10368=(gconst5*r00);
IkReal x10369=(gconst5*r20);
IkReal x10370=(gconst4*x10365);
IkReal x10371=((1.0)*gconst5*r10);
IkReal x10372=(gconst4*x10364);
IkReal x10373=((1.0)*x10364);
IkReal x10374=((1.0)*x10365);
evalcond[0]=(((r22*x10365))+(((-1.0)*x10369*x10373))+((r21*x10372)));
evalcond[1]=(((x10364*x10366))+(((-1.0)*x10364*x10371))+((r12*x10365)));
evalcond[2]=((-1.0)+((r01*x10372))+((r02*x10365))+(((-1.0)*x10368*x10373)));
evalcond[3]=(((r01*x10370))+(((-1.0)*r02*x10373))+(((-1.0)*x10368*x10374)));
evalcond[4]=((((-1.0)*cj2*x10367))+(((-1.0)*x10369*x10374))+((sj1*sj2))+(((-1.0)*r22*x10373))+((r21*x10370)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10365*x10366))+(((-1.0)*x10365*x10371))+(((-1.0)*r12*x10373))+(((-1.0)*sj2*x10367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10375=((1.0)*gconst4);
CheckValue<IkReal> x10376 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10375))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10376.valid){
continue;
}
CheckValue<IkReal> x10377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10375))+(((-1.0)*gconst5*r11)))),-1);
if(!x10377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10376.value)+(((1.5707963267949)*(x10377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10378=IKsin(j4);
IkReal x10379=IKcos(j4);
IkReal x10380=(gconst4*r11);
IkReal x10381=((1.0)*cj1);
IkReal x10382=(gconst5*r00);
IkReal x10383=(gconst5*r20);
IkReal x10384=(gconst4*x10379);
IkReal x10385=((1.0)*gconst5*r10);
IkReal x10386=(gconst4*x10378);
IkReal x10387=((1.0)*x10378);
IkReal x10388=((1.0)*x10379);
evalcond[0]=(((r22*x10379))+((r21*x10386))+(((-1.0)*x10383*x10387)));
evalcond[1]=(((x10378*x10380))+(((-1.0)*x10378*x10385))+((r12*x10379)));
evalcond[2]=((-1.0)+((r02*x10379))+(((-1.0)*x10382*x10387))+((r01*x10386)));
evalcond[3]=((((-1.0)*r02*x10387))+(((-1.0)*x10382*x10388))+((r01*x10384)));
evalcond[4]=(((r21*x10384))+((sj1*sj2))+(((-1.0)*cj2*x10381))+(((-1.0)*r22*x10387))+(((-1.0)*x10383*x10388)));
evalcond[5]=(((x10379*x10380))+(((-1.0)*cj2*sj1))+(((-1.0)*x10379*x10385))+(((-1.0)*r12*x10387))+(((-1.0)*sj2*x10381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10389 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10389.valid){
continue;
}
CheckValue<IkReal> x10390=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10389.value)+(((1.5707963267949)*(x10390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10391=IKsin(j4);
IkReal x10392=IKcos(j4);
IkReal x10393=(gconst4*r11);
IkReal x10394=((1.0)*cj1);
IkReal x10395=(gconst5*r00);
IkReal x10396=(gconst5*r20);
IkReal x10397=(gconst4*x10392);
IkReal x10398=((1.0)*gconst5*r10);
IkReal x10399=(gconst4*x10391);
IkReal x10400=((1.0)*x10391);
IkReal x10401=((1.0)*x10392);
evalcond[0]=(((r21*x10399))+((r22*x10392))+(((-1.0)*x10396*x10400)));
evalcond[1]=(((r12*x10392))+(((-1.0)*x10391*x10398))+((x10391*x10393)));
evalcond[2]=((-1.0)+((r01*x10399))+((r02*x10392))+(((-1.0)*x10395*x10400)));
evalcond[3]=(((r01*x10397))+(((-1.0)*x10395*x10401))+(((-1.0)*r02*x10400)));
evalcond[4]=(((r21*x10397))+((sj1*sj2))+(((-1.0)*x10396*x10401))+(((-1.0)*r22*x10400))+(((-1.0)*cj2*x10394)));
evalcond[5]=(((x10392*x10393))+(((-1.0)*cj2*sj1))+(((-1.0)*x10392*x10398))+(((-1.0)*r12*x10400))+(((-1.0)*sj2*x10394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10402=((-1.0)*r21);
CheckValue<IkReal> x10405 = IKatan2WithCheck(IkReal(x10402),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10405.valid){
continue;
}
IkReal x10403=((1.0)*(x10405.value));
IkReal x10404=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10403)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10403)));
IkReal gconst4=(x10402*x10404);
IkReal gconst5=((1.0)*r20*x10404);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10406=((-1.0)*r21);
CheckValue<IkReal> x10409 = IKatan2WithCheck(IkReal(x10406),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10409.valid){
continue;
}
IkReal x10407=((1.0)*(x10409.value));
IkReal x10408=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10407)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10407)));
IkReal gconst4=(x10406*x10408);
IkReal gconst5=((1.0)*r20*x10408);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10410=((-1.0)*r21);
CheckValue<IkReal> x10413 = IKatan2WithCheck(IkReal(x10410),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10413.valid){
continue;
}
IkReal x10411=((1.0)*(x10413.value));
IkReal x10412=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10411)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10411)));
IkReal gconst4=(x10410*x10412);
IkReal gconst5=((1.0)*r20*x10412);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10414=(gconst4*r01);
IkReal x10415=(gconst5*r00);
CheckValue<IkReal> x10416=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10414*x10415))+(x10415*x10415)+(x10414*x10414)+(r02*r02))),-1);
if(!x10416.valid){
continue;
}
CheckValue<IkReal> x10417 = IKatan2WithCheck(IkReal((x10414+(((-1.0)*x10415)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10416.value)))+(x10417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10418=IKsin(j4);
IkReal x10419=IKcos(j4);
IkReal x10420=(gconst4*r11);
IkReal x10421=(gconst5*r00);
IkReal x10422=(gconst5*r20);
IkReal x10423=(gconst4*x10419);
IkReal x10424=((1.0)*gconst5*r10);
IkReal x10425=(gconst4*x10418);
IkReal x10426=((1.0)*x10418);
IkReal x10427=((1.0)*x10419);
evalcond[0]=(((r22*x10419))+(((-1.0)*x10422*x10426))+((r21*x10425)));
evalcond[1]=((((-1.0)*x10418*x10424))+((r12*x10419))+((x10418*x10420)));
evalcond[2]=((-1.0)+((r01*x10425))+(((-1.0)*x10421*x10426))+((r02*x10419)));
evalcond[3]=(((r01*x10423))+(((-1.0)*x10421*x10427))+(((-1.0)*r02*x10426)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10422*x10427))+((cj1*sj2))+(((-1.0)*r22*x10426))+((r21*x10423)));
evalcond[5]=((((-1.0)*x10419*x10424))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10419*x10420))+(((-1.0)*r12*x10426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10428=((1.0)*gconst4);
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10428))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
CheckValue<IkReal> x10430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10428))+(((-1.0)*gconst5*r11)))),-1);
if(!x10430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10429.value)+(((1.5707963267949)*(x10430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10431=IKsin(j4);
IkReal x10432=IKcos(j4);
IkReal x10433=(gconst4*r11);
IkReal x10434=(gconst5*r00);
IkReal x10435=(gconst5*r20);
IkReal x10436=(gconst4*x10432);
IkReal x10437=((1.0)*gconst5*r10);
IkReal x10438=(gconst4*x10431);
IkReal x10439=((1.0)*x10431);
IkReal x10440=((1.0)*x10432);
evalcond[0]=(((r22*x10432))+(((-1.0)*x10435*x10439))+((r21*x10438)));
evalcond[1]=((((-1.0)*x10431*x10437))+((r12*x10432))+((x10431*x10433)));
evalcond[2]=((-1.0)+((r01*x10438))+((r02*x10432))+(((-1.0)*x10434*x10439)));
evalcond[3]=((((-1.0)*x10434*x10440))+((r01*x10436))+(((-1.0)*r02*x10439)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10439))+((r21*x10436))+(((-1.0)*x10435*x10440)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10432*x10433))+(((-1.0)*x10432*x10437))+(((-1.0)*r12*x10439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10441 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10441.valid){
continue;
}
CheckValue<IkReal> x10442=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10441.value)+(((1.5707963267949)*(x10442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10443=IKsin(j4);
IkReal x10444=IKcos(j4);
IkReal x10445=(gconst4*r11);
IkReal x10446=(gconst5*r00);
IkReal x10447=(gconst5*r20);
IkReal x10448=(gconst4*x10444);
IkReal x10449=((1.0)*gconst5*r10);
IkReal x10450=(gconst4*x10443);
IkReal x10451=((1.0)*x10443);
IkReal x10452=((1.0)*x10444);
evalcond[0]=(((r22*x10444))+(((-1.0)*x10447*x10451))+((r21*x10450)));
evalcond[1]=(((x10443*x10445))+((r12*x10444))+(((-1.0)*x10443*x10449)));
evalcond[2]=((-1.0)+((r02*x10444))+((r01*x10450))+(((-1.0)*x10446*x10451)));
evalcond[3]=((((-1.0)*r02*x10451))+((r01*x10448))+(((-1.0)*x10446*x10452)));
evalcond[4]=((((-1.0)*x10447*x10452))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10451))+((r21*x10448)));
evalcond[5]=(((x10444*x10445))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10444*x10449))+(((-1.0)*r12*x10451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10453=((-1.0)*r21);
CheckValue<IkReal> x10456 = IKatan2WithCheck(IkReal(x10453),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10456.valid){
continue;
}
IkReal x10454=((1.0)*(x10456.value));
IkReal x10455=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10454)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10454)));
IkReal gconst4=(x10453*x10455);
IkReal gconst5=((1.0)*r20*x10455);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10457=((-1.0)*r21);
CheckValue<IkReal> x10460 = IKatan2WithCheck(IkReal(x10457),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10460.valid){
continue;
}
IkReal x10458=((1.0)*(x10460.value));
IkReal x10459=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10458)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10458)));
IkReal gconst4=(x10457*x10459);
IkReal gconst5=((1.0)*r20*x10459);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10461=((-1.0)*r21);
CheckValue<IkReal> x10464 = IKatan2WithCheck(IkReal(x10461),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10464.valid){
continue;
}
IkReal x10462=((1.0)*(x10464.value));
IkReal x10463=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10462)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10462)));
IkReal gconst4=(x10461*x10463);
IkReal gconst5=((1.0)*r20*x10463);
IkReal x10465=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10469=IKPowWithIntegerCheck(x10465,-1);
if(!x10469.valid){
continue;
}
IkReal x10466=x10469.value;
IkReal x10467=((1.0)*x10466);
IkReal x10468=((((-2.0)*r00*r01*r20*r21*x10466))+(((-1.0)*x10467*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10467*(r01*r01)*(r21*r21))));
j4eval[0]=x10468;
j4eval[1]=r02;
j4eval[2]=x10465;
j4eval[3]=IKsign(x10468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10470=(gconst5*r00);
IkReal x10471=(gconst4*r01);
CheckValue<IkReal> x10472=IKPowWithIntegerCheck(IKsign(((((2.0)*x10470*x10471))+(((-1.0)*(x10470*x10470)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10471*x10471))))),-1);
if(!x10472.valid){
continue;
}
CheckValue<IkReal> x10473 = IKatan2WithCheck(IkReal(((((-1.0)*x10471))+x10470)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10472.value)))+(x10473.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10474=IKsin(j4);
IkReal x10475=IKcos(j4);
IkReal x10476=(gconst4*r11);
IkReal x10477=(gconst5*r10);
IkReal x10478=(gconst4*r01);
IkReal x10479=(gconst5*r00);
IkReal x10480=(gconst4*r21);
IkReal x10481=(gconst5*r20);
IkReal x10482=((1.0)*x10475);
IkReal x10483=((1.0)*x10474);
evalcond[0]=(((x10474*x10480))+(((-1.0)*x10481*x10483))+((r22*x10475)));
evalcond[1]=((((-1.0)*x10477*x10483))+((r12*x10475))+((x10474*x10476)));
evalcond[2]=((((-1.0)*x10478*x10482))+((x10475*x10479))+((r02*x10474)));
evalcond[3]=((-1.0)+((x10474*x10478))+(((-1.0)*x10479*x10483))+((r02*x10475)));
evalcond[4]=(((cj2*sj1))+((x10475*x10481))+((cj1*sj2))+(((-1.0)*x10480*x10482))+((r22*x10474)));
evalcond[5]=((((-1.0)*x10476*x10482))+((r12*x10474))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10475*x10477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10484=((1.0)*gconst4);
CheckValue<IkReal> x10485 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10484))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10485.valid){
continue;
}
CheckValue<IkReal> x10486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10484))+(((-1.0)*gconst5*r11)))),-1);
if(!x10486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10485.value)+(((1.5707963267949)*(x10486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10487=IKsin(j4);
IkReal x10488=IKcos(j4);
IkReal x10489=(gconst4*r11);
IkReal x10490=(gconst5*r10);
IkReal x10491=(gconst4*r01);
IkReal x10492=(gconst5*r00);
IkReal x10493=(gconst4*r21);
IkReal x10494=(gconst5*r20);
IkReal x10495=((1.0)*x10488);
IkReal x10496=((1.0)*x10487);
evalcond[0]=((((-1.0)*x10494*x10496))+((r22*x10488))+((x10487*x10493)));
evalcond[1]=(((r12*x10488))+(((-1.0)*x10490*x10496))+((x10487*x10489)));
evalcond[2]=(((r02*x10487))+(((-1.0)*x10491*x10495))+((x10488*x10492)));
evalcond[3]=((-1.0)+(((-1.0)*x10492*x10496))+((r02*x10488))+((x10487*x10491)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10493*x10495))+((r22*x10487))+((x10488*x10494)));
evalcond[5]=((((-1.0)*x10489*x10495))+((r12*x10487))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10488*x10490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10497 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10497.valid){
continue;
}
CheckValue<IkReal> x10498=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10497.value)+(((1.5707963267949)*(x10498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10499=IKsin(j4);
IkReal x10500=IKcos(j4);
IkReal x10501=(gconst4*r11);
IkReal x10502=(gconst5*r10);
IkReal x10503=(gconst4*r01);
IkReal x10504=(gconst5*r00);
IkReal x10505=(gconst4*r21);
IkReal x10506=(gconst5*r20);
IkReal x10507=((1.0)*x10500);
IkReal x10508=((1.0)*x10499);
evalcond[0]=(((x10499*x10505))+((r22*x10500))+(((-1.0)*x10506*x10508)));
evalcond[1]=((((-1.0)*x10502*x10508))+((x10499*x10501))+((r12*x10500)));
evalcond[2]=((((-1.0)*x10503*x10507))+((x10500*x10504))+((r02*x10499)));
evalcond[3]=((-1.0)+((x10499*x10503))+((r02*x10500))+(((-1.0)*x10504*x10508)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10499))+((x10500*x10506))+(((-1.0)*x10505*x10507)));
evalcond[5]=((((-1.0)*x10501*x10507))+((r12*x10499))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10500*x10502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10509=gconst4*gconst4;
IkReal x10510=gconst5*gconst5;
IkReal x10511=(gconst4*r00);
IkReal x10512=(gconst5*r01);
IkReal x10513=((1.0)*r20);
IkReal x10514=((1.0)*r22*sj3);
IkReal x10515=(r21*x10509);
CheckValue<IkReal> x10516=IKPowWithIntegerCheck(IKsign((((cj3*r00*r20*x10510))+(((-1.0)*cj3*gconst5*r21*x10511))+(((-1.0)*cj3*gconst4*x10512*x10513))+((cj3*r02*r22))+((cj3*r01*x10515)))),-1);
if(!x10516.valid){
continue;
}
CheckValue<IkReal> x10517 = IKatan2WithCheck(IkReal(((((-1.0)*x10511*x10514))+(((-1.0)*x10512*x10514)))),IkReal(((((-1.0)*r01*sj3*x10510*x10513))+(((-1.0)*gconst5*sj3*x10511*x10513))+((r00*sj3*x10515))+((gconst4*r21*sj3*x10512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10516.value)))+(x10517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10518=IKsin(j4);
IkReal x10519=IKcos(j4);
IkReal x10520=(sj1*sj2);
IkReal x10521=(gconst5*sj3);
IkReal x10522=(gconst4*r11);
IkReal x10523=((1.0)*r11);
IkReal x10524=((1.0)*r21);
IkReal x10525=((1.0)*gconst5);
IkReal x10526=((1.0)*cj1);
IkReal x10527=((1.0)*r01);
IkReal x10528=(gconst4*r01);
IkReal x10529=((1.0)*cj3);
IkReal x10530=(cj3*gconst5);
IkReal x10531=(cj2*sj1);
IkReal x10532=(gconst4*r21);
IkReal x10533=(gconst4*r10);
IkReal x10534=(gconst4*r00);
IkReal x10535=(gconst4*r20);
IkReal x10536=((1.0)*sj3);
IkReal x10537=(cj2*x10526);
IkReal x10538=(r20*x10519);
IkReal x10539=(r10*x10519);
IkReal x10540=(sj3*x10518);
IkReal x10541=(sj3*x10519);
IkReal x10542=(cj3*x10519);
evalcond[0]=(((x10518*x10532))+(((-1.0)*r20*x10518*x10525))+((r22*x10519)));
evalcond[1]=(((r12*x10519))+(((-1.0)*r10*x10518*x10525))+((x10518*x10522)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x10518*x10525))+((x10518*x10528))+((r02*x10519)));
evalcond[3]=(((r00*x10519*x10521))+(((-1.0)*x10529*x10534))+((r02*x10540))+(((-1.0)*cj3*r01*x10525))+(((-1.0)*gconst4*x10527*x10541)));
evalcond[4]=((((-1.0)*x10521*x10527))+((x10528*x10542))+(((-1.0)*r00*x10525*x10542))+(((-1.0)*x10534*x10536))+(((-1.0)*r02*x10518*x10529)));
evalcond[5]=((((-1.0)*x10524*x10530))+(((-1.0)*x10537))+((x10521*x10538))+((r22*x10540))+(((-1.0)*x10529*x10535))+(((-1.0)*gconst4*x10524*x10541))+x10520);
evalcond[6]=((((-1.0)*cj3*x10525*x10538))+(((-1.0)*x10521*x10524))+((cj1*sj2))+x10531+(((-1.0)*x10535*x10536))+((x10532*x10542))+(((-1.0)*r22*x10518*x10529)));
evalcond[7]=(((x10521*x10539))+(((-1.0)*x10519*x10522*x10536))+(((-1.0)*sj2*x10526))+(((-1.0)*x10523*x10530))+((r12*x10540))+(((-1.0)*x10529*x10533))+(((-1.0)*x10531)));
evalcond[8]=((((-1.0)*x10537))+(((-1.0)*cj3*x10525*x10539))+(((-1.0)*x10521*x10523))+x10520+(((-1.0)*r12*x10518*x10529))+((x10522*x10542))+(((-1.0)*x10533*x10536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10543=((1.0)*gconst4);
CheckValue<IkReal> x10544=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10543))+(((-1.0)*gconst5*r11)))),-1);
if(!x10544.valid){
continue;
}
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x10543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10544.value)))+(x10545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10546=IKsin(j4);
IkReal x10547=IKcos(j4);
IkReal x10548=(sj1*sj2);
IkReal x10549=(gconst5*sj3);
IkReal x10550=(gconst4*r11);
IkReal x10551=((1.0)*r11);
IkReal x10552=((1.0)*r21);
IkReal x10553=((1.0)*gconst5);
IkReal x10554=((1.0)*cj1);
IkReal x10555=((1.0)*r01);
IkReal x10556=(gconst4*r01);
IkReal x10557=((1.0)*cj3);
IkReal x10558=(cj3*gconst5);
IkReal x10559=(cj2*sj1);
IkReal x10560=(gconst4*r21);
IkReal x10561=(gconst4*r10);
IkReal x10562=(gconst4*r00);
IkReal x10563=(gconst4*r20);
IkReal x10564=((1.0)*sj3);
IkReal x10565=(cj2*x10554);
IkReal x10566=(r20*x10547);
IkReal x10567=(r10*x10547);
IkReal x10568=(sj3*x10546);
IkReal x10569=(sj3*x10547);
IkReal x10570=(cj3*x10547);
evalcond[0]=(((x10546*x10560))+((r22*x10547))+(((-1.0)*r20*x10546*x10553)));
evalcond[1]=(((x10546*x10550))+((r12*x10547))+(((-1.0)*r10*x10546*x10553)));
evalcond[2]=((-1.0)+((x10546*x10556))+((r02*x10547))+(((-1.0)*r00*x10546*x10553)));
evalcond[3]=((((-1.0)*gconst4*x10555*x10569))+(((-1.0)*cj3*r01*x10553))+(((-1.0)*x10557*x10562))+((r00*x10547*x10549))+((r02*x10568)));
evalcond[4]=(((x10556*x10570))+(((-1.0)*x10562*x10564))+(((-1.0)*r00*x10553*x10570))+(((-1.0)*r02*x10546*x10557))+(((-1.0)*x10549*x10555)));
evalcond[5]=((((-1.0)*x10557*x10563))+(((-1.0)*x10565))+((x10549*x10566))+x10548+((r22*x10568))+(((-1.0)*x10552*x10558))+(((-1.0)*gconst4*x10552*x10569)));
evalcond[6]=((((-1.0)*cj3*x10553*x10566))+(((-1.0)*x10563*x10564))+((cj1*sj2))+((x10560*x10570))+x10559+(((-1.0)*r22*x10546*x10557))+(((-1.0)*x10549*x10552)));
evalcond[7]=((((-1.0)*x10551*x10558))+(((-1.0)*sj2*x10554))+(((-1.0)*x10557*x10561))+((x10549*x10567))+(((-1.0)*x10559))+((r12*x10568))+(((-1.0)*x10547*x10550*x10564)));
evalcond[8]=((((-1.0)*r12*x10546*x10557))+(((-1.0)*x10561*x10564))+(((-1.0)*cj3*x10553*x10567))+(((-1.0)*x10565))+x10548+((x10550*x10570))+(((-1.0)*x10549*x10551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10571 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10571.valid){
continue;
}
CheckValue<IkReal> x10572=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10571.value)+(((1.5707963267949)*(x10572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10573=IKsin(j4);
IkReal x10574=IKcos(j4);
IkReal x10575=(sj1*sj2);
IkReal x10576=(gconst5*sj3);
IkReal x10577=(gconst4*r11);
IkReal x10578=((1.0)*r11);
IkReal x10579=((1.0)*r21);
IkReal x10580=((1.0)*gconst5);
IkReal x10581=((1.0)*cj1);
IkReal x10582=((1.0)*r01);
IkReal x10583=(gconst4*r01);
IkReal x10584=((1.0)*cj3);
IkReal x10585=(cj3*gconst5);
IkReal x10586=(cj2*sj1);
IkReal x10587=(gconst4*r21);
IkReal x10588=(gconst4*r10);
IkReal x10589=(gconst4*r00);
IkReal x10590=(gconst4*r20);
IkReal x10591=((1.0)*sj3);
IkReal x10592=(cj2*x10581);
IkReal x10593=(r20*x10574);
IkReal x10594=(r10*x10574);
IkReal x10595=(sj3*x10573);
IkReal x10596=(sj3*x10574);
IkReal x10597=(cj3*x10574);
evalcond[0]=(((x10573*x10587))+(((-1.0)*r20*x10573*x10580))+((r22*x10574)));
evalcond[1]=(((x10573*x10577))+(((-1.0)*r10*x10573*x10580))+((r12*x10574)));
evalcond[2]=((-1.0)+((x10573*x10583))+((r02*x10574))+(((-1.0)*r00*x10573*x10580)));
evalcond[3]=((((-1.0)*cj3*r01*x10580))+(((-1.0)*gconst4*x10582*x10596))+((r00*x10574*x10576))+(((-1.0)*x10584*x10589))+((r02*x10595)));
evalcond[4]=((((-1.0)*r02*x10573*x10584))+(((-1.0)*x10589*x10591))+(((-1.0)*r00*x10580*x10597))+((x10583*x10597))+(((-1.0)*x10576*x10582)));
evalcond[5]=((((-1.0)*x10584*x10590))+(((-1.0)*x10592))+(((-1.0)*gconst4*x10579*x10596))+((x10576*x10593))+x10575+((r22*x10595))+(((-1.0)*x10579*x10585)));
evalcond[6]=(((cj1*sj2))+(((-1.0)*cj3*x10580*x10593))+(((-1.0)*x10590*x10591))+(((-1.0)*x10576*x10579))+x10586+((x10587*x10597))+(((-1.0)*r22*x10573*x10584)));
evalcond[7]=((((-1.0)*x10578*x10585))+(((-1.0)*sj2*x10581))+((r12*x10595))+((x10576*x10594))+(((-1.0)*x10586))+(((-1.0)*x10584*x10588))+(((-1.0)*x10574*x10577*x10591)));
evalcond[8]=(((x10577*x10597))+(((-1.0)*x10592))+(((-1.0)*cj3*x10580*x10594))+(((-1.0)*x10576*x10578))+(((-1.0)*r12*x10573*x10584))+(((-1.0)*x10588*x10591))+x10575);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10598=((-1.0)*r21);
CheckValue<IkReal> x10601 = IKatan2WithCheck(IkReal(x10598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10601.valid){
continue;
}
IkReal x10599=((1.0)*(x10601.value));
IkReal x10600=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10599)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10599)));
IkReal gconst4=(x10598*x10600);
IkReal gconst5=((1.0)*r20*x10600);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10602=((-1.0)*r21);
CheckValue<IkReal> x10605 = IKatan2WithCheck(IkReal(x10602),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10605.valid){
continue;
}
IkReal x10603=((1.0)*(x10605.value));
IkReal x10604=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10603)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10603)));
IkReal gconst4=(x10602*x10604);
IkReal gconst5=((1.0)*r20*x10604);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10606=((-1.0)*r21);
CheckValue<IkReal> x10609 = IKatan2WithCheck(IkReal(x10606),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10609.valid){
continue;
}
IkReal x10607=((1.0)*(x10609.value));
IkReal x10608=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10607)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10607)));
IkReal gconst4=(x10606*x10608);
IkReal gconst5=((1.0)*r20*x10608);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10610=((-1.0)*r21);
CheckValue<IkReal> x10613 = IKatan2WithCheck(IkReal(x10610),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10613.valid){
continue;
}
IkReal x10611=((1.0)*(x10613.value));
IkReal x10612=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10611)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10611)));
IkReal gconst4=(x10610*x10612);
IkReal gconst5=((1.0)*r20*x10612);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10614=((-1.0)*r21);
CheckValue<IkReal> x10617 = IKatan2WithCheck(IkReal(x10614),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10617.valid){
continue;
}
IkReal x10615=((1.0)*(x10617.value));
IkReal x10616=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10615)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10615)));
IkReal gconst4=(x10614*x10616);
IkReal gconst5=((1.0)*r20*x10616);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10618=((-1.0)*r21);
CheckValue<IkReal> x10621 = IKatan2WithCheck(IkReal(x10618),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10621.valid){
continue;
}
IkReal x10619=((1.0)*(x10621.value));
IkReal x10620=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10619)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10619)));
IkReal gconst4=(x10618*x10620);
IkReal gconst5=((1.0)*r20*x10620);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10622=(gconst5*r00);
IkReal x10623=(gconst4*r01);
CheckValue<IkReal> x10624 = IKatan2WithCheck(IkReal(((((-1.0)*x10623))+x10622)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10624.valid){
continue;
}
CheckValue<IkReal> x10625=IKPowWithIntegerCheck(IKsign(((x10622*x10622)+(x10623*x10623)+(r02*r02)+(((-2.0)*x10622*x10623)))),-1);
if(!x10625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10624.value)+(((1.5707963267949)*(x10625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10626=IKsin(j4);
IkReal x10627=IKcos(j4);
IkReal x10628=(gconst4*r11);
IkReal x10629=(gconst5*r10);
IkReal x10630=(gconst4*r01);
IkReal x10631=(gconst5*r00);
IkReal x10632=(gconst4*r21);
IkReal x10633=(gconst5*r20);
IkReal x10634=((1.0)*x10627);
IkReal x10635=((1.0)*x10626);
evalcond[0]=(((x10626*x10632))+(((-1.0)*x10633*x10635))+((r22*x10627)));
evalcond[1]=(((x10626*x10628))+(((-1.0)*x10629*x10635))+((r12*x10627)));
evalcond[2]=(((x10627*x10631))+((r02*x10626))+(((-1.0)*x10630*x10634)));
evalcond[3]=((1.0)+((x10626*x10630))+(((-1.0)*x10631*x10635))+((r02*x10627)));
evalcond[4]=(((cj2*sj1))+((x10627*x10629))+((cj1*sj2))+(((-1.0)*x10628*x10634))+((r12*x10626)));
evalcond[5]=(((x10627*x10633))+(((-1.0)*x10632*x10634))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10636=((1.0)*gconst4);
CheckValue<IkReal> x10637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10636)))),-1);
if(!x10637.valid){
continue;
}
CheckValue<IkReal> x10638 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10637.value)))+(x10638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10639=IKsin(j4);
IkReal x10640=IKcos(j4);
IkReal x10641=(gconst4*r11);
IkReal x10642=(gconst5*r10);
IkReal x10643=(gconst4*r01);
IkReal x10644=(gconst5*r00);
IkReal x10645=(gconst4*r21);
IkReal x10646=(gconst5*r20);
IkReal x10647=((1.0)*x10640);
IkReal x10648=((1.0)*x10639);
evalcond[0]=(((x10639*x10645))+(((-1.0)*x10646*x10648))+((r22*x10640)));
evalcond[1]=(((x10639*x10641))+((r12*x10640))+(((-1.0)*x10642*x10648)));
evalcond[2]=(((x10640*x10644))+((r02*x10639))+(((-1.0)*x10643*x10647)));
evalcond[3]=((1.0)+((x10639*x10643))+((r02*x10640))+(((-1.0)*x10644*x10648)));
evalcond[4]=(((x10640*x10642))+((cj2*sj1))+(((-1.0)*x10641*x10647))+((cj1*sj2))+((r12*x10639)));
evalcond[5]=(((x10640*x10646))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10645*x10647))+((r22*x10639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10649=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10649.valid){
continue;
}
CheckValue<IkReal> x10650 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10649.value)))+(x10650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10651=IKsin(j4);
IkReal x10652=IKcos(j4);
IkReal x10653=(gconst4*r11);
IkReal x10654=(gconst5*r10);
IkReal x10655=(gconst4*r01);
IkReal x10656=(gconst5*r00);
IkReal x10657=(gconst4*r21);
IkReal x10658=(gconst5*r20);
IkReal x10659=((1.0)*x10652);
IkReal x10660=((1.0)*x10651);
evalcond[0]=((((-1.0)*x10658*x10660))+((r22*x10652))+((x10651*x10657)));
evalcond[1]=((((-1.0)*x10654*x10660))+((x10651*x10653))+((r12*x10652)));
evalcond[2]=(((r02*x10651))+(((-1.0)*x10655*x10659))+((x10652*x10656)));
evalcond[3]=((1.0)+((r02*x10652))+((x10651*x10655))+(((-1.0)*x10656*x10660)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10653*x10659))+((cj1*sj2))+((x10652*x10654))+((r12*x10651)));
evalcond[5]=((((-1.0)*x10657*x10659))+(((-1.0)*cj1*cj2))+((r22*x10651))+((sj1*sj2))+((x10652*x10658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10661=((-1.0)*r21);
CheckValue<IkReal> x10664 = IKatan2WithCheck(IkReal(x10661),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10664.valid){
continue;
}
IkReal x10662=((1.0)*(x10664.value));
IkReal x10663=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10662)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10662)));
IkReal gconst4=(x10661*x10663);
IkReal gconst5=((1.0)*r20*x10663);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10665=((-1.0)*r21);
CheckValue<IkReal> x10668 = IKatan2WithCheck(IkReal(x10665),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10668.valid){
continue;
}
IkReal x10666=((1.0)*(x10668.value));
IkReal x10667=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10666)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10666)));
IkReal gconst4=(x10665*x10667);
IkReal gconst5=((1.0)*r20*x10667);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10669=((-1.0)*r21);
CheckValue<IkReal> x10672 = IKatan2WithCheck(IkReal(x10669),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10672.valid){
continue;
}
IkReal x10670=((1.0)*(x10672.value));
IkReal x10671=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10670)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10670)));
IkReal gconst4=(x10669*x10671);
IkReal gconst5=((1.0)*r20*x10671);
IkReal x10673=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10677=IKPowWithIntegerCheck(x10673,-1);
if(!x10677.valid){
continue;
}
IkReal x10674=x10677.value;
IkReal x10675=((1.0)*x10674);
IkReal x10676=((((-2.0)*r00*r01*r20*r21*x10674))+(((-1.0)*(r02*r02)))+(((-1.0)*x10675*(r01*r01)*(r21*r21)))+(((-1.0)*x10675*(r00*r00)*(r20*r20))));
j4eval[0]=x10676;
j4eval[1]=r02;
j4eval[2]=x10673;
j4eval[3]=IKsign(x10676);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10678=(gconst4*r01);
IkReal x10679=(gconst5*r00);
CheckValue<IkReal> x10680=IKPowWithIntegerCheck(IKsign(((((2.0)*x10678*x10679))+(((-1.0)*(x10678*x10678)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10679*x10679))))),-1);
if(!x10680.valid){
continue;
}
CheckValue<IkReal> x10681 = IKatan2WithCheck(IkReal(((((-1.0)*x10679))+x10678)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10680.value)))+(x10681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10682=IKsin(j4);
IkReal x10683=IKcos(j4);
IkReal x10684=(gconst4*r11);
IkReal x10685=(gconst5*r00);
IkReal x10686=(gconst5*r20);
IkReal x10687=(gconst4*x10683);
IkReal x10688=((1.0)*gconst5*r10);
IkReal x10689=(gconst4*x10682);
IkReal x10690=((1.0)*x10682);
IkReal x10691=((1.0)*x10683);
evalcond[0]=((((-1.0)*x10686*x10690))+((r22*x10683))+((r21*x10689)));
evalcond[1]=((((-1.0)*x10682*x10688))+((r12*x10683))+((x10682*x10684)));
evalcond[2]=((1.0)+(((-1.0)*x10685*x10690))+((r01*x10689))+((r02*x10683)));
evalcond[3]=((((-1.0)*x10685*x10691))+((r01*x10687))+(((-1.0)*r02*x10690)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10683*x10688))+((cj1*sj2))+(((-1.0)*r12*x10690))+((x10683*x10684)));
evalcond[5]=((((-1.0)*x10686*x10691))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10690))+((r21*x10687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10692=((1.0)*gconst4);
CheckValue<IkReal> x10693 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x10692))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10693.valid){
continue;
}
CheckValue<IkReal> x10694=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10692))+(((-1.0)*gconst5*r21)))),-1);
if(!x10694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10693.value)+(((1.5707963267949)*(x10694.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10695=IKsin(j4);
IkReal x10696=IKcos(j4);
IkReal x10697=(gconst4*r11);
IkReal x10698=(gconst5*r00);
IkReal x10699=(gconst5*r20);
IkReal x10700=(gconst4*x10696);
IkReal x10701=((1.0)*gconst5*r10);
IkReal x10702=(gconst4*x10695);
IkReal x10703=((1.0)*x10695);
IkReal x10704=((1.0)*x10696);
evalcond[0]=(((r22*x10696))+(((-1.0)*x10699*x10703))+((r21*x10702)));
evalcond[1]=((((-1.0)*x10695*x10701))+((x10695*x10697))+((r12*x10696)));
evalcond[2]=((1.0)+((r01*x10702))+((r02*x10696))+(((-1.0)*x10698*x10703)));
evalcond[3]=(((r01*x10700))+(((-1.0)*x10698*x10704))+(((-1.0)*r02*x10703)));
evalcond[4]=((((-1.0)*r12*x10703))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10696*x10701))+((x10696*x10697)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10703))+(((-1.0)*x10699*x10704))+((r21*x10700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10705=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10705.valid){
continue;
}
CheckValue<IkReal> x10706 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10705.value)))+(x10706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10707=IKsin(j4);
IkReal x10708=IKcos(j4);
IkReal x10709=(gconst4*r11);
IkReal x10710=(gconst5*r00);
IkReal x10711=(gconst5*r20);
IkReal x10712=(gconst4*x10708);
IkReal x10713=((1.0)*gconst5*r10);
IkReal x10714=(gconst4*x10707);
IkReal x10715=((1.0)*x10707);
IkReal x10716=((1.0)*x10708);
evalcond[0]=((((-1.0)*x10711*x10715))+((r22*x10708))+((r21*x10714)));
evalcond[1]=(((r12*x10708))+((x10707*x10709))+(((-1.0)*x10707*x10713)));
evalcond[2]=((1.0)+(((-1.0)*x10710*x10715))+((r01*x10714))+((r02*x10708)));
evalcond[3]=((((-1.0)*x10710*x10716))+((r01*x10712))+(((-1.0)*r02*x10715)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10708*x10713))+((cj1*sj2))+(((-1.0)*r12*x10715))+((x10708*x10709)));
evalcond[5]=((((-1.0)*x10711*x10716))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10715))+((r21*x10712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10717=((-1.0)*r21);
CheckValue<IkReal> x10720 = IKatan2WithCheck(IkReal(x10717),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10720.valid){
continue;
}
IkReal x10718=((1.0)*(x10720.value));
IkReal x10719=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10718)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10718)));
IkReal gconst4=(x10717*x10719);
IkReal gconst5=((1.0)*r20*x10719);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10721=((-1.0)*r21);
CheckValue<IkReal> x10724 = IKatan2WithCheck(IkReal(x10721),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10724.valid){
continue;
}
IkReal x10722=((1.0)*(x10724.value));
IkReal x10723=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10722)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10722)));
IkReal gconst4=(x10721*x10723);
IkReal gconst5=((1.0)*r20*x10723);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10725=((-1.0)*r21);
CheckValue<IkReal> x10728 = IKatan2WithCheck(IkReal(x10725),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10728.valid){
continue;
}
IkReal x10726=((1.0)*(x10728.value));
IkReal x10727=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10726)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10726)));
IkReal gconst4=(x10725*x10727);
IkReal gconst5=((1.0)*r20*x10727);
IkReal x10729=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10733=IKPowWithIntegerCheck(x10729,-1);
if(!x10733.valid){
continue;
}
IkReal x10730=x10733.value;
IkReal x10731=((1.0)*x10730);
IkReal x10732=((((-2.0)*r00*r01*r20*r21*x10730))+(((-1.0)*x10731*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10731*(r00*r00)*(r20*r20))));
j4eval[0]=x10732;
j4eval[1]=r02;
j4eval[2]=x10729;
j4eval[3]=IKsign(x10732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10734=(gconst4*r01);
IkReal x10735=(gconst5*r00);
CheckValue<IkReal> x10736=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10734*x10735))+(((-1.0)*(x10735*x10735)))+(((-1.0)*(x10734*x10734))))),-1);
if(!x10736.valid){
continue;
}
CheckValue<IkReal> x10737 = IKatan2WithCheck(IkReal(((((-1.0)*x10735))+x10734)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10736.value)))+(x10737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10738=IKsin(j4);
IkReal x10739=IKcos(j4);
IkReal x10740=(gconst5*r00);
IkReal x10741=(gconst5*r20);
IkReal x10742=(gconst4*x10738);
IkReal x10743=(gconst4*x10739);
IkReal x10744=((1.0)*gconst5*r10);
IkReal x10745=((1.0)*x10738);
IkReal x10746=((1.0)*x10739);
evalcond[0]=((((-1.0)*x10741*x10745))+((r22*x10739))+((r21*x10742)));
evalcond[1]=((((-1.0)*x10738*x10744))+((r11*x10742))+((r12*x10739)));
evalcond[2]=((1.0)+((r02*x10739))+(((-1.0)*x10740*x10745))+((r01*x10742)));
evalcond[3]=((((-1.0)*r02*x10745))+(((-1.0)*x10740*x10746))+((r01*x10743)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10741*x10746))+((cj1*sj2))+(((-1.0)*r22*x10745))+((r21*x10743)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10739*x10744))+(((-1.0)*r12*x10745))+((r11*x10743))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10747=((1.0)*gconst4);
CheckValue<IkReal> x10748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10747))+(((-1.0)*gconst5*r21)))),-1);
if(!x10748.valid){
continue;
}
CheckValue<IkReal> x10749 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10748.value)))+(x10749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10750=IKsin(j4);
IkReal x10751=IKcos(j4);
IkReal x10752=(gconst5*r00);
IkReal x10753=(gconst5*r20);
IkReal x10754=(gconst4*x10750);
IkReal x10755=(gconst4*x10751);
IkReal x10756=((1.0)*gconst5*r10);
IkReal x10757=((1.0)*x10750);
IkReal x10758=((1.0)*x10751);
evalcond[0]=(((r22*x10751))+(((-1.0)*x10753*x10757))+((r21*x10754)));
evalcond[1]=((((-1.0)*x10750*x10756))+((r11*x10754))+((r12*x10751)));
evalcond[2]=((1.0)+((r02*x10751))+(((-1.0)*x10752*x10757))+((r01*x10754)));
evalcond[3]=((((-1.0)*r02*x10757))+(((-1.0)*x10752*x10758))+((r01*x10755)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10753*x10758))+(((-1.0)*r22*x10757))+((r21*x10755)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10751*x10756))+(((-1.0)*r12*x10757))+((r11*x10755))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10759=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10759.valid){
continue;
}
CheckValue<IkReal> x10760 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10759.value)))+(x10760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10761=IKsin(j4);
IkReal x10762=IKcos(j4);
IkReal x10763=(gconst5*r00);
IkReal x10764=(gconst5*r20);
IkReal x10765=(gconst4*x10761);
IkReal x10766=(gconst4*x10762);
IkReal x10767=((1.0)*gconst5*r10);
IkReal x10768=((1.0)*x10761);
IkReal x10769=((1.0)*x10762);
evalcond[0]=((((-1.0)*x10764*x10768))+((r21*x10765))+((r22*x10762)));
evalcond[1]=(((r12*x10762))+((r11*x10765))+(((-1.0)*x10761*x10767)));
evalcond[2]=((1.0)+(((-1.0)*x10763*x10768))+((r01*x10765))+((r02*x10762)));
evalcond[3]=((((-1.0)*x10763*x10769))+((r01*x10766))+(((-1.0)*r02*x10768)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10764*x10769))+(((-1.0)*r22*x10768))+((r21*x10766)));
evalcond[5]=((((-1.0)*x10762*x10767))+((r11*x10766))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x10768))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10770=((-1.0)*r21);
CheckValue<IkReal> x10773 = IKatan2WithCheck(IkReal(x10770),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10773.valid){
continue;
}
IkReal x10771=((1.0)*(x10773.value));
IkReal x10772=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10771)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10771)));
IkReal gconst4=(x10770*x10772);
IkReal gconst5=((1.0)*r20*x10772);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10774=((-1.0)*r21);
CheckValue<IkReal> x10777 = IKatan2WithCheck(IkReal(x10774),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10777.valid){
continue;
}
IkReal x10775=((1.0)*(x10777.value));
IkReal x10776=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10775)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10775)));
IkReal gconst4=(x10774*x10776);
IkReal gconst5=((1.0)*r20*x10776);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10778=((-1.0)*r21);
CheckValue<IkReal> x10781 = IKatan2WithCheck(IkReal(x10778),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10781.valid){
continue;
}
IkReal x10779=((1.0)*(x10781.value));
IkReal x10780=x9532;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10779)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10779)));
IkReal gconst4=(x10778*x10780);
IkReal gconst5=((1.0)*r20*x10780);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10782=(gconst5*r00);
IkReal x10783=(gconst4*r01);
CheckValue<IkReal> x10784=IKPowWithIntegerCheck(IKsign(((x10782*x10782)+(r02*r02)+(x10783*x10783)+(((-2.0)*x10782*x10783)))),-1);
if(!x10784.valid){
continue;
}
CheckValue<IkReal> x10785 = IKatan2WithCheck(IkReal(((((-1.0)*x10783))+x10782)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10784.value)))+(x10785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10786=IKsin(j4);
IkReal x10787=IKcos(j4);
IkReal x10788=(gconst4*r11);
IkReal x10789=(gconst5*r10);
IkReal x10790=(gconst5*r00);
IkReal x10791=(gconst5*r20);
IkReal x10792=((1.0)*x10787);
IkReal x10793=(gconst4*x10786);
IkReal x10794=((1.0)*x10786);
evalcond[0]=(((r22*x10787))+((r21*x10793))+(((-1.0)*x10791*x10794)));
evalcond[1]=(((x10786*x10788))+(((-1.0)*x10789*x10794))+((r12*x10787)));
evalcond[2]=(((r02*x10786))+((x10787*x10790))+(((-1.0)*gconst4*r01*x10792)));
evalcond[3]=((1.0)+((r02*x10787))+(((-1.0)*x10790*x10794))+((r01*x10793)));
evalcond[4]=(((cj2*sj1))+((r22*x10786))+((cj1*sj2))+((x10787*x10791))+(((-1.0)*gconst4*r21*x10792)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10787*x10789))+(((-1.0)*x10788*x10792))+((cj1*cj2))+((r12*x10786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10795=((1.0)*gconst4);
CheckValue<IkReal> x10796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10795))+(((-1.0)*gconst5*r21)))),-1);
if(!x10796.valid){
continue;
}
CheckValue<IkReal> x10797 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x10795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10796.value)))+(x10797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10798=IKsin(j4);
IkReal x10799=IKcos(j4);
IkReal x10800=(gconst4*r11);
IkReal x10801=(gconst5*r10);
IkReal x10802=(gconst5*r00);
IkReal x10803=(gconst5*r20);
IkReal x10804=((1.0)*x10799);
IkReal x10805=(gconst4*x10798);
IkReal x10806=((1.0)*x10798);
evalcond[0]=((((-1.0)*x10803*x10806))+((r21*x10805))+((r22*x10799)));
evalcond[1]=(((r12*x10799))+((x10798*x10800))+(((-1.0)*x10801*x10806)));
evalcond[2]=(((r02*x10798))+((x10799*x10802))+(((-1.0)*gconst4*r01*x10804)));
evalcond[3]=((1.0)+((r02*x10799))+((r01*x10805))+(((-1.0)*x10802*x10806)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10799*x10803))+(((-1.0)*gconst4*r21*x10804))+((r22*x10798)));
evalcond[5]=((((-1.0)*x10800*x10804))+((r12*x10798))+(((-1.0)*sj1*sj2))+((x10799*x10801))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10807=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10807.valid){
continue;
}
CheckValue<IkReal> x10808 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10807.value)))+(x10808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10809=IKsin(j4);
IkReal x10810=IKcos(j4);
IkReal x10811=(gconst4*r11);
IkReal x10812=(gconst5*r10);
IkReal x10813=(gconst5*r00);
IkReal x10814=(gconst5*r20);
IkReal x10815=((1.0)*x10810);
IkReal x10816=(gconst4*x10809);
IkReal x10817=((1.0)*x10809);
evalcond[0]=((((-1.0)*x10814*x10817))+((r22*x10810))+((r21*x10816)));
evalcond[1]=((((-1.0)*x10812*x10817))+((x10809*x10811))+((r12*x10810)));
evalcond[2]=(((x10810*x10813))+(((-1.0)*gconst4*r01*x10815))+((r02*x10809)));
evalcond[3]=((1.0)+((r02*x10810))+(((-1.0)*x10813*x10817))+((r01*x10816)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10815))+((cj1*sj2))+((x10810*x10814))+((r22*x10809)));
evalcond[5]=((((-1.0)*x10811*x10815))+(((-1.0)*sj1*sj2))+((x10810*x10812))+((r12*x10809))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10818=((-1.0)*r21);
IkReal x10819=((-1.0)*r20);
CheckValue<IkReal> x10821 = IKatan2WithCheck(IkReal(x10818),IkReal(x10819),IKFAST_ATAN2_MAGTHRESH);
if(!x10821.valid){
continue;
}
IkReal x10820=((1.0)*(x10821.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10820)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10819);
rxp0_2=(py*r00);
rxp1_0=(py*x10818);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10820)));
IkReal gconst4=x10818;
IkReal gconst5=((1.0)*r20);
IkReal x10822=((1.0)*r01*r21);
IkReal x10823=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10823))+(((-1.0)*x10822)));
j4eval[1]=(((sj3*x10823))+((sj3*x10822)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10824=((-1.0)*r21);
IkReal x10825=((-1.0)*r20);
CheckValue<IkReal> x10827 = IKatan2WithCheck(IkReal(x10824),IkReal(x10825),IKFAST_ATAN2_MAGTHRESH);
if(!x10827.valid){
continue;
}
IkReal x10826=((1.0)*(x10827.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10826)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10825);
rxp0_2=(py*r00);
rxp1_0=(py*x10824);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10826)));
IkReal gconst4=x10824;
IkReal gconst5=((1.0)*r20);
IkReal x10828=((1.0)*r01*r21);
IkReal x10829=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10829))+(((-1.0)*x10828)));
j4eval[1]=((((-1.0)*cj3*x10828))+(((-1.0)*cj3*x10829)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10830=((-1.0)*r21);
IkReal x10831=((-1.0)*r20);
CheckValue<IkReal> x10833 = IKatan2WithCheck(IkReal(x10830),IkReal(x10831),IKFAST_ATAN2_MAGTHRESH);
if(!x10833.valid){
continue;
}
IkReal x10832=((1.0)*(x10833.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10832)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10831);
rxp0_2=(py*r00);
rxp1_0=(py*x10830);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10832)));
IkReal gconst4=x10830;
IkReal gconst5=((1.0)*r20);
IkReal x10834=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r01*r21*x10834))+((r00*r20*x10834)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10835=IKPowWithIntegerCheck(r12,-1);
if(!x10835.valid){
continue;
}
CheckValue<IkReal> x10836=IKPowWithIntegerCheck(sj3,-1);
if(!x10836.valid){
continue;
}
CheckValue<IkReal> x10837=IKPowWithIntegerCheck((((gconst5*r00*sj3))+(((-1.0)*gconst4*r01*sj3))),-1);
if(!x10837.valid){
continue;
}
if( IKabs(((x10835.value)*(x10836.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10837.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10835.value)*(x10836.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x10837.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10835.value)*(x10836.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x10837.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10838=IKsin(j4);
IkReal x10839=IKcos(j4);
IkReal x10840=(cj2*sj1);
IkReal x10841=(cj1*sj2);
IkReal x10842=(gconst5*sj3);
IkReal x10843=(sj1*sj2);
IkReal x10844=((1.0)*r01);
IkReal x10845=(cj3*r21);
IkReal x10846=((1.0)*gconst5);
IkReal x10847=(cj1*cj2);
IkReal x10848=((1.0)*sj3);
IkReal x10849=(r20*x10839);
IkReal x10850=(r12*x10838);
IkReal x10851=(gconst4*x10838);
IkReal x10852=(gconst4*x10839);
IkReal x10853=((1.0)*cj3*gconst4);
IkReal x10854=(r00*x10839);
IkReal x10855=(x10840+x10841);
evalcond[0]=(r12*x10839);
evalcond[1]=(((sj3*x10850))+x10855);
evalcond[2]=(((r21*x10851))+(((-1.0)*r20*x10838*x10846)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10838*x10846))+((r01*x10851)));
evalcond[4]=((((-1.0)*x10843))+(((-1.0)*cj3*x10850))+x10847);
evalcond[5]=(((x10842*x10854))+(((-1.0)*sj3*x10844*x10852))+(((-1.0)*cj3*gconst5*x10844))+(((-1.0)*r00*x10853)));
evalcond[6]=((((-1.0)*x10842*x10844))+(((-1.0)*gconst4*r00*x10848))+(((-1.0)*cj3*x10846*x10854))+((cj3*r01*x10852)));
evalcond[7]=(((x10845*x10852))+(((-1.0)*cj3*x10846*x10849))+(((-1.0)*r21*x10842))+(((-1.0)*gconst4*r20*x10848))+x10855);
evalcond[8]=((((-1.0)*x10845*x10846))+(((-1.0)*r21*x10848*x10852))+(((-1.0)*r20*x10853))+(((-1.0)*x10847))+((x10842*x10849))+x10843);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10856=(gconst4*r01);
IkReal x10857=((1.0)*gconst5*r00);
CheckValue<IkReal> x10858=IKPowWithIntegerCheck(((((-1.0)*x10857))+x10856),-1);
if(!x10858.valid){
continue;
}
CheckValue<IkReal> x10859=IKPowWithIntegerCheck((((cj3*x10856))+(((-1.0)*cj3*x10857))),-1);
if(!x10859.valid){
continue;
}
if( IKabs(((-1.0)*(x10858.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10859.value)*((((gconst5*r01*sj3))+((gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10858.value)))+IKsqr(((x10859.value)*((((gconst5*r01*sj3))+((gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10858.value)), ((x10859.value)*((((gconst5*r01*sj3))+((gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10860=IKsin(j4);
IkReal x10861=IKcos(j4);
IkReal x10862=(cj2*sj1);
IkReal x10863=(cj1*sj2);
IkReal x10864=(gconst5*sj3);
IkReal x10865=(sj1*sj2);
IkReal x10866=((1.0)*r01);
IkReal x10867=(cj3*r21);
IkReal x10868=((1.0)*gconst5);
IkReal x10869=(cj1*cj2);
IkReal x10870=((1.0)*sj3);
IkReal x10871=(r20*x10861);
IkReal x10872=(r12*x10860);
IkReal x10873=(gconst4*x10860);
IkReal x10874=(gconst4*x10861);
IkReal x10875=((1.0)*cj3*gconst4);
IkReal x10876=(r00*x10861);
IkReal x10877=(x10862+x10863);
evalcond[0]=(r12*x10861);
evalcond[1]=(((sj3*x10872))+x10877);
evalcond[2]=(((r21*x10873))+(((-1.0)*r20*x10860*x10868)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10860*x10868))+((r01*x10873)));
evalcond[4]=((((-1.0)*cj3*x10872))+(((-1.0)*x10865))+x10869);
evalcond[5]=((((-1.0)*cj3*gconst5*x10866))+((x10864*x10876))+(((-1.0)*r00*x10875))+(((-1.0)*sj3*x10866*x10874)));
evalcond[6]=((((-1.0)*cj3*x10868*x10876))+(((-1.0)*x10864*x10866))+((cj3*r01*x10874))+(((-1.0)*gconst4*r00*x10870)));
evalcond[7]=((((-1.0)*gconst4*r20*x10870))+(((-1.0)*cj3*x10868*x10871))+((x10867*x10874))+(((-1.0)*r21*x10864))+x10877);
evalcond[8]=((((-1.0)*r21*x10870*x10874))+(((-1.0)*r20*x10875))+((x10864*x10871))+(((-1.0)*x10867*x10868))+(((-1.0)*x10869))+x10865);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10878=(gconst4*r01);
IkReal x10879=(gconst5*r00);
CheckValue<IkReal> x10880=IKPowWithIntegerCheck(((((-1.0)*x10879))+x10878),-1);
if(!x10880.valid){
continue;
}
CheckValue<IkReal> x10881=IKPowWithIntegerCheck(((((-1.0)*sj3*x10878))+((sj3*x10879))),-1);
if(!x10881.valid){
continue;
}
if( IKabs(((-1.0)*(x10880.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10881.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10880.value)))+IKsqr(((x10881.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10880.value)), ((x10881.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10882=IKsin(j4);
IkReal x10883=IKcos(j4);
IkReal x10884=(cj2*sj1);
IkReal x10885=(cj1*sj2);
IkReal x10886=(gconst5*sj3);
IkReal x10887=(sj1*sj2);
IkReal x10888=((1.0)*r01);
IkReal x10889=(cj3*r21);
IkReal x10890=((1.0)*gconst5);
IkReal x10891=(cj1*cj2);
IkReal x10892=((1.0)*sj3);
IkReal x10893=(r20*x10883);
IkReal x10894=(r12*x10882);
IkReal x10895=(gconst4*x10882);
IkReal x10896=(gconst4*x10883);
IkReal x10897=((1.0)*cj3*gconst4);
IkReal x10898=(r00*x10883);
IkReal x10899=(x10884+x10885);
evalcond[0]=(r12*x10883);
evalcond[1]=(((sj3*x10894))+x10899);
evalcond[2]=(((r21*x10895))+(((-1.0)*r20*x10882*x10890)));
evalcond[3]=((1.0)+((r01*x10895))+(((-1.0)*r00*x10882*x10890)));
evalcond[4]=((((-1.0)*cj3*x10894))+(((-1.0)*x10887))+x10891);
evalcond[5]=((((-1.0)*r00*x10897))+(((-1.0)*cj3*gconst5*x10888))+((x10886*x10898))+(((-1.0)*sj3*x10888*x10896)));
evalcond[6]=(((cj3*r01*x10896))+(((-1.0)*x10886*x10888))+(((-1.0)*gconst4*r00*x10892))+(((-1.0)*cj3*x10890*x10898)));
evalcond[7]=((((-1.0)*cj3*x10890*x10893))+(((-1.0)*r21*x10886))+(((-1.0)*gconst4*r20*x10892))+((x10889*x10896))+x10899);
evalcond[8]=((((-1.0)*x10891))+(((-1.0)*x10889*x10890))+(((-1.0)*r21*x10892*x10896))+((x10886*x10893))+(((-1.0)*r20*x10897))+x10887);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10900=gconst4*gconst4;
IkReal x10901=gconst5*gconst5;
IkReal x10902=(gconst4*r00);
IkReal x10903=(gconst5*r01);
IkReal x10904=((1.0)*r20);
IkReal x10905=((1.0)*r22*sj3);
IkReal x10906=(r21*x10900);
CheckValue<IkReal> x10907 = IKatan2WithCheck(IkReal(((((-1.0)*x10902*x10905))+(((-1.0)*x10903*x10905)))),IkReal(((((-1.0)*r01*sj3*x10901*x10904))+(((-1.0)*gconst5*sj3*x10902*x10904))+((gconst4*r21*sj3*x10903))+((r00*sj3*x10906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10907.valid){
continue;
}
CheckValue<IkReal> x10908=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*gconst5*r21*x10902))+(((-1.0)*cj3*gconst4*x10903*x10904))+((cj3*r02*r22))+((cj3*r01*x10906))+((cj3*r00*r20*x10901)))),-1);
if(!x10908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10907.value)+(((1.5707963267949)*(x10908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10909=IKsin(j4);
IkReal x10910=IKcos(j4);
IkReal x10911=(cj2*sj1);
IkReal x10912=(cj1*sj2);
IkReal x10913=(gconst5*sj3);
IkReal x10914=(gconst4*r11);
IkReal x10915=((1.0)*r11);
IkReal x10916=(sj1*sj2);
IkReal x10917=((1.0)*gconst5);
IkReal x10918=(cj1*cj2);
IkReal x10919=(gconst4*r01);
IkReal x10920=((1.0)*cj3);
IkReal x10921=(cj3*r21);
IkReal x10922=(gconst4*r10);
IkReal x10923=(gconst4*r00);
IkReal x10924=(gconst4*r20);
IkReal x10925=(gconst4*r21);
IkReal x10926=((1.0)*sj3);
IkReal x10927=(r20*x10910);
IkReal x10928=(r10*x10910);
IkReal x10929=(sj3*x10909);
IkReal x10930=(cj3*x10910);
IkReal x10931=(x10911+x10912);
IkReal x10932=(x10910*x10926);
evalcond[0]=(((x10909*x10925))+((r22*x10910))+(((-1.0)*r20*x10909*x10917)));
evalcond[1]=(((x10909*x10914))+(((-1.0)*r10*x10909*x10917))+((r12*x10910)));
evalcond[2]=((1.0)+((x10909*x10919))+(((-1.0)*r00*x10909*x10917))+((r02*x10910)));
evalcond[3]=((((-1.0)*x10920*x10923))+((r00*x10910*x10913))+((r02*x10929))+(((-1.0)*x10919*x10932))+(((-1.0)*cj3*r01*x10917)));
evalcond[4]=((((-1.0)*r01*x10913))+(((-1.0)*r02*x10909*x10920))+(((-1.0)*r00*x10917*x10930))+((x10919*x10930))+(((-1.0)*x10923*x10926)));
evalcond[5]=((((-1.0)*x10920*x10922))+((x10913*x10928))+(((-1.0)*x10914*x10932))+((r12*x10929))+(((-1.0)*cj3*gconst5*x10915))+x10931);
evalcond[6]=((((-1.0)*x10925*x10932))+(((-1.0)*x10920*x10924))+((x10913*x10927))+(((-1.0)*x10917*x10921))+((r22*x10929))+x10916+(((-1.0)*x10918)));
evalcond[7]=((((-1.0)*r22*x10909*x10920))+((gconst4*x10910*x10921))+(((-1.0)*x10924*x10926))+(((-1.0)*cj3*x10917*x10927))+(((-1.0)*r21*x10913))+x10931);
evalcond[8]=((((-1.0)*r12*x10909*x10920))+((x10914*x10930))+(((-1.0)*cj3*x10917*x10928))+x10918+(((-1.0)*x10916))+(((-1.0)*x10922*x10926))+(((-1.0)*x10913*x10915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10933=((1.0)*gconst4);
CheckValue<IkReal> x10934 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x10933))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10934.valid){
continue;
}
CheckValue<IkReal> x10935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10933))+(((-1.0)*gconst5*r21)))),-1);
if(!x10935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10934.value)+(((1.5707963267949)*(x10935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10936=IKsin(j4);
IkReal x10937=IKcos(j4);
IkReal x10938=(cj2*sj1);
IkReal x10939=(cj1*sj2);
IkReal x10940=(gconst5*sj3);
IkReal x10941=(gconst4*r11);
IkReal x10942=((1.0)*r11);
IkReal x10943=(sj1*sj2);
IkReal x10944=((1.0)*gconst5);
IkReal x10945=(cj1*cj2);
IkReal x10946=(gconst4*r01);
IkReal x10947=((1.0)*cj3);
IkReal x10948=(cj3*r21);
IkReal x10949=(gconst4*r10);
IkReal x10950=(gconst4*r00);
IkReal x10951=(gconst4*r20);
IkReal x10952=(gconst4*r21);
IkReal x10953=((1.0)*sj3);
IkReal x10954=(r20*x10937);
IkReal x10955=(r10*x10937);
IkReal x10956=(sj3*x10936);
IkReal x10957=(cj3*x10937);
IkReal x10958=(x10938+x10939);
IkReal x10959=(x10937*x10953);
evalcond[0]=(((x10936*x10952))+(((-1.0)*r20*x10936*x10944))+((r22*x10937)));
evalcond[1]=(((x10936*x10941))+(((-1.0)*r10*x10936*x10944))+((r12*x10937)));
evalcond[2]=((1.0)+((r02*x10937))+((x10936*x10946))+(((-1.0)*r00*x10936*x10944)));
evalcond[3]=((((-1.0)*x10947*x10950))+(((-1.0)*x10946*x10959))+((r02*x10956))+(((-1.0)*cj3*r01*x10944))+((r00*x10937*x10940)));
evalcond[4]=((((-1.0)*r00*x10944*x10957))+(((-1.0)*r02*x10936*x10947))+(((-1.0)*x10950*x10953))+((x10946*x10957))+(((-1.0)*r01*x10940)));
evalcond[5]=((((-1.0)*x10941*x10959))+(((-1.0)*cj3*gconst5*x10942))+((x10940*x10955))+(((-1.0)*x10947*x10949))+((r12*x10956))+x10958);
evalcond[6]=((((-1.0)*x10947*x10951))+((r22*x10956))+((x10940*x10954))+(((-1.0)*x10945))+(((-1.0)*x10952*x10959))+x10943+(((-1.0)*x10944*x10948)));
evalcond[7]=(((gconst4*x10937*x10948))+(((-1.0)*r21*x10940))+(((-1.0)*x10951*x10953))+(((-1.0)*cj3*x10944*x10954))+x10958+(((-1.0)*r22*x10936*x10947)));
evalcond[8]=((((-1.0)*r12*x10936*x10947))+(((-1.0)*x10949*x10953))+(((-1.0)*x10943))+(((-1.0)*cj3*x10944*x10955))+(((-1.0)*x10940*x10942))+((x10941*x10957))+x10945);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10960=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10960.valid){
continue;
}
CheckValue<IkReal> x10961 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10960.value)))+(x10961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10962=IKsin(j4);
IkReal x10963=IKcos(j4);
IkReal x10964=(cj2*sj1);
IkReal x10965=(cj1*sj2);
IkReal x10966=(gconst5*sj3);
IkReal x10967=(gconst4*r11);
IkReal x10968=((1.0)*r11);
IkReal x10969=(sj1*sj2);
IkReal x10970=((1.0)*gconst5);
IkReal x10971=(cj1*cj2);
IkReal x10972=(gconst4*r01);
IkReal x10973=((1.0)*cj3);
IkReal x10974=(cj3*r21);
IkReal x10975=(gconst4*r10);
IkReal x10976=(gconst4*r00);
IkReal x10977=(gconst4*r20);
IkReal x10978=(gconst4*r21);
IkReal x10979=((1.0)*sj3);
IkReal x10980=(r20*x10963);
IkReal x10981=(r10*x10963);
IkReal x10982=(sj3*x10962);
IkReal x10983=(cj3*x10963);
IkReal x10984=(x10965+x10964);
IkReal x10985=(x10963*x10979);
evalcond[0]=(((r22*x10963))+(((-1.0)*r20*x10962*x10970))+((x10962*x10978)));
evalcond[1]=(((x10962*x10967))+(((-1.0)*r10*x10962*x10970))+((r12*x10963)));
evalcond[2]=((1.0)+((r02*x10963))+((x10962*x10972))+(((-1.0)*r00*x10962*x10970)));
evalcond[3]=((((-1.0)*x10973*x10976))+((r00*x10963*x10966))+(((-1.0)*cj3*r01*x10970))+((r02*x10982))+(((-1.0)*x10972*x10985)));
evalcond[4]=((((-1.0)*r01*x10966))+(((-1.0)*x10976*x10979))+((x10972*x10983))+(((-1.0)*r00*x10970*x10983))+(((-1.0)*r02*x10962*x10973)));
evalcond[5]=((((-1.0)*x10973*x10975))+((r12*x10982))+(((-1.0)*x10967*x10985))+(((-1.0)*cj3*gconst5*x10968))+((x10966*x10981))+x10984);
evalcond[6]=(((r22*x10982))+(((-1.0)*x10973*x10977))+(((-1.0)*x10970*x10974))+((x10966*x10980))+(((-1.0)*x10978*x10985))+(((-1.0)*x10971))+x10969);
evalcond[7]=((((-1.0)*r22*x10962*x10973))+((gconst4*x10963*x10974))+(((-1.0)*r21*x10966))+(((-1.0)*cj3*x10970*x10980))+(((-1.0)*x10977*x10979))+x10984);
evalcond[8]=((((-1.0)*r12*x10962*x10973))+((x10967*x10983))+(((-1.0)*x10969))+(((-1.0)*cj3*x10970*x10981))+(((-1.0)*x10966*x10968))+(((-1.0)*x10975*x10979))+x10971);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10986=((-1.0)*r21);
IkReal x10987=((-1.0)*px);
CheckValue<IkReal> x10989 = IKatan2WithCheck(IkReal(x10986),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10989.valid){
continue;
}
IkReal x10988=((1.0)*(x10989.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10988)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10987);
rxp1_1=(px*r21);
rxp1_2=(r11*x10987);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10988)));
IkReal gconst4=x10986;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10990=((-1.0)*r21);
IkReal x10991=((-1.0)*px);
CheckValue<IkReal> x10993 = IKatan2WithCheck(IkReal(x10990),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10993.valid){
continue;
}
IkReal x10992=((1.0)*(x10993.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10992)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10991);
rxp1_1=(px*r21);
rxp1_2=(r11*x10991);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10992)));
IkReal gconst4=x10990;
IkReal gconst5=((1.0)*r20);
IkReal x10994=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x10994*(r10*r10)))+(((-1.0)*x10994*(r21*r21)))+(((-1.0)*x10994)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10995=((-1.0)*r21);
IkReal x10996=((-1.0)*px);
CheckValue<IkReal> x10998 = IKatan2WithCheck(IkReal(x10995),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10998.valid){
continue;
}
IkReal x10997=((1.0)*(x10998.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10997)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10996);
rxp1_1=(px*r21);
rxp1_2=(r11*x10996);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10997)));
IkReal gconst4=x10995;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10999=((-1.0)*r21);
IkReal x11000=((-1.0)*px);
CheckValue<IkReal> x11002 = IKatan2WithCheck(IkReal(x10999),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11002.valid){
continue;
}
IkReal x11001=((1.0)*(x11002.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11001)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11000);
rxp1_1=(px*r21);
rxp1_2=(r11*x11000);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11001)));
IkReal gconst4=x10999;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11003=((-1.0)*r21);
IkReal x11004=((-1.0)*px);
CheckValue<IkReal> x11006 = IKatan2WithCheck(IkReal(x11003),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11006.valid){
continue;
}
IkReal x11005=((1.0)*(x11006.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11005)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11004);
rxp1_1=(px*r21);
rxp1_2=(r11*x11004);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11005)));
IkReal gconst4=x11003;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11007=((-1.0)*r21);
IkReal x11008=((-1.0)*px);
CheckValue<IkReal> x11010 = IKatan2WithCheck(IkReal(x11007),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11010.valid){
continue;
}
IkReal x11009=((1.0)*(x11010.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11009)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11008);
rxp1_1=(px*r21);
rxp1_2=(r11*x11008);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11009)));
IkReal gconst4=x11007;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11013=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11013.valid){
continue;
}
IkReal x11011=x11013.value;
IkReal x11012=(sj0*x11011);
cj4array[0]=((((-1.0)*sj1*sj2*x11012))+((cj1*cj2*x11012)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11014=IKsin(j4);
IkReal x11015=IKcos(j4);
IkReal x11016=((1.0)*gconst5);
IkReal x11017=(gconst4*x11014);
evalcond[0]=((-1.0)*r02*x11014);
evalcond[1]=((((-1.0)*sj0))+((r02*x11015)));
evalcond[2]=(((r21*x11017))+(((-1.0)*r20*x11014*x11016)));
evalcond[3]=((((-1.0)*r10*x11014*x11016))+((r11*x11017)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((gconst4*r21*x11015))+(((-1.0)*r20*x11015*x11016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11020=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11020.valid){
continue;
}
IkReal x11018=x11020.value;
IkReal x11019=((1.0)*x11018);
cj4array[0]=((((-1.0)*cj2*sj1*x11019))+(((-1.0)*cj1*sj2*x11019)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11021=IKsin(j4);
IkReal x11022=IKcos(j4);
IkReal x11023=(gconst4*r11);
IkReal x11024=((1.0)*sj0);
IkReal x11025=((1.0)*gconst5*r10);
evalcond[0]=((-1.0)*r02*x11021);
evalcond[1]=(((r02*x11022))+(((-1.0)*x11024)));
evalcond[2]=((((-1.0)*gconst5*r20*x11021))+((gconst4*r21*x11021)));
evalcond[3]=(((x11021*x11023))+(((-1.0)*x11021*x11025)));
evalcond[4]=(((x11022*x11023))+(((-1.0)*cj1*cj2*x11024))+(((-1.0)*x11022*x11025))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11026=IKPowWithIntegerCheck(r02,-1);
if(!x11026.valid){
continue;
}
cj4array[0]=(sj0*(x11026.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11027=IKsin(j4);
IkReal x11028=IKcos(j4);
IkReal x11029=(gconst4*r11);
IkReal x11030=(gconst4*r21);
IkReal x11031=((1.0)*gconst5*x11028);
IkReal x11032=((1.0)*gconst5*x11027);
evalcond[0]=((-1.0)*r02*x11027);
evalcond[1]=((((-1.0)*r20*x11032))+((x11027*x11030)));
evalcond[2]=((((-1.0)*r10*x11032))+((x11027*x11029)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x11031))+((cj1*sj2))+((x11028*x11030)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x11031))+((sj0*sj1*sj2))+((x11028*x11029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11033=((-1.0)*r21);
IkReal x11034=((-1.0)*px);
CheckValue<IkReal> x11036 = IKatan2WithCheck(IkReal(x11033),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11036.valid){
continue;
}
IkReal x11035=((1.0)*(x11036.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11035)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11034);
rxp1_1=(px*r21);
rxp1_2=(r11*x11034);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11035)));
IkReal gconst4=x11033;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11037=((-1.0)*r21);
IkReal x11038=((-1.0)*px);
CheckValue<IkReal> x11040 = IKatan2WithCheck(IkReal(x11037),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11040.valid){
continue;
}
IkReal x11039=((1.0)*(x11040.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11039)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11038);
rxp1_1=(px*r21);
rxp1_2=(r11*x11038);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11039)));
IkReal gconst4=x11037;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11041=((-1.0)*r21);
IkReal x11042=((-1.0)*px);
CheckValue<IkReal> x11044 = IKatan2WithCheck(IkReal(x11041),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11044.valid){
continue;
}
IkReal x11043=((1.0)*(x11044.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11043)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11042);
rxp1_1=(px*r21);
rxp1_2=(r11*x11042);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11043)));
IkReal gconst4=x11041;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11047=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11047.valid){
continue;
}
IkReal x11045=x11047.value;
IkReal x11046=(sj0*x11045);
cj4array[0]=(((cj1*cj2*x11046))+(((-1.0)*sj1*sj2*x11046)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11048=IKsin(j4);
IkReal x11049=IKcos(j4);
IkReal x11050=(gconst5*r20);
IkReal x11051=(gconst4*x11048);
IkReal x11052=((1.0)*x11048);
evalcond[0]=(r02*x11048);
evalcond[1]=((((-1.0)*sj0))+((r02*x11049)));
evalcond[2]=((((-1.0)*x11050*x11052))+((r21*x11051)));
evalcond[3]=((((-1.0)*gconst5*r10*x11052))+((r11*x11051)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11049))+((x11049*x11050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11055=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11055.valid){
continue;
}
IkReal x11053=x11055.value;
IkReal x11054=((1.0)*x11053);
cj4array[0]=((((-1.0)*cj2*sj1*x11054))+(((-1.0)*cj1*sj2*x11054)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11056=IKsin(j4);
IkReal x11057=IKcos(j4);
IkReal x11058=(gconst5*r10);
IkReal x11059=((1.0)*sj0);
IkReal x11060=(gconst4*x11056);
IkReal x11061=((1.0)*x11056);
evalcond[0]=(r02*x11056);
evalcond[1]=(((r02*x11057))+(((-1.0)*x11059)));
evalcond[2]=(((r21*x11060))+(((-1.0)*gconst5*r20*x11061)));
evalcond[3]=((((-1.0)*x11058*x11061))+((r11*x11060)));
evalcond[4]=((((-1.0)*cj1*cj2*x11059))+((sj0*sj1*sj2))+((x11057*x11058))+(((-1.0)*gconst4*r11*x11057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11062=IKPowWithIntegerCheck(r02,-1);
if(!x11062.valid){
continue;
}
cj4array[0]=(sj0*(x11062.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11063=IKsin(j4);
IkReal x11064=IKcos(j4);
IkReal x11065=(gconst5*x11064);
IkReal x11066=(gconst4*x11063);
IkReal x11067=((1.0)*gconst4*x11064);
IkReal x11068=((1.0)*gconst5*x11063);
evalcond[0]=(r02*x11063);
evalcond[1]=(((r21*x11066))+(((-1.0)*r20*x11068)));
evalcond[2]=((((-1.0)*r10*x11068))+((r11*x11066)));
evalcond[3]=(((cj2*sj1))+((r20*x11065))+((cj1*sj2))+(((-1.0)*r21*x11067)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x11065))+(((-1.0)*r11*x11067))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11069=((-1.0)*r21);
IkReal x11070=((-1.0)*px);
CheckValue<IkReal> x11072 = IKatan2WithCheck(IkReal(x11069),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11072.valid){
continue;
}
IkReal x11071=((1.0)*(x11072.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11071)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11070);
rxp1_1=(px*r21);
rxp1_2=(r11*x11070);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11071)));
IkReal gconst4=x11069;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11073=((-1.0)*r21);
IkReal x11074=((-1.0)*px);
CheckValue<IkReal> x11076 = IKatan2WithCheck(IkReal(x11073),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11076.valid){
continue;
}
IkReal x11075=((1.0)*(x11076.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11075)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11074);
rxp1_1=(px*r21);
rxp1_2=(r11*x11074);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11075)));
IkReal gconst4=x11073;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11077=((-1.0)*r21);
IkReal x11078=((-1.0)*px);
CheckValue<IkReal> x11080 = IKatan2WithCheck(IkReal(x11077),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11080.valid){
continue;
}
IkReal x11079=((1.0)*(x11080.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11079)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11078);
rxp1_1=(px*r21);
rxp1_2=(r11*x11078);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11079)));
IkReal gconst4=x11077;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11083=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11083.valid){
continue;
}
IkReal x11081=x11083.value;
IkReal x11082=(sj0*x11081);
cj4array[0]=(((cj2*sj1*x11082))+((cj1*sj2*x11082)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11084=IKsin(j4);
IkReal x11085=IKcos(j4);
IkReal x11086=(gconst5*r20);
IkReal x11087=(gconst4*x11084);
IkReal x11088=((1.0)*x11084);
evalcond[0]=(r02*x11084);
evalcond[1]=((((-1.0)*sj0))+((r02*x11085)));
evalcond[2]=(((r21*x11087))+(((-1.0)*x11086*x11088)));
evalcond[3]=((((-1.0)*gconst5*r10*x11088))+((r11*x11087)));
evalcond[4]=(((x11085*x11086))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11090=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11090.valid){
continue;
}
IkReal x11089=x11090.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11089))+((cj1*cj2*x11089)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11091=IKsin(j4);
IkReal x11092=IKcos(j4);
IkReal x11093=(gconst5*r10);
IkReal x11094=((1.0)*sj0);
IkReal x11095=(gconst4*x11091);
IkReal x11096=((1.0)*x11091);
evalcond[0]=(r02*x11091);
evalcond[1]=(((r02*x11092))+(((-1.0)*x11094)));
evalcond[2]=((((-1.0)*gconst5*r20*x11096))+((r21*x11095)));
evalcond[3]=(((r11*x11095))+(((-1.0)*x11093*x11096)));
evalcond[4]=((((-1.0)*gconst4*r11*x11092))+(((-1.0)*cj1*sj2*x11094))+((x11092*x11093))+(((-1.0)*cj2*sj1*x11094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11097=IKPowWithIntegerCheck(r02,-1);
if(!x11097.valid){
continue;
}
cj4array[0]=(sj0*(x11097.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11098=IKsin(j4);
IkReal x11099=IKcos(j4);
IkReal x11100=((1.0)*cj1);
IkReal x11101=(gconst5*x11099);
IkReal x11102=(gconst4*x11098);
IkReal x11103=((1.0)*gconst4*x11099);
IkReal x11104=((1.0)*gconst5*x11098);
evalcond[0]=(r02*x11098);
evalcond[1]=(((r21*x11102))+(((-1.0)*r20*x11104)));
evalcond[2]=((((-1.0)*r10*x11104))+((r11*x11102)));
evalcond[3]=((((-1.0)*r21*x11103))+(((-1.0)*cj2*x11100))+((sj1*sj2))+((r20*x11101)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((r10*x11101))+(((-1.0)*r11*x11103))+(((-1.0)*sj0*sj2*x11100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11105=((-1.0)*r21);
IkReal x11106=((-1.0)*px);
CheckValue<IkReal> x11108 = IKatan2WithCheck(IkReal(x11105),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11108.valid){
continue;
}
IkReal x11107=((1.0)*(x11108.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11107)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11106);
rxp1_1=(px*r21);
rxp1_2=(r11*x11106);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11107)));
IkReal gconst4=x11105;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11109=((-1.0)*r21);
IkReal x11110=((-1.0)*px);
CheckValue<IkReal> x11112 = IKatan2WithCheck(IkReal(x11109),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11112.valid){
continue;
}
IkReal x11111=((1.0)*(x11112.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11111)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11110);
rxp1_1=(px*r21);
rxp1_2=(r11*x11110);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11111)));
IkReal gconst4=x11109;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11113=((-1.0)*r21);
IkReal x11114=((-1.0)*px);
CheckValue<IkReal> x11116 = IKatan2WithCheck(IkReal(x11113),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11116.valid){
continue;
}
IkReal x11115=((1.0)*(x11116.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11115)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11114);
rxp1_1=(px*r21);
rxp1_2=(r11*x11114);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11115)));
IkReal gconst4=x11113;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11119=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11119.valid){
continue;
}
IkReal x11117=x11119.value;
IkReal x11118=(sj0*x11117);
cj4array[0]=(((cj1*sj2*x11118))+((cj2*sj1*x11118)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11120=IKsin(j4);
IkReal x11121=IKcos(j4);
IkReal x11122=((1.0)*gconst5);
IkReal x11123=(gconst4*x11120);
evalcond[0]=((-1.0)*r02*x11120);
evalcond[1]=((((-1.0)*sj0))+((r02*x11121)));
evalcond[2]=((((-1.0)*r20*x11120*x11122))+((r21*x11123)));
evalcond[3]=(((r11*x11123))+(((-1.0)*r10*x11120*x11122)));
evalcond[4]=((((-1.0)*r20*x11121*x11122))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x11121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11125=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11125.valid){
continue;
}
IkReal x11124=x11125.value;
cj4array[0]=(((cj1*cj2*x11124))+(((-1.0)*sj1*sj2*x11124)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11126=IKsin(j4);
IkReal x11127=IKcos(j4);
IkReal x11128=(gconst4*r11);
IkReal x11129=((1.0)*sj0);
IkReal x11130=((1.0)*gconst5*r10);
evalcond[0]=((-1.0)*r02*x11126);
evalcond[1]=((((-1.0)*x11129))+((r02*x11127)));
evalcond[2]=((((-1.0)*gconst5*r20*x11126))+((gconst4*r21*x11126)));
evalcond[3]=((((-1.0)*x11126*x11130))+((x11126*x11128)));
evalcond[4]=(((x11127*x11128))+(((-1.0)*cj1*sj2*x11129))+(((-1.0)*x11127*x11130))+(((-1.0)*cj2*sj1*x11129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11131=IKPowWithIntegerCheck(r02,-1);
if(!x11131.valid){
continue;
}
cj4array[0]=(sj0*(x11131.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11132=IKsin(j4);
IkReal x11133=IKcos(j4);
IkReal x11134=(gconst4*r11);
IkReal x11135=((1.0)*sj0);
IkReal x11136=(gconst4*r21);
IkReal x11137=((1.0)*gconst5*x11133);
IkReal x11138=((1.0)*gconst5*x11132);
evalcond[0]=((-1.0)*r02*x11132);
evalcond[1]=((((-1.0)*r20*x11138))+((x11132*x11136)));
evalcond[2]=((((-1.0)*r10*x11138))+((x11132*x11134)));
evalcond[3]=((((-1.0)*r20*x11137))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11133*x11136)));
evalcond[4]=((((-1.0)*r10*x11137))+(((-1.0)*cj1*sj2*x11135))+(((-1.0)*cj2*sj1*x11135))+((x11133*x11134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11140=IKPowWithIntegerCheck(r02,-1);
if(!x11140.valid){
continue;
}
IkReal x11139=x11140.value;
CheckValue<IkReal> x11141=IKPowWithIntegerCheck(sj3,-1);
if(!x11141.valid){
continue;
}
if( IKabs((x11139*(x11141.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x11139)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11139*(x11141.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x11139))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11139*(x11141.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x11139));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11142=IKsin(j4);
IkReal x11143=IKcos(j4);
IkReal x11144=(gconst5*sj3);
IkReal x11145=(gconst4*r11);
IkReal x11146=((1.0)*r11);
IkReal x11147=(sj1*sj2);
IkReal x11148=((1.0)*gconst5);
IkReal x11149=(cj3*gconst4);
IkReal x11150=((1.0)*r20);
IkReal x11151=((1.0)*r10);
IkReal x11152=((1.0)*sj0);
IkReal x11153=(gconst4*r21);
IkReal x11154=(gconst4*sj3);
IkReal x11155=(cj1*sj2);
IkReal x11156=(r20*x11143);
IkReal x11157=((1.0)*cj1*cj2);
IkReal x11158=(r10*x11143);
IkReal x11159=((1.0)*cj2*sj1);
IkReal x11160=(r02*x11142);
IkReal x11161=((1.0)*sj3*x11143);
evalcond[0]=(((r02*x11143))+(((-1.0)*x11152)));
evalcond[1]=((((-1.0)*r20*x11142*x11148))+((x11142*x11153)));
evalcond[2]=(cj0+(((-1.0)*r10*x11142*x11148))+((x11142*x11145)));
evalcond[3]=((((-1.0)*cj0*x11155))+((sj3*x11160))+(((-1.0)*cj0*x11159)));
evalcond[4]=(((cj0*x11147))+(((-1.0)*cj3*x11160))+(((-1.0)*cj0*x11157)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r21*x11144))+((r21*x11143*x11149))+(((-1.0)*x11150*x11154))+(((-1.0)*cj3*x11148*x11156))+x11155);
evalcond[6]=(x11147+(((-1.0)*x11149*x11150))+((x11144*x11156))+(((-1.0)*x11153*x11161))+(((-1.0)*x11157))+(((-1.0)*cj3*r21*x11148)));
evalcond[7]=(((cj3*x11143*x11145))+((sj0*x11147))+(((-1.0)*cj1*cj2*x11152))+(((-1.0)*cj3*x11148*x11158))+(((-1.0)*x11151*x11154))+(((-1.0)*x11144*x11146)));
evalcond[8]=((((-1.0)*cj3*gconst5*x11146))+(((-1.0)*x11149*x11151))+(((-1.0)*cj2*sj1*x11152))+(((-1.0)*x11145*x11161))+((x11144*x11158))+(((-1.0)*x11152*x11155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11162=((1.0)*gconst5);
CheckValue<IkReal> x11163=IKPowWithIntegerCheck(((((-1.0)*r10*x11162))+((gconst4*r11))),-1);
if(!x11163.valid){
continue;
}
CheckValue<IkReal> x11164=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11162))),-1);
if(!x11164.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11163.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11164.value)*((((gconst5*r21*sj3))+((gconst4*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11163.value)))+IKsqr(((x11164.value)*((((gconst5*r21*sj3))+((gconst4*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11163.value)), ((x11164.value)*((((gconst5*r21*sj3))+((gconst4*r20*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11165=IKsin(j4);
IkReal x11166=IKcos(j4);
IkReal x11167=(gconst5*sj3);
IkReal x11168=(gconst4*r11);
IkReal x11169=((1.0)*r11);
IkReal x11170=(sj1*sj2);
IkReal x11171=((1.0)*gconst5);
IkReal x11172=(cj3*gconst4);
IkReal x11173=((1.0)*r20);
IkReal x11174=((1.0)*r10);
IkReal x11175=((1.0)*sj0);
IkReal x11176=(gconst4*r21);
IkReal x11177=(gconst4*sj3);
IkReal x11178=(cj1*sj2);
IkReal x11179=(r20*x11166);
IkReal x11180=((1.0)*cj1*cj2);
IkReal x11181=(r10*x11166);
IkReal x11182=((1.0)*cj2*sj1);
IkReal x11183=(r02*x11165);
IkReal x11184=((1.0)*sj3*x11166);
evalcond[0]=((((-1.0)*x11175))+((r02*x11166)));
evalcond[1]=((((-1.0)*r20*x11165*x11171))+((x11165*x11176)));
evalcond[2]=(cj0+(((-1.0)*r10*x11165*x11171))+((x11165*x11168)));
evalcond[3]=(((sj3*x11183))+(((-1.0)*cj0*x11182))+(((-1.0)*cj0*x11178)));
evalcond[4]=((((-1.0)*cj0*x11180))+(((-1.0)*cj3*x11183))+((cj0*x11170)));
evalcond[5]=(((cj2*sj1))+((r21*x11166*x11172))+(((-1.0)*cj3*x11171*x11179))+x11178+(((-1.0)*r21*x11167))+(((-1.0)*x11173*x11177)));
evalcond[6]=((((-1.0)*x11180))+(((-1.0)*x11172*x11173))+((x11167*x11179))+x11170+(((-1.0)*cj3*r21*x11171))+(((-1.0)*x11176*x11184)));
evalcond[7]=((((-1.0)*x11174*x11177))+(((-1.0)*x11167*x11169))+(((-1.0)*cj1*cj2*x11175))+((cj3*x11166*x11168))+((sj0*x11170))+(((-1.0)*cj3*x11171*x11181)));
evalcond[8]=((((-1.0)*x11175*x11178))+(((-1.0)*cj3*gconst5*x11169))+(((-1.0)*cj2*sj1*x11175))+(((-1.0)*x11172*x11174))+((x11167*x11181))+(((-1.0)*x11168*x11184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11185=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11185.valid){
continue;
}
CheckValue<IkReal> x11186=IKPowWithIntegerCheck(r02,-1);
if(!x11186.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11185.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x11186.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11185.value)))+IKsqr((sj0*(x11186.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11185.value)), (sj0*(x11186.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11187=IKsin(j4);
IkReal x11188=IKcos(j4);
IkReal x11189=(gconst5*sj3);
IkReal x11190=(gconst4*r11);
IkReal x11191=((1.0)*r11);
IkReal x11192=(sj1*sj2);
IkReal x11193=((1.0)*gconst5);
IkReal x11194=(cj3*gconst4);
IkReal x11195=((1.0)*r20);
IkReal x11196=((1.0)*r10);
IkReal x11197=((1.0)*sj0);
IkReal x11198=(gconst4*r21);
IkReal x11199=(gconst4*sj3);
IkReal x11200=(cj1*sj2);
IkReal x11201=(r20*x11188);
IkReal x11202=((1.0)*cj1*cj2);
IkReal x11203=(r10*x11188);
IkReal x11204=((1.0)*cj2*sj1);
IkReal x11205=(r02*x11187);
IkReal x11206=((1.0)*sj3*x11188);
evalcond[0]=((((-1.0)*x11197))+((r02*x11188)));
evalcond[1]=((((-1.0)*r20*x11187*x11193))+((x11187*x11198)));
evalcond[2]=((((-1.0)*r10*x11187*x11193))+cj0+((x11187*x11190)));
evalcond[3]=((((-1.0)*cj0*x11200))+((sj3*x11205))+(((-1.0)*cj0*x11204)));
evalcond[4]=((((-1.0)*cj3*x11205))+((cj0*x11192))+(((-1.0)*cj0*x11202)));
evalcond[5]=((((-1.0)*x11195*x11199))+((cj2*sj1))+x11200+(((-1.0)*r21*x11189))+(((-1.0)*cj3*x11193*x11201))+((r21*x11188*x11194)));
evalcond[6]=(((x11189*x11201))+(((-1.0)*x11202))+x11192+(((-1.0)*x11198*x11206))+(((-1.0)*cj3*r21*x11193))+(((-1.0)*x11194*x11195)));
evalcond[7]=(((cj3*x11188*x11190))+(((-1.0)*x11196*x11199))+(((-1.0)*x11189*x11191))+(((-1.0)*cj1*cj2*x11197))+(((-1.0)*cj3*x11193*x11203))+((sj0*x11192)));
evalcond[8]=(((x11189*x11203))+(((-1.0)*x11197*x11200))+(((-1.0)*cj3*gconst5*x11191))+(((-1.0)*cj2*sj1*x11197))+(((-1.0)*x11190*x11206))+(((-1.0)*x11194*x11196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11207=((1.0)*sj0);
IkReal x11208=((1.0)*gconst5);
CheckValue<IkReal> x11209 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11207))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x11208))+(((-1.0)*gconst5*r10*x11207))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11209.valid){
continue;
}
CheckValue<IkReal> x11210=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11208))+(((-1.0)*gconst4*r20)))),-1);
if(!x11210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11209.value)+(((1.5707963267949)*(x11210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11211=IKsin(j4);
IkReal x11212=IKcos(j4);
IkReal x11213=(gconst5*sj3);
IkReal x11214=(gconst4*r11);
IkReal x11215=((1.0)*r11);
IkReal x11216=(sj1*sj2);
IkReal x11217=((1.0)*r21);
IkReal x11218=((1.0)*gconst5);
IkReal x11219=((1.0)*sj3);
IkReal x11220=(cj2*sj1);
IkReal x11221=((1.0)*sj0);
IkReal x11222=((1.0)*cj3);
IkReal x11223=(gconst4*r01);
IkReal x11224=(cj3*gconst5);
IkReal x11225=((1.0)*cj0);
IkReal x11226=(gconst4*r21);
IkReal x11227=(gconst4*r10);
IkReal x11228=(gconst4*r00);
IkReal x11229=(gconst4*r20);
IkReal x11230=(cj1*sj2);
IkReal x11231=(r20*x11212);
IkReal x11232=((1.0)*cj1*cj2);
IkReal x11233=(r10*x11212);
IkReal x11234=(r12*x11211);
IkReal x11235=(r22*x11211);
IkReal x11236=(cj3*x11212);
IkReal x11237=(r02*x11211);
evalcond[0]=((((-1.0)*r20*x11211*x11218))+((r22*x11212))+((x11211*x11226)));
evalcond[1]=(cj0+(((-1.0)*r10*x11211*x11218))+((x11211*x11214))+((r12*x11212)));
evalcond[2]=(((r02*x11212))+(((-1.0)*r00*x11211*x11218))+(((-1.0)*x11221))+((x11211*x11223)));
evalcond[3]=(x11216+(((-1.0)*x11232))+(((-1.0)*gconst4*sj3*x11212*x11217))+(((-1.0)*x11217*x11224))+(((-1.0)*x11222*x11229))+((x11213*x11231))+((sj3*x11235)));
evalcond[4]=((((-1.0)*cj3*x11218*x11231))+x11220+x11230+(((-1.0)*x11222*x11235))+((x11226*x11236))+(((-1.0)*x11219*x11229))+(((-1.0)*x11213*x11217)));
evalcond[5]=((((-1.0)*x11212*x11219*x11223))+(((-1.0)*cj3*r01*x11218))+(((-1.0)*x11225*x11230))+((r00*x11212*x11213))+(((-1.0)*x11220*x11225))+(((-1.0)*x11222*x11228))+((sj3*x11237)));
evalcond[6]=((((-1.0)*r01*x11213))+((x11223*x11236))+((cj0*x11216))+(((-1.0)*r00*x11218*x11236))+(((-1.0)*x11222*x11237))+(((-1.0)*cj1*cj2*x11225))+(((-1.0)*x11219*x11228)));
evalcond[7]=((((-1.0)*x11215*x11224))+(((-1.0)*x11212*x11214*x11219))+(((-1.0)*x11220*x11221))+(((-1.0)*x11222*x11227))+((x11213*x11233))+(((-1.0)*x11221*x11230))+((sj3*x11234)));
evalcond[8]=((((-1.0)*cj3*x11218*x11233))+((sj0*x11216))+(((-1.0)*x11222*x11234))+((x11214*x11236))+(((-1.0)*cj1*cj2*x11221))+(((-1.0)*x11219*x11227))+(((-1.0)*x11213*x11215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11238=((1.0)*gconst4);
CheckValue<IkReal> x11239 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst5*r20*sj0))+(((-1.0)*r21*sj0*x11238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11239.valid){
continue;
}
CheckValue<IkReal> x11240=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11238))+(((-1.0)*gconst5*r11)))),-1);
if(!x11240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11239.value)+(((1.5707963267949)*(x11240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11241=IKsin(j4);
IkReal x11242=IKcos(j4);
IkReal x11243=(gconst5*sj3);
IkReal x11244=(gconst4*r11);
IkReal x11245=((1.0)*r11);
IkReal x11246=(sj1*sj2);
IkReal x11247=((1.0)*r21);
IkReal x11248=((1.0)*gconst5);
IkReal x11249=((1.0)*sj3);
IkReal x11250=(cj2*sj1);
IkReal x11251=((1.0)*sj0);
IkReal x11252=((1.0)*cj3);
IkReal x11253=(gconst4*r01);
IkReal x11254=(cj3*gconst5);
IkReal x11255=((1.0)*cj0);
IkReal x11256=(gconst4*r21);
IkReal x11257=(gconst4*r10);
IkReal x11258=(gconst4*r00);
IkReal x11259=(gconst4*r20);
IkReal x11260=(cj1*sj2);
IkReal x11261=(r20*x11242);
IkReal x11262=((1.0)*cj1*cj2);
IkReal x11263=(r10*x11242);
IkReal x11264=(r12*x11241);
IkReal x11265=(r22*x11241);
IkReal x11266=(cj3*x11242);
IkReal x11267=(r02*x11241);
evalcond[0]=(((r22*x11242))+(((-1.0)*r20*x11241*x11248))+((x11241*x11256)));
evalcond[1]=(cj0+((r12*x11242))+((x11241*x11244))+(((-1.0)*r10*x11241*x11248)));
evalcond[2]=((((-1.0)*x11251))+((r02*x11242))+((x11241*x11253))+(((-1.0)*r00*x11241*x11248)));
evalcond[3]=(x11246+((sj3*x11265))+(((-1.0)*x11247*x11254))+(((-1.0)*gconst4*sj3*x11242*x11247))+(((-1.0)*x11262))+((x11243*x11261))+(((-1.0)*x11252*x11259)));
evalcond[4]=((((-1.0)*cj3*x11248*x11261))+(((-1.0)*x11243*x11247))+x11250+x11260+(((-1.0)*x11252*x11265))+(((-1.0)*x11249*x11259))+((x11256*x11266)));
evalcond[5]=(((r00*x11242*x11243))+(((-1.0)*x11255*x11260))+(((-1.0)*cj3*r01*x11248))+(((-1.0)*x11250*x11255))+((sj3*x11267))+(((-1.0)*x11242*x11249*x11253))+(((-1.0)*x11252*x11258)));
evalcond[6]=(((x11253*x11266))+(((-1.0)*x11252*x11267))+(((-1.0)*r01*x11243))+((cj0*x11246))+(((-1.0)*x11249*x11258))+(((-1.0)*cj1*cj2*x11255))+(((-1.0)*r00*x11248*x11266)));
evalcond[7]=((((-1.0)*x11245*x11254))+(((-1.0)*x11250*x11251))+((sj3*x11264))+(((-1.0)*x11251*x11260))+(((-1.0)*x11242*x11244*x11249))+((x11243*x11263))+(((-1.0)*x11252*x11257)));
evalcond[8]=((((-1.0)*cj3*x11248*x11263))+(((-1.0)*x11243*x11245))+((sj0*x11246))+(((-1.0)*x11252*x11264))+(((-1.0)*x11249*x11257))+(((-1.0)*cj1*cj2*x11251))+((x11244*x11266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11268=((1.0)*gconst4);
CheckValue<IkReal> x11269=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r01))+(((-1.0)*r00*x11268)))),-1);
if(!x11269.valid){
continue;
}
CheckValue<IkReal> x11270 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x11268))+((cj0*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11269.value)))+(x11270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11271=IKsin(j4);
IkReal x11272=IKcos(j4);
IkReal x11273=(gconst5*sj3);
IkReal x11274=(gconst4*r11);
IkReal x11275=((1.0)*r11);
IkReal x11276=(sj1*sj2);
IkReal x11277=((1.0)*r21);
IkReal x11278=((1.0)*gconst5);
IkReal x11279=((1.0)*sj3);
IkReal x11280=(cj2*sj1);
IkReal x11281=((1.0)*sj0);
IkReal x11282=((1.0)*cj3);
IkReal x11283=(gconst4*r01);
IkReal x11284=(cj3*gconst5);
IkReal x11285=((1.0)*cj0);
IkReal x11286=(gconst4*r21);
IkReal x11287=(gconst4*r10);
IkReal x11288=(gconst4*r00);
IkReal x11289=(gconst4*r20);
IkReal x11290=(cj1*sj2);
IkReal x11291=(r20*x11272);
IkReal x11292=((1.0)*cj1*cj2);
IkReal x11293=(r10*x11272);
IkReal x11294=(r12*x11271);
IkReal x11295=(r22*x11271);
IkReal x11296=(cj3*x11272);
IkReal x11297=(r02*x11271);
evalcond[0]=(((r22*x11272))+((x11271*x11286))+(((-1.0)*r20*x11271*x11278)));
evalcond[1]=(cj0+((r12*x11272))+(((-1.0)*r10*x11271*x11278))+((x11271*x11274)));
evalcond[2]=(((x11271*x11283))+(((-1.0)*x11281))+(((-1.0)*r00*x11271*x11278))+((r02*x11272)));
evalcond[3]=(((sj3*x11295))+(((-1.0)*x11282*x11289))+x11276+((x11273*x11291))+(((-1.0)*x11292))+(((-1.0)*gconst4*sj3*x11272*x11277))+(((-1.0)*x11277*x11284)));
evalcond[4]=((((-1.0)*x11282*x11295))+x11280+x11290+(((-1.0)*x11279*x11289))+(((-1.0)*x11273*x11277))+(((-1.0)*cj3*x11278*x11291))+((x11286*x11296)));
evalcond[5]=(((sj3*x11297))+(((-1.0)*x11282*x11288))+(((-1.0)*x11272*x11279*x11283))+(((-1.0)*x11285*x11290))+((r00*x11272*x11273))+(((-1.0)*cj3*r01*x11278))+(((-1.0)*x11280*x11285)));
evalcond[6]=((((-1.0)*x11282*x11297))+(((-1.0)*r01*x11273))+((x11283*x11296))+(((-1.0)*x11279*x11288))+(((-1.0)*cj1*cj2*x11285))+(((-1.0)*r00*x11278*x11296))+((cj0*x11276)));
evalcond[7]=(((sj3*x11294))+(((-1.0)*x11275*x11284))+(((-1.0)*x11282*x11287))+((x11273*x11293))+(((-1.0)*x11281*x11290))+(((-1.0)*x11280*x11281))+(((-1.0)*x11272*x11274*x11279)));
evalcond[8]=((((-1.0)*x11282*x11294))+((sj0*x11276))+((x11274*x11296))+(((-1.0)*x11279*x11287))+(((-1.0)*cj1*cj2*x11281))+(((-1.0)*x11273*x11275))+(((-1.0)*cj3*x11278*x11293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11298=((-1.0)*r10);
IkReal x11300 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11300)==0){
continue;
}
IkReal x11299=pow(x11300,-0.5);
CheckValue<IkReal> x11301 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11298),IKFAST_ATAN2_MAGTHRESH);
if(!x11301.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11301.value));
IkReal gconst7=(r11*x11299);
IkReal gconst8=(x11298*x11299);
CheckValue<IkReal> x11302 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11302.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11302.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11303=((-1.0)*r10);
IkReal x11304=x11299;
CheckValue<IkReal> x11306 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11303),IKFAST_ATAN2_MAGTHRESH);
if(!x11306.valid){
continue;
}
IkReal x11305=((-1.0)*(x11306.value));
sj5=gconst7;
cj5=gconst8;
j5=x11305;
IkReal gconst6=x11305;
IkReal gconst7=(r11*x11304);
IkReal gconst8=(x11303*x11304);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11307=((-1.0)*r10);
IkReal x11308=x11299;
CheckValue<IkReal> x11310 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11307),IKFAST_ATAN2_MAGTHRESH);
if(!x11310.valid){
continue;
}
IkReal x11309=((-1.0)*(x11310.value));
sj5=gconst7;
cj5=gconst8;
j5=x11309;
IkReal gconst6=x11309;
IkReal gconst7=(r11*x11308);
IkReal gconst8=(x11307*x11308);
IkReal x11311=r12*r12;
IkReal x11312=((1.0)*sj0);
IkReal x11313=(cj0*r02);
IkReal x11314=x11299;
j4eval[0]=((IKabs((((sj0*x11311*x11314))+(((-1.0)*x11312*x11314))+((r12*x11313*x11314)))))+(IKabs(((((-1.0)*r12*x11312))+(((-1.0)*x11313))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11315=((-1.0)*r10);
IkReal x11316=x11299;
CheckValue<IkReal> x11318 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11315),IKFAST_ATAN2_MAGTHRESH);
if(!x11318.valid){
continue;
}
IkReal x11317=((-1.0)*(x11318.value));
sj5=gconst7;
cj5=gconst8;
j5=x11317;
IkReal gconst6=x11317;
IkReal gconst7=(r11*x11316);
IkReal gconst8=(x11315*x11316);
CheckValue<IkReal> x11322=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11322.valid){
continue;
}
IkReal x11319=x11322.value;
IkReal x11320=(cj3*x11319);
IkReal x11321=(((cj3*(r22*r22)))+((x11320*(r11*r11)*(r21*r21)))+(((2.0)*r10*r11*r20*r21*x11320))+((x11320*(r10*r10)*(r20*r20))));
j4eval[0]=x11321;
j4eval[1]=IKsign(x11321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11323=((-1.0)*r10);
IkReal x11324=x11299;
CheckValue<IkReal> x11326 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11323),IKFAST_ATAN2_MAGTHRESH);
if(!x11326.valid){
continue;
}
IkReal x11325=((-1.0)*(x11326.value));
sj5=gconst7;
cj5=gconst8;
j5=x11325;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst6=x11325;
IkReal gconst7=(r11*x11324);
IkReal gconst8=(x11323*x11324);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11327=((-1.0)*r10);
IkReal x11328=x11299;
CheckValue<IkReal> x11330 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11327),IKFAST_ATAN2_MAGTHRESH);
if(!x11330.valid){
continue;
}
IkReal x11329=((-1.0)*(x11330.value));
sj5=gconst7;
cj5=gconst8;
j5=x11329;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst6=x11329;
IkReal gconst7=(r11*x11328);
IkReal gconst8=(x11327*x11328);
IkReal x11331=r12*r12;
IkReal x11332=((1.0)*sj0);
IkReal x11333=(cj0*r02);
IkReal x11334=x11299;
j4eval[0]=((IKabs(((((-1.0)*r12*x11332))+(((-1.0)*x11333)))))+(IKabs(((((-1.0)*x11332*x11334))+((sj0*x11331*x11334))+((r12*x11333*x11334))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11335=((-1.0)*r10);
IkReal x11336=x11299;
CheckValue<IkReal> x11338 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11335),IKFAST_ATAN2_MAGTHRESH);
if(!x11338.valid){
continue;
}
IkReal x11337=((-1.0)*(x11338.value));
sj5=gconst7;
cj5=gconst8;
j5=x11337;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst6=x11337;
IkReal gconst7=(r11*x11336);
IkReal gconst8=(x11335*x11336);
IkReal x11339=r12*r12;
IkReal x11340=((1.0)+(((-1.0)*x11339)));
IkReal x11341=(r22*sj1*sj2);
IkReal x11342=(cj1*cj2*r22);
CheckValue<IkReal> x11349=IKPowWithIntegerCheck(x11340,-1);
if(!x11349.valid){
continue;
}
IkReal x11343=x11349.value;
CheckValue<IkReal> x11350=IKPowWithIntegerCheck(((-1.0)+x11339),-1);
if(!x11350.valid){
continue;
}
IkReal x11344=x11350.value;
IkReal x11345=((1.0)*x11343);
if((x11340) < -0.00001)
continue;
IkReal x11346=IKsqrt(x11340);
IkReal x11347=(r12*x11344*x11346);
IkReal x11348=((((-2.0)*r10*r11*r20*r21*x11343))+(((-1.0)*x11345*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x11345*(r11*r11)*(r21*r21))));
j4eval[0]=x11348;
j4eval[1]=((IKabs((x11341+(((-1.0)*x11342)))))+(IKabs((((x11342*x11347))+(((-1.0)*x11341*x11347))))));
j4eval[2]=IKsign(x11348);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11351=((-1.0)*r10);
IkReal x11352=x11299;
CheckValue<IkReal> x11354 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11351),IKFAST_ATAN2_MAGTHRESH);
if(!x11354.valid){
continue;
}
IkReal x11353=((-1.0)*(x11354.value));
sj5=gconst7;
cj5=gconst8;
j5=x11353;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11353;
IkReal gconst7=(r11*x11352);
IkReal gconst8=(x11351*x11352);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11355=((-1.0)*r10);
IkReal x11356=x11299;
CheckValue<IkReal> x11358 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11355),IKFAST_ATAN2_MAGTHRESH);
if(!x11358.valid){
continue;
}
IkReal x11357=((-1.0)*(x11358.value));
sj5=gconst7;
cj5=gconst8;
j5=x11357;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11357;
IkReal gconst7=(r11*x11356);
IkReal gconst8=(x11355*x11356);
IkReal x11359=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11363=IKPowWithIntegerCheck(x11359,-1);
if(!x11363.valid){
continue;
}
IkReal x11360=x11363.value;
IkReal x11361=((1.0)*x11360);
IkReal x11362=((((-1.0)*x11361*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11361*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11360)));
j4eval[0]=x11362;
j4eval[1]=IKsign(x11362);
j4eval[2]=r02;
j4eval[3]=x11359;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11364=((-1.0)*r10);
IkReal x11365=x11299;
CheckValue<IkReal> x11367 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11364),IKFAST_ATAN2_MAGTHRESH);
if(!x11367.valid){
continue;
}
IkReal x11366=((-1.0)*(x11367.value));
sj5=gconst7;
cj5=gconst8;
j5=x11366;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11366;
IkReal gconst7=(r11*x11365);
IkReal gconst8=(x11364*x11365);
IkReal x11368=r12*r12;
IkReal x11369=((1.0)+(((-1.0)*x11368)));
IkReal x11370=(r22*sj1*sj2);
IkReal x11371=(cj1*cj2*r22);
CheckValue<IkReal> x11378=IKPowWithIntegerCheck(x11369,-1);
if(!x11378.valid){
continue;
}
IkReal x11372=x11378.value;
CheckValue<IkReal> x11379=IKPowWithIntegerCheck(((-1.0)+x11368),-1);
if(!x11379.valid){
continue;
}
IkReal x11373=x11379.value;
IkReal x11374=((1.0)*x11372);
if((x11369) < -0.00001)
continue;
IkReal x11375=IKsqrt(x11369);
IkReal x11376=(r12*x11373*x11375);
IkReal x11377=((((-1.0)*x11374*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x11372))+(((-1.0)*x11374*(r10*r10)*(r20*r20))));
j4eval[0]=x11377;
j4eval[1]=((IKabs(((((-1.0)*x11371))+x11370)))+(IKabs((((x11371*x11376))+(((-1.0)*x11370*x11376))))));
j4eval[2]=IKsign(x11377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11380=(gconst8*r20);
IkReal x11381=(sj1*sj2);
IkReal x11382=(cj1*cj2);
IkReal x11383=(gconst7*r21);
CheckValue<IkReal> x11384 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11382))+((r22*x11381)))),IkReal(((((-1.0)*x11381*x11383))+(((-1.0)*x11380*x11382))+((x11382*x11383))+((x11380*x11381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11384.valid){
continue;
}
CheckValue<IkReal> x11385=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11383*x11383)))+(((2.0)*x11380*x11383))+(((-1.0)*(r22*r22)))+(((-1.0)*(x11380*x11380))))),-1);
if(!x11385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11384.value)+(((1.5707963267949)*(x11385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11386=IKsin(j4);
IkReal x11387=IKcos(j4);
IkReal x11388=(gconst8*r20);
IkReal x11389=((1.0)*cj2);
IkReal x11390=((1.0)*x11386);
IkReal x11391=(gconst7*x11386);
IkReal x11392=(gconst8*x11387);
IkReal x11393=((1.0)*gconst7*x11387);
evalcond[0]=(((r21*x11391))+(((-1.0)*x11388*x11390))+((r22*x11387)));
evalcond[1]=(((r12*x11387))+((r11*x11391))+(((-1.0)*gconst8*r10*x11390)));
evalcond[2]=(((r02*x11386))+((r00*x11392))+(((-1.0)*r01*x11393)));
evalcond[3]=((-1.0)+((r02*x11387))+((r01*x11391))+(((-1.0)*gconst8*r00*x11390)));
evalcond[4]=(((x11387*x11388))+((sj1*sj2))+(((-1.0)*r21*x11393))+((r22*x11386))+(((-1.0)*cj1*x11389)));
evalcond[5]=(((r12*x11386))+(((-1.0)*sj1*x11389))+(((-1.0)*cj1*sj2))+((r10*x11392))+(((-1.0)*r11*x11393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11394=(gconst7*r01);
IkReal x11395=(gconst8*r00);
CheckValue<IkReal> x11396=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11394*x11394)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11395*x11395)))+(((2.0)*x11394*x11395)))),-1);
if(!x11396.valid){
continue;
}
CheckValue<IkReal> x11397 = IKatan2WithCheck(IkReal((x11395+(((-1.0)*x11394)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11396.value)))+(x11397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11398=IKsin(j4);
IkReal x11399=IKcos(j4);
IkReal x11400=(gconst8*r20);
IkReal x11401=((1.0)*cj2);
IkReal x11402=((1.0)*x11398);
IkReal x11403=(gconst7*x11398);
IkReal x11404=(gconst8*x11399);
IkReal x11405=((1.0)*gconst7*x11399);
evalcond[0]=(((r21*x11403))+(((-1.0)*x11400*x11402))+((r22*x11399)));
evalcond[1]=(((r12*x11399))+((r11*x11403))+(((-1.0)*gconst8*r10*x11402)));
evalcond[2]=(((r02*x11398))+(((-1.0)*r01*x11405))+((r00*x11404)));
evalcond[3]=((-1.0)+((r02*x11399))+(((-1.0)*gconst8*r00*x11402))+((r01*x11403)));
evalcond[4]=((((-1.0)*cj1*x11401))+((sj1*sj2))+((r22*x11398))+(((-1.0)*r21*x11405))+((x11399*x11400)));
evalcond[5]=(((r10*x11404))+(((-1.0)*sj1*x11401))+((r12*x11398))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*x11405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11406 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst7*r11))+((gconst8*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11406.valid){
continue;
}
CheckValue<IkReal> x11407=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x11407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11406.value)+(((1.5707963267949)*(x11407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11408=IKsin(j4);
IkReal x11409=IKcos(j4);
IkReal x11410=(gconst8*r20);
IkReal x11411=((1.0)*cj2);
IkReal x11412=((1.0)*x11408);
IkReal x11413=(gconst7*x11408);
IkReal x11414=(gconst8*x11409);
IkReal x11415=((1.0)*gconst7*x11409);
evalcond[0]=((((-1.0)*x11410*x11412))+((r22*x11409))+((r21*x11413)));
evalcond[1]=((((-1.0)*gconst8*r10*x11412))+((r12*x11409))+((r11*x11413)));
evalcond[2]=(((r00*x11414))+(((-1.0)*r01*x11415))+((r02*x11408)));
evalcond[3]=((-1.0)+((r01*x11413))+((r02*x11409))+(((-1.0)*gconst8*r00*x11412)));
evalcond[4]=((((-1.0)*r21*x11415))+((r22*x11408))+(((-1.0)*cj1*x11411))+((sj1*sj2))+((x11409*x11410)));
evalcond[5]=((((-1.0)*sj1*x11411))+((r10*x11414))+(((-1.0)*r11*x11415))+((r12*x11408))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11416=((-1.0)*r10);
IkReal x11417=x11299;
CheckValue<IkReal> x11419 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11416),IKFAST_ATAN2_MAGTHRESH);
if(!x11419.valid){
continue;
}
IkReal x11418=((-1.0)*(x11419.value));
sj5=gconst7;
cj5=gconst8;
j5=x11418;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11418;
IkReal gconst7=(r11*x11417);
IkReal gconst8=(x11416*x11417);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11420=((-1.0)*r10);
IkReal x11421=x11299;
CheckValue<IkReal> x11423 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11420),IKFAST_ATAN2_MAGTHRESH);
if(!x11423.valid){
continue;
}
IkReal x11422=((-1.0)*(x11423.value));
sj5=gconst7;
cj5=gconst8;
j5=x11422;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11422;
IkReal gconst7=(r11*x11421);
IkReal gconst8=(x11420*x11421);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11424=((-1.0)*r10);
IkReal x11425=x11299;
CheckValue<IkReal> x11427 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11424),IKFAST_ATAN2_MAGTHRESH);
if(!x11427.valid){
continue;
}
IkReal x11426=((-1.0)*(x11427.value));
sj5=gconst7;
cj5=gconst8;
j5=x11426;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11426;
IkReal gconst7=(r11*x11425);
IkReal gconst8=(x11424*x11425);
IkReal x11428=r12*r12;
IkReal x11429=((1.0)*r02);
IkReal x11430=(cj1*sj2);
IkReal x11431=(cj2*sj1);
CheckValue<IkReal> x11435=IKPowWithIntegerCheck(((-1.0)+x11428),-1);
if(!x11435.valid){
continue;
}
IkReal x11432=x11435.value;
if((((1.0)+(((-1.0)*x11428)))) < -0.00001)
continue;
IkReal x11433=IKsqrt(((1.0)+(((-1.0)*x11428))));
IkReal x11434=(r12*x11432*x11433);
j4eval[0]=((IKabs(((((-1.0)*x11429*x11431))+(((-1.0)*x11429*x11430)))))+(IKabs(((((-1.0)*x11429*x11431*x11434))+(((-1.0)*x11429*x11430*x11434))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11436=(gconst7*r01);
IkReal x11437=(cj2*sj1);
IkReal x11438=(gconst8*r00);
IkReal x11439=((1.0)*cj1*sj2);
CheckValue<IkReal> x11440 = IKatan2WithCheck(IkReal(((((-1.0)*x11436*x11439))+((cj1*sj2*x11438))+((x11437*x11438))+(((-1.0)*x11436*x11437)))),IkReal(((((-1.0)*r02*x11437))+(((-1.0)*r02*x11439)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11440.valid){
continue;
}
CheckValue<IkReal> x11441=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x11441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11440.value)+(((1.5707963267949)*(x11441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11442=IKsin(j4);
IkReal x11443=IKcos(j4);
IkReal x11444=(gconst8*r20);
IkReal x11445=((1.0)*x11442);
IkReal x11446=(gconst7*x11442);
IkReal x11447=(gconst8*x11443);
IkReal x11448=((1.0)*gconst7*x11443);
evalcond[0]=(((r22*x11443))+((r21*x11446))+(((-1.0)*x11444*x11445)));
evalcond[1]=(((r12*x11443))+((r11*x11446))+(((-1.0)*gconst8*r10*x11445)));
evalcond[2]=(((r00*x11447))+(((-1.0)*r01*x11448))+((r02*x11442)));
evalcond[3]=((1.0)+(((-1.0)*gconst8*r00*x11445))+((r02*x11443))+((r01*x11446)));
evalcond[4]=((((-1.0)*r11*x11448))+((r12*x11442))+((cj2*sj1))+((cj1*sj2))+((r10*x11447)));
evalcond[5]=((((-1.0)*r21*x11448))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11442))+((x11443*x11444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11449=(gconst8*r00);
IkReal x11450=(gconst7*r01);
CheckValue<IkReal> x11451 = IKatan2WithCheck(IkReal((x11449+(((-1.0)*x11450)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11451.valid){
continue;
}
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(IKsign(((x11449*x11449)+(((-2.0)*x11449*x11450))+(r02*r02)+(x11450*x11450))),-1);
if(!x11452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11451.value)+(((1.5707963267949)*(x11452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11453=IKsin(j4);
IkReal x11454=IKcos(j4);
IkReal x11455=(gconst8*r20);
IkReal x11456=((1.0)*x11453);
IkReal x11457=(gconst7*x11453);
IkReal x11458=(gconst8*x11454);
IkReal x11459=((1.0)*gconst7*x11454);
evalcond[0]=((((-1.0)*x11455*x11456))+((r21*x11457))+((r22*x11454)));
evalcond[1]=((((-1.0)*gconst8*r10*x11456))+((r12*x11454))+((r11*x11457)));
evalcond[2]=(((r02*x11453))+((r00*x11458))+(((-1.0)*r01*x11459)));
evalcond[3]=((1.0)+((r02*x11454))+((r01*x11457))+(((-1.0)*gconst8*r00*x11456)));
evalcond[4]=(((cj2*sj1))+((r10*x11458))+((cj1*sj2))+(((-1.0)*r11*x11459))+((r12*x11453)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11459))+((x11454*x11455))+((r22*x11453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11460=((1.0)*gconst7);
CheckValue<IkReal> x11461 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x11460))+((gconst8*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11461.valid){
continue;
}
CheckValue<IkReal> x11462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11460))+(((-1.0)*gconst8*r21)))),-1);
if(!x11462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11461.value)+(((1.5707963267949)*(x11462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11463=IKsin(j4);
IkReal x11464=IKcos(j4);
IkReal x11465=(gconst8*r20);
IkReal x11466=((1.0)*x11463);
IkReal x11467=(gconst7*x11463);
IkReal x11468=(gconst8*x11464);
IkReal x11469=((1.0)*gconst7*x11464);
evalcond[0]=(((r22*x11464))+((r21*x11467))+(((-1.0)*x11465*x11466)));
evalcond[1]=(((r12*x11464))+((r11*x11467))+(((-1.0)*gconst8*r10*x11466)));
evalcond[2]=((((-1.0)*r01*x11469))+((r02*x11463))+((r00*x11468)));
evalcond[3]=((1.0)+((r01*x11467))+(((-1.0)*gconst8*r00*x11466))+((r02*x11464)));
evalcond[4]=(((cj2*sj1))+((r12*x11463))+(((-1.0)*r11*x11469))+((cj1*sj2))+((r10*x11468)));
evalcond[5]=((((-1.0)*r21*x11469))+((r22*x11463))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11464*x11465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11470=((-1.0)*r10);
IkReal x11471=((-1.0)*r11);
CheckValue<IkReal> x11473 = IKatan2WithCheck(IkReal(x11471),IkReal(x11470),IKFAST_ATAN2_MAGTHRESH);
if(!x11473.valid){
continue;
}
IkReal x11472=((-1.0)*(x11473.value));
sj5=gconst7;
cj5=gconst8;
j5=x11472;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11470);
rxp1_1=(px*r21);
rxp1_2=(px*x11471);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x11472;
IkReal gconst7=r11;
IkReal gconst8=x11470;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11474=((-1.0)*r10);
IkReal x11475=((-1.0)*r11);
CheckValue<IkReal> x11477 = IKatan2WithCheck(IkReal(x11475),IkReal(x11474),IKFAST_ATAN2_MAGTHRESH);
if(!x11477.valid){
continue;
}
IkReal x11476=((-1.0)*(x11477.value));
sj5=gconst7;
cj5=gconst8;
j5=x11476;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11474);
rxp1_1=(px*r21);
rxp1_2=(px*x11475);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x11476;
IkReal gconst7=r11;
IkReal gconst8=x11474;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11478=((-1.0)*r10);
IkReal x11479=((-1.0)*r11);
CheckValue<IkReal> x11481 = IKatan2WithCheck(IkReal(x11479),IkReal(x11478),IKFAST_ATAN2_MAGTHRESH);
if(!x11481.valid){
continue;
}
IkReal x11480=((-1.0)*(x11481.value));
sj5=gconst7;
cj5=gconst8;
j5=x11480;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11478);
rxp1_1=(px*r21);
rxp1_2=(px*x11479);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x11480;
IkReal gconst7=r11;
IkReal gconst8=x11478;
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11484=IKPowWithIntegerCheck(((((-1.0)*gconst7*r11))+((gconst8*r10))),-1);
if(!x11484.valid){
continue;
}
IkReal x11482=x11484.value;
IkReal x11483=(sj0*x11482);
cj4array[0]=(((cj1*sj2*x11483))+((cj2*sj1*x11483)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11485=IKsin(j4);
IkReal x11486=IKcos(j4);
IkReal x11487=(gconst8*r20);
IkReal x11488=((1.0)*x11485);
IkReal x11489=(gconst7*x11485);
evalcond[0]=(r02*x11485);
evalcond[1]=((((-1.0)*sj0))+((r02*x11486)));
evalcond[2]=((((-1.0)*x11487*x11488))+((r21*x11489)));
evalcond[3]=((((-1.0)*gconst8*r10*x11488))+((r11*x11489)));
evalcond[4]=(((x11486*x11487))+(((-1.0)*gconst7*r21*x11486))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11491=IKPowWithIntegerCheck(((((-1.0)*gconst7*r21))+((gconst8*r20))),-1);
if(!x11491.valid){
continue;
}
IkReal x11490=x11491.value;
cj4array[0]=(((cj1*cj2*x11490))+(((-1.0)*sj1*sj2*x11490)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11492=IKsin(j4);
IkReal x11493=IKcos(j4);
IkReal x11494=(gconst8*r10);
IkReal x11495=((1.0)*sj0);
IkReal x11496=((1.0)*x11492);
IkReal x11497=(gconst7*x11492);
evalcond[0]=(r02*x11492);
evalcond[1]=((((-1.0)*x11495))+((r02*x11493)));
evalcond[2]=(((r21*x11497))+(((-1.0)*gconst8*r20*x11496)));
evalcond[3]=(((r11*x11497))+(((-1.0)*x11494*x11496)));
evalcond[4]=((((-1.0)*cj2*sj1*x11495))+((x11493*x11494))+(((-1.0)*cj1*sj2*x11495))+(((-1.0)*gconst7*r11*x11493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11498=IKPowWithIntegerCheck(r02,-1);
if(!x11498.valid){
continue;
}
cj4array[0]=(sj0*(x11498.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11499=IKsin(j4);
IkReal x11500=IKcos(j4);
IkReal x11501=((1.0)*cj1);
IkReal x11502=(gconst8*x11500);
IkReal x11503=(gconst7*x11499);
IkReal x11504=((1.0)*gconst8*x11499);
IkReal x11505=((1.0)*gconst7*x11500);
evalcond[0]=(r02*x11499);
evalcond[1]=(((r21*x11503))+(((-1.0)*r20*x11504)));
evalcond[2]=((((-1.0)*r10*x11504))+((r11*x11503)));
evalcond[3]=((((-1.0)*cj2*x11501))+((sj1*sj2))+((r20*x11502))+(((-1.0)*r21*x11505)));
evalcond[4]=((((-1.0)*r11*x11505))+(((-1.0)*cj2*sj0*sj1))+((r10*x11502))+(((-1.0)*sj0*sj2*x11501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11506=((1.0)*gconst7);
CheckValue<IkReal> x11507 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*r11*sj0*x11506))+(((-1.0)*cj0*r01*x11506))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11507.valid){
continue;
}
CheckValue<IkReal> x11508=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x11508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11507.value)+(((1.5707963267949)*(x11508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11509=IKsin(j4);
IkReal x11510=IKcos(j4);
IkReal x11511=(gconst8*r20);
IkReal x11512=((1.0)*cj2);
IkReal x11513=((1.0)*sj0);
IkReal x11514=(cj1*sj2);
IkReal x11515=((1.0)*x11509);
IkReal x11516=(gconst7*x11509);
IkReal x11517=(gconst8*x11510);
IkReal x11518=((1.0)*gconst7*x11510);
evalcond[0]=((((-1.0)*x11511*x11515))+((r21*x11516)));
evalcond[1]=((((-1.0)*gconst8*r10*x11515))+cj0+((r12*x11510))+((r11*x11516)));
evalcond[2]=(((x11510*x11511))+((sj1*sj2))+(((-1.0)*cj1*x11512))+(((-1.0)*r21*x11518)));
evalcond[3]=(((r01*x11516))+(((-1.0)*x11513))+((r02*x11510))+(((-1.0)*gconst8*r00*x11515)));
evalcond[4]=((((-1.0)*cj0*x11514))+(((-1.0)*cj0*sj1*x11512))+(((-1.0)*r01*x11518))+((r00*x11517))+((r02*x11509)));
evalcond[5]=(((r12*x11509))+(((-1.0)*x11513*x11514))+(((-1.0)*sj0*sj1*x11512))+(((-1.0)*r11*x11518))+((r10*x11517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11519=(gconst8*r20);
IkReal x11520=(sj1*sj2);
IkReal x11521=(cj1*cj2);
IkReal x11522=(gconst7*r21);
CheckValue<IkReal> x11523=IKPowWithIntegerCheck(IKsign(((((2.0)*x11519*x11522))+(((-1.0)*(r22*r22)))+(((-1.0)*(x11519*x11519)))+(((-1.0)*(x11522*x11522))))),-1);
if(!x11523.valid){
continue;
}
CheckValue<IkReal> x11524 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11521))+((r22*x11520)))),IkReal(((((-1.0)*x11519*x11521))+((x11519*x11520))+((x11521*x11522))+(((-1.0)*x11520*x11522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11523.value)))+(x11524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11525=IKsin(j4);
IkReal x11526=IKcos(j4);
IkReal x11527=(gconst8*r20);
IkReal x11528=((1.0)*cj2);
IkReal x11529=((1.0)*sj0);
IkReal x11530=(cj1*sj2);
IkReal x11531=((1.0)*x11525);
IkReal x11532=(gconst7*x11525);
IkReal x11533=(gconst8*x11526);
IkReal x11534=((1.0)*gconst7*x11526);
evalcond[0]=(((r21*x11532))+(((-1.0)*x11527*x11531))+((r22*x11526)));
evalcond[1]=(cj0+((r12*x11526))+((r11*x11532))+(((-1.0)*gconst8*r10*x11531)));
evalcond[2]=((((-1.0)*gconst8*r00*x11531))+((r01*x11532))+((r02*x11526))+(((-1.0)*x11529)));
evalcond[3]=((((-1.0)*cj1*x11528))+((sj1*sj2))+((x11526*x11527))+(((-1.0)*r21*x11534))+((r22*x11525)));
evalcond[4]=((((-1.0)*cj0*sj1*x11528))+((r00*x11533))+(((-1.0)*cj0*x11530))+(((-1.0)*r01*x11534))+((r02*x11525)));
evalcond[5]=((((-1.0)*r11*x11534))+((r12*x11525))+((r10*x11533))+(((-1.0)*sj0*sj1*x11528))+(((-1.0)*x11529*x11530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11535=((1.0)*sj0);
IkReal x11536=((1.0)*gconst8);
CheckValue<IkReal> x11537 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11535))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst7*r01))+(((-1.0)*cj0*r00*x11536))+((gconst7*r11*sj0))+(((-1.0)*gconst8*r10*x11535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11537.valid){
continue;
}
CheckValue<IkReal> x11538=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x11536)))),-1);
if(!x11538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11537.value)+(((1.5707963267949)*(x11538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11539=IKsin(j4);
IkReal x11540=IKcos(j4);
IkReal x11541=(gconst8*r20);
IkReal x11542=((1.0)*cj2);
IkReal x11543=((1.0)*sj0);
IkReal x11544=(cj1*sj2);
IkReal x11545=((1.0)*x11539);
IkReal x11546=(gconst7*x11539);
IkReal x11547=(gconst8*x11540);
IkReal x11548=((1.0)*gconst7*x11540);
evalcond[0]=((((-1.0)*x11541*x11545))+((r21*x11546))+((r22*x11540)));
evalcond[1]=(cj0+((r12*x11540))+((r11*x11546))+(((-1.0)*gconst8*r10*x11545)));
evalcond[2]=(((r01*x11546))+((r02*x11540))+(((-1.0)*x11543))+(((-1.0)*gconst8*r00*x11545)));
evalcond[3]=(((r22*x11539))+((sj1*sj2))+(((-1.0)*r21*x11548))+(((-1.0)*cj1*x11542))+((x11540*x11541)));
evalcond[4]=((((-1.0)*r01*x11548))+(((-1.0)*cj0*sj1*x11542))+((r00*x11547))+(((-1.0)*cj0*x11544))+((r02*x11539)));
evalcond[5]=(((r10*x11547))+((r12*x11539))+(((-1.0)*sj0*sj1*x11542))+(((-1.0)*r11*x11548))+(((-1.0)*x11543*x11544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11549=((1.0)*gconst7);
CheckValue<IkReal> x11550=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11549))+(((-1.0)*gconst8*r01)))),-1);
if(!x11550.valid){
continue;
}
CheckValue<IkReal> x11551 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x11549))+((cj0*gconst8*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11550.value)))+(x11551.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11552=IKsin(j4);
IkReal x11553=IKcos(j4);
IkReal x11554=(gconst8*r20);
IkReal x11555=((1.0)*cj2);
IkReal x11556=((1.0)*sj0);
IkReal x11557=(cj1*sj2);
IkReal x11558=((1.0)*x11552);
IkReal x11559=(gconst7*x11552);
IkReal x11560=(gconst8*x11553);
IkReal x11561=((1.0)*gconst7*x11553);
evalcond[0]=(((r21*x11559))+(((-1.0)*x11554*x11558))+((r22*x11553)));
evalcond[1]=(((r12*x11553))+((r11*x11559))+cj0+(((-1.0)*gconst8*r10*x11558)));
evalcond[2]=((((-1.0)*x11556))+(((-1.0)*gconst8*r00*x11558))+((r02*x11553))+((r01*x11559)));
evalcond[3]=((((-1.0)*cj1*x11555))+((r22*x11552))+((sj1*sj2))+((x11553*x11554))+(((-1.0)*r21*x11561)));
evalcond[4]=(((r02*x11552))+(((-1.0)*r01*x11561))+((r00*x11560))+(((-1.0)*cj0*x11557))+(((-1.0)*cj0*sj1*x11555)));
evalcond[5]=(((r12*x11552))+(((-1.0)*sj0*sj1*x11555))+((r10*x11560))+(((-1.0)*r11*x11561))+(((-1.0)*x11556*x11557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11562=((-1.0)*r10);
IkReal x11563=x11299;
CheckValue<IkReal> x11565 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11562),IKFAST_ATAN2_MAGTHRESH);
if(!x11565.valid){
continue;
}
IkReal x11564=((-1.0)*(x11565.value));
sj5=gconst7;
cj5=gconst8;
j5=x11564;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst6=x11564;
IkReal gconst7=(r11*x11563);
IkReal gconst8=(x11562*x11563);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11566=((-1.0)*r10);
IkReal x11567=x11299;
CheckValue<IkReal> x11569 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11566),IKFAST_ATAN2_MAGTHRESH);
if(!x11569.valid){
continue;
}
IkReal x11568=((-1.0)*(x11569.value));
sj5=gconst7;
cj5=gconst8;
j5=x11568;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst6=x11568;
IkReal gconst7=(r11*x11567);
IkReal gconst8=(x11566*x11567);
IkReal x11570=r12*r12;
IkReal x11571=((1.0)*sj0);
IkReal x11572=(cj0*r02);
IkReal x11573=x11299;
j4eval[0]=((IKabs(((((-1.0)*x11572))+(((-1.0)*r12*x11571)))))+(IKabs((((sj0*x11570*x11573))+(((-1.0)*x11571*x11573))+((r12*x11572*x11573))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11574=((-1.0)*r10);
IkReal x11575=x11299;
CheckValue<IkReal> x11577 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11574),IKFAST_ATAN2_MAGTHRESH);
if(!x11577.valid){
continue;
}
IkReal x11576=((-1.0)*(x11577.value));
sj5=gconst7;
cj5=gconst8;
j5=x11576;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst6=x11576;
IkReal gconst7=(r11*x11575);
IkReal gconst8=(x11574*x11575);
IkReal x11578=r12*r12;
IkReal x11579=(cj1*cj2*r22);
IkReal x11580=(r22*sj1*sj2);
CheckValue<IkReal> x11584=IKPowWithIntegerCheck(((-1.0)+x11578),-1);
if(!x11584.valid){
continue;
}
IkReal x11581=x11584.value;
if((((1.0)+(((-1.0)*x11578)))) < -0.00001)
continue;
IkReal x11582=IKsqrt(((1.0)+(((-1.0)*x11578))));
IkReal x11583=(r12*x11581*x11582);
j4eval[0]=((IKabs((x11580+(((-1.0)*x11579)))))+(IKabs((((x11579*x11583))+(((-1.0)*x11580*x11583))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11585=((-1.0)*r10);
IkReal x11586=x11299;
CheckValue<IkReal> x11588 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11585),IKFAST_ATAN2_MAGTHRESH);
if(!x11588.valid){
continue;
}
IkReal x11587=((-1.0)*(x11588.value));
sj5=gconst7;
cj5=gconst8;
j5=x11587;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11587;
IkReal gconst7=(r11*x11586);
IkReal gconst8=(x11585*x11586);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11589=((-1.0)*r10);
IkReal x11590=x11299;
CheckValue<IkReal> x11592 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11589),IKFAST_ATAN2_MAGTHRESH);
if(!x11592.valid){
continue;
}
IkReal x11591=((-1.0)*(x11592.value));
sj5=gconst7;
cj5=gconst8;
j5=x11591;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11591;
IkReal gconst7=(r11*x11590);
IkReal gconst8=(x11589*x11590);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11593=((-1.0)*r10);
IkReal x11594=x11299;
CheckValue<IkReal> x11596 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11593),IKFAST_ATAN2_MAGTHRESH);
if(!x11596.valid){
continue;
}
IkReal x11595=((-1.0)*(x11596.value));
sj5=gconst7;
cj5=gconst8;
j5=x11595;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11595;
IkReal gconst7=(r11*x11594);
IkReal gconst8=(x11593*x11594);
IkReal x11597=r12*r12;
IkReal x11598=(cj1*cj2*r22);
IkReal x11599=(r22*sj1*sj2);
CheckValue<IkReal> x11603=IKPowWithIntegerCheck(((-1.0)+x11597),-1);
if(!x11603.valid){
continue;
}
IkReal x11600=x11603.value;
if((((1.0)+(((-1.0)*x11597)))) < -0.00001)
continue;
IkReal x11601=IKsqrt(((1.0)+(((-1.0)*x11597))));
IkReal x11602=(r12*x11600*x11601);
j4eval[0]=((IKabs(((((-1.0)*x11599*x11602))+((x11598*x11602)))))+(IKabs((x11599+(((-1.0)*x11598))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11604=(gconst8*r20);
IkReal x11605=(sj1*sj2);
IkReal x11606=(cj1*cj2);
IkReal x11607=(gconst7*r21);
CheckValue<IkReal> x11608 = IKatan2WithCheck(IkReal((((r22*x11605))+(((-1.0)*r22*x11606)))),IkReal((((x11606*x11607))+((x11604*x11605))+(((-1.0)*x11605*x11607))+(((-1.0)*x11604*x11606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11608.valid){
continue;
}
CheckValue<IkReal> x11609=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11607*x11607)+(x11604*x11604)+(((-2.0)*x11604*x11607)))),-1);
if(!x11609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11608.value)+(((1.5707963267949)*(x11609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11610=IKsin(j4);
IkReal x11611=IKcos(j4);
IkReal x11612=(gconst8*r20);
IkReal x11613=((1.0)*cj2);
IkReal x11614=(gconst8*r00);
IkReal x11615=(gconst8*r10);
IkReal x11616=((1.0)*x11610);
IkReal x11617=(gconst7*x11610);
IkReal x11618=((1.0)*x11611);
IkReal x11619=(gconst7*x11611);
evalcond[0]=(((r21*x11617))+((r22*x11611))+(((-1.0)*x11612*x11616)));
evalcond[1]=(((r12*x11611))+((r11*x11617))+(((-1.0)*x11615*x11616)));
evalcond[2]=((-1.0)+(((-1.0)*x11614*x11616))+((r02*x11611))+((r01*x11617)));
evalcond[3]=((((-1.0)*x11614*x11618))+((r01*x11619))+(((-1.0)*r02*x11616)));
evalcond[4]=(((r21*x11619))+((sj1*sj2))+(((-1.0)*r22*x11616))+(((-1.0)*cj1*x11613))+(((-1.0)*x11612*x11618)));
evalcond[5]=((((-1.0)*r12*x11616))+(((-1.0)*sj1*x11613))+((r11*x11619))+(((-1.0)*cj1*sj2))+(((-1.0)*x11615*x11618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11620=(gconst7*r01);
IkReal x11621=(gconst8*r00);
CheckValue<IkReal> x11622=IKPowWithIntegerCheck(IKsign(((x11620*x11620)+(x11621*x11621)+(r02*r02)+(((-2.0)*x11620*x11621)))),-1);
if(!x11622.valid){
continue;
}
CheckValue<IkReal> x11623 = IKatan2WithCheck(IkReal((x11620+(((-1.0)*x11621)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11622.value)))+(x11623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11624=IKsin(j4);
IkReal x11625=IKcos(j4);
IkReal x11626=(gconst8*r20);
IkReal x11627=((1.0)*cj2);
IkReal x11628=(gconst8*r00);
IkReal x11629=(gconst8*r10);
IkReal x11630=((1.0)*x11624);
IkReal x11631=(gconst7*x11624);
IkReal x11632=((1.0)*x11625);
IkReal x11633=(gconst7*x11625);
evalcond[0]=(((r22*x11625))+((r21*x11631))+(((-1.0)*x11626*x11630)));
evalcond[1]=(((r11*x11631))+((r12*x11625))+(((-1.0)*x11629*x11630)));
evalcond[2]=((-1.0)+(((-1.0)*x11628*x11630))+((r02*x11625))+((r01*x11631)));
evalcond[3]=((((-1.0)*r02*x11630))+(((-1.0)*x11628*x11632))+((r01*x11633)));
evalcond[4]=((((-1.0)*r22*x11630))+((sj1*sj2))+((r21*x11633))+(((-1.0)*cj1*x11627))+(((-1.0)*x11626*x11632)));
evalcond[5]=(((r11*x11633))+(((-1.0)*sj1*x11627))+(((-1.0)*cj1*sj2))+(((-1.0)*x11629*x11632))+(((-1.0)*r12*x11630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11634 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst7*r11))+((gconst8*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11634.valid){
continue;
}
CheckValue<IkReal> x11635=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x11635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11634.value)+(((1.5707963267949)*(x11635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11636=IKsin(j4);
IkReal x11637=IKcos(j4);
IkReal x11638=(gconst8*r20);
IkReal x11639=((1.0)*cj2);
IkReal x11640=(gconst8*r00);
IkReal x11641=(gconst8*r10);
IkReal x11642=((1.0)*x11636);
IkReal x11643=(gconst7*x11636);
IkReal x11644=((1.0)*x11637);
IkReal x11645=(gconst7*x11637);
evalcond[0]=((((-1.0)*x11638*x11642))+((r22*x11637))+((r21*x11643)));
evalcond[1]=(((r11*x11643))+(((-1.0)*x11641*x11642))+((r12*x11637)));
evalcond[2]=((-1.0)+(((-1.0)*x11640*x11642))+((r02*x11637))+((r01*x11643)));
evalcond[3]=((((-1.0)*x11640*x11644))+((r01*x11645))+(((-1.0)*r02*x11642)));
evalcond[4]=((((-1.0)*x11638*x11644))+(((-1.0)*r22*x11642))+((sj1*sj2))+((r21*x11645))+(((-1.0)*cj1*x11639)));
evalcond[5]=((((-1.0)*r12*x11642))+((r11*x11645))+(((-1.0)*x11641*x11644))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11646=((-1.0)*r10);
IkReal x11647=x11299;
CheckValue<IkReal> x11649 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11646),IKFAST_ATAN2_MAGTHRESH);
if(!x11649.valid){
continue;
}
IkReal x11648=((-1.0)*(x11649.value));
sj5=gconst7;
cj5=gconst8;
j5=x11648;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11648;
IkReal gconst7=(r11*x11647);
IkReal gconst8=(x11646*x11647);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11650=((-1.0)*r10);
IkReal x11651=x11299;
CheckValue<IkReal> x11653 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11650),IKFAST_ATAN2_MAGTHRESH);
if(!x11653.valid){
continue;
}
IkReal x11652=((-1.0)*(x11653.value));
sj5=gconst7;
cj5=gconst8;
j5=x11652;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11652;
IkReal gconst7=(r11*x11651);
IkReal gconst8=(x11650*x11651);
IkReal x11654=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11658=IKPowWithIntegerCheck(x11654,-1);
if(!x11658.valid){
continue;
}
IkReal x11655=x11658.value;
IkReal x11656=((1.0)*x11655);
IkReal x11657=((((-1.0)*x11656*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11655))+(((-1.0)*x11656*(r01*r01)*(r11*r11))));
j4eval[0]=x11657;
j4eval[1]=r02;
j4eval[2]=x11654;
j4eval[3]=IKsign(x11657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11659=((-1.0)*r10);
IkReal x11660=x11299;
CheckValue<IkReal> x11662 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11659),IKFAST_ATAN2_MAGTHRESH);
if(!x11662.valid){
continue;
}
IkReal x11661=((-1.0)*(x11662.value));
sj5=gconst7;
cj5=gconst8;
j5=x11661;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11661;
IkReal gconst7=(r11*x11660);
IkReal gconst8=(x11659*x11660);
IkReal x11663=r12*r12;
CheckValue<IkReal> x11666=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11663))),-1);
if(!x11666.valid){
continue;
}
IkReal x11664=x11666.value;
IkReal x11665=(x11663+(((2.0)*x11664*(r10*r10)*(r11*r11)))+((x11664*(r11*r11*r11*r11)))+((x11664*(r10*r10*r10*r10))));
j4eval[0]=x11665;
j4eval[1]=IKsign(x11665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11667=(cj2*sj1);
IkReal x11668=(gconst7*r11);
IkReal x11669=(gconst8*r10);
IkReal x11670=(cj1*sj2);
CheckValue<IkReal> x11671=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11668*x11668)+(x11669*x11669)+(((-2.0)*x11668*x11669)))),-1);
if(!x11671.valid){
continue;
}
CheckValue<IkReal> x11672 = IKatan2WithCheck(IkReal((((r12*x11670))+((r12*x11667)))),IkReal(((((-1.0)*x11668*x11670))+((x11669*x11670))+(((-1.0)*x11667*x11668))+((x11667*x11669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11671.value)))+(x11672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11673=IKsin(j4);
IkReal x11674=IKcos(j4);
IkReal x11675=(gconst8*r20);
IkReal x11676=(gconst8*r00);
IkReal x11677=(gconst8*r10);
IkReal x11678=((1.0)*x11673);
IkReal x11679=(gconst7*x11673);
IkReal x11680=((1.0)*x11674);
IkReal x11681=(gconst7*x11674);
evalcond[0]=(((r22*x11674))+(((-1.0)*x11675*x11678))+((r21*x11679)));
evalcond[1]=((((-1.0)*x11677*x11678))+((r12*x11674))+((r11*x11679)));
evalcond[2]=((1.0)+(((-1.0)*x11676*x11678))+((r02*x11674))+((r01*x11679)));
evalcond[3]=((((-1.0)*r02*x11678))+((r01*x11681))+(((-1.0)*x11676*x11680)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x11681))+(((-1.0)*r12*x11678))+(((-1.0)*x11677*x11680)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11681))+(((-1.0)*x11675*x11680))+(((-1.0)*r22*x11678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11682=(gconst7*r01);
IkReal x11683=(gconst8*r00);
CheckValue<IkReal> x11684 = IKatan2WithCheck(IkReal(((((-1.0)*x11683))+x11682)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11684.valid){
continue;
}
CheckValue<IkReal> x11685=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11682*x11683))+(((-1.0)*(x11683*x11683)))+(((-1.0)*(x11682*x11682))))),-1);
if(!x11685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11684.value)+(((1.5707963267949)*(x11685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11686=IKsin(j4);
IkReal x11687=IKcos(j4);
IkReal x11688=(gconst8*r20);
IkReal x11689=(gconst8*r00);
IkReal x11690=(gconst8*r10);
IkReal x11691=((1.0)*x11686);
IkReal x11692=(gconst7*x11686);
IkReal x11693=((1.0)*x11687);
IkReal x11694=(gconst7*x11687);
evalcond[0]=(((r22*x11687))+(((-1.0)*x11688*x11691))+((r21*x11692)));
evalcond[1]=((((-1.0)*x11690*x11691))+((r12*x11687))+((r11*x11692)));
evalcond[2]=((1.0)+(((-1.0)*x11689*x11691))+((r02*x11687))+((r01*x11692)));
evalcond[3]=((((-1.0)*x11689*x11693))+((r01*x11694))+(((-1.0)*r02*x11691)));
evalcond[4]=((((-1.0)*x11690*x11693))+((cj2*sj1))+((cj1*sj2))+((r11*x11694))+(((-1.0)*r12*x11691)));
evalcond[5]=((((-1.0)*r22*x11691))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11688*x11693))+((r21*x11694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11695=((1.0)*gconst7);
CheckValue<IkReal> x11696 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst8*r10))+(((-1.0)*r11*x11695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11696.valid){
continue;
}
CheckValue<IkReal> x11697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11695))+(((-1.0)*gconst8*r21)))),-1);
if(!x11697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11696.value)+(((1.5707963267949)*(x11697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11698=IKsin(j4);
IkReal x11699=IKcos(j4);
IkReal x11700=(gconst8*r20);
IkReal x11701=(gconst8*r00);
IkReal x11702=(gconst8*r10);
IkReal x11703=((1.0)*x11698);
IkReal x11704=(gconst7*x11698);
IkReal x11705=((1.0)*x11699);
IkReal x11706=(gconst7*x11699);
evalcond[0]=(((r21*x11704))+(((-1.0)*x11700*x11703))+((r22*x11699)));
evalcond[1]=((((-1.0)*x11702*x11703))+((r12*x11699))+((r11*x11704)));
evalcond[2]=((1.0)+(((-1.0)*x11701*x11703))+((r01*x11704))+((r02*x11699)));
evalcond[3]=((((-1.0)*x11701*x11705))+((r01*x11706))+(((-1.0)*r02*x11703)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11702*x11705))+((cj1*sj2))+((r11*x11706))+(((-1.0)*r12*x11703)));
evalcond[5]=((((-1.0)*r22*x11703))+((r21*x11706))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11700*x11705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11707=((-1.0)*r10);
IkReal x11708=((-1.0)*r11);
CheckValue<IkReal> x11710 = IKatan2WithCheck(IkReal(x11708),IkReal(x11707),IKFAST_ATAN2_MAGTHRESH);
if(!x11710.valid){
continue;
}
IkReal x11709=((-1.0)*(x11710.value));
sj5=gconst7;
cj5=gconst8;
j5=x11709;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11707);
rxp1_1=(px*r21);
rxp1_2=(px*x11708);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x11709;
IkReal gconst7=r11;
IkReal gconst8=x11707;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11711=((-1.0)*r10);
IkReal x11712=((-1.0)*r11);
CheckValue<IkReal> x11714 = IKatan2WithCheck(IkReal(x11712),IkReal(x11711),IKFAST_ATAN2_MAGTHRESH);
if(!x11714.valid){
continue;
}
IkReal x11713=((-1.0)*(x11714.value));
sj5=gconst7;
cj5=gconst8;
j5=x11713;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11711);
rxp1_1=(px*r21);
rxp1_2=(px*x11712);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x11713;
IkReal gconst7=r11;
IkReal gconst8=x11711;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11715=((-1.0)*r10);
IkReal x11716=((-1.0)*r11);
CheckValue<IkReal> x11718 = IKatan2WithCheck(IkReal(x11716),IkReal(x11715),IKFAST_ATAN2_MAGTHRESH);
if(!x11718.valid){
continue;
}
IkReal x11717=((-1.0)*(x11718.value));
sj5=gconst7;
cj5=gconst8;
j5=x11717;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11715);
rxp1_1=(px*r21);
rxp1_2=(px*x11716);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x11717;
IkReal gconst7=r11;
IkReal gconst8=x11715;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11721=IKPowWithIntegerCheck((((gconst7*r11))+(((-1.0)*gconst8*r10))),-1);
if(!x11721.valid){
continue;
}
IkReal x11719=x11721.value;
IkReal x11720=(sj0*x11719);
cj4array[0]=(((cj1*sj2*x11720))+((cj2*sj1*x11720)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11722=IKsin(j4);
IkReal x11723=IKcos(j4);
IkReal x11724=(gconst7*r21);
IkReal x11725=((1.0)*gconst8*r20);
evalcond[0]=((-1.0)*r02*x11722);
evalcond[1]=((((-1.0)*sj0))+((r02*x11723)));
evalcond[2]=((((-1.0)*x11722*x11725))+((x11722*x11724)));
evalcond[3]=((((-1.0)*gconst8*r10*x11722))+((gconst7*r11*x11722)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11723*x11725))+((x11723*x11724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11727=IKPowWithIntegerCheck((((gconst7*r21))+(((-1.0)*gconst8*r20))),-1);
if(!x11727.valid){
continue;
}
IkReal x11726=x11727.value;
cj4array[0]=(((cj1*cj2*x11726))+(((-1.0)*sj1*sj2*x11726)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11728=IKsin(j4);
IkReal x11729=IKcos(j4);
IkReal x11730=((1.0)*sj0);
IkReal x11731=((1.0)*gconst8);
IkReal x11732=(gconst7*x11728);
evalcond[0]=((-1.0)*r02*x11728);
evalcond[1]=((((-1.0)*x11730))+((r02*x11729)));
evalcond[2]=(((r21*x11732))+(((-1.0)*r20*x11728*x11731)));
evalcond[3]=(((r11*x11732))+(((-1.0)*r10*x11728*x11731)));
evalcond[4]=(((gconst7*r11*x11729))+(((-1.0)*cj2*sj1*x11730))+(((-1.0)*r10*x11729*x11731))+(((-1.0)*cj1*sj2*x11730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11733=IKPowWithIntegerCheck(r02,-1);
if(!x11733.valid){
continue;
}
cj4array[0]=(sj0*(x11733.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11734=IKsin(j4);
IkReal x11735=IKcos(j4);
IkReal x11736=((1.0)*sj0);
IkReal x11737=(gconst7*x11734);
IkReal x11738=(gconst7*x11735);
IkReal x11739=((1.0)*gconst8*x11735);
IkReal x11740=((1.0)*gconst8*x11734);
evalcond[0]=((-1.0)*r02*x11734);
evalcond[1]=((((-1.0)*r20*x11740))+((r21*x11737)));
evalcond[2]=(((r11*x11737))+(((-1.0)*r10*x11740)));
evalcond[3]=((((-1.0)*r20*x11739))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11738)));
evalcond[4]=(((r11*x11738))+(((-1.0)*r10*x11739))+(((-1.0)*cj2*sj1*x11736))+(((-1.0)*cj1*sj2*x11736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11741=((1.0)*gconst7);
CheckValue<IkReal> x11742 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*r11*sj0*x11741))+(((-1.0)*cj0*r01*x11741))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11742.valid){
continue;
}
CheckValue<IkReal> x11743=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x11743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11742.value)+(((1.5707963267949)*(x11743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11744=IKsin(j4);
IkReal x11745=IKcos(j4);
IkReal x11746=((1.0)*cj2);
IkReal x11747=((1.0)*sj0);
IkReal x11748=((1.0)*gconst8);
IkReal x11749=(cj1*sj2);
IkReal x11750=(r20*x11748);
IkReal x11751=(gconst7*x11744);
IkReal x11752=(gconst7*x11745);
IkReal x11753=((1.0)*x11744);
evalcond[0]=((((-1.0)*x11744*x11750))+((r21*x11751)));
evalcond[1]=(cj0+(((-1.0)*r10*x11744*x11748))+((r11*x11751))+((r12*x11745)));
evalcond[2]=((((-1.0)*x11745*x11750))+((sj1*sj2))+(((-1.0)*cj1*x11746))+((r21*x11752)));
evalcond[3]=((((-1.0)*r00*x11744*x11748))+(((-1.0)*x11747))+((r02*x11745))+((r01*x11751)));
evalcond[4]=((((-1.0)*r00*x11745*x11748))+(((-1.0)*r02*x11753))+(((-1.0)*cj0*x11749))+((r01*x11752))+(((-1.0)*cj0*sj1*x11746)));
evalcond[5]=((((-1.0)*r12*x11753))+((r11*x11752))+(((-1.0)*sj0*sj1*x11746))+(((-1.0)*r10*x11745*x11748))+(((-1.0)*x11747*x11749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11754=(gconst8*r20);
IkReal x11755=(sj1*sj2);
IkReal x11756=(cj1*cj2);
IkReal x11757=(gconst7*r21);
CheckValue<IkReal> x11758 = IKatan2WithCheck(IkReal((((r22*x11755))+(((-1.0)*r22*x11756)))),IkReal((((x11754*x11755))+(((-1.0)*x11755*x11757))+(((-1.0)*x11754*x11756))+((x11756*x11757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11758.valid){
continue;
}
CheckValue<IkReal> x11759=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11757*x11757)+(((-2.0)*x11754*x11757))+(x11754*x11754))),-1);
if(!x11759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11758.value)+(((1.5707963267949)*(x11759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11760=IKsin(j4);
IkReal x11761=IKcos(j4);
IkReal x11762=(gconst8*r20);
IkReal x11763=((1.0)*cj2);
IkReal x11764=((1.0)*sj0);
IkReal x11765=(gconst8*r00);
IkReal x11766=(gconst8*r10);
IkReal x11767=(cj1*sj2);
IkReal x11768=((1.0)*x11760);
IkReal x11769=(gconst7*x11760);
IkReal x11770=((1.0)*x11761);
IkReal x11771=(gconst7*x11761);
evalcond[0]=(((r22*x11761))+(((-1.0)*x11762*x11768))+((r21*x11769)));
evalcond[1]=(((r11*x11769))+cj0+(((-1.0)*x11766*x11768))+((r12*x11761)));
evalcond[2]=((((-1.0)*x11765*x11768))+((r02*x11761))+(((-1.0)*x11764))+((r01*x11769)));
evalcond[3]=((((-1.0)*cj1*x11763))+((sj1*sj2))+(((-1.0)*r22*x11768))+(((-1.0)*x11762*x11770))+((r21*x11771)));
evalcond[4]=((((-1.0)*cj0*x11767))+(((-1.0)*cj0*sj1*x11763))+(((-1.0)*x11765*x11770))+(((-1.0)*r02*x11768))+((r01*x11771)));
evalcond[5]=((((-1.0)*r12*x11768))+((r11*x11771))+(((-1.0)*x11766*x11770))+(((-1.0)*x11764*x11767))+(((-1.0)*sj0*sj1*x11763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11772=((1.0)*sj0);
IkReal x11773=((1.0)*gconst8);
CheckValue<IkReal> x11774=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x11773)))),-1);
if(!x11774.valid){
continue;
}
CheckValue<IkReal> x11775 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11772))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst7*r01))+((gconst7*r11*sj0))+(((-1.0)*cj0*r00*x11773))+(((-1.0)*gconst8*r10*x11772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11774.value)))+(x11775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11776=IKsin(j4);
IkReal x11777=IKcos(j4);
IkReal x11778=(gconst8*r20);
IkReal x11779=((1.0)*cj2);
IkReal x11780=((1.0)*sj0);
IkReal x11781=(gconst8*r00);
IkReal x11782=(gconst8*r10);
IkReal x11783=(cj1*sj2);
IkReal x11784=((1.0)*x11776);
IkReal x11785=(gconst7*x11776);
IkReal x11786=((1.0)*x11777);
IkReal x11787=(gconst7*x11777);
evalcond[0]=(((r21*x11785))+(((-1.0)*x11778*x11784))+((r22*x11777)));
evalcond[1]=(((r11*x11785))+cj0+((r12*x11777))+(((-1.0)*x11782*x11784)));
evalcond[2]=(((r02*x11777))+(((-1.0)*x11781*x11784))+(((-1.0)*x11780))+((r01*x11785)));
evalcond[3]=(((r21*x11787))+(((-1.0)*cj1*x11779))+(((-1.0)*x11778*x11786))+((sj1*sj2))+(((-1.0)*r22*x11784)));
evalcond[4]=((((-1.0)*cj0*x11783))+(((-1.0)*cj0*sj1*x11779))+(((-1.0)*x11781*x11786))+(((-1.0)*r02*x11784))+((r01*x11787)));
evalcond[5]=(((r11*x11787))+(((-1.0)*x11782*x11786))+(((-1.0)*r12*x11784))+(((-1.0)*x11780*x11783))+(((-1.0)*sj0*sj1*x11779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11788=((1.0)*gconst7);
CheckValue<IkReal> x11789=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r01))+(((-1.0)*r00*x11788)))),-1);
if(!x11789.valid){
continue;
}
CheckValue<IkReal> x11790 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x11788))+((cj0*gconst8*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11789.value)))+(x11790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11791=IKsin(j4);
IkReal x11792=IKcos(j4);
IkReal x11793=(gconst8*r20);
IkReal x11794=((1.0)*cj2);
IkReal x11795=((1.0)*sj0);
IkReal x11796=(gconst8*r00);
IkReal x11797=(gconst8*r10);
IkReal x11798=(cj1*sj2);
IkReal x11799=((1.0)*x11791);
IkReal x11800=(gconst7*x11791);
IkReal x11801=((1.0)*x11792);
IkReal x11802=(gconst7*x11792);
evalcond[0]=(((r21*x11800))+(((-1.0)*x11793*x11799))+((r22*x11792)));
evalcond[1]=(((r12*x11792))+cj0+(((-1.0)*x11797*x11799))+((r11*x11800)));
evalcond[2]=(((r02*x11792))+(((-1.0)*x11796*x11799))+((r01*x11800))+(((-1.0)*x11795)));
evalcond[3]=(((r21*x11802))+(((-1.0)*cj1*x11794))+(((-1.0)*x11793*x11801))+((sj1*sj2))+(((-1.0)*r22*x11799)));
evalcond[4]=((((-1.0)*cj0*x11798))+(((-1.0)*r02*x11799))+(((-1.0)*x11796*x11801))+((r01*x11802))+(((-1.0)*cj0*sj1*x11794)));
evalcond[5]=((((-1.0)*x11795*x11798))+(((-1.0)*x11797*x11801))+(((-1.0)*sj0*sj1*x11794))+(((-1.0)*r12*x11799))+((r11*x11802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11803=((-1.0)*r10);
IkReal x11804=x11299;
CheckValue<IkReal> x11806 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11803),IKFAST_ATAN2_MAGTHRESH);
if(!x11806.valid){
continue;
}
IkReal x11805=((-1.0)*(x11806.value));
sj5=gconst7;
cj5=gconst8;
j5=x11805;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11805;
IkReal gconst7=(r11*x11804);
IkReal gconst8=(x11803*x11804);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11807=((-1.0)*r10);
IkReal x11808=x11299;
CheckValue<IkReal> x11810 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11807),IKFAST_ATAN2_MAGTHRESH);
if(!x11810.valid){
continue;
}
IkReal x11809=((-1.0)*(x11810.value));
sj5=gconst7;
cj5=gconst8;
j5=x11809;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11809;
IkReal gconst7=(r11*x11808);
IkReal gconst8=(x11807*x11808);
CheckValue<IkReal> x11818=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11818.valid){
continue;
}
IkReal x11811=x11818.value;
IkReal x11812=(cj3*x11811);
IkReal x11813=(r00*x11812);
IkReal x11814=(r21*x11812);
IkReal x11815=(r20*x11812);
IkReal x11816=(r01*x11812);
IkReal x11817=(r10*r11*x11812);
j4eval[0]=IKsign((((r10*r11*r21*x11813))+((r01*r10*r11*x11815))+((r20*x11813*(r10*r10)))+((cj3*r02*r22))+((r01*x11814*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11819=gconst7*gconst7;
IkReal x11820=gconst8*gconst8;
IkReal x11821=((1.0)*sj3);
IkReal x11822=((1.0)*cj3);
IkReal x11823=(gconst7*r00);
IkReal x11824=(gconst8*r21);
IkReal x11825=(r20*x11820);
IkReal x11826=(gconst7*gconst8*r20);
IkReal x11827=(r21*x11819);
CheckValue<IkReal> x11828=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11821*x11825))+(((-1.0)*r02*r22*x11821))+((r01*sj3*x11826))+((sj3*x11823*x11824))+(((-1.0)*r01*x11821*x11827)))),-1);
if(!x11828.valid){
continue;
}
CheckValue<IkReal> x11829 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11822*x11823))+(((-1.0)*gconst8*r01*r22*x11822)))),IkReal((((cj3*gconst7*r01*x11824))+(((-1.0)*r01*x11822*x11825))+(((-1.0)*gconst8*r20*x11822*x11823))+((cj3*r00*x11827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11828.value)))+(x11829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11830=IKsin(j4);
IkReal x11831=IKcos(j4);
IkReal x11832=(sj1*sj2);
IkReal x11833=(gconst8*r20);
IkReal x11834=(cj3*gconst7);
IkReal x11835=((1.0)*gconst7);
IkReal x11836=((1.0)*r10);
IkReal x11837=((1.0)*cj2);
IkReal x11838=(cj1*sj2);
IkReal x11839=(gconst8*r10);
IkReal x11840=(gconst8*r00);
IkReal x11841=(cj1*x11837);
IkReal x11842=(sj3*x11831);
IkReal x11843=((1.0)*x11830);
IkReal x11844=((1.0)*gconst8*r11);
IkReal x11845=(sj3*x11830);
IkReal x11846=(gconst7*x11830);
IkReal x11847=((1.0)*gconst8*r21);
IkReal x11848=(cj3*x11831);
IkReal x11849=((1.0)*gconst8*r01);
evalcond[0]=((((-1.0)*x11833*x11843))+((r21*x11846))+((r22*x11831)));
evalcond[1]=(((r11*x11846))+(((-1.0)*gconst8*x11830*x11836))+((r12*x11831)));
evalcond[2]=((-1.0)+(((-1.0)*x11840*x11843))+((r02*x11831))+((r01*x11846)));
evalcond[3]=(((x11840*x11842))+(((-1.0)*cj3*x11849))+(((-1.0)*r01*x11835*x11842))+(((-1.0)*r00*x11834))+((r02*x11845)));
evalcond[4]=((((-1.0)*cj3*r02*x11843))+(((-1.0)*sj3*x11849))+(((-1.0)*x11840*x11848))+((r01*x11831*x11834))+(((-1.0)*r00*sj3*x11835)));
evalcond[5]=((((-1.0)*x11841))+(((-1.0)*r20*x11834))+(((-1.0)*cj3*x11847))+((r22*x11845))+((x11833*x11842))+x11832+(((-1.0)*r21*x11835*x11842)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*sj3*x11847))+(((-1.0)*r20*sj3*x11835))+((r21*x11831*x11834))+(((-1.0)*x11833*x11848))+(((-1.0)*cj3*r22*x11843))+x11838);
evalcond[7]=(((x11839*x11842))+(((-1.0)*cj3*x11844))+(((-1.0)*x11838))+(((-1.0)*sj1*x11837))+(((-1.0)*x11834*x11836))+((r12*x11845))+(((-1.0)*r11*x11835*x11842)));
evalcond[8]=((((-1.0)*sj3*x11844))+(((-1.0)*x11841))+(((-1.0)*cj3*r12*x11843))+((r11*x11831*x11834))+(((-1.0)*r10*sj3*x11835))+(((-1.0)*gconst8*x11836*x11848))+x11832);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11850=gconst7*gconst7;
IkReal x11851=gconst8*gconst8;
IkReal x11852=(r00*r21);
IkReal x11853=(cj3*r01);
IkReal x11854=(r00*r20);
IkReal x11855=(gconst7*sj3);
IkReal x11856=(gconst8*r01);
IkReal x11857=((1.0)*r22);
IkReal x11858=((1.0)*gconst7*gconst8);
CheckValue<IkReal> x11859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11853*x11858))+((cj3*x11851*x11854))+((cj3*r02*r22))+((r21*x11850*x11853))+(((-1.0)*cj3*x11852*x11858)))),-1);
if(!x11859.valid){
continue;
}
CheckValue<IkReal> x11860 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11855*x11857))+(((-1.0)*sj3*x11856*x11857)))),IkReal(((((-1.0)*gconst8*x11854*x11855))+((sj3*x11850*x11852))+(((-1.0)*r01*r20*sj3*x11851))+((r21*x11855*x11856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11859.value)))+(x11860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11861=IKsin(j4);
IkReal x11862=IKcos(j4);
IkReal x11863=(sj1*sj2);
IkReal x11864=(gconst8*r20);
IkReal x11865=(cj3*gconst7);
IkReal x11866=((1.0)*gconst7);
IkReal x11867=((1.0)*r10);
IkReal x11868=((1.0)*cj2);
IkReal x11869=(cj1*sj2);
IkReal x11870=(gconst8*r10);
IkReal x11871=(gconst8*r00);
IkReal x11872=(cj1*x11868);
IkReal x11873=(sj3*x11862);
IkReal x11874=((1.0)*x11861);
IkReal x11875=((1.0)*gconst8*r11);
IkReal x11876=(sj3*x11861);
IkReal x11877=(gconst7*x11861);
IkReal x11878=((1.0)*gconst8*r21);
IkReal x11879=(cj3*x11862);
IkReal x11880=((1.0)*gconst8*r01);
evalcond[0]=(((r22*x11862))+((r21*x11877))+(((-1.0)*x11864*x11874)));
evalcond[1]=((((-1.0)*gconst8*x11861*x11867))+((r12*x11862))+((r11*x11877)));
evalcond[2]=((-1.0)+(((-1.0)*x11871*x11874))+((r02*x11862))+((r01*x11877)));
evalcond[3]=(((x11871*x11873))+(((-1.0)*r00*x11865))+(((-1.0)*r01*x11866*x11873))+(((-1.0)*cj3*x11880))+((r02*x11876)));
evalcond[4]=((((-1.0)*sj3*x11880))+(((-1.0)*x11871*x11879))+((r01*x11862*x11865))+(((-1.0)*cj3*r02*x11874))+(((-1.0)*r00*sj3*x11866)));
evalcond[5]=((((-1.0)*x11872))+((x11864*x11873))+(((-1.0)*r21*x11866*x11873))+(((-1.0)*cj3*x11878))+((r22*x11876))+(((-1.0)*r20*x11865))+x11863);
evalcond[6]=(((cj2*sj1))+(((-1.0)*r20*sj3*x11866))+(((-1.0)*sj3*x11878))+(((-1.0)*x11864*x11879))+((r21*x11862*x11865))+(((-1.0)*cj3*r22*x11874))+x11869);
evalcond[7]=((((-1.0)*r11*x11866*x11873))+(((-1.0)*x11869))+(((-1.0)*sj1*x11868))+(((-1.0)*x11865*x11867))+((r12*x11876))+(((-1.0)*cj3*x11875))+((x11870*x11873)));
evalcond[8]=((((-1.0)*cj3*r12*x11874))+(((-1.0)*x11872))+((r11*x11862*x11865))+(((-1.0)*sj3*x11875))+x11863+(((-1.0)*gconst8*x11867*x11879))+(((-1.0)*r10*sj3*x11866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11881 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst7*r11))+((gconst8*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11881.valid){
continue;
}
CheckValue<IkReal> x11882=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x11882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11881.value)+(((1.5707963267949)*(x11882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11883=IKsin(j4);
IkReal x11884=IKcos(j4);
IkReal x11885=(sj1*sj2);
IkReal x11886=(gconst8*r20);
IkReal x11887=(cj3*gconst7);
IkReal x11888=((1.0)*gconst7);
IkReal x11889=((1.0)*r10);
IkReal x11890=((1.0)*cj2);
IkReal x11891=(cj1*sj2);
IkReal x11892=(gconst8*r10);
IkReal x11893=(gconst8*r00);
IkReal x11894=(cj1*x11890);
IkReal x11895=(sj3*x11884);
IkReal x11896=((1.0)*x11883);
IkReal x11897=((1.0)*gconst8*r11);
IkReal x11898=(sj3*x11883);
IkReal x11899=(gconst7*x11883);
IkReal x11900=((1.0)*gconst8*r21);
IkReal x11901=(cj3*x11884);
IkReal x11902=((1.0)*gconst8*r01);
evalcond[0]=((((-1.0)*x11886*x11896))+((r21*x11899))+((r22*x11884)));
evalcond[1]=(((r12*x11884))+(((-1.0)*gconst8*x11883*x11889))+((r11*x11899)));
evalcond[2]=((-1.0)+((r01*x11899))+((r02*x11884))+(((-1.0)*x11893*x11896)));
evalcond[3]=((((-1.0)*cj3*x11902))+((r02*x11898))+((x11893*x11895))+(((-1.0)*r00*x11887))+(((-1.0)*r01*x11888*x11895)));
evalcond[4]=((((-1.0)*x11893*x11901))+(((-1.0)*r00*sj3*x11888))+(((-1.0)*sj3*x11902))+((r01*x11884*x11887))+(((-1.0)*cj3*r02*x11896)));
evalcond[5]=((((-1.0)*r20*x11887))+((x11886*x11895))+((r22*x11898))+(((-1.0)*cj3*x11900))+(((-1.0)*r21*x11888*x11895))+(((-1.0)*x11894))+x11885);
evalcond[6]=((((-1.0)*x11886*x11901))+((cj2*sj1))+((r21*x11884*x11887))+(((-1.0)*sj3*x11900))+(((-1.0)*r20*sj3*x11888))+(((-1.0)*cj3*r22*x11896))+x11891);
evalcond[7]=((((-1.0)*x11891))+(((-1.0)*x11887*x11889))+(((-1.0)*r11*x11888*x11895))+((x11892*x11895))+(((-1.0)*cj3*x11897))+(((-1.0)*sj1*x11890))+((r12*x11898)));
evalcond[8]=((((-1.0)*cj3*r12*x11896))+(((-1.0)*r10*sj3*x11888))+(((-1.0)*x11894))+((r11*x11884*x11887))+(((-1.0)*sj3*x11897))+x11885+(((-1.0)*gconst8*x11889*x11901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11903=((-1.0)*r10);
IkReal x11904=x11299;
CheckValue<IkReal> x11906 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11903),IKFAST_ATAN2_MAGTHRESH);
if(!x11906.valid){
continue;
}
IkReal x11905=((-1.0)*(x11906.value));
sj5=gconst7;
cj5=gconst8;
j5=x11905;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11905;
IkReal gconst7=(r11*x11904);
IkReal gconst8=(x11903*x11904);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11907=((-1.0)*r10);
IkReal x11908=x11299;
CheckValue<IkReal> x11910 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11907),IKFAST_ATAN2_MAGTHRESH);
if(!x11910.valid){
continue;
}
IkReal x11909=((-1.0)*(x11910.value));
sj5=gconst7;
cj5=gconst8;
j5=x11909;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11909;
IkReal gconst7=(r11*x11908);
IkReal gconst8=(x11907*x11908);
CheckValue<IkReal> x11918=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11918.valid){
continue;
}
IkReal x11911=x11918.value;
IkReal x11912=(cj3*x11911);
IkReal x11913=(r00*x11912);
IkReal x11914=(r21*x11912);
IkReal x11915=(r20*x11912);
IkReal x11916=(r01*x11912);
IkReal x11917=(r10*r11*x11912);
j4eval[0]=IKsign((((r01*r10*r11*x11915))+((r10*r11*r21*x11913))+((cj3*r02*r22))+((r20*x11913*(r10*r10)))+((r01*x11914*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11919=gconst7*gconst7;
IkReal x11920=gconst8*gconst8;
IkReal x11921=((1.0)*sj3);
IkReal x11922=((1.0)*cj3);
IkReal x11923=(gconst7*r00);
IkReal x11924=(gconst8*r21);
IkReal x11925=(r20*x11920);
IkReal x11926=(gconst7*gconst8*r20);
IkReal x11927=(r21*x11919);
CheckValue<IkReal> x11928=IKPowWithIntegerCheck(IKsign((((sj3*x11923*x11924))+(((-1.0)*r02*r22*x11921))+(((-1.0)*r00*x11921*x11925))+(((-1.0)*r01*x11921*x11927))+((r01*sj3*x11926)))),-1);
if(!x11928.valid){
continue;
}
CheckValue<IkReal> x11929 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11922*x11923))+(((-1.0)*gconst8*r01*r22*x11922)))),IkReal(((((-1.0)*gconst8*r20*x11922*x11923))+(((-1.0)*r01*x11922*x11925))+((cj3*gconst7*r01*x11924))+((cj3*r00*x11927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11928.value)))+(x11929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11930=IKsin(j4);
IkReal x11931=IKcos(j4);
IkReal x11932=(cj2*sj1);
IkReal x11933=(cj1*sj2);
IkReal x11934=(gconst8*r20);
IkReal x11935=(cj3*gconst7);
IkReal x11936=((1.0)*gconst7);
IkReal x11937=(sj1*sj2);
IkReal x11938=((1.0)*r10);
IkReal x11939=(cj1*cj2);
IkReal x11940=(gconst8*r10);
IkReal x11941=(gconst8*r00);
IkReal x11942=(sj3*x11931);
IkReal x11943=((1.0)*x11930);
IkReal x11944=((1.0)*gconst8*r11);
IkReal x11945=(sj3*x11930);
IkReal x11946=(gconst7*x11930);
IkReal x11947=((1.0)*gconst8*r21);
IkReal x11948=(cj3*x11931);
IkReal x11949=((1.0)*gconst8*r01);
IkReal x11950=(x11933+x11932);
evalcond[0]=(((r21*x11946))+((r22*x11931))+(((-1.0)*x11934*x11943)));
evalcond[1]=(((r11*x11946))+((r12*x11931))+(((-1.0)*gconst8*x11930*x11938)));
evalcond[2]=((1.0)+((r02*x11931))+((r01*x11946))+(((-1.0)*x11941*x11943)));
evalcond[3]=((((-1.0)*r00*x11935))+((r02*x11945))+(((-1.0)*cj3*x11949))+((x11941*x11942))+(((-1.0)*r01*x11936*x11942)));
evalcond[4]=((((-1.0)*x11941*x11948))+(((-1.0)*sj3*x11949))+(((-1.0)*r00*sj3*x11936))+((r01*x11931*x11935))+(((-1.0)*cj3*r02*x11943)));
evalcond[5]=(x11950+(((-1.0)*x11935*x11938))+((r12*x11945))+((x11940*x11942))+(((-1.0)*cj3*x11944))+(((-1.0)*r11*x11936*x11942)));
evalcond[6]=(x11937+(((-1.0)*cj3*x11947))+((r22*x11945))+(((-1.0)*r20*x11935))+(((-1.0)*x11939))+((x11934*x11942))+(((-1.0)*r21*x11936*x11942)));
evalcond[7]=(x11950+(((-1.0)*x11934*x11948))+(((-1.0)*sj3*x11947))+(((-1.0)*r20*sj3*x11936))+((r21*x11931*x11935))+(((-1.0)*cj3*r22*x11943)));
evalcond[8]=(x11939+((r11*x11931*x11935))+(((-1.0)*sj3*x11944))+(((-1.0)*r10*sj3*x11936))+(((-1.0)*cj3*r12*x11943))+(((-1.0)*gconst8*x11938*x11948))+(((-1.0)*x11937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11951=gconst7*gconst7;
IkReal x11952=gconst8*gconst8;
IkReal x11953=(r00*r21);
IkReal x11954=(cj3*r01);
IkReal x11955=(r00*r20);
IkReal x11956=(gconst7*sj3);
IkReal x11957=(gconst8*r01);
IkReal x11958=((1.0)*r22);
IkReal x11959=((1.0)*gconst7*gconst8);
CheckValue<IkReal> x11960=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11954*x11959))+((r21*x11951*x11954))+(((-1.0)*cj3*x11953*x11959))+((cj3*r02*r22))+((cj3*x11952*x11955)))),-1);
if(!x11960.valid){
continue;
}
CheckValue<IkReal> x11961 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x11957*x11958))+(((-1.0)*r00*x11956*x11958)))),IkReal(((((-1.0)*r01*r20*sj3*x11952))+(((-1.0)*gconst8*x11955*x11956))+((sj3*x11951*x11953))+((r21*x11956*x11957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11960.value)))+(x11961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11962=IKsin(j4);
IkReal x11963=IKcos(j4);
IkReal x11964=(cj2*sj1);
IkReal x11965=(cj1*sj2);
IkReal x11966=(gconst8*r20);
IkReal x11967=(cj3*gconst7);
IkReal x11968=((1.0)*gconst7);
IkReal x11969=(sj1*sj2);
IkReal x11970=((1.0)*r10);
IkReal x11971=(cj1*cj2);
IkReal x11972=(gconst8*r10);
IkReal x11973=(gconst8*r00);
IkReal x11974=(sj3*x11963);
IkReal x11975=((1.0)*x11962);
IkReal x11976=((1.0)*gconst8*r11);
IkReal x11977=(sj3*x11962);
IkReal x11978=(gconst7*x11962);
IkReal x11979=((1.0)*gconst8*r21);
IkReal x11980=(cj3*x11963);
IkReal x11981=((1.0)*gconst8*r01);
IkReal x11982=(x11964+x11965);
evalcond[0]=((((-1.0)*x11966*x11975))+((r21*x11978))+((r22*x11963)));
evalcond[1]=(((r11*x11978))+((r12*x11963))+(((-1.0)*gconst8*x11962*x11970)));
evalcond[2]=((1.0)+((r01*x11978))+((r02*x11963))+(((-1.0)*x11973*x11975)));
evalcond[3]=((((-1.0)*cj3*x11981))+(((-1.0)*r00*x11967))+((x11973*x11974))+((r02*x11977))+(((-1.0)*r01*x11968*x11974)));
evalcond[4]=((((-1.0)*sj3*x11981))+(((-1.0)*r00*sj3*x11968))+(((-1.0)*x11973*x11980))+(((-1.0)*cj3*r02*x11975))+((r01*x11963*x11967)));
evalcond[5]=(x11982+((x11972*x11974))+(((-1.0)*x11967*x11970))+((r12*x11977))+(((-1.0)*cj3*x11976))+(((-1.0)*r11*x11968*x11974)));
evalcond[6]=(x11969+(((-1.0)*x11971))+((x11966*x11974))+(((-1.0)*r20*x11967))+(((-1.0)*r21*x11968*x11974))+(((-1.0)*cj3*x11979))+((r22*x11977)));
evalcond[7]=(x11982+(((-1.0)*sj3*x11979))+(((-1.0)*x11966*x11980))+(((-1.0)*cj3*r22*x11975))+((r21*x11963*x11967))+(((-1.0)*r20*sj3*x11968)));
evalcond[8]=(x11971+(((-1.0)*sj3*x11976))+(((-1.0)*x11969))+((r11*x11963*x11967))+(((-1.0)*r10*sj3*x11968))+(((-1.0)*cj3*r12*x11975))+(((-1.0)*gconst8*x11970*x11980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11983=((1.0)*gconst7);
CheckValue<IkReal> x11984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11983))+(((-1.0)*gconst8*r21)))),-1);
if(!x11984.valid){
continue;
}
CheckValue<IkReal> x11985 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x11983))+((gconst8*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11984.value)))+(x11985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11986=IKsin(j4);
IkReal x11987=IKcos(j4);
IkReal x11988=(cj2*sj1);
IkReal x11989=(cj1*sj2);
IkReal x11990=(gconst8*r20);
IkReal x11991=(cj3*gconst7);
IkReal x11992=((1.0)*gconst7);
IkReal x11993=(sj1*sj2);
IkReal x11994=((1.0)*r10);
IkReal x11995=(cj1*cj2);
IkReal x11996=(gconst8*r10);
IkReal x11997=(gconst8*r00);
IkReal x11998=(sj3*x11987);
IkReal x11999=((1.0)*x11986);
IkReal x12000=((1.0)*gconst8*r11);
IkReal x12001=(sj3*x11986);
IkReal x12002=(gconst7*x11986);
IkReal x12003=((1.0)*gconst8*r21);
IkReal x12004=(cj3*x11987);
IkReal x12005=((1.0)*gconst8*r01);
IkReal x12006=(x11988+x11989);
evalcond[0]=((((-1.0)*x11990*x11999))+((r22*x11987))+((r21*x12002)));
evalcond[1]=(((r12*x11987))+((r11*x12002))+(((-1.0)*gconst8*x11986*x11994)));
evalcond[2]=((1.0)+((r02*x11987))+((r01*x12002))+(((-1.0)*x11997*x11999)));
evalcond[3]=((((-1.0)*cj3*x12005))+(((-1.0)*r00*x11991))+((x11997*x11998))+(((-1.0)*r01*x11992*x11998))+((r02*x12001)));
evalcond[4]=((((-1.0)*cj3*r02*x11999))+((r01*x11987*x11991))+(((-1.0)*sj3*x12005))+(((-1.0)*r00*sj3*x11992))+(((-1.0)*x11997*x12004)));
evalcond[5]=(((x11996*x11998))+(((-1.0)*cj3*x12000))+(((-1.0)*x11991*x11994))+x12006+((r12*x12001))+(((-1.0)*r11*x11992*x11998)));
evalcond[6]=(x11993+((x11990*x11998))+(((-1.0)*r20*x11991))+(((-1.0)*cj3*x12003))+((r22*x12001))+(((-1.0)*x11995))+(((-1.0)*r21*x11992*x11998)));
evalcond[7]=((((-1.0)*x11990*x12004))+(((-1.0)*r20*sj3*x11992))+((r21*x11987*x11991))+(((-1.0)*sj3*x12003))+x12006+(((-1.0)*cj3*r22*x11999)));
evalcond[8]=(x11995+(((-1.0)*gconst8*x11994*x12004))+(((-1.0)*r10*sj3*x11992))+(((-1.0)*cj3*r12*x11999))+(((-1.0)*sj3*x12000))+(((-1.0)*x11993))+((r11*x11987*x11991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12007=((-1.0)*r10);
IkReal x12008=((-1.0)*r11);
CheckValue<IkReal> x12010 = IKatan2WithCheck(IkReal(x12008),IkReal(x12007),IKFAST_ATAN2_MAGTHRESH);
if(!x12010.valid){
continue;
}
IkReal x12009=((-1.0)*(x12010.value));
sj5=gconst7;
cj5=gconst8;
j5=x12009;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12007);
rxp1_1=(px*r21);
rxp1_2=(px*x12008);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x12009;
IkReal gconst7=r11;
IkReal gconst8=x12007;
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12011=((-1.0)*r10);
IkReal x12012=((-1.0)*r11);
CheckValue<IkReal> x12014 = IKatan2WithCheck(IkReal(x12012),IkReal(x12011),IKFAST_ATAN2_MAGTHRESH);
if(!x12014.valid){
continue;
}
IkReal x12013=((-1.0)*(x12014.value));
sj5=gconst7;
cj5=gconst8;
j5=x12013;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12011);
rxp1_1=(px*r21);
rxp1_2=(px*x12012);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x12013;
IkReal gconst7=r11;
IkReal gconst8=x12011;
j4eval[0]=1.0;
j4eval[1]=(((cj3*r10*r20))+((cj3*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12015=((-1.0)*r10);
IkReal x12016=((-1.0)*r11);
CheckValue<IkReal> x12018 = IKatan2WithCheck(IkReal(x12016),IkReal(x12015),IKFAST_ATAN2_MAGTHRESH);
if(!x12018.valid){
continue;
}
IkReal x12017=((-1.0)*(x12018.value));
sj5=gconst7;
cj5=gconst8;
j5=x12017;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12015);
rxp1_1=(px*r21);
rxp1_2=(px*x12016);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst6=x12017;
IkReal gconst7=r11;
IkReal gconst8=x12015;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12019=((-1.0)*r10);
IkReal x12020=((-1.0)*r11);
CheckValue<IkReal> x12022 = IKatan2WithCheck(IkReal(x12020),IkReal(x12019),IKFAST_ATAN2_MAGTHRESH);
if(!x12022.valid){
continue;
}
IkReal x12021=((-1.0)*(x12022.value));
sj5=gconst7;
cj5=gconst8;
j5=x12021;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12019);
rxp1_1=(px*r21);
rxp1_2=(px*x12020);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst6=x12021;
IkReal gconst7=r11;
IkReal gconst8=x12019;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12023=((-1.0)*r10);
IkReal x12024=((-1.0)*r11);
CheckValue<IkReal> x12026 = IKatan2WithCheck(IkReal(x12024),IkReal(x12023),IKFAST_ATAN2_MAGTHRESH);
if(!x12026.valid){
continue;
}
IkReal x12025=((-1.0)*(x12026.value));
sj5=gconst7;
cj5=gconst8;
j5=x12025;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12023);
rxp1_1=(px*r21);
rxp1_2=(px*x12024);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst6=x12025;
IkReal gconst7=r11;
IkReal gconst8=x12023;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12027=((-1.0)*r10);
IkReal x12028=((-1.0)*r11);
CheckValue<IkReal> x12030 = IKatan2WithCheck(IkReal(x12028),IkReal(x12027),IKFAST_ATAN2_MAGTHRESH);
if(!x12030.valid){
continue;
}
IkReal x12029=((-1.0)*(x12030.value));
sj5=gconst7;
cj5=gconst8;
j5=x12029;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12027);
rxp1_1=(px*r21);
rxp1_2=(px*x12028);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst6=x12029;
IkReal gconst7=r11;
IkReal gconst8=x12027;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12033=IKPowWithIntegerCheck((((gconst7*r11))+(((-1.0)*gconst8*r10))),-1);
if(!x12033.valid){
continue;
}
IkReal x12031=x12033.value;
IkReal x12032=(sj0*x12031);
cj4array[0]=(((cj1*cj2*x12032))+(((-1.0)*sj1*sj2*x12032)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12034=IKsin(j4);
IkReal x12035=IKcos(j4);
IkReal x12036=(gconst7*r21);
IkReal x12037=((1.0)*gconst8*r20);
evalcond[0]=((-1.0)*r02*x12034);
evalcond[1]=((((-1.0)*sj0))+((r02*x12035)));
evalcond[2]=((((-1.0)*x12034*x12037))+((x12034*x12036)));
evalcond[3]=(((gconst7*r11*x12034))+(((-1.0)*gconst8*r10*x12034)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12035*x12037))+((x12035*x12036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12040=IKPowWithIntegerCheck((((gconst7*r21))+(((-1.0)*gconst8*r20))),-1);
if(!x12040.valid){
continue;
}
IkReal x12038=x12040.value;
IkReal x12039=((1.0)*x12038);
cj4array[0]=((((-1.0)*cj2*sj1*x12039))+(((-1.0)*cj1*sj2*x12039)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12041=IKsin(j4);
IkReal x12042=IKcos(j4);
IkReal x12043=((1.0)*sj0);
IkReal x12044=((1.0)*gconst8);
IkReal x12045=(gconst7*x12041);
evalcond[0]=((-1.0)*r02*x12041);
evalcond[1]=(((r02*x12042))+(((-1.0)*x12043)));
evalcond[2]=((((-1.0)*r20*x12041*x12044))+((r21*x12045)));
evalcond[3]=((((-1.0)*r10*x12041*x12044))+((r11*x12045)));
evalcond[4]=((((-1.0)*r10*x12042*x12044))+((gconst7*r11*x12042))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x12043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12046=IKPowWithIntegerCheck(r02,-1);
if(!x12046.valid){
continue;
}
cj4array[0]=(sj0*(x12046.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12047=IKsin(j4);
IkReal x12048=IKcos(j4);
IkReal x12049=(gconst7*r21);
IkReal x12050=(gconst7*r11);
IkReal x12051=((1.0)*gconst8*x12048);
IkReal x12052=((1.0)*gconst8*x12047);
evalcond[0]=((-1.0)*r02*x12047);
evalcond[1]=((((-1.0)*r20*x12052))+((x12047*x12049)));
evalcond[2]=((((-1.0)*r10*x12052))+((x12047*x12050)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x12051))+((cj1*sj2))+((x12048*x12049)));
evalcond[4]=((((-1.0)*r10*x12051))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x12048*x12050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12053=((-1.0)*r10);
IkReal x12054=((-1.0)*r11);
CheckValue<IkReal> x12056 = IKatan2WithCheck(IkReal(x12054),IkReal(x12053),IKFAST_ATAN2_MAGTHRESH);
if(!x12056.valid){
continue;
}
IkReal x12055=((-1.0)*(x12056.value));
sj5=gconst7;
cj5=gconst8;
j5=x12055;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12053);
rxp1_1=(px*r21);
rxp1_2=(px*x12054);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst6=x12055;
IkReal gconst7=r11;
IkReal gconst8=x12053;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12057=((-1.0)*r10);
IkReal x12058=((-1.0)*r11);
CheckValue<IkReal> x12060 = IKatan2WithCheck(IkReal(x12058),IkReal(x12057),IKFAST_ATAN2_MAGTHRESH);
if(!x12060.valid){
continue;
}
IkReal x12059=((-1.0)*(x12060.value));
sj5=gconst7;
cj5=gconst8;
j5=x12059;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12057);
rxp1_1=(px*r21);
rxp1_2=(px*x12058);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst6=x12059;
IkReal gconst7=r11;
IkReal gconst8=x12057;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12061=((-1.0)*r10);
IkReal x12062=((-1.0)*r11);
CheckValue<IkReal> x12064 = IKatan2WithCheck(IkReal(x12062),IkReal(x12061),IKFAST_ATAN2_MAGTHRESH);
if(!x12064.valid){
continue;
}
IkReal x12063=((-1.0)*(x12064.value));
sj5=gconst7;
cj5=gconst8;
j5=x12063;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12061);
rxp1_1=(px*r21);
rxp1_2=(px*x12062);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst6=x12063;
IkReal gconst7=r11;
IkReal gconst8=x12061;
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12067=IKPowWithIntegerCheck(((((-1.0)*gconst7*r11))+((gconst8*r10))),-1);
if(!x12067.valid){
continue;
}
IkReal x12065=x12067.value;
IkReal x12066=(sj0*x12065);
cj4array[0]=((((-1.0)*sj1*sj2*x12066))+((cj1*cj2*x12066)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12068=IKsin(j4);
IkReal x12069=IKcos(j4);
IkReal x12070=(gconst7*r21);
IkReal x12071=(gconst8*r20);
IkReal x12072=((1.0)*x12068);
evalcond[0]=(r02*x12068);
evalcond[1]=((((-1.0)*sj0))+((r02*x12069)));
evalcond[2]=(((x12068*x12070))+(((-1.0)*x12071*x12072)));
evalcond[3]=((((-1.0)*gconst8*r10*x12072))+((gconst7*r11*x12068)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12069*x12070))+((x12069*x12071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12075=IKPowWithIntegerCheck(((((-1.0)*gconst7*r21))+((gconst8*r20))),-1);
if(!x12075.valid){
continue;
}
IkReal x12073=x12075.value;
IkReal x12074=((1.0)*x12073);
cj4array[0]=((((-1.0)*cj2*sj1*x12074))+(((-1.0)*cj1*sj2*x12074)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12076=IKsin(j4);
IkReal x12077=IKcos(j4);
IkReal x12078=(gconst8*r10);
IkReal x12079=((1.0)*sj0);
IkReal x12080=((1.0)*x12076);
IkReal x12081=(gconst7*x12076);
evalcond[0]=(r02*x12076);
evalcond[1]=((((-1.0)*x12079))+((r02*x12077)));
evalcond[2]=(((r21*x12081))+(((-1.0)*gconst8*r20*x12080)));
evalcond[3]=(((r11*x12081))+(((-1.0)*x12078*x12080)));
evalcond[4]=((((-1.0)*gconst7*r11*x12077))+(((-1.0)*cj1*cj2*x12079))+((x12077*x12078))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12082=IKPowWithIntegerCheck(r02,-1);
if(!x12082.valid){
continue;
}
cj4array[0]=(sj0*(x12082.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12083=IKsin(j4);
IkReal x12084=IKcos(j4);
IkReal x12085=(gconst7*r21);
IkReal x12086=(gconst7*r11);
IkReal x12087=(gconst8*x12084);
IkReal x12088=((1.0)*x12084);
IkReal x12089=((1.0)*gconst8*x12083);
evalcond[0]=(r02*x12083);
evalcond[1]=(((x12083*x12085))+(((-1.0)*r20*x12089)));
evalcond[2]=(((x12083*x12086))+(((-1.0)*r10*x12089)));
evalcond[3]=(((r20*x12087))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12085*x12088)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x12086*x12088))+((r10*x12087))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12091=IKPowWithIntegerCheck(r02,-1);
if(!x12091.valid){
continue;
}
IkReal x12090=x12091.value;
CheckValue<IkReal> x12092=IKPowWithIntegerCheck(sj3,-1);
if(!x12092.valid){
continue;
}
if( IKabs((x12090*(x12092.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x12090)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12090*(x12092.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x12090))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12090*(x12092.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x12090));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12093=IKsin(j4);
IkReal x12094=IKcos(j4);
IkReal x12095=(gconst8*r20);
IkReal x12096=((1.0)*gconst7);
IkReal x12097=(sj1*sj2);
IkReal x12098=(cj3*r10);
IkReal x12099=(gconst7*r11);
IkReal x12100=(cj2*sj1);
IkReal x12101=((1.0)*cj0);
IkReal x12102=(gconst7*r21);
IkReal x12103=((1.0)*sj0);
IkReal x12104=((1.0)*gconst8);
IkReal x12105=(gconst8*r10);
IkReal x12106=(cj1*sj2);
IkReal x12107=(sj3*x12094);
IkReal x12108=((1.0)*cj1*cj2);
IkReal x12109=((1.0)*x12093);
IkReal x12110=(r11*x12104);
IkReal x12111=(cj3*x12094);
evalcond[0]=(((r02*x12094))+(((-1.0)*x12103)));
evalcond[1]=(((x12093*x12102))+(((-1.0)*x12095*x12109)));
evalcond[2]=(cj0+(((-1.0)*r10*x12093*x12104))+((x12093*x12099)));
evalcond[3]=(((r02*sj3*x12093))+(((-1.0)*x12101*x12106))+(((-1.0)*x12100*x12101)));
evalcond[4]=((((-1.0)*cj1*cj2*x12101))+((cj0*x12097))+(((-1.0)*cj3*r02*x12109)));
evalcond[5]=((((-1.0)*x12095*x12111))+x12106+x12100+((x12102*x12111))+(((-1.0)*r21*sj3*x12104))+(((-1.0)*r20*sj3*x12096)));
evalcond[6]=(((x12095*x12107))+(((-1.0)*cj3*r21*x12104))+x12097+(((-1.0)*x12108))+(((-1.0)*r21*x12096*x12107))+(((-1.0)*cj3*r20*x12096)));
evalcond[7]=((((-1.0)*cj1*cj2*x12103))+(((-1.0)*x12094*x12098*x12104))+((x12099*x12111))+(((-1.0)*sj3*x12110))+(((-1.0)*r10*sj3*x12096))+((sj0*x12097)));
evalcond[8]=(((x12105*x12107))+(((-1.0)*x12096*x12098))+(((-1.0)*x12100*x12103))+(((-1.0)*x12103*x12106))+(((-1.0)*r11*x12096*x12107))+(((-1.0)*cj3*x12110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12112=((1.0)*gconst8);
CheckValue<IkReal> x12113=IKPowWithIntegerCheck((((gconst7*r11))+(((-1.0)*r10*x12112))),-1);
if(!x12113.valid){
continue;
}
CheckValue<IkReal> x12114=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x12112))+((cj3*gconst7*r21))),-1);
if(!x12114.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12113.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12114.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst8*r21*sj3))+((gconst7*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12113.value)))+IKsqr(((x12114.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst8*r21*sj3))+((gconst7*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12113.value)), ((x12114.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst8*r21*sj3))+((gconst7*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12115=IKsin(j4);
IkReal x12116=IKcos(j4);
IkReal x12117=(gconst8*r20);
IkReal x12118=((1.0)*gconst7);
IkReal x12119=(sj1*sj2);
IkReal x12120=(cj3*r10);
IkReal x12121=(gconst7*r11);
IkReal x12122=(cj2*sj1);
IkReal x12123=((1.0)*cj0);
IkReal x12124=(gconst7*r21);
IkReal x12125=((1.0)*sj0);
IkReal x12126=((1.0)*gconst8);
IkReal x12127=(gconst8*r10);
IkReal x12128=(cj1*sj2);
IkReal x12129=(sj3*x12116);
IkReal x12130=((1.0)*cj1*cj2);
IkReal x12131=((1.0)*x12115);
IkReal x12132=(r11*x12126);
IkReal x12133=(cj3*x12116);
evalcond[0]=(((r02*x12116))+(((-1.0)*x12125)));
evalcond[1]=(((x12115*x12124))+(((-1.0)*x12117*x12131)));
evalcond[2]=(((x12115*x12121))+cj0+(((-1.0)*r10*x12115*x12126)));
evalcond[3]=(((r02*sj3*x12115))+(((-1.0)*x12123*x12128))+(((-1.0)*x12122*x12123)));
evalcond[4]=(((cj0*x12119))+(((-1.0)*cj3*r02*x12131))+(((-1.0)*cj1*cj2*x12123)));
evalcond[5]=(((x12124*x12133))+x12128+x12122+(((-1.0)*x12117*x12133))+(((-1.0)*r20*sj3*x12118))+(((-1.0)*r21*sj3*x12126)));
evalcond[6]=((((-1.0)*r21*x12118*x12129))+(((-1.0)*x12130))+x12119+(((-1.0)*cj3*r20*x12118))+((x12117*x12129))+(((-1.0)*cj3*r21*x12126)));
evalcond[7]=(((sj0*x12119))+(((-1.0)*x12116*x12120*x12126))+(((-1.0)*r10*sj3*x12118))+(((-1.0)*cj1*cj2*x12125))+(((-1.0)*sj3*x12132))+((x12121*x12133)));
evalcond[8]=((((-1.0)*x12125*x12128))+(((-1.0)*x12118*x12120))+(((-1.0)*r11*x12118*x12129))+((x12127*x12129))+(((-1.0)*x12122*x12125))+(((-1.0)*cj3*x12132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12134=IKPowWithIntegerCheck((((gconst7*r11))+(((-1.0)*gconst8*r10))),-1);
if(!x12134.valid){
continue;
}
CheckValue<IkReal> x12135=IKPowWithIntegerCheck(r02,-1);
if(!x12135.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12134.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x12135.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12134.value)))+IKsqr((sj0*(x12135.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12134.value)), (sj0*(x12135.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12136=IKsin(j4);
IkReal x12137=IKcos(j4);
IkReal x12138=(gconst8*r20);
IkReal x12139=((1.0)*gconst7);
IkReal x12140=(sj1*sj2);
IkReal x12141=(cj3*r10);
IkReal x12142=(gconst7*r11);
IkReal x12143=(cj2*sj1);
IkReal x12144=((1.0)*cj0);
IkReal x12145=(gconst7*r21);
IkReal x12146=((1.0)*sj0);
IkReal x12147=((1.0)*gconst8);
IkReal x12148=(gconst8*r10);
IkReal x12149=(cj1*sj2);
IkReal x12150=(sj3*x12137);
IkReal x12151=((1.0)*cj1*cj2);
IkReal x12152=((1.0)*x12136);
IkReal x12153=(r11*x12147);
IkReal x12154=(cj3*x12137);
evalcond[0]=(((r02*x12137))+(((-1.0)*x12146)));
evalcond[1]=((((-1.0)*x12138*x12152))+((x12136*x12145)));
evalcond[2]=(cj0+(((-1.0)*r10*x12136*x12147))+((x12136*x12142)));
evalcond[3]=((((-1.0)*x12144*x12149))+(((-1.0)*x12143*x12144))+((r02*sj3*x12136)));
evalcond[4]=((((-1.0)*cj1*cj2*x12144))+(((-1.0)*cj3*r02*x12152))+((cj0*x12140)));
evalcond[5]=((((-1.0)*x12138*x12154))+x12143+x12149+(((-1.0)*r21*sj3*x12147))+(((-1.0)*r20*sj3*x12139))+((x12145*x12154)));
evalcond[6]=(x12140+(((-1.0)*cj3*r20*x12139))+((x12138*x12150))+(((-1.0)*r21*x12139*x12150))+(((-1.0)*x12151))+(((-1.0)*cj3*r21*x12147)));
evalcond[7]=((((-1.0)*cj1*cj2*x12146))+((sj0*x12140))+(((-1.0)*r10*sj3*x12139))+(((-1.0)*sj3*x12153))+(((-1.0)*x12137*x12141*x12147))+((x12142*x12154)));
evalcond[8]=((((-1.0)*x12143*x12146))+(((-1.0)*r11*x12139*x12150))+((x12148*x12150))+(((-1.0)*cj3*x12153))+(((-1.0)*x12139*x12141))+(((-1.0)*x12146*x12149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12155=((-1.0)*r10);
IkReal x12156=x11299;
CheckValue<IkReal> x12158 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12155),IKFAST_ATAN2_MAGTHRESH);
if(!x12158.valid){
continue;
}
IkReal x12157=((-1.0)*(x12158.value));
sj5=gconst7;
cj5=gconst8;
j5=x12157;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst6=x12157;
IkReal gconst7=(r11*x12156);
IkReal gconst8=(x12155*x12156);
IkReal x12159=r12*r12;
IkReal x12160=((1.0)*sj0);
IkReal x12161=(cj0*r02);
IkReal x12162=x11299;
j4eval[0]=((IKabs((((r12*x12161*x12162))+(((-1.0)*x12160*x12162))+((sj0*x12159*x12162)))))+(IKabs(((((-1.0)*x12161))+(((-1.0)*r12*x12160))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12163=((1.0)*r21);
IkReal x12164=(r12*sj3);
IkReal x12165=(cj3*gconst7);
IkReal x12166=(gconst7*r20);
IkReal x12167=(cj2*sj1);
IkReal x12168=(cj1*sj2);
IkReal x12169=(cj3*r20);
IkReal x12170=((1.0)*gconst8*r20);
CheckValue<IkReal> x12171=IKPowWithIntegerCheck((((gconst7*r11*r21*x12165))+((r10*x12169*(gconst8*gconst8)))+(((-1.0)*gconst8*r10*x12163*x12165))+(((-1.0)*r11*x12165*x12170))),-1);
if(!x12171.valid){
continue;
}
CheckValue<IkReal> x12172=IKPowWithIntegerCheck((((r21*x12165))+(((-1.0)*gconst8*x12169))),-1);
if(!x12172.valid){
continue;
}
if( IKabs(((x12171.value)*(((((-1.0)*x12164*x12166))+((cj0*gconst8*x12169))+(((-1.0)*gconst8*x12163*x12164))+(((-1.0)*cj0*x12163*x12165))+((r12*x12167))+((r12*x12168)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12172.value)*(((((-1.0)*x12167))+(((-1.0)*x12168))+((sj3*x12166))+((gconst8*r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12171.value)*(((((-1.0)*x12164*x12166))+((cj0*gconst8*x12169))+(((-1.0)*gconst8*x12163*x12164))+(((-1.0)*cj0*x12163*x12165))+((r12*x12167))+((r12*x12168))))))+IKsqr(((x12172.value)*(((((-1.0)*x12167))+(((-1.0)*x12168))+((sj3*x12166))+((gconst8*r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12171.value)*(((((-1.0)*x12164*x12166))+((cj0*gconst8*x12169))+(((-1.0)*gconst8*x12163*x12164))+(((-1.0)*cj0*x12163*x12165))+((r12*x12167))+((r12*x12168))))), ((x12172.value)*(((((-1.0)*x12167))+(((-1.0)*x12168))+((sj3*x12166))+((gconst8*r21*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12173=IKsin(j4);
IkReal x12174=IKcos(j4);
IkReal x12175=(cj3*r01);
IkReal x12176=((1.0)*sj3);
IkReal x12177=(sj1*sj2);
IkReal x12178=(gconst7*r00);
IkReal x12179=(gconst8*r11);
IkReal x12180=((1.0)*cj3);
IkReal x12181=(cj2*sj1);
IkReal x12182=((1.0)*cj0);
IkReal x12183=((1.0)*sj0);
IkReal x12184=(gconst8*r21);
IkReal x12185=((1.0)*gconst8);
IkReal x12186=(cj1*sj2);
IkReal x12187=((1.0)*cj1*cj2);
IkReal x12188=(gconst7*x12174);
IkReal x12189=(gconst7*x12180);
IkReal x12190=(r12*x12173);
IkReal x12191=(gconst7*x12173);
IkReal x12192=(gconst8*x12174);
IkReal x12193=(r02*x12173);
IkReal x12194=(sj3*x12192);
evalcond[0]=(((r21*x12191))+(((-1.0)*r20*x12173*x12185)));
evalcond[1]=(cj0+(((-1.0)*r10*x12173*x12185))+((r11*x12191))+((r12*x12174)));
evalcond[2]=((((-1.0)*x12183))+(((-1.0)*r00*x12173*x12185))+((r01*x12191))+((r02*x12174)));
evalcond[3]=((((-1.0)*gconst7*r20*x12176))+((cj3*r21*x12188))+(((-1.0)*x12176*x12184))+x12186+x12181+(((-1.0)*r20*x12180*x12192)));
evalcond[4]=((((-1.0)*x12187))+x12177+(((-1.0)*r21*x12176*x12188))+((r20*x12194))+(((-1.0)*x12180*x12184))+(((-1.0)*r20*x12189)));
evalcond[5]=(((sj3*x12193))+(((-1.0)*x12182*x12186))+(((-1.0)*x12175*x12185))+(((-1.0)*x12181*x12182))+(((-1.0)*r01*x12176*x12188))+((r00*x12194))+(((-1.0)*x12178*x12180)));
evalcond[6]=((((-1.0)*x12180*x12193))+(((-1.0)*cj1*cj2*x12182))+((cj0*x12177))+(((-1.0)*r00*x12180*x12192))+(((-1.0)*x12176*x12178))+(((-1.0)*gconst8*r01*x12176))+((x12175*x12188)));
evalcond[7]=((((-1.0)*x12183*x12186))+(((-1.0)*r11*x12176*x12188))+(((-1.0)*x12179*x12180))+((sj3*x12190))+((r10*x12194))+(((-1.0)*x12181*x12183))+(((-1.0)*r10*x12189)));
evalcond[8]=((((-1.0)*x12180*x12190))+((sj0*x12177))+(((-1.0)*cj1*cj2*x12183))+((cj3*r11*x12188))+(((-1.0)*gconst7*r10*x12176))+(((-1.0)*x12176*x12179))+(((-1.0)*r10*x12180*x12192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12195=((1.0)*sj0);
IkReal x12196=((1.0)*gconst8);
CheckValue<IkReal> x12197=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x12196)))),-1);
if(!x12197.valid){
continue;
}
CheckValue<IkReal> x12198 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12195)))),IkReal((((cj0*gconst7*r01))+(((-1.0)*gconst8*r10*x12195))+(((-1.0)*cj0*r00*x12196))+((gconst7*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12197.value)))+(x12198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12199=IKsin(j4);
IkReal x12200=IKcos(j4);
IkReal x12201=(cj3*r01);
IkReal x12202=((1.0)*sj3);
IkReal x12203=(sj1*sj2);
IkReal x12204=(gconst7*r00);
IkReal x12205=(gconst8*r11);
IkReal x12206=((1.0)*cj3);
IkReal x12207=(cj2*sj1);
IkReal x12208=((1.0)*cj0);
IkReal x12209=((1.0)*sj0);
IkReal x12210=(gconst8*r21);
IkReal x12211=((1.0)*gconst8);
IkReal x12212=(cj1*sj2);
IkReal x12213=((1.0)*cj1*cj2);
IkReal x12214=(gconst7*x12200);
IkReal x12215=(gconst7*x12206);
IkReal x12216=(r12*x12199);
IkReal x12217=(gconst7*x12199);
IkReal x12218=(gconst8*x12200);
IkReal x12219=(r02*x12199);
IkReal x12220=(sj3*x12218);
evalcond[0]=(((r21*x12217))+(((-1.0)*r20*x12199*x12211)));
evalcond[1]=(((r12*x12200))+cj0+((r11*x12217))+(((-1.0)*r10*x12199*x12211)));
evalcond[2]=(((r02*x12200))+(((-1.0)*r00*x12199*x12211))+((r01*x12217))+(((-1.0)*x12209)));
evalcond[3]=((((-1.0)*x12202*x12210))+(((-1.0)*r20*x12206*x12218))+((cj3*r21*x12214))+x12212+x12207+(((-1.0)*gconst7*r20*x12202)));
evalcond[4]=((((-1.0)*x12213))+x12203+(((-1.0)*r20*x12215))+(((-1.0)*x12206*x12210))+((r20*x12220))+(((-1.0)*r21*x12202*x12214)));
evalcond[5]=(((sj3*x12219))+(((-1.0)*x12201*x12211))+(((-1.0)*x12204*x12206))+(((-1.0)*r01*x12202*x12214))+(((-1.0)*x12207*x12208))+((r00*x12220))+(((-1.0)*x12208*x12212)));
evalcond[6]=((((-1.0)*x12202*x12204))+((cj0*x12203))+((x12201*x12214))+(((-1.0)*cj1*cj2*x12208))+(((-1.0)*r00*x12206*x12218))+(((-1.0)*gconst8*r01*x12202))+(((-1.0)*x12206*x12219)));
evalcond[7]=(((sj3*x12216))+(((-1.0)*x12205*x12206))+(((-1.0)*r11*x12202*x12214))+((r10*x12220))+(((-1.0)*x12207*x12209))+(((-1.0)*r10*x12215))+(((-1.0)*x12209*x12212)));
evalcond[8]=((((-1.0)*x12202*x12205))+(((-1.0)*r10*x12206*x12218))+(((-1.0)*gconst7*r10*x12202))+((cj3*r11*x12214))+(((-1.0)*cj1*cj2*x12209))+(((-1.0)*x12206*x12216))+((sj0*x12203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12221=gconst7*gconst7;
IkReal x12222=r21*r21;
IkReal x12223=gconst8*gconst8;
IkReal x12224=r20*r20;
IkReal x12225=(gconst7*sj3);
IkReal x12226=((1.0)*r22);
IkReal x12227=(gconst8*r21);
IkReal x12228=(cj2*sj1);
IkReal x12229=(cj1*sj2);
IkReal x12230=(gconst8*r20);
IkReal x12231=((1.0)*r21);
IkReal x12232=(r20*sj3);
CheckValue<IkReal> x12233=IKPowWithIntegerCheck(IKsign((((cj3*x12221*x12222))+((cj3*(r22*r22)))+(((-2.0)*cj3*gconst7*r20*x12227))+((cj3*x12223*x12224)))),-1);
if(!x12233.valid){
continue;
}
CheckValue<IkReal> x12234 = IKatan2WithCheck(IkReal((((r22*x12228))+((r22*x12229))+(((-1.0)*sj3*x12226*x12227))+(((-1.0)*r20*x12225*x12226)))),IkReal(((((-1.0)*gconst7*x12228*x12231))+((r21*x12221*x12232))+((x12228*x12230))+(((-1.0)*gconst8*x12224*x12225))+((x12229*x12230))+(((-1.0)*gconst7*x12229*x12231))+((gconst8*x12222*x12225))+(((-1.0)*x12223*x12231*x12232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12233.value)))+(x12234.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12235=IKsin(j4);
IkReal x12236=IKcos(j4);
IkReal x12237=(gconst8*r20);
IkReal x12238=(cj3*gconst7);
IkReal x12239=((1.0)*gconst7);
IkReal x12240=(sj1*sj2);
IkReal x12241=((1.0)*r10);
IkReal x12242=((1.0)*cj3);
IkReal x12243=(cj2*sj1);
IkReal x12244=((1.0)*cj0);
IkReal x12245=((1.0)*sj0);
IkReal x12246=(gconst8*r21);
IkReal x12247=((1.0)*gconst8);
IkReal x12248=(cj1*sj2);
IkReal x12249=(sj3*x12236);
IkReal x12250=((1.0)*cj1*cj2);
IkReal x12251=(r11*x12247);
IkReal x12252=(r12*x12235);
IkReal x12253=(gconst7*x12235);
IkReal x12254=(r22*x12235);
IkReal x12255=(r02*x12235);
IkReal x12256=(gconst8*x12236);
evalcond[0]=((((-1.0)*x12235*x12237))+((r21*x12253))+((r22*x12236)));
evalcond[1]=(cj0+((r12*x12236))+((r11*x12253))+(((-1.0)*gconst8*x12235*x12241)));
evalcond[2]=(((r01*x12253))+(((-1.0)*r00*x12235*x12247))+((r02*x12236))+(((-1.0)*x12245)));
evalcond[3]=((((-1.0)*x12242*x12246))+x12240+(((-1.0)*r21*x12239*x12249))+((x12237*x12249))+(((-1.0)*x12250))+(((-1.0)*r20*x12238))+((sj3*x12254)));
evalcond[4]=((((-1.0)*x12242*x12254))+x12243+x12248+(((-1.0)*x12236*x12237*x12242))+(((-1.0)*sj3*x12246))+((r21*x12236*x12238))+(((-1.0)*r20*sj3*x12239)));
evalcond[5]=((((-1.0)*r00*x12238))+(((-1.0)*gconst8*r01*x12242))+(((-1.0)*r01*x12239*x12249))+(((-1.0)*x12244*x12248))+((gconst8*r00*x12249))+(((-1.0)*x12243*x12244))+((sj3*x12255)));
evalcond[6]=((((-1.0)*x12242*x12255))+(((-1.0)*cj1*cj2*x12244))+(((-1.0)*r00*x12242*x12256))+((r01*x12236*x12238))+(((-1.0)*r01*sj3*x12247))+(((-1.0)*r00*sj3*x12239))+((cj0*x12240)));
evalcond[7]=((((-1.0)*r11*x12239*x12249))+(((-1.0)*gconst8*r11*x12242))+((gconst8*r10*x12249))+(((-1.0)*x12245*x12248))+(((-1.0)*x12238*x12241))+(((-1.0)*x12243*x12245))+((sj3*x12252)));
evalcond[8]=((((-1.0)*x12242*x12252))+(((-1.0)*cj1*cj2*x12245))+((sj0*x12240))+(((-1.0)*r10*sj3*x12239))+(((-1.0)*sj3*x12251))+((r11*x12236*x12238))+(((-1.0)*cj3*x12241*x12256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12257=((1.0)*sj0);
IkReal x12258=((1.0)*gconst8);
CheckValue<IkReal> x12259=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x12258)))),-1);
if(!x12259.valid){
continue;
}
CheckValue<IkReal> x12260 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12257))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst7*r01))+((gconst7*r11*sj0))+(((-1.0)*gconst8*r10*x12257))+(((-1.0)*cj0*r00*x12258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12259.value)))+(x12260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12261=IKsin(j4);
IkReal x12262=IKcos(j4);
IkReal x12263=(gconst8*r20);
IkReal x12264=(cj3*gconst7);
IkReal x12265=((1.0)*gconst7);
IkReal x12266=(sj1*sj2);
IkReal x12267=((1.0)*r10);
IkReal x12268=((1.0)*cj3);
IkReal x12269=(cj2*sj1);
IkReal x12270=((1.0)*cj0);
IkReal x12271=((1.0)*sj0);
IkReal x12272=(gconst8*r21);
IkReal x12273=((1.0)*gconst8);
IkReal x12274=(cj1*sj2);
IkReal x12275=(sj3*x12262);
IkReal x12276=((1.0)*cj1*cj2);
IkReal x12277=(r11*x12273);
IkReal x12278=(r12*x12261);
IkReal x12279=(gconst7*x12261);
IkReal x12280=(r22*x12261);
IkReal x12281=(r02*x12261);
IkReal x12282=(gconst8*x12262);
evalcond[0]=((((-1.0)*x12261*x12263))+((r21*x12279))+((r22*x12262)));
evalcond[1]=(cj0+((r12*x12262))+(((-1.0)*gconst8*x12261*x12267))+((r11*x12279)));
evalcond[2]=((((-1.0)*r00*x12261*x12273))+(((-1.0)*x12271))+((r01*x12279))+((r02*x12262)));
evalcond[3]=((((-1.0)*x12276))+x12266+(((-1.0)*x12268*x12272))+(((-1.0)*r20*x12264))+((x12263*x12275))+(((-1.0)*r21*x12265*x12275))+((sj3*x12280)));
evalcond[4]=((((-1.0)*sj3*x12272))+(((-1.0)*r20*sj3*x12265))+(((-1.0)*x12268*x12280))+x12269+x12274+(((-1.0)*x12262*x12263*x12268))+((r21*x12262*x12264)));
evalcond[5]=((((-1.0)*x12269*x12270))+(((-1.0)*r01*x12265*x12275))+((gconst8*r00*x12275))+(((-1.0)*gconst8*r01*x12268))+(((-1.0)*r00*x12264))+(((-1.0)*x12270*x12274))+((sj3*x12281)));
evalcond[6]=(((r01*x12262*x12264))+(((-1.0)*r00*x12268*x12282))+(((-1.0)*r01*sj3*x12273))+(((-1.0)*x12268*x12281))+(((-1.0)*cj1*cj2*x12270))+((cj0*x12266))+(((-1.0)*r00*sj3*x12265)));
evalcond[7]=(((gconst8*r10*x12275))+(((-1.0)*x12269*x12271))+(((-1.0)*r11*x12265*x12275))+(((-1.0)*gconst8*r11*x12268))+(((-1.0)*x12264*x12267))+((sj3*x12278))+(((-1.0)*x12271*x12274)));
evalcond[8]=(((sj0*x12266))+(((-1.0)*sj3*x12277))+(((-1.0)*x12268*x12278))+(((-1.0)*cj1*cj2*x12271))+(((-1.0)*cj3*x12267*x12282))+((r11*x12262*x12264))+(((-1.0)*r10*sj3*x12265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12283=((1.0)*gconst7);
CheckValue<IkReal> x12284=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r01))+(((-1.0)*r00*x12283)))),-1);
if(!x12284.valid){
continue;
}
CheckValue<IkReal> x12285 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x12283))+((cj0*gconst8*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12284.value)))+(x12285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12286=IKsin(j4);
IkReal x12287=IKcos(j4);
IkReal x12288=(gconst8*r20);
IkReal x12289=(cj3*gconst7);
IkReal x12290=((1.0)*gconst7);
IkReal x12291=(sj1*sj2);
IkReal x12292=((1.0)*r10);
IkReal x12293=((1.0)*cj3);
IkReal x12294=(cj2*sj1);
IkReal x12295=((1.0)*cj0);
IkReal x12296=((1.0)*sj0);
IkReal x12297=(gconst8*r21);
IkReal x12298=((1.0)*gconst8);
IkReal x12299=(cj1*sj2);
IkReal x12300=(sj3*x12287);
IkReal x12301=((1.0)*cj1*cj2);
IkReal x12302=(r11*x12298);
IkReal x12303=(r12*x12286);
IkReal x12304=(gconst7*x12286);
IkReal x12305=(r22*x12286);
IkReal x12306=(r02*x12286);
IkReal x12307=(gconst8*x12287);
evalcond[0]=(((r22*x12287))+(((-1.0)*x12286*x12288))+((r21*x12304)));
evalcond[1]=(cj0+((r11*x12304))+((r12*x12287))+(((-1.0)*gconst8*x12286*x12292)));
evalcond[2]=(((r02*x12287))+(((-1.0)*x12296))+(((-1.0)*r00*x12286*x12298))+((r01*x12304)));
evalcond[3]=((((-1.0)*r20*x12289))+x12291+(((-1.0)*r21*x12290*x12300))+(((-1.0)*x12301))+((x12288*x12300))+((sj3*x12305))+(((-1.0)*x12293*x12297)));
evalcond[4]=(x12299+x12294+(((-1.0)*r20*sj3*x12290))+(((-1.0)*x12293*x12305))+((r21*x12287*x12289))+(((-1.0)*x12287*x12288*x12293))+(((-1.0)*sj3*x12297)));
evalcond[5]=((((-1.0)*x12294*x12295))+(((-1.0)*r01*x12290*x12300))+(((-1.0)*gconst8*r01*x12293))+(((-1.0)*x12295*x12299))+(((-1.0)*r00*x12289))+((gconst8*r00*x12300))+((sj3*x12306)));
evalcond[6]=((((-1.0)*r00*x12293*x12307))+((cj0*x12291))+(((-1.0)*x12293*x12306))+(((-1.0)*r01*sj3*x12298))+(((-1.0)*r00*sj3*x12290))+(((-1.0)*cj1*cj2*x12295))+((r01*x12287*x12289)));
evalcond[7]=((((-1.0)*x12294*x12296))+(((-1.0)*gconst8*r11*x12293))+(((-1.0)*x12296*x12299))+(((-1.0)*r11*x12290*x12300))+((sj3*x12303))+(((-1.0)*x12289*x12292))+((gconst8*r10*x12300)));
evalcond[8]=(((r11*x12287*x12289))+((sj0*x12291))+(((-1.0)*x12293*x12303))+(((-1.0)*sj3*x12302))+(((-1.0)*cj3*x12292*x12307))+(((-1.0)*cj1*cj2*x12296))+(((-1.0)*r10*sj3*x12290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12308=((-1.0)*r11);
IkReal x12310 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12310)==0){
continue;
}
IkReal x12309=pow(x12310,-0.5);
CheckValue<IkReal> x12311 = IKatan2WithCheck(IkReal(x12308),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12311.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x12311.value))));
IkReal gconst10=(x12308*x12309);
IkReal gconst11=((1.0)*r10*x12309);
CheckValue<IkReal> x12312 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12312.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12312.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12313=((-1.0)*r11);
CheckValue<IkReal> x12316 = IKatan2WithCheck(IkReal(x12313),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12316.valid){
continue;
}
IkReal x12314=((1.0)*(x12316.value));
IkReal x12315=x12309;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12314)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12314)));
IkReal gconst10=(x12313*x12315);
IkReal gconst11=((1.0)*r10*x12315);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12317=((1.0)*sj0);
IkReal x12318=((1.0)*cj0);
CheckValue<IkReal> x12319=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12319.valid){
continue;
}
CheckValue<IkReal> x12320 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12317))+(((-1.0)*r02*x12318)))),IkReal(((((-1.0)*gconst11*r00*x12318))+(((-1.0)*gconst11*r10*x12317))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12319.value)))+(x12320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12321=IKsin(j4);
IkReal x12322=IKcos(j4);
IkReal x12323=((1.0)*gconst10);
IkReal x12324=(r00*sj3);
IkReal x12325=(gconst11*r20);
IkReal x12326=((1.0)*cj3);
IkReal x12327=(gconst10*r01);
IkReal x12328=(sj1*sj2);
IkReal x12329=(gconst11*r11);
IkReal x12330=((1.0)*sj3);
IkReal x12331=(cj2*sj1);
IkReal x12332=(gconst11*r01);
IkReal x12333=(gconst11*r00);
IkReal x12334=((1.0)*cj0);
IkReal x12335=((1.0)*sj0);
IkReal x12336=(gconst11*r21);
IkReal x12337=(cj1*sj2);
IkReal x12338=((1.0)*cj1*cj2);
IkReal x12339=((1.0)*x12321);
IkReal x12340=(cj3*x12322);
IkReal x12341=(sj3*x12322);
IkReal x12342=(sj3*x12321);
IkReal x12343=(gconst10*x12321);
IkReal x12344=(gconst11*r10*x12322);
evalcond[0]=(((r22*x12322))+((r21*x12343))+(((-1.0)*x12325*x12339)));
evalcond[1]=(cj0+((r11*x12343))+((r12*x12322))+(((-1.0)*gconst11*r10*x12339)));
evalcond[2]=((((-1.0)*x12335))+(((-1.0)*x12333*x12339))+((r02*x12322))+((x12321*x12327)));
evalcond[3]=((((-1.0)*x12326*x12336))+x12328+(((-1.0)*x12338))+((x12325*x12341))+((r22*x12342))+(((-1.0)*r21*x12323*x12341))+(((-1.0)*cj3*r20*x12323)));
evalcond[4]=(x12337+x12331+(((-1.0)*r20*sj3*x12323))+(((-1.0)*x12330*x12336))+(((-1.0)*r22*x12321*x12326))+((gconst10*r21*x12340))+(((-1.0)*x12322*x12325*x12326)));
evalcond[5]=((((-1.0)*r01*x12323*x12341))+(((-1.0)*cj3*r00*x12323))+(((-1.0)*x12334*x12337))+(((-1.0)*x12331*x12334))+(((-1.0)*x12326*x12332))+((gconst11*x12322*x12324))+((r02*x12342)));
evalcond[6]=(((cj0*x12328))+(((-1.0)*r02*x12321*x12326))+(((-1.0)*x12330*x12332))+(((-1.0)*x12322*x12326*x12333))+((x12327*x12340))+(((-1.0)*cj1*cj2*x12334))+(((-1.0)*x12323*x12324)));
evalcond[7]=((((-1.0)*cj3*r10*x12323))+(((-1.0)*x12331*x12335))+(((-1.0)*x12335*x12337))+(((-1.0)*x12326*x12329))+((r12*x12342))+(((-1.0)*r11*x12323*x12341))+((gconst11*r10*x12341)));
evalcond[8]=((((-1.0)*r10*sj3*x12323))+(((-1.0)*x12326*x12344))+((gconst10*r11*x12340))+(((-1.0)*x12329*x12330))+(((-1.0)*r12*x12321*x12326))+(((-1.0)*cj1*cj2*x12335))+((sj0*x12328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12345=((1.0)*gconst10);
CheckValue<IkReal> x12346=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r01))+(((-1.0)*r00*x12345)))),-1);
if(!x12346.valid){
continue;
}
CheckValue<IkReal> x12347 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x12345))+((cj0*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12346.value)))+(x12347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12348=IKsin(j4);
IkReal x12349=IKcos(j4);
IkReal x12350=((1.0)*gconst10);
IkReal x12351=(r00*sj3);
IkReal x12352=(gconst11*r20);
IkReal x12353=((1.0)*cj3);
IkReal x12354=(gconst10*r01);
IkReal x12355=(sj1*sj2);
IkReal x12356=(gconst11*r11);
IkReal x12357=((1.0)*sj3);
IkReal x12358=(cj2*sj1);
IkReal x12359=(gconst11*r01);
IkReal x12360=(gconst11*r00);
IkReal x12361=((1.0)*cj0);
IkReal x12362=((1.0)*sj0);
IkReal x12363=(gconst11*r21);
IkReal x12364=(cj1*sj2);
IkReal x12365=((1.0)*cj1*cj2);
IkReal x12366=((1.0)*x12348);
IkReal x12367=(cj3*x12349);
IkReal x12368=(sj3*x12349);
IkReal x12369=(sj3*x12348);
IkReal x12370=(gconst10*x12348);
IkReal x12371=(gconst11*r10*x12349);
evalcond[0]=(((r21*x12370))+((r22*x12349))+(((-1.0)*x12352*x12366)));
evalcond[1]=(((r11*x12370))+cj0+(((-1.0)*gconst11*r10*x12366))+((r12*x12349)));
evalcond[2]=((((-1.0)*x12362))+((r02*x12349))+((x12348*x12354))+(((-1.0)*x12360*x12366)));
evalcond[3]=((((-1.0)*x12353*x12363))+(((-1.0)*x12365))+(((-1.0)*r21*x12350*x12368))+x12355+((r22*x12369))+(((-1.0)*cj3*r20*x12350))+((x12352*x12368)));
evalcond[4]=((((-1.0)*x12357*x12363))+((gconst10*r21*x12367))+x12364+x12358+(((-1.0)*r20*sj3*x12350))+(((-1.0)*x12349*x12352*x12353))+(((-1.0)*r22*x12348*x12353)));
evalcond[5]=((((-1.0)*x12353*x12359))+(((-1.0)*x12358*x12361))+(((-1.0)*r01*x12350*x12368))+(((-1.0)*cj3*r00*x12350))+(((-1.0)*x12361*x12364))+((r02*x12369))+((gconst11*x12349*x12351)));
evalcond[6]=((((-1.0)*cj1*cj2*x12361))+(((-1.0)*x12357*x12359))+((cj0*x12355))+(((-1.0)*x12349*x12353*x12360))+(((-1.0)*x12350*x12351))+(((-1.0)*r02*x12348*x12353))+((x12354*x12367)));
evalcond[7]=((((-1.0)*x12353*x12356))+(((-1.0)*x12358*x12362))+((gconst11*r10*x12368))+(((-1.0)*cj3*r10*x12350))+(((-1.0)*x12362*x12364))+(((-1.0)*r11*x12350*x12368))+((r12*x12369)));
evalcond[8]=((((-1.0)*cj1*cj2*x12362))+(((-1.0)*x12353*x12371))+(((-1.0)*x12356*x12357))+(((-1.0)*r10*sj3*x12350))+((gconst10*r11*x12367))+((sj0*x12355))+(((-1.0)*r12*x12348*x12353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12372=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12372;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12373=((1.0)*sj5);
IkReal x12374=((((-1.0)*r00*x12373))+(((-1.0)*cj5*r01)));
j4eval[0]=x12374;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x12373))))));
j4eval[2]=IKsign(x12374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12375=cj5*cj5;
IkReal x12376=((1.0)*sj3);
IkReal x12377=(r11*r21);
IkReal x12378=(cj5*sj3*sj5);
IkReal x12379=((((-1.0)*r12*r22*x12376))+((r11*r20*x12378))+((sj3*x12375*x12377))+((r10*r21*x12378))+(((-1.0)*r10*r20*x12375*x12376))+(((-1.0)*x12376*x12377)));
j4eval[0]=x12379;
j4eval[1]=IKsign(x12379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12380=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12380;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12380);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12381=((1.0)*sj5);
IkReal x12382=((((-1.0)*r00*x12381))+(((-1.0)*cj5*r01)));
j4eval[0]=x12382;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x12381))))));
j4eval[2]=IKsign(x12382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12383=cj5*cj5;
IkReal x12384=r11*r11;
IkReal x12385=(cj5*r10);
IkReal x12386=(r11*sj5);
IkReal x12387=((((2.0)*x12385*x12386))+((x12383*x12384))+(((-1.0)*(r12*r12)))+(((-1.0)*x12383*(r10*r10)))+(((-1.0)*x12384)));
j4eval[0]=x12387;
j4eval[1]=((IKabs(r12))+(IKabs((x12386+(((-1.0)*x12385))))));
j4eval[2]=IKsign(x12387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12388=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12388);
rxp1_1=(px*r21);
rxp1_2=(r11*x12388);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12389=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12389)));
j4eval[1]=((((-1.0)*r20*x12389))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12390=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12390);
rxp1_1=(px*r21);
rxp1_2=(r11*x12390);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12391=((1.0)*cj2);
CheckValue<IkReal> x12392=IKPowWithIntegerCheck(r02,-1);
if(!x12392.valid){
continue;
}
CheckValue<IkReal> x12393=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12393.valid){
continue;
}
if( IKabs(((x12392.value)*(((((-1.0)*cj1*x12391))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12393.value)*(((((-1.0)*sj1*x12391))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12392.value)*(((((-1.0)*cj1*x12391))+((sj1*sj2))))))+IKsqr(((x12393.value)*(((((-1.0)*sj1*x12391))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12392.value)*(((((-1.0)*cj1*x12391))+((sj1*sj2))))), ((x12393.value)*(((((-1.0)*sj1*x12391))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12394=IKsin(j4);
IkReal x12395=IKcos(j4);
IkReal x12396=(r21*sj5);
IkReal x12397=(cj5*r20);
IkReal x12398=(cj5*r10);
IkReal x12399=(r11*sj5);
IkReal x12400=((1.0)*x12394);
IkReal x12401=((1.0)*x12395);
evalcond[0]=(r02*x12395);
evalcond[1]=(((x12394*x12396))+(((-1.0)*x12397*x12400)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x12400)));
evalcond[3]=((((-1.0)*x12398*x12401))+((x12395*x12399)));
evalcond[4]=((1.0)+(((-1.0)*x12398*x12400))+((x12394*x12399)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12395*x12396))+(((-1.0)*x12397*x12401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12402=((1.0)*cj5);
CheckValue<IkReal> x12403=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12402))),-1);
if(!x12403.valid){
continue;
}
CheckValue<IkReal> x12404=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12402))),-1);
if(!x12404.valid){
continue;
}
if( IKabs(((-1.0)*(x12403.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12404.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12403.value)))+IKsqr(((x12404.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12403.value)), ((x12404.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12405=IKsin(j4);
IkReal x12406=IKcos(j4);
IkReal x12407=(r21*sj5);
IkReal x12408=(cj5*r20);
IkReal x12409=(cj5*r10);
IkReal x12410=(r11*sj5);
IkReal x12411=((1.0)*x12405);
IkReal x12412=((1.0)*x12406);
evalcond[0]=(r02*x12406);
evalcond[1]=((((-1.0)*x12408*x12411))+((x12405*x12407)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x12411)));
evalcond[3]=(((x12406*x12410))+(((-1.0)*x12409*x12412)));
evalcond[4]=((1.0)+((x12405*x12410))+(((-1.0)*x12409*x12411)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12406*x12407))+(((-1.0)*x12408*x12412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12413=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12413);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12413);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12414=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12414);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12414);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12415=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12415))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x12415)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12416=((1.0)*cj5);
CheckValue<IkReal> x12417=IKPowWithIntegerCheck(((((-1.0)*r10*x12416))+((r11*sj5))),-1);
if(!x12417.valid){
continue;
}
CheckValue<IkReal> x12418=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12416))),-1);
if(!x12418.valid){
continue;
}
if( IKabs(((-1.0)*(x12417.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12418.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12417.value)))+IKsqr(((x12418.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12417.value)), ((x12418.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12419=IKsin(j4);
IkReal x12420=IKcos(j4);
IkReal x12421=((1.0)*cj5*r00);
IkReal x12422=(sj5*x12420);
IkReal x12423=((1.0)*cj5*r10);
IkReal x12424=(sj5*x12419);
evalcond[0]=(r22*x12420);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12419)));
evalcond[2]=((((-1.0)*x12419*x12421))+((r01*x12424)));
evalcond[3]=((((-1.0)*x12420*x12423))+((r11*x12422)));
evalcond[4]=((1.0)+(((-1.0)*x12419*x12423))+((r11*x12424)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12420*x12421))+((r01*x12422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12425=IKPowWithIntegerCheck(r22,-1);
if(!x12425.valid){
continue;
}
CheckValue<IkReal> x12426=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12426.valid){
continue;
}
if( IKabs(((x12425.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12426.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12425.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12426.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12425.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12426.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12427=IKsin(j4);
IkReal x12428=IKcos(j4);
IkReal x12429=((1.0)*cj5*r00);
IkReal x12430=(sj5*x12428);
IkReal x12431=((1.0)*cj5*r10);
IkReal x12432=(sj5*x12427);
evalcond[0]=(r22*x12428);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12427)));
evalcond[2]=((((-1.0)*x12427*x12429))+((r01*x12432)));
evalcond[3]=((((-1.0)*x12428*x12431))+((r11*x12430)));
evalcond[4]=((1.0)+(((-1.0)*x12427*x12431))+((r11*x12432)));
evalcond[5]=((((-1.0)*x12428*x12429))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x12430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12433=cj5*cj5;
IkReal x12434=r11*r11;
IkReal x12435=(cj5*r10);
IkReal x12436=(r11*sj5);
CheckValue<IkReal> x12437 = IKatan2WithCheck(IkReal((x12436+(((-1.0)*x12435)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12437.valid){
continue;
}
CheckValue<IkReal> x12438=IKPowWithIntegerCheck(IKsign(((((2.0)*x12435*x12436))+(((-1.0)*(r12*r12)))+(((-1.0)*x12433*(r10*r10)))+((x12433*x12434))+(((-1.0)*x12434)))),-1);
if(!x12438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12437.value)+(((1.5707963267949)*(x12438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12439=IKsin(j4);
IkReal x12440=IKcos(j4);
IkReal x12441=((1.0)*cj5);
IkReal x12442=(r21*sj5);
IkReal x12443=(sj5*x12439);
IkReal x12444=((1.0)*x12439);
IkReal x12445=(sj5*x12440);
evalcond[0]=(((r22*x12440))+((x12439*x12442))+(((-1.0)*r20*x12439*x12441)));
evalcond[1]=(((r01*x12443))+(((-1.0)*r00*x12439*x12441))+((r02*x12440)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12439*x12441))+((r11*x12443))+((r12*x12440)));
evalcond[3]=((((-1.0)*r10*x12440*x12441))+(((-1.0)*r12*x12444))+((r11*x12445)));
evalcond[4]=(((cj2*sj1))+((x12440*x12442))+((cj1*sj2))+(((-1.0)*r22*x12444))+(((-1.0)*r20*x12440*x12441)));
evalcond[5]=((((-1.0)*r02*x12444))+((r01*x12445))+(((-1.0)*r00*x12440*x12441))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12446=((1.0)*sj5);
CheckValue<IkReal> x12447 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x12446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12447.valid){
continue;
}
CheckValue<IkReal> x12448=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12446))+(((-1.0)*cj5*r01)))),-1);
if(!x12448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12447.value)+(((1.5707963267949)*(x12448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12449=IKsin(j4);
IkReal x12450=IKcos(j4);
IkReal x12451=((1.0)*cj5);
IkReal x12452=(r21*sj5);
IkReal x12453=(sj5*x12449);
IkReal x12454=((1.0)*x12449);
IkReal x12455=(sj5*x12450);
evalcond[0]=(((r22*x12450))+(((-1.0)*r20*x12449*x12451))+((x12449*x12452)));
evalcond[1]=(((r02*x12450))+(((-1.0)*r00*x12449*x12451))+((r01*x12453)));
evalcond[2]=((1.0)+((r11*x12453))+((r12*x12450))+(((-1.0)*r10*x12449*x12451)));
evalcond[3]=((((-1.0)*r10*x12450*x12451))+(((-1.0)*r12*x12454))+((r11*x12455)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x12454))+((cj1*sj2))+((x12450*x12452))+(((-1.0)*r20*x12450*x12451)));
evalcond[5]=((((-1.0)*r00*x12450*x12451))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x12454))+((r01*x12455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12456=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12456.valid){
continue;
}
CheckValue<IkReal> x12457 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12456.value)))+(x12457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12458=IKsin(j4);
IkReal x12459=IKcos(j4);
IkReal x12460=((1.0)*cj5);
IkReal x12461=(r21*sj5);
IkReal x12462=(sj5*x12458);
IkReal x12463=((1.0)*x12458);
IkReal x12464=(sj5*x12459);
evalcond[0]=(((r22*x12459))+(((-1.0)*r20*x12458*x12460))+((x12458*x12461)));
evalcond[1]=(((r02*x12459))+(((-1.0)*r00*x12458*x12460))+((r01*x12462)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12458*x12460))+((r11*x12462))+((r12*x12459)));
evalcond[3]=((((-1.0)*r10*x12459*x12460))+((r11*x12464))+(((-1.0)*r12*x12463)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x12463))+((cj1*sj2))+(((-1.0)*r20*x12459*x12460))+((x12459*x12461)));
evalcond[5]=((((-1.0)*r02*x12463))+((r01*x12464))+(((-1.0)*r00*x12459*x12460))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12465=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12465;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x12465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12466=((1.0)*sj5);
IkReal x12467=((((-1.0)*cj5*r01))+(((-1.0)*r00*x12466)));
j4eval[0]=x12467;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x12466)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12467);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12468=cj5*cj5;
IkReal x12469=r11*r11;
IkReal x12470=(r11*sj5);
IkReal x12471=(cj5*r10);
IkReal x12472=((r12*r12)+(((-1.0)*x12468*x12469))+(((-2.0)*x12470*x12471))+((x12468*(r10*r10)))+x12469);
j4eval[0]=x12472;
j4eval[1]=IKsign(x12472);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12470))+x12471))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12473=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12473);
rxp1_1=(px*r21);
rxp1_2=(r11*x12473);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12474=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12474);
rxp1_1=(px*r21);
rxp1_2=(r11*x12474);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12475=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12475.valid){
continue;
}
CheckValue<IkReal> x12476=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12476.valid){
continue;
}
if( IKabs(((-1.0)*(x12475.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12476.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12475.value)))+IKsqr(((x12476.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12475.value)), ((x12476.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12477=IKsin(j4);
IkReal x12478=IKcos(j4);
IkReal x12479=(cj5*r20);
IkReal x12480=(cj5*r10);
IkReal x12481=(sj5*x12477);
IkReal x12482=((1.0)*x12477);
IkReal x12483=((1.0)*sj5*x12478);
evalcond[0]=(r02*x12478);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x12477)));
evalcond[2]=((((-1.0)*x12479*x12482))+((r21*x12481)));
evalcond[3]=((((-1.0)*r11*x12483))+((x12478*x12480)));
evalcond[4]=((1.0)+(((-1.0)*x12480*x12482))+((r11*x12481)));
evalcond[5]=(((x12478*x12479))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x12483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12484=((1.0)*sj1);
CheckValue<IkReal> x12485=IKPowWithIntegerCheck(r02,-1);
if(!x12485.valid){
continue;
}
CheckValue<IkReal> x12486=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12486.valid){
continue;
}
if( IKabs(((x12485.value)*((((cj1*cj2))+(((-1.0)*sj2*x12484)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12486.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12484)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12485.value)*((((cj1*cj2))+(((-1.0)*sj2*x12484))))))+IKsqr(((x12486.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12484))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12485.value)*((((cj1*cj2))+(((-1.0)*sj2*x12484))))), ((x12486.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12484))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12487=IKsin(j4);
IkReal x12488=IKcos(j4);
IkReal x12489=(cj5*r20);
IkReal x12490=(cj5*r10);
IkReal x12491=(sj5*x12487);
IkReal x12492=((1.0)*x12487);
IkReal x12493=((1.0)*sj5*x12488);
evalcond[0]=(r02*x12488);
evalcond[1]=(((r02*x12487))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[2]=(((r21*x12491))+(((-1.0)*x12489*x12492)));
evalcond[3]=(((x12488*x12490))+(((-1.0)*r11*x12493)));
evalcond[4]=((1.0)+(((-1.0)*x12490*x12492))+((r11*x12491)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x12493))+((x12488*x12489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12494=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12494);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12494);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12495=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12495);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12495);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12496=((1.0)*sj1);
CheckValue<IkReal> x12497=IKPowWithIntegerCheck(r22,-1);
if(!x12497.valid){
continue;
}
CheckValue<IkReal> x12498=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12498.valid){
continue;
}
if( IKabs(((x12497.value)*(((((-1.0)*cj2*x12496))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12498.value)*(((((-1.0)*sj2*x12496))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12497.value)*(((((-1.0)*cj2*x12496))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12498.value)*(((((-1.0)*sj2*x12496))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12497.value)*(((((-1.0)*cj2*x12496))+(((-1.0)*cj1*sj2))))), ((x12498.value)*(((((-1.0)*sj2*x12496))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12499=IKsin(j4);
IkReal x12500=IKcos(j4);
IkReal x12501=(cj5*r00);
IkReal x12502=(cj5*r10);
IkReal x12503=((1.0)*x12499);
IkReal x12504=(sj5*x12499);
IkReal x12505=((1.0)*sj5*x12500);
evalcond[0]=(r22*x12500);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x12499)));
evalcond[2]=(((r01*x12504))+(((-1.0)*x12501*x12503)));
evalcond[3]=((((-1.0)*r11*x12505))+((x12500*x12502)));
evalcond[4]=((1.0)+((r11*x12504))+(((-1.0)*x12502*x12503)));
evalcond[5]=((((-1.0)*r01*x12505))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12500*x12501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12506=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12506.valid){
continue;
}
CheckValue<IkReal> x12507=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12507.valid){
continue;
}
if( IKabs(((-1.0)*(x12506.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12507.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12506.value)))+IKsqr(((x12507.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12506.value)), ((x12507.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12508=IKsin(j4);
IkReal x12509=IKcos(j4);
IkReal x12510=(cj5*r00);
IkReal x12511=(cj5*r10);
IkReal x12512=((1.0)*x12508);
IkReal x12513=(sj5*x12508);
IkReal x12514=((1.0)*sj5*x12509);
evalcond[0]=(r22*x12509);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x12508)));
evalcond[2]=(((r01*x12513))+(((-1.0)*x12510*x12512)));
evalcond[3]=((((-1.0)*r11*x12514))+((x12509*x12511)));
evalcond[4]=((1.0)+(((-1.0)*x12511*x12512))+((r11*x12513)));
evalcond[5]=(((x12509*x12510))+(((-1.0)*r01*x12514))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12515=cj5*cj5;
IkReal x12516=r11*r11;
IkReal x12517=(cj5*r10);
IkReal x12518=(r11*sj5);
CheckValue<IkReal> x12519=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x12515*x12516))+(((-2.0)*x12517*x12518))+x12516+((x12515*(r10*r10))))),-1);
if(!x12519.valid){
continue;
}
CheckValue<IkReal> x12520 = IKatan2WithCheck(IkReal(((((-1.0)*x12518))+x12517)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12519.value)))+(x12520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12521=IKsin(j4);
IkReal x12522=IKcos(j4);
IkReal x12523=(cj5*r10);
IkReal x12524=(cj5*r00);
IkReal x12525=(cj5*r20);
IkReal x12526=((1.0)*x12521);
IkReal x12527=(sj5*x12521);
IkReal x12528=((1.0)*sj5*x12522);
evalcond[0]=(((r22*x12522))+((r21*x12527))+(((-1.0)*x12525*x12526)));
evalcond[1]=((((-1.0)*x12524*x12526))+((r01*x12527))+((r02*x12522)));
evalcond[2]=(((x12522*x12523))+(((-1.0)*r11*x12528))+((r12*x12521)));
evalcond[3]=((1.0)+(((-1.0)*x12523*x12526))+((r11*x12527))+((r12*x12522)));
evalcond[4]=(((r22*x12521))+((cj2*sj1))+(((-1.0)*r21*x12528))+((x12522*x12525))+((cj1*sj2)));
evalcond[5]=(((x12522*x12524))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x12528))+((r02*x12521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12529=((1.0)*sj5);
CheckValue<IkReal> x12530=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12529))+(((-1.0)*cj5*r01)))),-1);
if(!x12530.valid){
continue;
}
CheckValue<IkReal> x12531 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x12529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12530.value)))+(x12531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12532=IKsin(j4);
IkReal x12533=IKcos(j4);
IkReal x12534=(cj5*r10);
IkReal x12535=(cj5*r00);
IkReal x12536=(cj5*r20);
IkReal x12537=((1.0)*x12532);
IkReal x12538=(sj5*x12532);
IkReal x12539=((1.0)*sj5*x12533);
evalcond[0]=(((r21*x12538))+(((-1.0)*x12536*x12537))+((r22*x12533)));
evalcond[1]=((((-1.0)*x12535*x12537))+((r02*x12533))+((r01*x12538)));
evalcond[2]=((((-1.0)*r11*x12539))+((x12533*x12534))+((r12*x12532)));
evalcond[3]=((1.0)+((r11*x12538))+(((-1.0)*x12534*x12537))+((r12*x12533)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x12539))+((cj1*sj2))+((x12533*x12536))+((r22*x12532)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12533*x12535))+((r02*x12532))+(((-1.0)*r01*x12539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12540=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12540.valid){
continue;
}
CheckValue<IkReal> x12541 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12540.value)))+(x12541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12542=IKsin(j4);
IkReal x12543=IKcos(j4);
IkReal x12544=(cj5*r10);
IkReal x12545=(cj5*r00);
IkReal x12546=(cj5*r20);
IkReal x12547=((1.0)*x12542);
IkReal x12548=(sj5*x12542);
IkReal x12549=((1.0)*sj5*x12543);
evalcond[0]=(((r22*x12543))+(((-1.0)*x12546*x12547))+((r21*x12548)));
evalcond[1]=((((-1.0)*x12545*x12547))+((r01*x12548))+((r02*x12543)));
evalcond[2]=((((-1.0)*r11*x12549))+((r12*x12542))+((x12543*x12544)));
evalcond[3]=((1.0)+(((-1.0)*x12544*x12547))+((r12*x12543))+((r11*x12548)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x12542))+(((-1.0)*r21*x12549))+((x12543*x12546)));
evalcond[5]=((((-1.0)*r01*x12549))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12543*x12545))+((r02*x12542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12550=((-1.0)*r00);
IkReal x12552 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12552)==0){
continue;
}
IkReal x12551=pow(x12552,-0.5);
CheckValue<IkReal> x12553 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12550),IKFAST_ATAN2_MAGTHRESH);
if(!x12553.valid){
continue;
}
IkReal gconst18=((-1.0)*(x12553.value));
IkReal gconst19=(r01*x12551);
IkReal gconst20=(x12550*x12551);
CheckValue<IkReal> x12554 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12554.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12554.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12555=((-1.0)*r00);
IkReal x12556=x12551;
CheckValue<IkReal> x12558 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12555),IKFAST_ATAN2_MAGTHRESH);
if(!x12558.valid){
continue;
}
IkReal x12557=((-1.0)*(x12558.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x12557;
IkReal gconst18=x12557;
IkReal gconst19=(r01*x12556);
IkReal gconst20=(x12555*x12556);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12559=((-1.0)*r00);
IkReal x12560=x12551;
CheckValue<IkReal> x12562 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12559),IKFAST_ATAN2_MAGTHRESH);
if(!x12562.valid){
continue;
}
IkReal x12561=((-1.0)*(x12562.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x12561;
IkReal gconst18=x12561;
IkReal gconst19=(r01*x12560);
IkReal gconst20=(x12559*x12560);
CheckValue<IkReal> x12570=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12570.valid){
continue;
}
IkReal x12563=x12570.value;
IkReal x12564=(cj3*x12563);
IkReal x12565=(r21*x12564);
IkReal x12566=(r10*x12564);
IkReal x12567=(r11*x12564);
IkReal x12568=(r20*x12564);
IkReal x12569=(r00*r01*x12564);
j4eval[0]=IKsign((((cj3*r12*r22))+((r11*x12565*(r01*r01)))+((r20*x12566*(r00*r00)))+((r00*r01*r10*x12565))+((r00*r01*r20*x12567))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12571=gconst19*gconst19;
IkReal x12572=gconst20*gconst20;
IkReal x12573=((1.0)*sj3);
IkReal x12574=(r10*r20);
IkReal x12575=(cj3*r21);
IkReal x12576=((1.0)*cj3);
IkReal x12577=(gconst19*r10);
IkReal x12578=(gconst19*gconst20*r11);
IkReal x12579=(gconst20*x12576);
CheckValue<IkReal> x12580 = IKatan2WithCheck(IkReal(((((-1.0)*r11*r22*x12579))+(((-1.0)*r22*x12576*x12577)))),IkReal((((x12575*x12578))+(((-1.0)*r11*r20*x12572*x12576))+((r10*x12571*x12575))+(((-1.0)*gconst19*x12574*x12579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12580.valid){
continue;
}
CheckValue<IkReal> x12581=IKPowWithIntegerCheck(IKsign((((r20*sj3*x12578))+(((-1.0)*x12572*x12573*x12574))+(((-1.0)*r12*r22*x12573))+(((-1.0)*r11*r21*x12571*x12573))+((gconst20*r21*sj3*x12577)))),-1);
if(!x12581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12580.value)+(((1.5707963267949)*(x12581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12582=IKsin(j4);
IkReal x12583=IKcos(j4);
IkReal x12584=(sj1*sj2);
IkReal x12585=(gconst19*r21);
IkReal x12586=((1.0)*gconst20);
IkReal x12587=(cj3*gconst19);
IkReal x12588=((1.0)*cj2);
IkReal x12589=((1.0)*r00);
IkReal x12590=(cj1*sj2);
IkReal x12591=(gconst19*r01);
IkReal x12592=(gconst19*sj3);
IkReal x12593=((1.0)*r10);
IkReal x12594=((1.0)*r20);
IkReal x12595=(cj1*x12588);
IkReal x12596=(r12*x12582);
IkReal x12597=(r11*x12583);
IkReal x12598=(cj3*x12583);
IkReal x12599=(sj3*x12582);
IkReal x12600=(gconst20*sj3*x12583);
IkReal x12601=((1.0)*sj3*x12583);
IkReal x12602=((1.0)*cj3*x12582);
evalcond[0]=((((-1.0)*r20*x12582*x12586))+((r22*x12583))+((x12582*x12585)));
evalcond[1]=((((-1.0)*r00*x12582*x12586))+((r02*x12583))+((x12582*x12591)));
evalcond[2]=((1.0)+((r12*x12583))+(((-1.0)*r10*x12582*x12586))+((gconst19*r11*x12582)));
evalcond[3]=((((-1.0)*cj3*r11*x12586))+(((-1.0)*x12592*x12597))+((r10*x12600))+(((-1.0)*x12587*x12593))+((sj3*x12596)));
evalcond[4]=(((x12587*x12597))+(((-1.0)*r11*sj3*x12586))+(((-1.0)*x12592*x12593))+(((-1.0)*r10*x12586*x12598))+(((-1.0)*cj3*x12596)));
evalcond[5]=(((r20*x12600))+(((-1.0)*cj3*r21*x12586))+(((-1.0)*x12585*x12601))+(((-1.0)*x12587*x12594))+((r22*x12599))+(((-1.0)*x12595))+x12584);
evalcond[6]=(((cj2*sj1))+((x12585*x12598))+(((-1.0)*r20*x12586*x12598))+(((-1.0)*r22*x12602))+(((-1.0)*r21*sj3*x12586))+x12590+(((-1.0)*x12592*x12594)));
evalcond[7]=((((-1.0)*x12591*x12601))+((r00*x12600))+(((-1.0)*cj3*r01*x12586))+(((-1.0)*sj1*x12588))+((r02*x12599))+(((-1.0)*x12587*x12589))+(((-1.0)*x12590)));
evalcond[8]=((((-1.0)*r01*sj3*x12586))+(((-1.0)*r00*x12586*x12598))+(((-1.0)*x12589*x12592))+(((-1.0)*x12595))+(((-1.0)*r02*x12602))+x12584+((r01*x12583*x12587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12603=gconst20*gconst20;
IkReal x12604=gconst19*gconst19;
IkReal x12605=(gconst20*r20);
IkReal x12606=((1.0)*r11);
IkReal x12607=(cj3*gconst19);
IkReal x12608=(gconst20*sj3);
IkReal x12609=(r20*x12603);
IkReal x12610=(r21*x12604);
IkReal x12611=((1.0)*gconst19*r10*sj3);
CheckValue<IkReal> x12612=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x12605*x12606*x12607))+((cj3*r10*x12609))+((cj3*r11*x12610))+(((-1.0)*gconst20*r10*r21*x12607)))),-1);
if(!x12612.valid){
continue;
}
CheckValue<IkReal> x12613 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12611))+(((-1.0)*r22*x12606*x12608)))),IkReal(((((-1.0)*sj3*x12606*x12609))+(((-1.0)*x12605*x12611))+((r10*sj3*x12610))+((gconst19*r11*r21*x12608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12612.value)))+(x12613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12614=IKsin(j4);
IkReal x12615=IKcos(j4);
IkReal x12616=(sj1*sj2);
IkReal x12617=(gconst19*r21);
IkReal x12618=((1.0)*gconst20);
IkReal x12619=(cj3*gconst19);
IkReal x12620=((1.0)*cj2);
IkReal x12621=((1.0)*r00);
IkReal x12622=(cj1*sj2);
IkReal x12623=(gconst19*r01);
IkReal x12624=(gconst19*sj3);
IkReal x12625=((1.0)*r10);
IkReal x12626=((1.0)*r20);
IkReal x12627=(cj1*x12620);
IkReal x12628=(r12*x12614);
IkReal x12629=(r11*x12615);
IkReal x12630=(cj3*x12615);
IkReal x12631=(sj3*x12614);
IkReal x12632=(gconst20*sj3*x12615);
IkReal x12633=((1.0)*sj3*x12615);
IkReal x12634=((1.0)*cj3*x12614);
evalcond[0]=((((-1.0)*r20*x12614*x12618))+((x12614*x12617))+((r22*x12615)));
evalcond[1]=(((r02*x12615))+(((-1.0)*r00*x12614*x12618))+((x12614*x12623)));
evalcond[2]=((1.0)+((gconst19*r11*x12614))+(((-1.0)*r10*x12614*x12618))+((r12*x12615)));
evalcond[3]=((((-1.0)*cj3*r11*x12618))+(((-1.0)*x12624*x12629))+(((-1.0)*x12619*x12625))+((sj3*x12628))+((r10*x12632)));
evalcond[4]=((((-1.0)*cj3*x12628))+(((-1.0)*r11*sj3*x12618))+((x12619*x12629))+(((-1.0)*r10*x12618*x12630))+(((-1.0)*x12624*x12625)));
evalcond[5]=((((-1.0)*x12627))+(((-1.0)*x12617*x12633))+((r20*x12632))+(((-1.0)*x12619*x12626))+(((-1.0)*cj3*r21*x12618))+x12616+((r22*x12631)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*r20*x12618*x12630))+(((-1.0)*r22*x12634))+(((-1.0)*r21*sj3*x12618))+x12622+((x12617*x12630))+(((-1.0)*x12624*x12626)));
evalcond[7]=((((-1.0)*cj3*r01*x12618))+(((-1.0)*x12622))+((r00*x12632))+(((-1.0)*x12619*x12621))+((r02*x12631))+(((-1.0)*sj1*x12620))+(((-1.0)*x12623*x12633)));
evalcond[8]=((((-1.0)*x12627))+(((-1.0)*x12621*x12624))+((r01*x12615*x12619))+x12616+(((-1.0)*r01*sj3*x12618))+(((-1.0)*r00*x12618*x12630))+(((-1.0)*r02*x12634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12635 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst20*r00))+(((-1.0)*gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12635.valid){
continue;
}
CheckValue<IkReal> x12636=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12635.value)+(((1.5707963267949)*(x12636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12637=IKsin(j4);
IkReal x12638=IKcos(j4);
IkReal x12639=(sj1*sj2);
IkReal x12640=(gconst19*r21);
IkReal x12641=((1.0)*gconst20);
IkReal x12642=(cj3*gconst19);
IkReal x12643=((1.0)*cj2);
IkReal x12644=((1.0)*r00);
IkReal x12645=(cj1*sj2);
IkReal x12646=(gconst19*r01);
IkReal x12647=(gconst19*sj3);
IkReal x12648=((1.0)*r10);
IkReal x12649=((1.0)*r20);
IkReal x12650=(cj1*x12643);
IkReal x12651=(r12*x12637);
IkReal x12652=(r11*x12638);
IkReal x12653=(cj3*x12638);
IkReal x12654=(sj3*x12637);
IkReal x12655=(gconst20*sj3*x12638);
IkReal x12656=((1.0)*sj3*x12638);
IkReal x12657=((1.0)*cj3*x12637);
evalcond[0]=((((-1.0)*r20*x12637*x12641))+((x12637*x12640))+((r22*x12638)));
evalcond[1]=(((r02*x12638))+(((-1.0)*r00*x12637*x12641))+((x12637*x12646)));
evalcond[2]=((1.0)+((r12*x12638))+((gconst19*r11*x12637))+(((-1.0)*r10*x12637*x12641)));
evalcond[3]=((((-1.0)*x12647*x12652))+((r10*x12655))+(((-1.0)*x12642*x12648))+((sj3*x12651))+(((-1.0)*cj3*r11*x12641)));
evalcond[4]=((((-1.0)*r11*sj3*x12641))+(((-1.0)*x12647*x12648))+((x12642*x12652))+(((-1.0)*cj3*x12651))+(((-1.0)*r10*x12641*x12653)));
evalcond[5]=((((-1.0)*x12640*x12656))+(((-1.0)*x12650))+((r22*x12654))+(((-1.0)*x12642*x12649))+x12639+((r20*x12655))+(((-1.0)*cj3*r21*x12641)));
evalcond[6]=(((cj2*sj1))+((x12640*x12653))+(((-1.0)*r20*x12641*x12653))+(((-1.0)*x12647*x12649))+x12645+(((-1.0)*r21*sj3*x12641))+(((-1.0)*r22*x12657)));
evalcond[7]=((((-1.0)*x12645))+((r02*x12654))+(((-1.0)*sj1*x12643))+(((-1.0)*x12642*x12644))+(((-1.0)*x12646*x12656))+(((-1.0)*cj3*r01*x12641))+((r00*x12655)));
evalcond[8]=((((-1.0)*r01*sj3*x12641))+((r01*x12638*x12642))+(((-1.0)*x12650))+(((-1.0)*r00*x12641*x12653))+(((-1.0)*r02*x12657))+x12639+(((-1.0)*x12644*x12647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12658=((-1.0)*r01);
IkReal x12660 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12660)==0){
continue;
}
IkReal x12659=pow(x12660,-0.5);
CheckValue<IkReal> x12661 = IKatan2WithCheck(IkReal(x12658),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12661.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x12661.value))));
IkReal gconst22=(x12658*x12659);
IkReal gconst23=((1.0)*r00*x12659);
CheckValue<IkReal> x12662 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12662.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12662.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12663=((-1.0)*r01);
CheckValue<IkReal> x12666 = IKatan2WithCheck(IkReal(x12663),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12666.valid){
continue;
}
IkReal x12664=((1.0)*(x12666.value));
IkReal x12665=x12659;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12664)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12664)));
IkReal gconst22=(x12663*x12665);
IkReal gconst23=((1.0)*r00*x12665);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12667=((-1.0)*r01);
CheckValue<IkReal> x12670 = IKatan2WithCheck(IkReal(x12667),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12670.valid){
continue;
}
IkReal x12668=((1.0)*(x12670.value));
IkReal x12669=x12659;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12668)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12668)));
IkReal gconst22=(x12667*x12669);
IkReal gconst23=((1.0)*r00*x12669);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12671=gconst22*gconst22;
IkReal x12672=gconst23*gconst23;
IkReal x12673=((1.0)*sj3);
IkReal x12674=(r10*r20);
IkReal x12675=(gconst22*gconst23);
IkReal x12676=(r11*r20);
IkReal x12677=((1.0)*cj3);
IkReal x12678=(cj3*r21);
CheckValue<IkReal> x12679 = IKatan2WithCheck(IkReal(((((-1.0)*gconst23*r11*r22*x12677))+(((-1.0)*gconst22*r10*r22*x12677)))),IkReal(((((-1.0)*x12672*x12676*x12677))+((r10*x12671*x12678))+((r11*x12675*x12678))+(((-1.0)*x12674*x12675*x12677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12679.valid){
continue;
}
CheckValue<IkReal> x12680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r21*x12671*x12673))+(((-1.0)*r12*r22*x12673))+(((-1.0)*x12672*x12673*x12674))+((sj3*x12675*x12676))+((r10*r21*sj3*x12675)))),-1);
if(!x12680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12679.value)+(((1.5707963267949)*(x12680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12681=IKsin(j4);
IkReal x12682=IKcos(j4);
IkReal x12683=(sj1*sj2);
IkReal x12684=(r20*sj3);
IkReal x12685=((1.0)*gconst22);
IkReal x12686=((1.0)*gconst23);
IkReal x12687=(r21*sj3);
IkReal x12688=((1.0)*cj2);
IkReal x12689=(cj3*r10);
IkReal x12690=(cj3*r01);
IkReal x12691=(r10*sj3);
IkReal x12692=((1.0)*cj3);
IkReal x12693=(cj1*sj2);
IkReal x12694=(r00*sj3);
IkReal x12695=(cj3*r11);
IkReal x12696=(cj3*r21);
IkReal x12697=(cj1*x12688);
IkReal x12698=(gconst23*x12682);
IkReal x12699=(r12*x12681);
IkReal x12700=(gconst22*x12682);
IkReal x12701=(r22*x12681);
IkReal x12702=(sj3*x12682);
IkReal x12703=(r02*x12681);
IkReal x12704=(gconst22*x12681);
evalcond[0]=(((r21*x12704))+(((-1.0)*r20*x12681*x12686))+((r22*x12682)));
evalcond[1]=(((r02*x12682))+((r01*x12704))+(((-1.0)*r00*x12681*x12686)));
evalcond[2]=((1.0)+((r12*x12682))+(((-1.0)*r10*x12681*x12686))+((r11*x12704)));
evalcond[3]=((((-1.0)*r11*x12685*x12702))+(((-1.0)*x12685*x12689))+((sj3*x12699))+(((-1.0)*x12686*x12695))+((x12691*x12698)));
evalcond[4]=((((-1.0)*x12692*x12699))+((x12695*x12700))+(((-1.0)*x12682*x12686*x12689))+(((-1.0)*r11*sj3*x12686))+(((-1.0)*x12685*x12691)));
evalcond[5]=(((sj3*x12701))+(((-1.0)*x12697))+((x12684*x12698))+(((-1.0)*cj3*r20*x12685))+(((-1.0)*x12682*x12685*x12687))+x12683+(((-1.0)*x12686*x12696)));
evalcond[6]=(((cj2*sj1))+((x12696*x12700))+(((-1.0)*x12686*x12687))+(((-1.0)*x12692*x12701))+(((-1.0)*cj3*r20*x12682*x12686))+(((-1.0)*x12684*x12685))+x12693);
evalcond[7]=(((sj3*x12703))+(((-1.0)*sj1*x12688))+((x12694*x12698))+(((-1.0)*r01*x12685*x12702))+(((-1.0)*cj3*r00*x12685))+(((-1.0)*x12686*x12690))+(((-1.0)*x12693)));
evalcond[8]=((((-1.0)*r01*sj3*x12686))+((x12690*x12700))+(((-1.0)*x12697))+(((-1.0)*x12692*x12703))+(((-1.0)*cj3*r00*x12682*x12686))+x12683+(((-1.0)*x12685*x12694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12705=((1.0)*gconst22);
CheckValue<IkReal> x12706=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*r01))+(((-1.0)*r00*x12705)))),-1);
if(!x12706.valid){
continue;
}
CheckValue<IkReal> x12707 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x12705))+((gconst23*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12706.value)))+(x12707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12708=IKsin(j4);
IkReal x12709=IKcos(j4);
IkReal x12710=(sj1*sj2);
IkReal x12711=(r20*sj3);
IkReal x12712=((1.0)*gconst22);
IkReal x12713=((1.0)*gconst23);
IkReal x12714=(r21*sj3);
IkReal x12715=((1.0)*cj2);
IkReal x12716=(cj3*r10);
IkReal x12717=(cj3*r01);
IkReal x12718=(r10*sj3);
IkReal x12719=((1.0)*cj3);
IkReal x12720=(cj1*sj2);
IkReal x12721=(r00*sj3);
IkReal x12722=(cj3*r11);
IkReal x12723=(cj3*r21);
IkReal x12724=(cj1*x12715);
IkReal x12725=(gconst23*x12709);
IkReal x12726=(r12*x12708);
IkReal x12727=(gconst22*x12709);
IkReal x12728=(r22*x12708);
IkReal x12729=(sj3*x12709);
IkReal x12730=(r02*x12708);
IkReal x12731=(gconst22*x12708);
evalcond[0]=(((r22*x12709))+((r21*x12731))+(((-1.0)*r20*x12708*x12713)));
evalcond[1]=(((r02*x12709))+(((-1.0)*r00*x12708*x12713))+((r01*x12731)));
evalcond[2]=((1.0)+((r11*x12731))+((r12*x12709))+(((-1.0)*r10*x12708*x12713)));
evalcond[3]=((((-1.0)*x12712*x12716))+(((-1.0)*x12713*x12722))+((x12718*x12725))+(((-1.0)*r11*x12712*x12729))+((sj3*x12726)));
evalcond[4]=(((x12722*x12727))+(((-1.0)*x12709*x12713*x12716))+(((-1.0)*r11*sj3*x12713))+(((-1.0)*x12712*x12718))+(((-1.0)*x12719*x12726)));
evalcond[5]=((((-1.0)*x12709*x12712*x12714))+(((-1.0)*x12724))+(((-1.0)*x12713*x12723))+(((-1.0)*cj3*r20*x12712))+x12710+((x12711*x12725))+((sj3*x12728)));
evalcond[6]=(((x12723*x12727))+((cj2*sj1))+(((-1.0)*cj3*r20*x12709*x12713))+(((-1.0)*x12719*x12728))+x12720+(((-1.0)*x12713*x12714))+(((-1.0)*x12711*x12712)));
evalcond[7]=(((x12721*x12725))+(((-1.0)*x12720))+(((-1.0)*cj3*r00*x12712))+(((-1.0)*sj1*x12715))+(((-1.0)*x12713*x12717))+(((-1.0)*r01*x12712*x12729))+((sj3*x12730)));
evalcond[8]=((((-1.0)*x12724))+((x12717*x12727))+(((-1.0)*cj3*r00*x12709*x12713))+(((-1.0)*x12719*x12730))+x12710+(((-1.0)*x12712*x12721))+(((-1.0)*r01*sj3*x12713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12732=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x12732.valid){
continue;
}
CheckValue<IkReal> x12733 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst22*r01))+((gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12732.value)))+(x12733.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12734=IKsin(j4);
IkReal x12735=IKcos(j4);
IkReal x12736=(sj1*sj2);
IkReal x12737=(r20*sj3);
IkReal x12738=((1.0)*gconst22);
IkReal x12739=((1.0)*gconst23);
IkReal x12740=(r21*sj3);
IkReal x12741=((1.0)*cj2);
IkReal x12742=(cj3*r10);
IkReal x12743=(cj3*r01);
IkReal x12744=(r10*sj3);
IkReal x12745=((1.0)*cj3);
IkReal x12746=(cj1*sj2);
IkReal x12747=(r00*sj3);
IkReal x12748=(cj3*r11);
IkReal x12749=(cj3*r21);
IkReal x12750=(cj1*x12741);
IkReal x12751=(gconst23*x12735);
IkReal x12752=(r12*x12734);
IkReal x12753=(gconst22*x12735);
IkReal x12754=(r22*x12734);
IkReal x12755=(sj3*x12735);
IkReal x12756=(r02*x12734);
IkReal x12757=(gconst22*x12734);
evalcond[0]=((((-1.0)*r20*x12734*x12739))+((r21*x12757))+((r22*x12735)));
evalcond[1]=(((r02*x12735))+((r01*x12757))+(((-1.0)*r00*x12734*x12739)));
evalcond[2]=((1.0)+((r11*x12757))+((r12*x12735))+(((-1.0)*r10*x12734*x12739)));
evalcond[3]=((((-1.0)*r11*x12738*x12755))+((x12744*x12751))+((sj3*x12752))+(((-1.0)*x12738*x12742))+(((-1.0)*x12739*x12748)));
evalcond[4]=((((-1.0)*x12745*x12752))+(((-1.0)*r11*sj3*x12739))+(((-1.0)*x12738*x12744))+((x12748*x12753))+(((-1.0)*x12735*x12739*x12742)));
evalcond[5]=((((-1.0)*x12735*x12738*x12740))+((x12737*x12751))+(((-1.0)*cj3*r20*x12738))+((sj3*x12754))+(((-1.0)*x12750))+x12736+(((-1.0)*x12739*x12749)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x12745*x12754))+(((-1.0)*cj3*r20*x12735*x12739))+x12746+(((-1.0)*x12739*x12740))+((x12749*x12753))+(((-1.0)*x12737*x12738)));
evalcond[7]=((((-1.0)*x12746))+(((-1.0)*cj3*r00*x12738))+((sj3*x12756))+(((-1.0)*sj1*x12741))+(((-1.0)*r01*x12738*x12755))+(((-1.0)*x12739*x12743))+((x12747*x12751)));
evalcond[8]=(((x12743*x12753))+(((-1.0)*x12745*x12756))+(((-1.0)*cj3*r00*x12735*x12739))+(((-1.0)*x12750))+x12736+(((-1.0)*x12738*x12747))+(((-1.0)*r01*sj3*x12739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12759 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12759)==0){
continue;
}
IkReal x12758=pow(x12759,-0.5);
CheckValue<IkReal> x12760 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12760.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12760.value));
IkReal gconst25=((-1.0)*r21*x12758);
IkReal gconst26=(r20*x12758);
CheckValue<IkReal> x12761 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12761.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12761.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12764 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12764.valid){
continue;
}
IkReal x12762=((-1.0)*(x12764.value));
IkReal x12763=x12758;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x12762;
IkReal gconst24=x12762;
IkReal gconst25=((-1.0)*r21*x12763);
IkReal gconst26=(r20*x12763);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12767 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12767.valid){
continue;
}
IkReal x12765=((-1.0)*(x12767.value));
IkReal x12766=x12758;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x12765;
IkReal gconst24=x12765;
IkReal gconst25=((-1.0)*r21*x12766);
IkReal gconst26=(r20*x12766);
CheckValue<IkReal> x12775=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12775.valid){
continue;
}
IkReal x12768=x12775.value;
IkReal x12769=(cj3*x12768);
IkReal x12770=(r11*x12769);
IkReal x12771=(r01*x12769);
IkReal x12772=(r00*x12769);
IkReal x12773=(r10*x12769);
IkReal x12774=(r20*r21*x12769);
j4eval[0]=IKsign((((r00*r20*r21*x12770))+((cj3*r02*r12))+((r10*x12772*(r20*r20)))+((r10*r20*r21*x12771))+((r01*x12770*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12776=gconst25*gconst25;
IkReal x12777=gconst26*gconst26;
IkReal x12778=((1.0)*sj3);
IkReal x12779=(cj3*r10);
IkReal x12780=(r01*x12776);
IkReal x12781=(r00*x12777);
IkReal x12782=((1.0)*cj3*r11);
IkReal x12783=(gconst25*gconst26*r01);
IkReal x12784=(gconst25*gconst26*r00);
CheckValue<IkReal> x12785 = IKatan2WithCheck(IkReal(((((-1.0)*gconst26*r02*x12782))+(((-1.0)*gconst25*r02*x12779)))),IkReal((((cj3*r11*x12783))+(((-1.0)*x12779*x12784))+(((-1.0)*x12781*x12782))+((x12779*x12780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12785.valid){
continue;
}
CheckValue<IkReal> x12786=IKPowWithIntegerCheck(IKsign((((r10*sj3*x12783))+(((-1.0)*r02*r12*x12778))+(((-1.0)*r10*x12778*x12781))+(((-1.0)*r11*x12778*x12780))+((r11*sj3*x12784)))),-1);
if(!x12786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12785.value)+(((1.5707963267949)*(x12786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12787=IKsin(j4);
IkReal x12788=IKcos(j4);
IkReal x12789=(sj1*sj2);
IkReal x12790=(gconst25*sj3);
IkReal x12791=(gconst26*r10);
IkReal x12792=(gconst25*r11);
IkReal x12793=((1.0)*cj2);
IkReal x12794=(gconst26*r00);
IkReal x12795=((1.0)*gconst26);
IkReal x12796=(cj1*sj2);
IkReal x12797=((1.0)*r10);
IkReal x12798=((1.0)*r00);
IkReal x12799=(gconst26*r20);
IkReal x12800=(cj3*gconst25);
IkReal x12801=(gconst25*r01);
IkReal x12802=((1.0)*r20);
IkReal x12803=(gconst25*r21);
IkReal x12804=(cj1*x12793);
IkReal x12805=((1.0)*x12788);
IkReal x12806=((1.0)*x12787);
IkReal x12807=(sj3*x12787);
IkReal x12808=(sj3*x12788);
IkReal x12809=(cj3*x12788);
evalcond[0]=(((r22*x12788))+((x12787*x12803))+(((-1.0)*r20*x12787*x12795)));
evalcond[1]=((((-1.0)*x12794*x12806))+((x12787*x12801))+((r02*x12788)));
evalcond[2]=((1.0)+(((-1.0)*x12791*x12806))+((r12*x12788))+((x12787*x12792)));
evalcond[3]=(((x12791*x12808))+(((-1.0)*cj3*r11*x12795))+(((-1.0)*r11*x12790*x12805))+((r12*x12807))+(((-1.0)*x12797*x12800)));
evalcond[4]=(((x12792*x12809))+(((-1.0)*cj3*x12791*x12805))+(((-1.0)*cj3*r12*x12806))+(((-1.0)*r11*sj3*x12795))+(((-1.0)*x12790*x12797)));
evalcond[5]=((((-1.0)*x12804))+(((-1.0)*x12800*x12802))+((x12799*x12808))+x12789+((r22*x12807))+(((-1.0)*cj3*r21*x12795))+(((-1.0)*r21*x12790*x12805)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*r21*sj3*x12795))+((r21*x12788*x12800))+x12796+(((-1.0)*x12790*x12802))+(((-1.0)*r20*x12795*x12809))+(((-1.0)*cj3*r22*x12806)));
evalcond[7]=(((r02*x12807))+(((-1.0)*r01*x12790*x12805))+(((-1.0)*sj1*x12793))+(((-1.0)*cj3*r01*x12795))+((x12794*x12808))+(((-1.0)*x12796))+(((-1.0)*x12798*x12800)));
evalcond[8]=((((-1.0)*x12804))+(((-1.0)*r01*sj3*x12795))+x12789+(((-1.0)*cj3*x12794*x12805))+(((-1.0)*cj3*r02*x12806))+((r01*x12788*x12800))+(((-1.0)*x12790*x12798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12810=gconst25*gconst25;
IkReal x12811=gconst26*gconst26;
IkReal x12812=(cj3*r11);
IkReal x12813=((1.0)*gconst25);
IkReal x12814=(gconst26*r00);
IkReal x12815=(r10*sj3);
IkReal x12816=(r11*sj3);
IkReal x12817=(gconst26*r01);
IkReal x12818=(cj3*r10);
IkReal x12819=(r01*x12810);
IkReal x12820=(r00*x12811);
CheckValue<IkReal> x12821=IKPowWithIntegerCheck(IKsign((((x12812*x12819))+((cj3*r02*r12))+(((-1.0)*x12813*x12817*x12818))+((x12818*x12820))+(((-1.0)*x12812*x12813*x12814)))),-1);
if(!x12821.valid){
continue;
}
CheckValue<IkReal> x12822 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x12813*x12815))+(((-1.0)*gconst26*r02*x12816)))),IkReal((((x12815*x12819))+((gconst25*x12816*x12817))+(((-1.0)*x12816*x12820))+(((-1.0)*x12813*x12814*x12815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12821.value)))+(x12822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12823=IKsin(j4);
IkReal x12824=IKcos(j4);
IkReal x12825=(sj1*sj2);
IkReal x12826=(gconst25*sj3);
IkReal x12827=(gconst26*r10);
IkReal x12828=(gconst25*r11);
IkReal x12829=((1.0)*cj2);
IkReal x12830=(gconst26*r00);
IkReal x12831=((1.0)*gconst26);
IkReal x12832=(cj1*sj2);
IkReal x12833=((1.0)*r10);
IkReal x12834=((1.0)*r00);
IkReal x12835=(gconst26*r20);
IkReal x12836=(cj3*gconst25);
IkReal x12837=(gconst25*r01);
IkReal x12838=((1.0)*r20);
IkReal x12839=(gconst25*r21);
IkReal x12840=(cj1*x12829);
IkReal x12841=((1.0)*x12824);
IkReal x12842=((1.0)*x12823);
IkReal x12843=(sj3*x12823);
IkReal x12844=(sj3*x12824);
IkReal x12845=(cj3*x12824);
evalcond[0]=(((x12823*x12839))+((r22*x12824))+(((-1.0)*r20*x12823*x12831)));
evalcond[1]=((((-1.0)*x12830*x12842))+((x12823*x12837))+((r02*x12824)));
evalcond[2]=((1.0)+(((-1.0)*x12827*x12842))+((r12*x12824))+((x12823*x12828)));
evalcond[3]=((((-1.0)*x12833*x12836))+(((-1.0)*r11*x12826*x12841))+((r12*x12843))+((x12827*x12844))+(((-1.0)*cj3*r11*x12831)));
evalcond[4]=((((-1.0)*cj3*r12*x12842))+(((-1.0)*r11*sj3*x12831))+((x12828*x12845))+(((-1.0)*cj3*x12827*x12841))+(((-1.0)*x12826*x12833)));
evalcond[5]=(((x12835*x12844))+(((-1.0)*cj3*r21*x12831))+x12825+((r22*x12843))+(((-1.0)*x12836*x12838))+(((-1.0)*r21*x12826*x12841))+(((-1.0)*x12840)));
evalcond[6]=(((cj2*sj1))+x12832+(((-1.0)*r21*sj3*x12831))+((r21*x12824*x12836))+(((-1.0)*cj3*r22*x12842))+(((-1.0)*x12826*x12838))+(((-1.0)*r20*x12831*x12845)));
evalcond[7]=((((-1.0)*r01*x12826*x12841))+(((-1.0)*cj3*r01*x12831))+((r02*x12843))+((x12830*x12844))+(((-1.0)*sj1*x12829))+(((-1.0)*x12832))+(((-1.0)*x12834*x12836)));
evalcond[8]=((((-1.0)*cj3*x12830*x12841))+x12825+(((-1.0)*r01*sj3*x12831))+((r01*x12824*x12836))+(((-1.0)*cj3*r02*x12842))+(((-1.0)*x12840))+(((-1.0)*x12826*x12834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12846=((1.0)*gconst25);
CheckValue<IkReal> x12847=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r01))+(((-1.0)*r00*x12846)))),-1);
if(!x12847.valid){
continue;
}
CheckValue<IkReal> x12848 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x12846))+((gconst26*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12847.value)))+(x12848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12849=IKsin(j4);
IkReal x12850=IKcos(j4);
IkReal x12851=(sj1*sj2);
IkReal x12852=(gconst25*sj3);
IkReal x12853=(gconst26*r10);
IkReal x12854=(gconst25*r11);
IkReal x12855=((1.0)*cj2);
IkReal x12856=(gconst26*r00);
IkReal x12857=((1.0)*gconst26);
IkReal x12858=(cj1*sj2);
IkReal x12859=((1.0)*r10);
IkReal x12860=((1.0)*r00);
IkReal x12861=(gconst26*r20);
IkReal x12862=(cj3*gconst25);
IkReal x12863=(gconst25*r01);
IkReal x12864=((1.0)*r20);
IkReal x12865=(gconst25*r21);
IkReal x12866=(cj1*x12855);
IkReal x12867=((1.0)*x12850);
IkReal x12868=((1.0)*x12849);
IkReal x12869=(sj3*x12849);
IkReal x12870=(sj3*x12850);
IkReal x12871=(cj3*x12850);
evalcond[0]=((((-1.0)*r20*x12849*x12857))+((r22*x12850))+((x12849*x12865)));
evalcond[1]=(((x12849*x12863))+((r02*x12850))+(((-1.0)*x12856*x12868)));
evalcond[2]=((1.0)+((x12849*x12854))+(((-1.0)*x12853*x12868))+((r12*x12850)));
evalcond[3]=(((x12853*x12870))+(((-1.0)*x12859*x12862))+(((-1.0)*r11*x12852*x12867))+((r12*x12869))+(((-1.0)*cj3*r11*x12857)));
evalcond[4]=((((-1.0)*x12852*x12859))+(((-1.0)*cj3*x12853*x12867))+(((-1.0)*r11*sj3*x12857))+(((-1.0)*cj3*r12*x12868))+((x12854*x12871)));
evalcond[5]=((((-1.0)*cj3*r21*x12857))+x12851+((x12861*x12870))+(((-1.0)*x12866))+(((-1.0)*r21*x12852*x12867))+(((-1.0)*x12862*x12864))+((r22*x12869)));
evalcond[6]=((((-1.0)*r21*sj3*x12857))+((cj2*sj1))+x12858+(((-1.0)*r20*x12857*x12871))+(((-1.0)*x12852*x12864))+(((-1.0)*cj3*r22*x12868))+((r21*x12850*x12862)));
evalcond[7]=((((-1.0)*cj3*r01*x12857))+((x12856*x12870))+(((-1.0)*x12860*x12862))+(((-1.0)*x12858))+(((-1.0)*sj1*x12855))+(((-1.0)*r01*x12852*x12867))+((r02*x12869)));
evalcond[8]=((((-1.0)*r01*sj3*x12857))+x12851+(((-1.0)*x12866))+(((-1.0)*x12852*x12860))+(((-1.0)*cj3*x12856*x12867))+((r01*x12850*x12862))+(((-1.0)*cj3*r02*x12868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12873 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12873)==0){
continue;
}
IkReal x12872=pow(x12873,-0.5);
CheckValue<IkReal> x12874 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12874.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12874.value))));
IkReal gconst28=((1.0)*r21*x12872);
IkReal gconst29=((-1.0)*r20*x12872);
CheckValue<IkReal> x12875 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12875.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12875.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12878 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12878.valid){
continue;
}
IkReal x12876=((1.0)*(x12878.value));
IkReal x12877=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12876)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12876)));
IkReal gconst28=((1.0)*r21*x12877);
IkReal gconst29=((-1.0)*r20*x12877);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12881 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12881.valid){
continue;
}
IkReal x12879=((1.0)*(x12881.value));
IkReal x12880=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12879)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12879)));
IkReal gconst28=((1.0)*r21*x12880);
IkReal gconst29=((-1.0)*r20*x12880);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12884 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12884.valid){
continue;
}
IkReal x12882=((1.0)*(x12884.value));
IkReal x12883=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12882)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12882)));
IkReal gconst28=((1.0)*r21*x12883);
IkReal gconst29=((-1.0)*r20*x12883);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12887 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12887.valid){
continue;
}
IkReal x12885=((1.0)*(x12887.value));
IkReal x12886=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12885)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12885)));
IkReal gconst28=((1.0)*r21*x12886);
IkReal gconst29=((-1.0)*r20*x12886);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12890 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12890.valid){
continue;
}
IkReal x12888=((1.0)*(x12890.value));
IkReal x12889=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12888)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12888)));
IkReal gconst28=((1.0)*r21*x12889);
IkReal gconst29=((-1.0)*r20*x12889);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12893 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12893.valid){
continue;
}
IkReal x12891=((1.0)*(x12893.value));
IkReal x12892=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12891)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12891)));
IkReal gconst28=((1.0)*r21*x12892);
IkReal gconst29=((-1.0)*r20*x12892);
IkReal x12894=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x12898=IKPowWithIntegerCheck(x12894,-1);
if(!x12898.valid){
continue;
}
IkReal x12895=x12898.value;
IkReal x12896=((1.0)*x12895);
IkReal x12897=((((-1.0)*x12896*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x12896*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x12895)));
j4eval[0]=x12897;
j4eval[1]=r12;
j4eval[2]=x12894;
j4eval[3]=IKsign(x12897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12899=(gconst28*r11);
IkReal x12900=(gconst29*r10);
CheckValue<IkReal> x12901 = IKatan2WithCheck(IkReal((x12899+(((-1.0)*x12900)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12901.valid){
continue;
}
CheckValue<IkReal> x12902=IKPowWithIntegerCheck(IKsign(((((2.0)*x12899*x12900))+(((-1.0)*(r12*r12)))+(((-1.0)*(x12900*x12900)))+(((-1.0)*(x12899*x12899))))),-1);
if(!x12902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12901.value)+(((1.5707963267949)*(x12902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12903=IKsin(j4);
IkReal x12904=IKcos(j4);
IkReal x12905=((1.0)*gconst29);
IkReal x12906=(gconst28*r21);
IkReal x12907=(gconst28*x12904);
IkReal x12908=(gconst28*x12903);
IkReal x12909=((1.0)*x12903);
evalcond[0]=((((-1.0)*r20*x12903*x12905))+((x12903*x12906))+((r22*x12904)));
evalcond[1]=(((r01*x12908))+((r02*x12904))+(((-1.0)*r00*x12903*x12905)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12903*x12905))+((r12*x12904))+((r11*x12908)));
evalcond[3]=((((-1.0)*r12*x12909))+((r11*x12907))+(((-1.0)*r10*x12904*x12905)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12909))+(((-1.0)*r20*x12904*x12905))+((x12904*x12906)));
evalcond[5]=(((r01*x12907))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x12909))+(((-1.0)*r00*x12904*x12905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12910=((1.0)*gconst28);
CheckValue<IkReal> x12911 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x12910))+((gconst29*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12911.valid){
continue;
}
CheckValue<IkReal> x12912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12910))+(((-1.0)*gconst29*r01)))),-1);
if(!x12912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12911.value)+(((1.5707963267949)*(x12912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12913=IKsin(j4);
IkReal x12914=IKcos(j4);
IkReal x12915=((1.0)*gconst29);
IkReal x12916=(gconst28*r21);
IkReal x12917=(gconst28*x12914);
IkReal x12918=(gconst28*x12913);
IkReal x12919=((1.0)*x12913);
evalcond[0]=((((-1.0)*r20*x12913*x12915))+((r22*x12914))+((x12913*x12916)));
evalcond[1]=(((r02*x12914))+(((-1.0)*r00*x12913*x12915))+((r01*x12918)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12913*x12915))+((r12*x12914))+((r11*x12918)));
evalcond[3]=((((-1.0)*r10*x12914*x12915))+(((-1.0)*r12*x12919))+((r11*x12917)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x12914*x12916))+(((-1.0)*r22*x12919))+(((-1.0)*r20*x12914*x12915)));
evalcond[5]=((((-1.0)*r00*x12914*x12915))+(((-1.0)*r02*x12919))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x12917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12920=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x12920.valid){
continue;
}
CheckValue<IkReal> x12921 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst28*r01))+((gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12920.value)))+(x12921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12922=IKsin(j4);
IkReal x12923=IKcos(j4);
IkReal x12924=((1.0)*gconst29);
IkReal x12925=(gconst28*r21);
IkReal x12926=(gconst28*x12923);
IkReal x12927=(gconst28*x12922);
IkReal x12928=((1.0)*x12922);
evalcond[0]=((((-1.0)*r20*x12922*x12924))+((x12922*x12925))+((r22*x12923)));
evalcond[1]=(((r02*x12923))+(((-1.0)*r00*x12922*x12924))+((r01*x12927)));
evalcond[2]=((1.0)+((r11*x12927))+(((-1.0)*r10*x12922*x12924))+((r12*x12923)));
evalcond[3]=((((-1.0)*r10*x12923*x12924))+((r11*x12926))+(((-1.0)*r12*x12928)));
evalcond[4]=(((cj2*sj1))+((x12923*x12925))+(((-1.0)*r20*x12923*x12924))+((cj1*sj2))+(((-1.0)*r22*x12928)));
evalcond[5]=((((-1.0)*r02*x12928))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x12926))+(((-1.0)*r00*x12923*x12924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12931 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12931.valid){
continue;
}
IkReal x12929=((1.0)*(x12931.value));
IkReal x12930=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12929)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12929)));
IkReal gconst28=((1.0)*r21*x12930);
IkReal gconst29=((-1.0)*r20*x12930);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12934 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12934.valid){
continue;
}
IkReal x12932=((1.0)*(x12934.value));
IkReal x12933=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12932)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12932)));
IkReal gconst28=((1.0)*r21*x12933);
IkReal gconst29=((-1.0)*r20*x12933);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x12937 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12937.valid){
continue;
}
IkReal x12935=((1.0)*(x12937.value));
IkReal x12936=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12935)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12935)));
IkReal gconst28=((1.0)*r21*x12936);
IkReal gconst29=((-1.0)*r20*x12936);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12938=(gconst29*r10);
IkReal x12939=(gconst28*r11);
CheckValue<IkReal> x12940=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12938*x12939))+(x12938*x12938)+(x12939*x12939))),-1);
if(!x12940.valid){
continue;
}
CheckValue<IkReal> x12941 = IKatan2WithCheck(IkReal((x12938+(((-1.0)*x12939)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12940.value)))+(x12941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12942=IKsin(j4);
IkReal x12943=IKcos(j4);
IkReal x12944=(gconst29*x12943);
IkReal x12945=(gconst28*x12942);
IkReal x12946=((1.0)*gconst29*x12942);
IkReal x12947=((1.0)*gconst28*x12943);
evalcond[0]=(((r22*x12943))+((r21*x12945))+(((-1.0)*r20*x12946)));
evalcond[1]=(((r01*x12945))+(((-1.0)*r00*x12946))+((r02*x12943)));
evalcond[2]=((((-1.0)*r11*x12947))+((r10*x12944))+((r12*x12942)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12946))+((r12*x12943))+((r11*x12945)));
evalcond[4]=(((cj2*sj1))+((r22*x12942))+((cj1*sj2))+(((-1.0)*r21*x12947))+((r20*x12944)));
evalcond[5]=(((r00*x12944))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x12947))+((r02*x12942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12948=((1.0)*gconst28);
CheckValue<IkReal> x12949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12948))+(((-1.0)*gconst29*r01)))),-1);
if(!x12949.valid){
continue;
}
CheckValue<IkReal> x12950 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst29*r20))+(((-1.0)*r21*x12948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12949.value)))+(x12950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12951=IKsin(j4);
IkReal x12952=IKcos(j4);
IkReal x12953=(gconst29*x12952);
IkReal x12954=(gconst28*x12951);
IkReal x12955=((1.0)*gconst29*x12951);
IkReal x12956=((1.0)*gconst28*x12952);
evalcond[0]=(((r22*x12952))+((r21*x12954))+(((-1.0)*r20*x12955)));
evalcond[1]=(((r01*x12954))+((r02*x12952))+(((-1.0)*r00*x12955)));
evalcond[2]=(((r10*x12953))+((r12*x12951))+(((-1.0)*r11*x12956)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12955))+((r12*x12952))+((r11*x12954)));
evalcond[4]=(((cj2*sj1))+((r22*x12951))+((cj1*sj2))+(((-1.0)*r21*x12956))+((r20*x12953)));
evalcond[5]=(((r00*x12953))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x12956))+((r02*x12951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12957=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x12957.valid){
continue;
}
CheckValue<IkReal> x12958 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst28*r01))+((gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12957.value)))+(x12958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12959=IKsin(j4);
IkReal x12960=IKcos(j4);
IkReal x12961=(gconst29*x12960);
IkReal x12962=(gconst28*x12959);
IkReal x12963=((1.0)*gconst29*x12959);
IkReal x12964=((1.0)*gconst28*x12960);
evalcond[0]=((((-1.0)*r20*x12963))+((r22*x12960))+((r21*x12962)));
evalcond[1]=((((-1.0)*r00*x12963))+((r01*x12962))+((r02*x12960)));
evalcond[2]=(((r12*x12959))+(((-1.0)*r11*x12964))+((r10*x12961)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12963))+((r11*x12962))+((r12*x12960)));
evalcond[4]=(((cj2*sj1))+((r22*x12959))+((cj1*sj2))+((r20*x12961))+(((-1.0)*r21*x12964)));
evalcond[5]=(((r00*x12961))+(((-1.0)*r01*x12964))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x12959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12967 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12967.valid){
continue;
}
IkReal x12965=((1.0)*(x12967.value));
IkReal x12966=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12965)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12965)));
IkReal gconst28=((1.0)*r21*x12966);
IkReal gconst29=((-1.0)*r20*x12966);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12970 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12970.valid){
continue;
}
IkReal x12968=((1.0)*(x12970.value));
IkReal x12969=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12968)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12968)));
IkReal gconst28=((1.0)*r21*x12969);
IkReal gconst29=((-1.0)*r20*x12969);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x12973 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12973.valid){
continue;
}
IkReal x12971=((1.0)*(x12973.value));
IkReal x12972=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12971)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12971)));
IkReal gconst28=((1.0)*r21*x12972);
IkReal gconst29=((-1.0)*r20*x12972);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12974=(gconst29*r10);
IkReal x12975=(gconst28*r11);
CheckValue<IkReal> x12976 = IKatan2WithCheck(IkReal((x12974+(((-1.0)*x12975)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12976.valid){
continue;
}
CheckValue<IkReal> x12977=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12974*x12974)+(x12975*x12975)+(((-2.0)*x12974*x12975)))),-1);
if(!x12977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12976.value)+(((1.5707963267949)*(x12977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12978=IKsin(j4);
IkReal x12979=IKcos(j4);
IkReal x12980=((1.0)*cj2);
IkReal x12981=(gconst29*x12979);
IkReal x12982=(gconst28*x12978);
IkReal x12983=((1.0)*gconst29*x12978);
IkReal x12984=((1.0)*gconst28*x12979);
evalcond[0]=(((r21*x12982))+(((-1.0)*r20*x12983))+((r22*x12979)));
evalcond[1]=((((-1.0)*r00*x12983))+((r02*x12979))+((r01*x12982)));
evalcond[2]=(((r10*x12981))+(((-1.0)*r11*x12984))+((r12*x12978)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12983))+((r11*x12982))+((r12*x12979)));
evalcond[4]=((((-1.0)*cj1*x12980))+((sj1*sj2))+((r20*x12981))+(((-1.0)*r21*x12984))+((r22*x12978)));
evalcond[5]=((((-1.0)*r01*x12984))+((r02*x12978))+((r00*x12981))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12985=((1.0)*gconst28);
CheckValue<IkReal> x12986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12985))+(((-1.0)*gconst29*r01)))),-1);
if(!x12986.valid){
continue;
}
CheckValue<IkReal> x12987 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x12985))+((gconst29*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12986.value)))+(x12987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12988=IKsin(j4);
IkReal x12989=IKcos(j4);
IkReal x12990=((1.0)*cj2);
IkReal x12991=(gconst29*x12989);
IkReal x12992=(gconst28*x12988);
IkReal x12993=((1.0)*gconst29*x12988);
IkReal x12994=((1.0)*gconst28*x12989);
evalcond[0]=(((r22*x12989))+((r21*x12992))+(((-1.0)*r20*x12993)));
evalcond[1]=((((-1.0)*r00*x12993))+((r01*x12992))+((r02*x12989)));
evalcond[2]=(((r10*x12991))+(((-1.0)*r11*x12994))+((r12*x12988)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12993))+((r11*x12992))+((r12*x12989)));
evalcond[4]=(((r22*x12988))+(((-1.0)*cj1*x12990))+((sj1*sj2))+((r20*x12991))+(((-1.0)*r21*x12994)));
evalcond[5]=((((-1.0)*r01*x12994))+((r00*x12991))+(((-1.0)*cj1*sj2))+((r02*x12988))+(((-1.0)*sj1*x12990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12995=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x12995.valid){
continue;
}
CheckValue<IkReal> x12996 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst28*r01))+((gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12995.value)))+(x12996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12997=IKsin(j4);
IkReal x12998=IKcos(j4);
IkReal x12999=((1.0)*cj2);
IkReal x13000=(gconst29*x12998);
IkReal x13001=(gconst28*x12997);
IkReal x13002=((1.0)*gconst29*x12997);
IkReal x13003=((1.0)*gconst28*x12998);
evalcond[0]=(((r22*x12998))+(((-1.0)*r20*x13002))+((r21*x13001)));
evalcond[1]=((((-1.0)*r00*x13002))+((r02*x12998))+((r01*x13001)));
evalcond[2]=((((-1.0)*r11*x13003))+((r12*x12997))+((r10*x13000)));
evalcond[3]=((1.0)+((r12*x12998))+((r11*x13001))+(((-1.0)*r10*x13002)));
evalcond[4]=(((r22*x12997))+(((-1.0)*cj1*x12999))+((r20*x13000))+((sj1*sj2))+(((-1.0)*r21*x13003)));
evalcond[5]=(((r00*x13000))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x13003))+((r02*x12997))+(((-1.0)*sj1*x12999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13006 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13006.valid){
continue;
}
IkReal x13004=((1.0)*(x13006.value));
IkReal x13005=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13004)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13004)));
IkReal gconst28=((1.0)*r21*x13005);
IkReal gconst29=((-1.0)*r20*x13005);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13009 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13009.valid){
continue;
}
IkReal x13007=((1.0)*(x13009.value));
IkReal x13008=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13007)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13007)));
IkReal gconst28=((1.0)*r21*x13008);
IkReal gconst29=((-1.0)*r20*x13008);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13012 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13012.valid){
continue;
}
IkReal x13010=((1.0)*(x13012.value));
IkReal x13011=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13010)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13010)));
IkReal gconst28=((1.0)*r21*x13011);
IkReal gconst29=((-1.0)*r20*x13011);
IkReal x13013=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13017=IKPowWithIntegerCheck(x13013,-1);
if(!x13017.valid){
continue;
}
IkReal x13014=x13017.value;
IkReal x13015=((1.0)*x13014);
IkReal x13016=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13014))+(((-1.0)*x13015*(r11*r11)*(r21*r21)))+(((-1.0)*x13015*(r10*r10)*(r20*r20))));
j4eval[0]=x13016;
j4eval[1]=r12;
j4eval[2]=x13013;
j4eval[3]=IKsign(x13016);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13018=(gconst28*r11);
IkReal x13019=(gconst29*r10);
CheckValue<IkReal> x13020 = IKatan2WithCheck(IkReal(((((-1.0)*x13019))+x13018)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13020.valid){
continue;
}
CheckValue<IkReal> x13021=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13019*x13019)))+(((-1.0)*(r12*r12)))+(((2.0)*x13018*x13019))+(((-1.0)*(x13018*x13018))))),-1);
if(!x13021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13020.value)+(((1.5707963267949)*(x13021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13022=IKsin(j4);
IkReal x13023=IKcos(j4);
IkReal x13024=((1.0)*gconst29);
IkReal x13025=(gconst28*r21);
IkReal x13026=((1.0)*cj2);
IkReal x13027=(gconst28*x13023);
IkReal x13028=(gconst28*x13022);
IkReal x13029=((1.0)*x13022);
evalcond[0]=((((-1.0)*r20*x13022*x13024))+((x13022*x13025))+((r22*x13023)));
evalcond[1]=(((r01*x13028))+((r02*x13023))+(((-1.0)*r00*x13022*x13024)));
evalcond[2]=((1.0)+((r11*x13028))+((r12*x13023))+(((-1.0)*r10*x13022*x13024)));
evalcond[3]=(((r11*x13027))+(((-1.0)*r10*x13023*x13024))+(((-1.0)*r12*x13029)));
evalcond[4]=((((-1.0)*r22*x13029))+(((-1.0)*cj1*x13026))+((sj1*sj2))+(((-1.0)*r20*x13023*x13024))+((x13023*x13025)));
evalcond[5]=(((r01*x13027))+(((-1.0)*sj1*x13026))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13029))+(((-1.0)*r00*x13023*x13024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13030=((1.0)*gconst28);
CheckValue<IkReal> x13031=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13030))+(((-1.0)*gconst29*r01)))),-1);
if(!x13031.valid){
continue;
}
CheckValue<IkReal> x13032 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst29*r20))+(((-1.0)*r21*x13030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13031.value)))+(x13032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13033=IKsin(j4);
IkReal x13034=IKcos(j4);
IkReal x13035=((1.0)*gconst29);
IkReal x13036=(gconst28*r21);
IkReal x13037=((1.0)*cj2);
IkReal x13038=(gconst28*x13034);
IkReal x13039=(gconst28*x13033);
IkReal x13040=((1.0)*x13033);
evalcond[0]=(((r22*x13034))+((x13033*x13036))+(((-1.0)*r20*x13033*x13035)));
evalcond[1]=((((-1.0)*r00*x13033*x13035))+((r01*x13039))+((r02*x13034)));
evalcond[2]=((1.0)+((r11*x13039))+((r12*x13034))+(((-1.0)*r10*x13033*x13035)));
evalcond[3]=(((r11*x13038))+(((-1.0)*r12*x13040))+(((-1.0)*r10*x13034*x13035)));
evalcond[4]=(((sj1*sj2))+((x13034*x13036))+(((-1.0)*r22*x13040))+(((-1.0)*cj1*x13037))+(((-1.0)*r20*x13034*x13035)));
evalcond[5]=((((-1.0)*r02*x13040))+(((-1.0)*cj1*sj2))+((r01*x13038))+(((-1.0)*r00*x13034*x13035))+(((-1.0)*sj1*x13037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13041=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13041.valid){
continue;
}
CheckValue<IkReal> x13042 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst28*r01))+((gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13041.value)))+(x13042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13043=IKsin(j4);
IkReal x13044=IKcos(j4);
IkReal x13045=((1.0)*gconst29);
IkReal x13046=(gconst28*r21);
IkReal x13047=((1.0)*cj2);
IkReal x13048=(gconst28*x13044);
IkReal x13049=(gconst28*x13043);
IkReal x13050=((1.0)*x13043);
evalcond[0]=((((-1.0)*r20*x13043*x13045))+((x13043*x13046))+((r22*x13044)));
evalcond[1]=((((-1.0)*r00*x13043*x13045))+((r02*x13044))+((r01*x13049)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13043*x13045))+((r11*x13049))+((r12*x13044)));
evalcond[3]=(((r11*x13048))+(((-1.0)*r10*x13044*x13045))+(((-1.0)*r12*x13050)));
evalcond[4]=((((-1.0)*r20*x13044*x13045))+((x13044*x13046))+((sj1*sj2))+(((-1.0)*r22*x13050))+(((-1.0)*cj1*x13047)));
evalcond[5]=((((-1.0)*sj1*x13047))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13044*x13045))+(((-1.0)*r02*x13050))+((r01*x13048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13053 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13053.valid){
continue;
}
IkReal x13051=((1.0)*(x13053.value));
IkReal x13052=x12872;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13051)));
r02=0;
npz=(((py*r12))+((pz*r22)));
rxp2_1=(px*r22);
rxp2_2=((-1.0)*px*r12);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13051)));
IkReal gconst28=((1.0)*r21*x13052);
IkReal gconst29=((-1.0)*r20*x13052);
IkReal x13054=x12872;
IkReal x13055=((2.0)*x13054);
j4eval[0]=((IKabs(((1.0)+(((-1.0)*r12)))))+(IKabs((((r10*r20*x13055))+((r11*r21*x13055))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+(((-1.0)*r12)));
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+r12);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13056=gconst28*gconst28;
IkReal x13057=gconst29*gconst29;
IkReal x13058=((1.0)*sj3);
IkReal x13059=(r11*r21);
IkReal x13060=((1.0)*cj3);
IkReal x13061=(gconst28*r10);
IkReal x13062=(gconst29*sj3);
IkReal x13063=(r20*x13057);
CheckValue<IkReal> x13064=IKPowWithIntegerCheck(IKsign((((gconst28*r11*r20*x13062))+(((-1.0)*x13056*x13058*x13059))+(((-1.0)*r10*x13058*x13063))+(((-1.0)*r12*r22*x13058))+((r21*x13061*x13062)))),-1);
if(!x13064.valid){
continue;
}
CheckValue<IkReal> x13065 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13060*x13061))+(((-1.0)*gconst29*r11*r22*x13060)))),IkReal(((((-1.0)*r11*x13060*x13063))+((cj3*gconst28*gconst29*x13059))+((cj3*r10*r21*x13056))+(((-1.0)*gconst29*r20*x13060*x13061)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13064.value)))+(x13065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13066=IKsin(j4);
IkReal x13067=IKcos(j4);
IkReal x13068=(sj1*sj2);
IkReal x13069=((1.0)*r20);
IkReal x13070=(cj3*gconst28);
IkReal x13071=(cj3*gconst29);
IkReal x13072=((1.0)*cj2);
IkReal x13073=(gconst28*sj3);
IkReal x13074=((1.0)*r00);
IkReal x13075=(cj1*sj2);
IkReal x13076=((1.0)*r10);
IkReal x13077=((1.0)*r11);
IkReal x13078=(cj1*x13072);
IkReal x13079=(gconst29*x13066);
IkReal x13080=(gconst28*x13066);
IkReal x13081=(r12*x13066);
IkReal x13082=((1.0)*x13067);
IkReal x13083=((1.0)*gconst29*sj3);
IkReal x13084=(sj3*x13066);
IkReal x13085=((1.0)*cj3*x13066);
IkReal x13086=(gconst29*sj3*x13067);
evalcond[0]=((((-1.0)*x13069*x13079))+((r22*x13067))+((r21*x13080)));
evalcond[1]=(((r02*x13067))+(((-1.0)*x13074*x13079))+((r01*x13080)));
evalcond[2]=((1.0)+(((-1.0)*x13076*x13079))+((r12*x13067))+((r11*x13080)));
evalcond[3]=(((sj3*x13081))+(((-1.0)*x13070*x13076))+(((-1.0)*x13067*x13073*x13077))+((r10*x13086))+(((-1.0)*x13071*x13077)));
evalcond[4]=((((-1.0)*x13067*x13071*x13076))+(((-1.0)*cj3*x13081))+(((-1.0)*x13073*x13076))+((r11*x13067*x13070))+(((-1.0)*gconst29*sj3*x13077)));
evalcond[5]=(((r20*x13086))+(((-1.0)*r21*x13073*x13082))+(((-1.0)*x13069*x13070))+(((-1.0)*x13078))+((r22*x13084))+x13068+(((-1.0)*r21*x13071)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x13069*x13073))+(((-1.0)*r22*x13085))+x13075+(((-1.0)*r21*x13083))+((r21*x13067*x13070))+(((-1.0)*x13067*x13069*x13071)));
evalcond[7]=(((r02*x13084))+(((-1.0)*r01*x13073*x13082))+(((-1.0)*sj1*x13072))+(((-1.0)*x13070*x13074))+(((-1.0)*r01*x13071))+(((-1.0)*x13075))+((r00*x13086)));
evalcond[8]=((((-1.0)*r02*x13085))+(((-1.0)*x13067*x13071*x13074))+(((-1.0)*x13078))+(((-1.0)*r01*x13083))+(((-1.0)*x13073*x13074))+x13068+((r01*x13067*x13070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13087=((1.0)*gconst28);
CheckValue<IkReal> x13088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13087))+(((-1.0)*gconst29*r01)))),-1);
if(!x13088.valid){
continue;
}
CheckValue<IkReal> x13089 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst29*r20))+(((-1.0)*r21*x13087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13088.value)))+(x13089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13090=IKsin(j4);
IkReal x13091=IKcos(j4);
IkReal x13092=(sj1*sj2);
IkReal x13093=((1.0)*r20);
IkReal x13094=(cj3*gconst28);
IkReal x13095=(cj3*gconst29);
IkReal x13096=((1.0)*cj2);
IkReal x13097=(gconst28*sj3);
IkReal x13098=((1.0)*r00);
IkReal x13099=(cj1*sj2);
IkReal x13100=((1.0)*r10);
IkReal x13101=((1.0)*r11);
IkReal x13102=(cj1*x13096);
IkReal x13103=(gconst29*x13090);
IkReal x13104=(gconst28*x13090);
IkReal x13105=(r12*x13090);
IkReal x13106=((1.0)*x13091);
IkReal x13107=((1.0)*gconst29*sj3);
IkReal x13108=(sj3*x13090);
IkReal x13109=((1.0)*cj3*x13090);
IkReal x13110=(gconst29*sj3*x13091);
evalcond[0]=((((-1.0)*x13093*x13103))+((r22*x13091))+((r21*x13104)));
evalcond[1]=(((r02*x13091))+((r01*x13104))+(((-1.0)*x13098*x13103)));
evalcond[2]=((1.0)+(((-1.0)*x13100*x13103))+((r12*x13091))+((r11*x13104)));
evalcond[3]=((((-1.0)*x13094*x13100))+(((-1.0)*x13091*x13097*x13101))+((sj3*x13105))+((r10*x13110))+(((-1.0)*x13095*x13101)));
evalcond[4]=((((-1.0)*cj3*x13105))+(((-1.0)*x13097*x13100))+(((-1.0)*gconst29*sj3*x13101))+(((-1.0)*x13091*x13095*x13100))+((r11*x13091*x13094)));
evalcond[5]=((((-1.0)*r21*x13097*x13106))+((r22*x13108))+(((-1.0)*x13102))+x13092+((r20*x13110))+(((-1.0)*x13093*x13094))+(((-1.0)*r21*x13095)));
evalcond[6]=(((cj2*sj1))+((r21*x13091*x13094))+(((-1.0)*x13091*x13093*x13095))+x13099+(((-1.0)*r22*x13109))+(((-1.0)*r21*x13107))+(((-1.0)*x13093*x13097)));
evalcond[7]=((((-1.0)*r01*x13097*x13106))+(((-1.0)*x13094*x13098))+(((-1.0)*r01*x13095))+((r02*x13108))+(((-1.0)*sj1*x13096))+(((-1.0)*x13099))+((r00*x13110)));
evalcond[8]=((((-1.0)*r01*x13107))+(((-1.0)*x13097*x13098))+((r01*x13091*x13094))+(((-1.0)*x13091*x13095*x13098))+(((-1.0)*x13102))+(((-1.0)*r02*x13109))+x13092);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13111=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13111.valid){
continue;
}
CheckValue<IkReal> x13112 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst28*r01))+((gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13111.value)))+(x13112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13113=IKsin(j4);
IkReal x13114=IKcos(j4);
IkReal x13115=(sj1*sj2);
IkReal x13116=((1.0)*r20);
IkReal x13117=(cj3*gconst28);
IkReal x13118=(cj3*gconst29);
IkReal x13119=((1.0)*cj2);
IkReal x13120=(gconst28*sj3);
IkReal x13121=((1.0)*r00);
IkReal x13122=(cj1*sj2);
IkReal x13123=((1.0)*r10);
IkReal x13124=((1.0)*r11);
IkReal x13125=(cj1*x13119);
IkReal x13126=(gconst29*x13113);
IkReal x13127=(gconst28*x13113);
IkReal x13128=(r12*x13113);
IkReal x13129=((1.0)*x13114);
IkReal x13130=((1.0)*gconst29*sj3);
IkReal x13131=(sj3*x13113);
IkReal x13132=((1.0)*cj3*x13113);
IkReal x13133=(gconst29*sj3*x13114);
evalcond[0]=(((r22*x13114))+(((-1.0)*x13116*x13126))+((r21*x13127)));
evalcond[1]=(((r02*x13114))+(((-1.0)*x13121*x13126))+((r01*x13127)));
evalcond[2]=((1.0)+((r12*x13114))+(((-1.0)*x13123*x13126))+((r11*x13127)));
evalcond[3]=(((r10*x13133))+((sj3*x13128))+(((-1.0)*x13118*x13124))+(((-1.0)*x13117*x13123))+(((-1.0)*x13114*x13120*x13124)));
evalcond[4]=((((-1.0)*x13120*x13123))+((r11*x13114*x13117))+(((-1.0)*gconst29*sj3*x13124))+(((-1.0)*x13114*x13118*x13123))+(((-1.0)*cj3*x13128)));
evalcond[5]=((((-1.0)*x13116*x13117))+((r20*x13133))+(((-1.0)*r21*x13118))+(((-1.0)*x13125))+x13115+((r22*x13131))+(((-1.0)*r21*x13120*x13129)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*r21*x13130))+((r21*x13114*x13117))+(((-1.0)*x13114*x13116*x13118))+(((-1.0)*r22*x13132))+(((-1.0)*x13116*x13120))+x13122);
evalcond[7]=((((-1.0)*r01*x13118))+(((-1.0)*r01*x13120*x13129))+((r00*x13133))+(((-1.0)*x13117*x13121))+((r02*x13131))+(((-1.0)*sj1*x13119))+(((-1.0)*x13122)));
evalcond[8]=((((-1.0)*x13120*x13121))+((r01*x13114*x13117))+(((-1.0)*x13114*x13118*x13121))+(((-1.0)*x13125))+x13115+(((-1.0)*r01*x13130))+(((-1.0)*r02*x13132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13134=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13134);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13134);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13135=(cj5*r10);
IkReal x13136=(r11*sj5);
j4eval[0]=(x13136+(((-1.0)*x13135)));
j4eval[1]=((((-1.0)*sj3*x13136))+((sj3*x13135)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13137=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13137);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13137);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13138=(r11*sj5);
IkReal x13139=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13139))+x13138);
j4eval[1]=((((-1.0)*cj3*x13139))+((cj3*x13138)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13140=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13140);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13140);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13141=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13141);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13141);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13142=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13143=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13143.valid){
continue;
}
CheckValue<IkReal> x13144=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13144.valid){
continue;
}
if( IKabs(((-1.0)*(x13143.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13144.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13143.value)))+IKsqr(((x13144.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13143.value)), ((x13144.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13145=IKsin(j4);
IkReal x13146=IKcos(j4);
IkReal x13147=((1.0)*cj1);
IkReal x13148=(cj5*r00);
IkReal x13149=(cj5*r10);
IkReal x13150=((1.0)*x13145);
IkReal x13151=(sj5*x13145);
IkReal x13152=((1.0)*sj5*x13146);
evalcond[0]=(r22*x13146);
evalcond[1]=(((r22*x13145))+((sj1*sj2))+(((-1.0)*cj2*x13147)));
evalcond[2]=((((-1.0)*x13148*x13150))+((r01*x13151)));
evalcond[3]=((((-1.0)*r11*x13152))+((x13146*x13149)));
evalcond[4]=((1.0)+((r11*x13151))+(((-1.0)*x13149*x13150)));
evalcond[5]=(((x13146*x13148))+(((-1.0)*sj2*x13147))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*x13152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13153=IKPowWithIntegerCheck(r22,-1);
if(!x13153.valid){
continue;
}
CheckValue<IkReal> x13154=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13154.valid){
continue;
}
if( IKabs(((x13153.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13154.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13153.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13154.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13153.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13154.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13155=IKsin(j4);
IkReal x13156=IKcos(j4);
IkReal x13157=((1.0)*cj1);
IkReal x13158=(cj5*r00);
IkReal x13159=(cj5*r10);
IkReal x13160=((1.0)*x13155);
IkReal x13161=(sj5*x13155);
IkReal x13162=((1.0)*sj5*x13156);
evalcond[0]=(r22*x13156);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj2*x13157))+((r22*x13155)));
evalcond[2]=(((r01*x13161))+(((-1.0)*x13158*x13160)));
evalcond[3]=((((-1.0)*r11*x13162))+((x13156*x13159)));
evalcond[4]=((1.0)+((r11*x13161))+(((-1.0)*x13159*x13160)));
evalcond[5]=((((-1.0)*sj2*x13157))+(((-1.0)*r01*x13162))+(((-1.0)*cj2*sj1))+((x13156*x13158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13163=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13164=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13164)));
j4eval[1]=((((-1.0)*r00*x13164))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13165=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13165);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13165);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13166=IKPowWithIntegerCheck(r22,-1);
if(!x13166.valid){
continue;
}
CheckValue<IkReal> x13167=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13167.valid){
continue;
}
if( IKabs(((x13166.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13167.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13166.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13167.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13166.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13167.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13168=IKsin(j4);
IkReal x13169=IKcos(j4);
IkReal x13170=((1.0)*cj2);
IkReal x13171=((1.0)*cj5*r00);
IkReal x13172=(sj5*x13169);
IkReal x13173=((1.0)*cj5*r10);
IkReal x13174=(sj5*x13168);
evalcond[0]=(r22*x13169);
evalcond[1]=(((r01*x13174))+(((-1.0)*x13168*x13171)));
evalcond[2]=((((-1.0)*cj1*x13170))+(((-1.0)*r22*x13168))+((sj1*sj2)));
evalcond[3]=((((-1.0)*x13169*x13173))+((r11*x13172)));
evalcond[4]=((1.0)+((r11*x13174))+(((-1.0)*x13168*x13173)));
evalcond[5]=(((r01*x13172))+(((-1.0)*x13169*x13171))+(((-1.0)*sj1*x13170))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13175=((1.0)*cj5);
CheckValue<IkReal> x13176=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13175))),-1);
if(!x13176.valid){
continue;
}
CheckValue<IkReal> x13177=IKPowWithIntegerCheck(((((-1.0)*r00*x13175))+((r01*sj5))),-1);
if(!x13177.valid){
continue;
}
if( IKabs(((-1.0)*(x13176.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13177.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13176.value)))+IKsqr(((x13177.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13176.value)), ((x13177.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13178=IKsin(j4);
IkReal x13179=IKcos(j4);
IkReal x13180=((1.0)*cj2);
IkReal x13181=((1.0)*cj5*r00);
IkReal x13182=(sj5*x13179);
IkReal x13183=((1.0)*cj5*r10);
IkReal x13184=(sj5*x13178);
evalcond[0]=(r22*x13179);
evalcond[1]=((((-1.0)*x13178*x13181))+((r01*x13184)));
evalcond[2]=((((-1.0)*r22*x13178))+((sj1*sj2))+(((-1.0)*cj1*x13180)));
evalcond[3]=((((-1.0)*x13179*x13183))+((r11*x13182)));
evalcond[4]=((1.0)+(((-1.0)*x13178*x13183))+((r11*x13184)));
evalcond[5]=((((-1.0)*x13179*x13181))+(((-1.0)*cj1*sj2))+((r01*x13182))+(((-1.0)*sj1*x13180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13185=IKPowWithIntegerCheck(r22,-1);
if(!x13185.valid){
continue;
}
CheckValue<IkReal> x13186=IKPowWithIntegerCheck(sj3,-1);
if(!x13186.valid){
continue;
}
CheckValue<IkReal> x13187=IKPowWithIntegerCheck(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3))),-1);
if(!x13187.valid){
continue;
}
if( IKabs(((x13185.value)*(x13186.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13187.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13185.value)*(x13186.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13187.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13185.value)*(x13186.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13187.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13188=IKsin(j4);
IkReal x13189=IKcos(j4);
IkReal x13190=(sj1*sj2);
IkReal x13191=((1.0)*r10);
IkReal x13192=(cj3*sj5);
IkReal x13193=((1.0)*cj5);
IkReal x13194=((1.0)*cj1);
IkReal x13195=((1.0)*r00);
IkReal x13196=(cj2*sj1);
IkReal x13197=(sj3*sj5);
IkReal x13198=(cj2*x13194);
IkReal x13199=(cj5*x13188);
IkReal x13200=(r11*x13189);
IkReal x13201=(sj5*x13188);
IkReal x13202=(r22*x13188);
IkReal x13203=(cj3*x13189);
IkReal x13204=(r01*x13189);
IkReal x13205=(cj5*sj3*x13189);
evalcond[0]=(r22*x13189);
evalcond[1]=(((r01*x13201))+(((-1.0)*r00*x13188*x13193)));
evalcond[2]=((((-1.0)*x13198))+((sj3*x13202))+x13190);
evalcond[3]=((((-1.0)*cj3*x13202))+((cj1*sj2))+x13196);
evalcond[4]=((1.0)+((r11*x13201))+(((-1.0)*x13191*x13199)));
evalcond[5]=(((r10*x13205))+(((-1.0)*x13191*x13192))+(((-1.0)*x13197*x13200))+(((-1.0)*cj3*r11*x13193)));
evalcond[6]=((((-1.0)*cj5*x13191*x13203))+(((-1.0)*x13191*x13197))+(((-1.0)*r11*sj3*x13193))+((x13192*x13200)));
evalcond[7]=((((-1.0)*x13198))+(((-1.0)*x13195*x13197))+(((-1.0)*r00*x13193*x13203))+(((-1.0)*r01*sj3*x13193))+((x13192*x13204))+x13190);
evalcond[8]=(((r00*x13205))+(((-1.0)*x13196))+(((-1.0)*cj3*r01*x13193))+(((-1.0)*x13197*x13204))+(((-1.0)*sj2*x13194))+(((-1.0)*x13192*x13195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13206=(r11*sj5);
IkReal x13207=((1.0)*cj5*r10);
CheckValue<IkReal> x13208=IKPowWithIntegerCheck(((((-1.0)*x13207))+x13206),-1);
if(!x13208.valid){
continue;
}
CheckValue<IkReal> x13209=IKPowWithIntegerCheck(((((-1.0)*cj3*x13207))+((cj3*x13206))),-1);
if(!x13209.valid){
continue;
}
if( IKabs(((-1.0)*(x13208.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13209.value)*((((cj5*r11*sj3))+((r10*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13208.value)))+IKsqr(((x13209.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13208.value)), ((x13209.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13210=IKsin(j4);
IkReal x13211=IKcos(j4);
IkReal x13212=(sj1*sj2);
IkReal x13213=((1.0)*r10);
IkReal x13214=(cj3*sj5);
IkReal x13215=((1.0)*cj5);
IkReal x13216=((1.0)*cj1);
IkReal x13217=((1.0)*r00);
IkReal x13218=(cj2*sj1);
IkReal x13219=(sj3*sj5);
IkReal x13220=(cj2*x13216);
IkReal x13221=(cj5*x13210);
IkReal x13222=(r11*x13211);
IkReal x13223=(sj5*x13210);
IkReal x13224=(r22*x13210);
IkReal x13225=(cj3*x13211);
IkReal x13226=(r01*x13211);
IkReal x13227=(cj5*sj3*x13211);
evalcond[0]=(r22*x13211);
evalcond[1]=((((-1.0)*r00*x13210*x13215))+((r01*x13223)));
evalcond[2]=((((-1.0)*x13220))+x13212+((sj3*x13224)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj3*x13224))+x13218);
evalcond[4]=((1.0)+((r11*x13223))+(((-1.0)*x13213*x13221)));
evalcond[5]=(((r10*x13227))+(((-1.0)*x13213*x13214))+(((-1.0)*cj3*r11*x13215))+(((-1.0)*x13219*x13222)));
evalcond[6]=(((x13214*x13222))+(((-1.0)*x13213*x13219))+(((-1.0)*r11*sj3*x13215))+(((-1.0)*cj5*x13213*x13225)));
evalcond[7]=((((-1.0)*r00*x13215*x13225))+(((-1.0)*r01*sj3*x13215))+((x13214*x13226))+(((-1.0)*x13220))+x13212+(((-1.0)*x13217*x13219)));
evalcond[8]=((((-1.0)*x13218))+(((-1.0)*x13214*x13217))+(((-1.0)*sj2*x13216))+((r00*x13227))+(((-1.0)*x13219*x13226))+(((-1.0)*cj3*r01*x13215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13228=(cj5*r10);
IkReal x13229=(r11*sj5);
CheckValue<IkReal> x13230=IKPowWithIntegerCheck(((((-1.0)*x13228))+x13229),-1);
if(!x13230.valid){
continue;
}
CheckValue<IkReal> x13231=IKPowWithIntegerCheck(((((-1.0)*sj3*x13229))+((sj3*x13228))),-1);
if(!x13231.valid){
continue;
}
if( IKabs(((-1.0)*(x13230.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13231.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13230.value)))+IKsqr(((x13231.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13230.value)), ((x13231.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13232=IKsin(j4);
IkReal x13233=IKcos(j4);
IkReal x13234=(sj1*sj2);
IkReal x13235=((1.0)*r10);
IkReal x13236=(cj3*sj5);
IkReal x13237=((1.0)*cj5);
IkReal x13238=((1.0)*cj1);
IkReal x13239=((1.0)*r00);
IkReal x13240=(cj2*sj1);
IkReal x13241=(sj3*sj5);
IkReal x13242=(cj2*x13238);
IkReal x13243=(cj5*x13232);
IkReal x13244=(r11*x13233);
IkReal x13245=(sj5*x13232);
IkReal x13246=(r22*x13232);
IkReal x13247=(cj3*x13233);
IkReal x13248=(r01*x13233);
IkReal x13249=(cj5*sj3*x13233);
evalcond[0]=(r22*x13233);
evalcond[1]=((((-1.0)*r00*x13232*x13237))+((r01*x13245)));
evalcond[2]=((((-1.0)*x13242))+x13234+((sj3*x13246)));
evalcond[3]=(((cj1*sj2))+x13240+(((-1.0)*cj3*x13246)));
evalcond[4]=((1.0)+(((-1.0)*x13235*x13243))+((r11*x13245)));
evalcond[5]=((((-1.0)*cj3*r11*x13237))+(((-1.0)*x13241*x13244))+((r10*x13249))+(((-1.0)*x13235*x13236)));
evalcond[6]=((((-1.0)*r11*sj3*x13237))+(((-1.0)*x13235*x13241))+((x13236*x13244))+(((-1.0)*cj5*x13235*x13247)));
evalcond[7]=(((x13236*x13248))+(((-1.0)*r01*sj3*x13237))+(((-1.0)*r00*x13237*x13247))+(((-1.0)*x13242))+x13234+(((-1.0)*x13239*x13241)));
evalcond[8]=((((-1.0)*x13241*x13248))+(((-1.0)*x13236*x13239))+(((-1.0)*x13240))+(((-1.0)*cj3*r01*x13237))+((r00*x13249))+(((-1.0)*sj2*x13238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13250=cj5*cj5;
IkReal x13251=((1.0)*r21);
IkReal x13252=(r11*sj3);
IkReal x13253=(cj3*r10);
IkReal x13254=(cj5*sj5);
IkReal x13255=((1.0)*r20);
IkReal x13256=((1.0)*r22);
IkReal x13257=(cj3*r11);
IkReal x13258=(r10*sj3);
CheckValue<IkReal> x13259 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13256*x13257))+(((-1.0)*sj5*x13253*x13256)))),IkReal((((r21*x13253))+((r21*x13254*x13257))+(((-1.0)*x13250*x13251*x13253))+(((-1.0)*x13253*x13254*x13255))+(((-1.0)*x13250*x13255*x13257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13259.valid){
continue;
}
CheckValue<IkReal> x13260=IKPowWithIntegerCheck(IKsign((((r20*x13252*x13254))+((r21*x13254*x13258))+((r21*x13250*x13252))+(((-1.0)*r12*sj3*x13256))+(((-1.0)*x13251*x13252))+(((-1.0)*x13250*x13255*x13258)))),-1);
if(!x13260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13259.value)+(((1.5707963267949)*(x13260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13261=IKsin(j4);
IkReal x13262=IKcos(j4);
IkReal x13263=(sj1*sj2);
IkReal x13264=((1.0)*sj5);
IkReal x13265=(r00*sj3);
IkReal x13266=((1.0)*cj5);
IkReal x13267=(r11*sj5);
IkReal x13268=((1.0)*cj1);
IkReal x13269=(r21*sj5);
IkReal x13270=(r11*sj3);
IkReal x13271=(cj2*sj1);
IkReal x13272=(r01*sj5);
IkReal x13273=(cj2*x13268);
IkReal x13274=(cj3*x13262);
IkReal x13275=(r12*x13261);
IkReal x13276=(sj3*x13262);
IkReal x13277=(sj3*x13261);
IkReal x13278=(cj5*x13276);
IkReal x13279=((1.0)*cj3*x13261);
evalcond[0]=((((-1.0)*r20*x13261*x13266))+((r22*x13262))+((x13261*x13269)));
evalcond[1]=((((-1.0)*r00*x13261*x13266))+((r02*x13262))+((x13261*x13272)));
evalcond[2]=((1.0)+((r12*x13262))+((x13261*x13267))+(((-1.0)*r10*x13261*x13266)));
evalcond[3]=((((-1.0)*cj3*r11*x13266))+(((-1.0)*x13262*x13264*x13270))+((r10*x13278))+((sj3*x13275))+(((-1.0)*cj3*r10*x13264)));
evalcond[4]=((((-1.0)*cj3*x13275))+(((-1.0)*x13266*x13270))+(((-1.0)*r10*sj3*x13264))+(((-1.0)*r10*x13266*x13274))+((x13267*x13274)));
evalcond[5]=((((-1.0)*r21*x13264*x13276))+(((-1.0)*x13273))+((r20*x13278))+(((-1.0)*cj3*r20*x13264))+((r22*x13277))+x13263+(((-1.0)*cj3*r21*x13266)));
evalcond[6]=(((cj1*sj2))+(((-1.0)*r22*x13279))+(((-1.0)*r20*sj3*x13264))+(((-1.0)*r20*x13266*x13274))+x13271+(((-1.0)*r21*sj3*x13266))+((x13269*x13274)));
evalcond[7]=((((-1.0)*sj2*x13268))+(((-1.0)*x13271))+(((-1.0)*cj3*r00*x13264))+((r02*x13277))+(((-1.0)*r01*x13264*x13276))+((cj5*x13262*x13265))+(((-1.0)*cj3*r01*x13266)));
evalcond[8]=((((-1.0)*r00*x13266*x13274))+(((-1.0)*x13273))+(((-1.0)*r01*sj3*x13266))+((x13272*x13274))+(((-1.0)*x13264*x13265))+(((-1.0)*r02*x13279))+x13263);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13280=((1.0)*sj5);
CheckValue<IkReal> x13281 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x13280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13281.valid){
continue;
}
CheckValue<IkReal> x13282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13280))+(((-1.0)*cj5*r01)))),-1);
if(!x13282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13281.value)+(((1.5707963267949)*(x13282.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13283=IKsin(j4);
IkReal x13284=IKcos(j4);
IkReal x13285=(sj1*sj2);
IkReal x13286=((1.0)*sj5);
IkReal x13287=(r00*sj3);
IkReal x13288=((1.0)*cj5);
IkReal x13289=(r11*sj5);
IkReal x13290=((1.0)*cj1);
IkReal x13291=(r21*sj5);
IkReal x13292=(r11*sj3);
IkReal x13293=(cj2*sj1);
IkReal x13294=(r01*sj5);
IkReal x13295=(cj2*x13290);
IkReal x13296=(cj3*x13284);
IkReal x13297=(r12*x13283);
IkReal x13298=(sj3*x13284);
IkReal x13299=(sj3*x13283);
IkReal x13300=(cj5*x13298);
IkReal x13301=((1.0)*cj3*x13283);
evalcond[0]=((((-1.0)*r20*x13283*x13288))+((x13283*x13291))+((r22*x13284)));
evalcond[1]=((((-1.0)*r00*x13283*x13288))+((r02*x13284))+((x13283*x13294)));
evalcond[2]=((1.0)+((r12*x13284))+(((-1.0)*r10*x13283*x13288))+((x13283*x13289)));
evalcond[3]=(((sj3*x13297))+(((-1.0)*x13284*x13286*x13292))+(((-1.0)*cj3*r11*x13288))+((r10*x13300))+(((-1.0)*cj3*r10*x13286)));
evalcond[4]=((((-1.0)*r10*sj3*x13286))+(((-1.0)*r10*x13288*x13296))+(((-1.0)*cj3*x13297))+(((-1.0)*x13288*x13292))+((x13289*x13296)));
evalcond[5]=((((-1.0)*r21*x13286*x13298))+((r20*x13300))+(((-1.0)*cj3*r21*x13288))+((r22*x13299))+(((-1.0)*cj3*r20*x13286))+x13285+(((-1.0)*x13295)));
evalcond[6]=((((-1.0)*r20*x13288*x13296))+((cj1*sj2))+((x13291*x13296))+(((-1.0)*r21*sj3*x13288))+x13293+(((-1.0)*r22*x13301))+(((-1.0)*r20*sj3*x13286)));
evalcond[7]=((((-1.0)*cj3*r00*x13286))+((r02*x13299))+(((-1.0)*x13293))+((cj5*x13284*x13287))+(((-1.0)*cj3*r01*x13288))+(((-1.0)*sj2*x13290))+(((-1.0)*r01*x13286*x13298)));
evalcond[8]=((((-1.0)*r00*x13288*x13296))+((x13294*x13296))+(((-1.0)*x13286*x13287))+(((-1.0)*r02*x13301))+x13285+(((-1.0)*x13295))+(((-1.0)*r01*sj3*x13288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13302=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13302.valid){
continue;
}
CheckValue<IkReal> x13303 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13302.value)))+(x13303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13304=IKsin(j4);
IkReal x13305=IKcos(j4);
IkReal x13306=(sj1*sj2);
IkReal x13307=((1.0)*sj5);
IkReal x13308=(r00*sj3);
IkReal x13309=((1.0)*cj5);
IkReal x13310=(r11*sj5);
IkReal x13311=((1.0)*cj1);
IkReal x13312=(r21*sj5);
IkReal x13313=(r11*sj3);
IkReal x13314=(cj2*sj1);
IkReal x13315=(r01*sj5);
IkReal x13316=(cj2*x13311);
IkReal x13317=(cj3*x13305);
IkReal x13318=(r12*x13304);
IkReal x13319=(sj3*x13305);
IkReal x13320=(sj3*x13304);
IkReal x13321=(cj5*x13319);
IkReal x13322=((1.0)*cj3*x13304);
evalcond[0]=((((-1.0)*r20*x13304*x13309))+((r22*x13305))+((x13304*x13312)));
evalcond[1]=((((-1.0)*r00*x13304*x13309))+((x13304*x13315))+((r02*x13305)));
evalcond[2]=((1.0)+((r12*x13305))+((x13304*x13310))+(((-1.0)*r10*x13304*x13309)));
evalcond[3]=(((r10*x13321))+(((-1.0)*cj3*r10*x13307))+((sj3*x13318))+(((-1.0)*cj3*r11*x13309))+(((-1.0)*x13305*x13307*x13313)));
evalcond[4]=((((-1.0)*r10*sj3*x13307))+(((-1.0)*r10*x13309*x13317))+(((-1.0)*cj3*x13318))+(((-1.0)*x13309*x13313))+((x13310*x13317)));
evalcond[5]=((((-1.0)*cj3*r21*x13309))+(((-1.0)*r21*x13307*x13319))+((r20*x13321))+(((-1.0)*cj3*r20*x13307))+(((-1.0)*x13316))+x13306+((r22*x13320)));
evalcond[6]=((((-1.0)*r22*x13322))+((cj1*sj2))+((x13312*x13317))+(((-1.0)*r20*x13309*x13317))+(((-1.0)*r21*sj3*x13309))+x13314+(((-1.0)*r20*sj3*x13307)));
evalcond[7]=(((cj5*x13305*x13308))+(((-1.0)*sj2*x13311))+((r02*x13320))+(((-1.0)*cj3*r00*x13307))+(((-1.0)*cj3*r01*x13309))+(((-1.0)*r01*x13307*x13319))+(((-1.0)*x13314)));
evalcond[8]=((((-1.0)*r00*x13309*x13317))+(((-1.0)*r02*x13322))+(((-1.0)*r01*sj3*x13309))+(((-1.0)*x13307*x13308))+(((-1.0)*x13316))+x13306+((x13315*x13317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13323=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13323;
j4eval[1]=IKsign(x13323);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13324=((1.0)*sj5);
IkReal x13325=((((-1.0)*cj5*r21))+(((-1.0)*r20*x13324)));
j4eval[0]=x13325;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x13324))+((cj5*r00))))));
j4eval[2]=IKsign(x13325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13326=cj5*cj5;
IkReal x13327=((1.0)*sj3);
IkReal x13328=(r11*r21);
IkReal x13329=(cj5*sj3*sj5);
IkReal x13330=(((r11*r20*x13329))+(((-1.0)*r12*r22*x13327))+((r10*r21*x13329))+(((-1.0)*r10*r20*x13326*x13327))+((sj3*x13326*x13328))+(((-1.0)*x13327*x13328)));
j4eval[0]=x13330;
j4eval[1]=IKsign(x13330);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13331=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13331;
j4eval[1]=IKsign(x13331);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13332=((1.0)*sj5);
IkReal x13333=((((-1.0)*cj5*r21))+(((-1.0)*r20*x13332)));
j4eval[0]=x13333;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x13332))+((cj5*r00))))));
j4eval[2]=IKsign(x13333);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13334=cj5*cj5;
IkReal x13335=r11*r11;
IkReal x13336=(r11*sj5);
IkReal x13337=(cj5*r10);
IkReal x13338=(((x13334*(r10*r10)))+(r12*r12)+(((-2.0)*x13336*x13337))+(((-1.0)*x13334*x13335))+x13335);
j4eval[0]=x13338;
j4eval[1]=IKsign(x13338);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13337))+x13336))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13339=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13339);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13339);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13340=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13340)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13340)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13341=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13341);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13341);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13342=IKPowWithIntegerCheck(r22,-1);
if(!x13342.valid){
continue;
}
CheckValue<IkReal> x13343=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13343.valid){
continue;
}
if( IKabs(((x13342.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13343.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13342.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13343.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13342.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13343.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13344=IKsin(j4);
IkReal x13345=IKcos(j4);
IkReal x13346=((1.0)*cj5*r00);
IkReal x13347=(sj5*x13345);
IkReal x13348=((1.0)*cj5*r10);
IkReal x13349=(sj5*x13344);
evalcond[0]=(r22*x13345);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13344)));
evalcond[2]=((((-1.0)*x13344*x13346))+((r01*x13349)));
evalcond[3]=(((r11*x13347))+(((-1.0)*x13345*x13348)));
evalcond[4]=((-1.0)+((r11*x13349))+(((-1.0)*x13344*x13348)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x13345*x13346))+((cj1*cj2))+((r01*x13347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13350=((1.0)*cj5);
CheckValue<IkReal> x13351=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13350))),-1);
if(!x13351.valid){
continue;
}
CheckValue<IkReal> x13352=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13350))),-1);
if(!x13352.valid){
continue;
}
if( IKabs(x13351.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13352.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13351.value)+IKsqr(((x13352.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13351.value, ((x13352.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13353=IKsin(j4);
IkReal x13354=IKcos(j4);
IkReal x13355=((1.0)*cj5*r00);
IkReal x13356=(sj5*x13354);
IkReal x13357=((1.0)*cj5*r10);
IkReal x13358=(sj5*x13353);
evalcond[0]=(r22*x13354);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13353)));
evalcond[2]=((((-1.0)*x13353*x13355))+((r01*x13358)));
evalcond[3]=((((-1.0)*x13354*x13357))+((r11*x13356)));
evalcond[4]=((-1.0)+(((-1.0)*x13353*x13357))+((r11*x13358)));
evalcond[5]=((((-1.0)*x13354*x13355))+(((-1.0)*sj1*sj2))+((r01*x13356))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13359=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13359);
rxp1_1=(px*r21);
rxp1_2=(r11*x13359);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13360=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13360))+((r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x13360)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13361=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13361);
rxp1_1=(px*r21);
rxp1_2=(r11*x13361);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13362=((1.0)*sj1);
CheckValue<IkReal> x13363=IKPowWithIntegerCheck(r02,-1);
if(!x13363.valid){
continue;
}
CheckValue<IkReal> x13364=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13364.valid){
continue;
}
if( IKabs(((x13363.value)*(((((-1.0)*sj2*x13362))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13364.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13362)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13363.value)*(((((-1.0)*sj2*x13362))+((cj1*cj2))))))+IKsqr(((x13364.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13362))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13363.value)*(((((-1.0)*sj2*x13362))+((cj1*cj2))))), ((x13364.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13362))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13365=IKsin(j4);
IkReal x13366=IKcos(j4);
IkReal x13367=(r21*sj5);
IkReal x13368=(cj5*r20);
IkReal x13369=(cj5*r10);
IkReal x13370=(r11*sj5);
IkReal x13371=((1.0)*x13365);
IkReal x13372=((1.0)*x13366);
evalcond[0]=(r02*x13366);
evalcond[1]=(((x13365*x13367))+(((-1.0)*x13368*x13371)));
evalcond[2]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x13371))+((cj1*cj2)));
evalcond[3]=(((x13366*x13370))+(((-1.0)*x13369*x13372)));
evalcond[4]=((-1.0)+((x13365*x13370))+(((-1.0)*x13369*x13371)));
evalcond[5]=(((cj2*sj1))+((x13366*x13367))+((cj1*sj2))+(((-1.0)*x13368*x13372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13373=((1.0)*cj5);
CheckValue<IkReal> x13374=IKPowWithIntegerCheck(((((-1.0)*r10*x13373))+((r11*sj5))),-1);
if(!x13374.valid){
continue;
}
CheckValue<IkReal> x13375=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x13373))),-1);
if(!x13375.valid){
continue;
}
if( IKabs(x13374.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13375.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13374.value)+IKsqr(((x13375.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13374.value, ((x13375.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13376=IKsin(j4);
IkReal x13377=IKcos(j4);
IkReal x13378=(r21*sj5);
IkReal x13379=(cj5*r20);
IkReal x13380=(cj5*r10);
IkReal x13381=(r11*sj5);
IkReal x13382=((1.0)*x13376);
IkReal x13383=((1.0)*x13377);
evalcond[0]=(r02*x13377);
evalcond[1]=((((-1.0)*x13379*x13382))+((x13376*x13378)));
evalcond[2]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x13382))+((cj1*cj2)));
evalcond[3]=(((x13377*x13381))+(((-1.0)*x13380*x13383)));
evalcond[4]=((-1.0)+((x13376*x13381))+(((-1.0)*x13380*x13382)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x13379*x13383))+((cj1*sj2))+((x13377*x13378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13384=cj5*cj5;
IkReal x13385=r11*r11;
IkReal x13386=(cj5*r10);
IkReal x13387=(r11*sj5);
CheckValue<IkReal> x13388=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x13384*x13385))+(((-2.0)*x13386*x13387))+x13385+((x13384*(r10*r10))))),-1);
if(!x13388.valid){
continue;
}
CheckValue<IkReal> x13389 = IKatan2WithCheck(IkReal(((((-1.0)*x13386))+x13387)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13388.value)))+(x13389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13390=IKsin(j4);
IkReal x13391=IKcos(j4);
IkReal x13392=((1.0)*cj5);
IkReal x13393=(r21*sj5);
IkReal x13394=(sj5*x13390);
IkReal x13395=((1.0)*x13390);
IkReal x13396=(sj5*x13391);
evalcond[0]=((((-1.0)*r20*x13390*x13392))+((r22*x13391))+((x13390*x13393)));
evalcond[1]=(((r01*x13394))+(((-1.0)*r00*x13390*x13392))+((r02*x13391)));
evalcond[2]=((-1.0)+((r11*x13394))+((r12*x13391))+(((-1.0)*r10*x13390*x13392)));
evalcond[3]=(((r11*x13396))+(((-1.0)*r12*x13395))+(((-1.0)*r10*x13391*x13392)));
evalcond[4]=(((cj2*sj1))+((x13391*x13393))+(((-1.0)*r22*x13395))+((cj1*sj2))+(((-1.0)*r20*x13391*x13392)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x13396))+(((-1.0)*r00*x13391*x13392))+((cj1*cj2))+(((-1.0)*r02*x13395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13397=((1.0)*sj5);
CheckValue<IkReal> x13398 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x13397))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13398.valid){
continue;
}
CheckValue<IkReal> x13399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13397))+(((-1.0)*cj5*r21)))),-1);
if(!x13399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13398.value)+(((1.5707963267949)*(x13399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13400=IKsin(j4);
IkReal x13401=IKcos(j4);
IkReal x13402=((1.0)*cj5);
IkReal x13403=(r21*sj5);
IkReal x13404=(sj5*x13400);
IkReal x13405=((1.0)*x13400);
IkReal x13406=(sj5*x13401);
evalcond[0]=(((x13400*x13403))+(((-1.0)*r20*x13400*x13402))+((r22*x13401)));
evalcond[1]=(((r01*x13404))+((r02*x13401))+(((-1.0)*r00*x13400*x13402)));
evalcond[2]=((-1.0)+((r11*x13404))+((r12*x13401))+(((-1.0)*r10*x13400*x13402)));
evalcond[3]=(((r11*x13406))+(((-1.0)*r12*x13405))+(((-1.0)*r10*x13401*x13402)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13405))+(((-1.0)*r20*x13401*x13402))+((x13401*x13403)));
evalcond[5]=((((-1.0)*r02*x13405))+((r01*x13406))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r00*x13401*x13402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13407=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13407.valid){
continue;
}
CheckValue<IkReal> x13408 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13407.value)))+(x13408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13409=IKsin(j4);
IkReal x13410=IKcos(j4);
IkReal x13411=((1.0)*cj5);
IkReal x13412=(r21*sj5);
IkReal x13413=(sj5*x13409);
IkReal x13414=((1.0)*x13409);
IkReal x13415=(sj5*x13410);
evalcond[0]=(((r22*x13410))+((x13409*x13412))+(((-1.0)*r20*x13409*x13411)));
evalcond[1]=(((r02*x13410))+(((-1.0)*r00*x13409*x13411))+((r01*x13413)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13409*x13411))+((r11*x13413))+((r12*x13410)));
evalcond[3]=((((-1.0)*r12*x13414))+(((-1.0)*r10*x13410*x13411))+((r11*x13415)));
evalcond[4]=((((-1.0)*r20*x13410*x13411))+((cj2*sj1))+((x13410*x13412))+(((-1.0)*r22*x13414))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r00*x13410*x13411))+(((-1.0)*r02*x13414))+((r01*x13415))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13416=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13416;
j4eval[1]=IKsign(x13416);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13417=((1.0)*sj5);
IkReal x13418=((((-1.0)*r20*x13417))+(((-1.0)*cj5*r21)));
j4eval[0]=x13418;
j4eval[1]=((IKabs(((((-1.0)*r01*x13417))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x13418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13419=cj5*cj5;
IkReal x13420=r11*r11;
IkReal x13421=(cj5*r10);
IkReal x13422=(r11*sj5);
IkReal x13423=(((x13419*x13420))+(((-1.0)*x13420))+(((2.0)*x13421*x13422))+(((-1.0)*(r12*r12)))+(((-1.0)*x13419*(r10*r10))));
j4eval[0]=x13423;
j4eval[1]=((IKabs(r12))+(IKabs((x13421+(((-1.0)*x13422))))));
j4eval[2]=IKsign(x13423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13424=cj5*cj5;
IkReal x13425=r11*r11;
IkReal x13426=(cj5*r10);
IkReal x13427=(r11*sj5);
CheckValue<IkReal> x13428=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13425))+((x13424*x13425))+(((-1.0)*(r12*r12)))+(((-1.0)*x13424*(r10*r10)))+(((2.0)*x13426*x13427)))),-1);
if(!x13428.valid){
continue;
}
CheckValue<IkReal> x13429 = IKatan2WithCheck(IkReal((x13426+(((-1.0)*x13427)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13428.value)))+(x13429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13430=IKsin(j4);
IkReal x13431=IKcos(j4);
IkReal x13432=(cj5*r10);
IkReal x13433=(cj5*r00);
IkReal x13434=(cj5*r20);
IkReal x13435=((1.0)*x13430);
IkReal x13436=(sj5*x13430);
IkReal x13437=((1.0)*sj5*x13431);
evalcond[0]=((((-1.0)*x13434*x13435))+((r22*x13431))+((r21*x13436)));
evalcond[1]=(((r01*x13436))+((r02*x13431))+(((-1.0)*x13433*x13435)));
evalcond[2]=((((-1.0)*r11*x13437))+((x13431*x13432))+((r12*x13430)));
evalcond[3]=((-1.0)+(((-1.0)*x13432*x13435))+((r11*x13436))+((r12*x13431)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13430))+(((-1.0)*r21*x13437))+((x13431*x13434)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x13430))+((x13431*x13433))+((cj1*cj2))+(((-1.0)*r01*x13437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13438=((1.0)*sj5);
CheckValue<IkReal> x13439 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x13438))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13439.valid){
continue;
}
CheckValue<IkReal> x13440=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13438))+(((-1.0)*cj5*r21)))),-1);
if(!x13440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13439.value)+(((1.5707963267949)*(x13440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13441=IKsin(j4);
IkReal x13442=IKcos(j4);
IkReal x13443=(cj5*r10);
IkReal x13444=(cj5*r00);
IkReal x13445=(cj5*r20);
IkReal x13446=((1.0)*x13441);
IkReal x13447=(sj5*x13441);
IkReal x13448=((1.0)*sj5*x13442);
evalcond[0]=(((r22*x13442))+(((-1.0)*x13445*x13446))+((r21*x13447)));
evalcond[1]=(((r02*x13442))+((r01*x13447))+(((-1.0)*x13444*x13446)));
evalcond[2]=(((x13442*x13443))+(((-1.0)*r11*x13448))+((r12*x13441)));
evalcond[3]=((-1.0)+((r12*x13442))+((r11*x13447))+(((-1.0)*x13443*x13446)));
evalcond[4]=(((r22*x13441))+((cj2*sj1))+(((-1.0)*r21*x13448))+((cj1*sj2))+((x13442*x13445)));
evalcond[5]=(((r02*x13441))+(((-1.0)*sj1*sj2))+((x13442*x13444))+((cj1*cj2))+(((-1.0)*r01*x13448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13449=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13449.valid){
continue;
}
CheckValue<IkReal> x13450 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13449.value)))+(x13450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13451=IKsin(j4);
IkReal x13452=IKcos(j4);
IkReal x13453=(cj5*r10);
IkReal x13454=(cj5*r00);
IkReal x13455=(cj5*r20);
IkReal x13456=((1.0)*x13451);
IkReal x13457=(sj5*x13451);
IkReal x13458=((1.0)*sj5*x13452);
evalcond[0]=(((r21*x13457))+(((-1.0)*x13455*x13456))+((r22*x13452)));
evalcond[1]=((((-1.0)*x13454*x13456))+((r02*x13452))+((r01*x13457)));
evalcond[2]=(((r12*x13451))+((x13452*x13453))+(((-1.0)*r11*x13458)));
evalcond[3]=((-1.0)+(((-1.0)*x13453*x13456))+((r12*x13452))+((r11*x13457)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x13458))+((x13452*x13455))+((r22*x13451)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r01*x13458))+((x13452*x13454))+((cj1*cj2))+((r02*x13451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13460 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13460)==0){
continue;
}
IkReal x13459=pow(x13460,-0.5);
CheckValue<IkReal> x13461 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13461.valid){
continue;
}
IkReal gconst36=((-1.0)*(x13461.value));
IkReal gconst37=((-1.0)*r01*x13459);
IkReal gconst38=(r00*x13459);
CheckValue<IkReal> x13462 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13462.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13462.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13465 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13465.valid){
continue;
}
IkReal x13463=((-1.0)*(x13465.value));
IkReal x13464=x13459;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x13463;
IkReal gconst36=x13463;
IkReal gconst37=((-1.0)*r01*x13464);
IkReal gconst38=(r00*x13464);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13468 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13468.valid){
continue;
}
IkReal x13466=((-1.0)*(x13468.value));
IkReal x13467=x13459;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x13466;
IkReal gconst36=x13466;
IkReal gconst37=((-1.0)*r01*x13467);
IkReal gconst38=(r00*x13467);
CheckValue<IkReal> x13476=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13476.valid){
continue;
}
IkReal x13469=x13476.value;
IkReal x13470=(cj3*x13469);
IkReal x13471=(r21*x13470);
IkReal x13472=(r10*x13470);
IkReal x13473=(r11*x13470);
IkReal x13474=(r20*x13470);
IkReal x13475=(r00*r01*x13470);
j4eval[0]=IKsign((((cj3*r12*r22))+((r11*x13471*(r01*r01)))+((r20*x13472*(r00*r00)))+((r00*r01*r20*x13473))+((r00*r01*r10*x13471))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13477=gconst37*gconst37;
IkReal x13478=gconst38*gconst38;
IkReal x13479=((1.0)*sj3);
IkReal x13480=(cj3*r10);
IkReal x13481=((1.0)*r22);
IkReal x13482=(gconst38*r11);
IkReal x13483=(gconst37*r20);
IkReal x13484=(gconst37*r21);
IkReal x13485=(r21*x13477);
IkReal x13486=(r20*x13478);
CheckValue<IkReal> x13487=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13479*x13486))+((sj3*x13482*x13483))+((gconst38*r10*sj3*x13484))+(((-1.0)*r11*x13479*x13485))+(((-1.0)*r12*r22*x13479)))),-1);
if(!x13487.valid){
continue;
}
CheckValue<IkReal> x13488 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x13481*x13482))+(((-1.0)*gconst37*x13480*x13481)))),IkReal(((((-1.0)*cj3*r11*x13486))+((x13480*x13485))+(((-1.0)*gconst38*x13480*x13483))+((cj3*x13482*x13484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13487.value)))+(x13488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13489=IKsin(j4);
IkReal x13490=IKcos(j4);
IkReal x13491=(cj2*sj1);
IkReal x13492=(cj1*sj2);
IkReal x13493=(r21*sj3);
IkReal x13494=(cj3*gconst38);
IkReal x13495=(sj1*sj2);
IkReal x13496=(cj1*cj2);
IkReal x13497=((1.0)*cj3);
IkReal x13498=((1.0)*r01);
IkReal x13499=((1.0)*gconst38);
IkReal x13500=(gconst38*sj3);
IkReal x13501=(gconst37*sj3);
IkReal x13502=((1.0)*x13490);
IkReal x13503=(r12*x13489);
IkReal x13504=(r22*x13489);
IkReal x13505=(r02*x13489);
IkReal x13506=(gconst37*x13489);
IkReal x13507=(x13491+x13492);
IkReal x13508=(x13489*x13499);
IkReal x13509=(cj3*gconst37*x13490);
evalcond[0]=(((r22*x13490))+(((-1.0)*r20*x13508))+((r21*x13506)));
evalcond[1]=(((r02*x13490))+(((-1.0)*r00*x13508))+((r01*x13506)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13508))+((r11*x13506))+((r12*x13490)));
evalcond[3]=(((r10*x13490*x13500))+(((-1.0)*r11*x13494))+(((-1.0)*r11*x13501*x13502))+(((-1.0)*gconst37*r10*x13497))+((sj3*x13503)));
evalcond[4]=((((-1.0)*r11*sj3*x13499))+(((-1.0)*r10*x13494*x13502))+(((-1.0)*x13497*x13503))+(((-1.0)*r10*x13501))+((r11*x13509)));
evalcond[5]=(x13507+((r00*x13490*x13500))+(((-1.0)*x13494*x13498))+(((-1.0)*x13490*x13498*x13501))+(((-1.0)*gconst37*r00*x13497))+((sj3*x13505)));
evalcond[6]=(x13495+(((-1.0)*x13496))+(((-1.0)*gconst37*x13493*x13502))+(((-1.0)*gconst37*r20*x13497))+(((-1.0)*r21*x13494))+((r20*x13490*x13500))+((sj3*x13504)));
evalcond[7]=(x13507+(((-1.0)*x13493*x13499))+(((-1.0)*r20*x13501))+(((-1.0)*x13497*x13504))+(((-1.0)*r20*x13494*x13502))+((r21*x13509)));
evalcond[8]=(x13496+(((-1.0)*r00*x13501))+(((-1.0)*x13495))+(((-1.0)*r00*x13494*x13502))+(((-1.0)*x13498*x13500))+(((-1.0)*x13497*x13505))+((r01*x13509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13510=gconst37*gconst37;
IkReal x13511=gconst38*gconst38;
IkReal x13512=((1.0)*gconst38);
IkReal x13513=(r10*r21);
IkReal x13514=(cj3*gconst37);
IkReal x13515=(r22*sj3);
IkReal x13516=(gconst37*r10);
IkReal x13517=(r11*r20);
IkReal x13518=(r11*r21);
CheckValue<IkReal> x13519 = IKatan2WithCheck(IkReal(((((-1.0)*x13515*x13516))+(((-1.0)*r11*x13512*x13515)))),IkReal(((((-1.0)*r20*sj3*x13512*x13516))+((gconst37*gconst38*sj3*x13518))+((sj3*x13510*x13513))+(((-1.0)*sj3*x13511*x13517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13519.valid){
continue;
}
CheckValue<IkReal> x13520=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*r10*r20*x13511))+(((-1.0)*x13512*x13513*x13514))+(((-1.0)*x13512*x13514*x13517))+((cj3*x13510*x13518)))),-1);
if(!x13520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13519.value)+(((1.5707963267949)*(x13520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13521=IKsin(j4);
IkReal x13522=IKcos(j4);
IkReal x13523=(cj2*sj1);
IkReal x13524=(cj1*sj2);
IkReal x13525=(r21*sj3);
IkReal x13526=(cj3*gconst38);
IkReal x13527=(sj1*sj2);
IkReal x13528=(cj1*cj2);
IkReal x13529=((1.0)*cj3);
IkReal x13530=((1.0)*r01);
IkReal x13531=((1.0)*gconst38);
IkReal x13532=(gconst38*sj3);
IkReal x13533=(gconst37*sj3);
IkReal x13534=((1.0)*x13522);
IkReal x13535=(r12*x13521);
IkReal x13536=(r22*x13521);
IkReal x13537=(r02*x13521);
IkReal x13538=(gconst37*x13521);
IkReal x13539=(x13523+x13524);
IkReal x13540=(x13521*x13531);
IkReal x13541=(cj3*gconst37*x13522);
evalcond[0]=(((r22*x13522))+((r21*x13538))+(((-1.0)*r20*x13540)));
evalcond[1]=(((r02*x13522))+(((-1.0)*r00*x13540))+((r01*x13538)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13540))+((r12*x13522))+((r11*x13538)));
evalcond[3]=((((-1.0)*gconst37*r10*x13529))+((sj3*x13535))+(((-1.0)*r11*x13526))+(((-1.0)*r11*x13533*x13534))+((r10*x13522*x13532)));
evalcond[4]=(((r11*x13541))+(((-1.0)*r10*x13533))+(((-1.0)*x13529*x13535))+(((-1.0)*r11*sj3*x13531))+(((-1.0)*r10*x13526*x13534)));
evalcond[5]=(x13539+((sj3*x13537))+(((-1.0)*x13522*x13530*x13533))+(((-1.0)*x13526*x13530))+(((-1.0)*gconst37*r00*x13529))+((r00*x13522*x13532)));
evalcond[6]=(x13527+((sj3*x13536))+(((-1.0)*gconst37*x13525*x13534))+((r20*x13522*x13532))+(((-1.0)*x13528))+(((-1.0)*gconst37*r20*x13529))+(((-1.0)*r21*x13526)));
evalcond[7]=(x13539+((r21*x13541))+(((-1.0)*x13529*x13536))+(((-1.0)*r20*x13533))+(((-1.0)*x13525*x13531))+(((-1.0)*r20*x13526*x13534)));
evalcond[8]=(x13528+((r01*x13541))+(((-1.0)*r00*x13526*x13534))+(((-1.0)*x13527))+(((-1.0)*x13529*x13537))+(((-1.0)*x13530*x13532))+(((-1.0)*r00*x13533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13542=((1.0)*gconst37);
CheckValue<IkReal> x13543=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r21))+(((-1.0)*r20*x13542)))),-1);
if(!x13543.valid){
continue;
}
CheckValue<IkReal> x13544 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x13542))+((gconst38*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13543.value)))+(x13544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13545=IKsin(j4);
IkReal x13546=IKcos(j4);
IkReal x13547=(cj2*sj1);
IkReal x13548=(cj1*sj2);
IkReal x13549=(r21*sj3);
IkReal x13550=(cj3*gconst38);
IkReal x13551=(sj1*sj2);
IkReal x13552=(cj1*cj2);
IkReal x13553=((1.0)*cj3);
IkReal x13554=((1.0)*r01);
IkReal x13555=((1.0)*gconst38);
IkReal x13556=(gconst38*sj3);
IkReal x13557=(gconst37*sj3);
IkReal x13558=((1.0)*x13546);
IkReal x13559=(r12*x13545);
IkReal x13560=(r22*x13545);
IkReal x13561=(r02*x13545);
IkReal x13562=(gconst37*x13545);
IkReal x13563=(x13547+x13548);
IkReal x13564=(x13545*x13555);
IkReal x13565=(cj3*gconst37*x13546);
evalcond[0]=(((r22*x13546))+((r21*x13562))+(((-1.0)*r20*x13564)));
evalcond[1]=(((r01*x13562))+(((-1.0)*r00*x13564))+((r02*x13546)));
evalcond[2]=((-1.0)+((r12*x13546))+(((-1.0)*r10*x13564))+((r11*x13562)));
evalcond[3]=(((r10*x13546*x13556))+(((-1.0)*r11*x13557*x13558))+(((-1.0)*gconst37*r10*x13553))+((sj3*x13559))+(((-1.0)*r11*x13550)));
evalcond[4]=((((-1.0)*r11*sj3*x13555))+(((-1.0)*x13553*x13559))+((r11*x13565))+(((-1.0)*r10*x13550*x13558))+(((-1.0)*r10*x13557)));
evalcond[5]=(x13563+((sj3*x13561))+(((-1.0)*x13550*x13554))+(((-1.0)*gconst37*r00*x13553))+(((-1.0)*x13546*x13554*x13557))+((r00*x13546*x13556)));
evalcond[6]=(x13551+((sj3*x13560))+(((-1.0)*r21*x13550))+((r20*x13546*x13556))+(((-1.0)*gconst37*x13549*x13558))+(((-1.0)*x13552))+(((-1.0)*gconst37*r20*x13553)));
evalcond[7]=(x13563+(((-1.0)*x13553*x13560))+(((-1.0)*x13549*x13555))+((r21*x13565))+(((-1.0)*r20*x13550*x13558))+(((-1.0)*r20*x13557)));
evalcond[8]=(x13552+((r01*x13565))+(((-1.0)*r00*x13550*x13558))+(((-1.0)*x13553*x13561))+(((-1.0)*r00*x13557))+(((-1.0)*x13554*x13556))+(((-1.0)*x13551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13567 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13567)==0){
continue;
}
IkReal x13566=pow(x13567,-0.5);
CheckValue<IkReal> x13568 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13568.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x13568.value))));
IkReal gconst40=((1.0)*r01*x13566);
IkReal gconst41=((-1.0)*r00*x13566);
CheckValue<IkReal> x13569 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13569.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13569.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13572 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13572.valid){
continue;
}
IkReal x13570=((1.0)*(x13572.value));
IkReal x13571=x13566;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x13570)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13570)));
IkReal gconst40=((1.0)*r01*x13571);
IkReal gconst41=((-1.0)*r00*x13571);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13575 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13575.valid){
continue;
}
IkReal x13573=((1.0)*(x13575.value));
IkReal x13574=x13566;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x13573)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13573)));
IkReal gconst40=((1.0)*r01*x13574);
IkReal gconst41=((-1.0)*r00*x13574);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13576=gconst40*gconst40;
IkReal x13577=gconst41*gconst41;
IkReal x13578=(r11*r20);
IkReal x13579=((1.0)*cj3);
IkReal x13580=((1.0)*sj3);
IkReal x13581=(gconst40*gconst41);
IkReal x13582=(r10*r20);
IkReal x13583=(r21*x13576);
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal(((((-1.0)*gconst41*r11*r22*x13579))+(((-1.0)*gconst40*r10*r22*x13579)))),IkReal(((((-1.0)*x13579*x13581*x13582))+(((-1.0)*x13577*x13578*x13579))+((cj3*r10*x13583))+((cj3*r11*r21*x13581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
CheckValue<IkReal> x13585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13580))+(((-1.0)*r11*x13580*x13583))+((sj3*x13578*x13581))+(((-1.0)*x13577*x13580*x13582))+((r10*r21*sj3*x13581)))),-1);
if(!x13585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13584.value)+(((1.5707963267949)*(x13585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13586=IKsin(j4);
IkReal x13587=IKcos(j4);
IkReal x13588=(cj2*sj1);
IkReal x13589=(cj1*sj2);
IkReal x13590=((1.0)*sj3);
IkReal x13591=(cj3*r01);
IkReal x13592=(gconst40*r20);
IkReal x13593=((1.0)*gconst41);
IkReal x13594=(sj1*sj2);
IkReal x13595=(gconst41*sj3);
IkReal x13596=(cj1*cj2);
IkReal x13597=(gconst40*r00);
IkReal x13598=(cj3*r11);
IkReal x13599=((1.0)*cj3);
IkReal x13600=(cj3*r21);
IkReal x13601=(gconst40*r10);
IkReal x13602=(gconst40*x13587);
IkReal x13603=(r00*x13587);
IkReal x13604=(sj3*x13586);
IkReal x13605=(r10*x13587);
IkReal x13606=(r20*x13587);
IkReal x13607=(gconst40*x13586);
IkReal x13608=(x13588+x13589);
evalcond[0]=((((-1.0)*r20*x13586*x13593))+((r21*x13607))+((r22*x13587)));
evalcond[1]=((((-1.0)*r00*x13586*x13593))+((r02*x13587))+((r01*x13607)));
evalcond[2]=((-1.0)+((r11*x13607))+(((-1.0)*r10*x13586*x13593))+((r12*x13587)));
evalcond[3]=((((-1.0)*x13599*x13601))+((x13595*x13605))+((r12*x13604))+(((-1.0)*r11*x13590*x13602))+(((-1.0)*x13593*x13598)));
evalcond[4]=((((-1.0)*cj3*x13593*x13605))+(((-1.0)*gconst41*r11*x13590))+((x13598*x13602))+(((-1.0)*r12*x13586*x13599))+(((-1.0)*x13590*x13601)));
evalcond[5]=(((x13595*x13603))+x13608+(((-1.0)*x13597*x13599))+((r02*x13604))+(((-1.0)*r01*x13590*x13602))+(((-1.0)*x13591*x13593)));
evalcond[6]=(x13594+((x13595*x13606))+(((-1.0)*x13592*x13599))+(((-1.0)*r21*x13590*x13602))+((r22*x13604))+(((-1.0)*x13596))+(((-1.0)*x13593*x13600)));
evalcond[7]=(((x13600*x13602))+x13608+(((-1.0)*cj3*x13593*x13606))+(((-1.0)*x13590*x13592))+(((-1.0)*gconst41*r21*x13590))+(((-1.0)*r22*x13586*x13599)));
evalcond[8]=(x13596+((x13591*x13602))+(((-1.0)*cj3*x13593*x13603))+(((-1.0)*gconst41*r01*x13590))+(((-1.0)*x13594))+(((-1.0)*x13590*x13597))+(((-1.0)*r02*x13586*x13599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13609=((1.0)*gconst40);
CheckValue<IkReal> x13610 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x13609))+((gconst41*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13610.valid){
continue;
}
CheckValue<IkReal> x13611=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst41*r21))+(((-1.0)*r20*x13609)))),-1);
if(!x13611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13610.value)+(((1.5707963267949)*(x13611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13612=IKsin(j4);
IkReal x13613=IKcos(j4);
IkReal x13614=(cj2*sj1);
IkReal x13615=(cj1*sj2);
IkReal x13616=((1.0)*sj3);
IkReal x13617=(cj3*r01);
IkReal x13618=(gconst40*r20);
IkReal x13619=((1.0)*gconst41);
IkReal x13620=(sj1*sj2);
IkReal x13621=(gconst41*sj3);
IkReal x13622=(cj1*cj2);
IkReal x13623=(gconst40*r00);
IkReal x13624=(cj3*r11);
IkReal x13625=((1.0)*cj3);
IkReal x13626=(cj3*r21);
IkReal x13627=(gconst40*r10);
IkReal x13628=(gconst40*x13613);
IkReal x13629=(r00*x13613);
IkReal x13630=(sj3*x13612);
IkReal x13631=(r10*x13613);
IkReal x13632=(r20*x13613);
IkReal x13633=(gconst40*x13612);
IkReal x13634=(x13614+x13615);
evalcond[0]=((((-1.0)*r20*x13612*x13619))+((r21*x13633))+((r22*x13613)));
evalcond[1]=((((-1.0)*r00*x13612*x13619))+((r02*x13613))+((r01*x13633)));
evalcond[2]=((-1.0)+((r11*x13633))+(((-1.0)*r10*x13612*x13619))+((r12*x13613)));
evalcond[3]=((((-1.0)*r11*x13616*x13628))+((r12*x13630))+((x13621*x13631))+(((-1.0)*x13625*x13627))+(((-1.0)*x13619*x13624)));
evalcond[4]=((((-1.0)*cj3*x13619*x13631))+(((-1.0)*r12*x13612*x13625))+(((-1.0)*x13616*x13627))+((x13624*x13628))+(((-1.0)*gconst41*r11*x13616)));
evalcond[5]=(x13634+(((-1.0)*x13623*x13625))+(((-1.0)*r01*x13616*x13628))+((x13621*x13629))+((r02*x13630))+(((-1.0)*x13617*x13619)));
evalcond[6]=(x13620+((r22*x13630))+((x13621*x13632))+(((-1.0)*x13619*x13626))+(((-1.0)*x13618*x13625))+(((-1.0)*x13622))+(((-1.0)*r21*x13616*x13628)));
evalcond[7]=((((-1.0)*cj3*x13619*x13632))+((x13626*x13628))+(((-1.0)*x13616*x13618))+x13634+(((-1.0)*r22*x13612*x13625))+(((-1.0)*gconst41*r21*x13616)));
evalcond[8]=(x13622+((x13617*x13628))+(((-1.0)*r02*x13612*x13625))+(((-1.0)*x13616*x13623))+(((-1.0)*gconst41*r01*x13616))+(((-1.0)*cj3*x13619*x13629))+(((-1.0)*x13620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13635 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst41*r20))+(((-1.0)*gconst40*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13635.valid){
continue;
}
CheckValue<IkReal> x13636=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x13636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13635.value)+(((1.5707963267949)*(x13636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13637=IKsin(j4);
IkReal x13638=IKcos(j4);
IkReal x13639=(cj2*sj1);
IkReal x13640=(cj1*sj2);
IkReal x13641=((1.0)*sj3);
IkReal x13642=(cj3*r01);
IkReal x13643=(gconst40*r20);
IkReal x13644=((1.0)*gconst41);
IkReal x13645=(sj1*sj2);
IkReal x13646=(gconst41*sj3);
IkReal x13647=(cj1*cj2);
IkReal x13648=(gconst40*r00);
IkReal x13649=(cj3*r11);
IkReal x13650=((1.0)*cj3);
IkReal x13651=(cj3*r21);
IkReal x13652=(gconst40*r10);
IkReal x13653=(gconst40*x13638);
IkReal x13654=(r00*x13638);
IkReal x13655=(sj3*x13637);
IkReal x13656=(r10*x13638);
IkReal x13657=(r20*x13638);
IkReal x13658=(gconst40*x13637);
IkReal x13659=(x13640+x13639);
evalcond[0]=((((-1.0)*r20*x13637*x13644))+((r22*x13638))+((r21*x13658)));
evalcond[1]=(((r01*x13658))+((r02*x13638))+(((-1.0)*r00*x13637*x13644)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13637*x13644))+((r12*x13638))+((r11*x13658)));
evalcond[3]=(((r12*x13655))+((x13646*x13656))+(((-1.0)*x13644*x13649))+(((-1.0)*x13650*x13652))+(((-1.0)*r11*x13641*x13653)));
evalcond[4]=((((-1.0)*cj3*x13644*x13656))+(((-1.0)*gconst41*r11*x13641))+(((-1.0)*x13641*x13652))+(((-1.0)*r12*x13637*x13650))+((x13649*x13653)));
evalcond[5]=((((-1.0)*x13648*x13650))+x13659+((r02*x13655))+((x13646*x13654))+(((-1.0)*r01*x13641*x13653))+(((-1.0)*x13642*x13644)));
evalcond[6]=(x13645+(((-1.0)*x13644*x13651))+((r22*x13655))+((x13646*x13657))+(((-1.0)*r21*x13641*x13653))+(((-1.0)*x13647))+(((-1.0)*x13643*x13650)));
evalcond[7]=(((x13651*x13653))+x13659+(((-1.0)*x13641*x13643))+(((-1.0)*cj3*x13644*x13657))+(((-1.0)*r22*x13637*x13650))+(((-1.0)*gconst41*r21*x13641)));
evalcond[8]=(x13647+(((-1.0)*x13641*x13648))+((x13642*x13653))+(((-1.0)*cj3*x13644*x13654))+(((-1.0)*r02*x13637*x13650))+(((-1.0)*x13645))+(((-1.0)*gconst41*r01*x13641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13660=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13660);
rxp1_1=(px*r21);
rxp1_2=(r11*x13660);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13661=(cj5*r10);
IkReal x13662=(r11*sj5);
j4eval[0]=(x13662+(((-1.0)*x13661)));
j4eval[1]=((((-1.0)*sj3*x13662))+((sj3*x13661)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13663=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13663);
rxp1_1=(px*r21);
rxp1_2=(r11*x13663);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13664=(r11*sj5);
IkReal x13665=((1.0)*cj5*r10);
j4eval[0]=(x13664+(((-1.0)*x13665)));
j4eval[1]=(((cj3*x13664))+(((-1.0)*cj3*x13665)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13666=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13666);
rxp1_1=(px*r21);
rxp1_2=(r11*x13666);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13667=IKPowWithIntegerCheck(r02,-1);
if(!x13667.valid){
continue;
}
CheckValue<IkReal> x13668=IKPowWithIntegerCheck(sj3,-1);
if(!x13668.valid){
continue;
}
CheckValue<IkReal> x13669=IKPowWithIntegerCheck(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3))),-1);
if(!x13669.valid){
continue;
}
if( IKabs(((x13667.value)*(x13668.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13669.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13667.value)*(x13668.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13669.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13667.value)*(x13668.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13669.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13670=IKsin(j4);
IkReal x13671=IKcos(j4);
IkReal x13672=(cj2*sj1);
IkReal x13673=(cj1*sj2);
IkReal x13674=((1.0)*r10);
IkReal x13675=(sj1*sj2);
IkReal x13676=(cj5*sj3);
IkReal x13677=(cj3*sj5);
IkReal x13678=((1.0)*r11);
IkReal x13679=((1.0)*r20);
IkReal x13680=(cj3*cj5);
IkReal x13681=(sj3*sj5);
IkReal x13682=(cj1*cj2);
IkReal x13683=((1.0)*r21);
IkReal x13684=(cj5*x13670);
IkReal x13685=(r20*x13671);
IkReal x13686=(r11*x13671);
IkReal x13687=(sj5*x13670);
IkReal x13688=(r21*x13671);
IkReal x13689=(r02*x13670);
IkReal x13690=(x13672+x13673);
evalcond[0]=(r02*x13671);
evalcond[1]=(x13690+((sj3*x13689)));
evalcond[2]=((((-1.0)*x13679*x13684))+((r21*x13687)));
evalcond[3]=((-1.0)+(((-1.0)*x13674*x13684))+((r11*x13687)));
evalcond[4]=((((-1.0)*cj3*x13689))+x13682+(((-1.0)*x13675)));
evalcond[5]=((((-1.0)*x13674*x13677))+(((-1.0)*x13678*x13680))+(((-1.0)*x13671*x13678*x13681))+((r10*x13671*x13676)));
evalcond[6]=((((-1.0)*x13674*x13681))+(((-1.0)*x13671*x13674*x13680))+(((-1.0)*x13676*x13678))+((x13677*x13686)));
evalcond[7]=(x13690+(((-1.0)*x13676*x13683))+(((-1.0)*x13679*x13681))+(((-1.0)*x13671*x13679*x13680))+((x13677*x13688)));
evalcond[8]=(x13675+(((-1.0)*x13677*x13679))+(((-1.0)*x13682))+((x13676*x13685))+(((-1.0)*x13680*x13683))+(((-1.0)*x13671*x13681*x13683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13691=(r11*sj5);
IkReal x13692=((1.0)*cj5*r10);
CheckValue<IkReal> x13693=IKPowWithIntegerCheck((x13691+(((-1.0)*x13692))),-1);
if(!x13693.valid){
continue;
}
CheckValue<IkReal> x13694=IKPowWithIntegerCheck(((((-1.0)*cj3*x13692))+((cj3*x13691))),-1);
if(!x13694.valid){
continue;
}
if( IKabs(x13693.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13694.value)*((((cj5*r11*sj3))+((r10*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13693.value)+IKsqr(((x13694.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13693.value, ((x13694.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13695=IKsin(j4);
IkReal x13696=IKcos(j4);
IkReal x13697=(cj2*sj1);
IkReal x13698=(cj1*sj2);
IkReal x13699=((1.0)*r10);
IkReal x13700=(sj1*sj2);
IkReal x13701=(cj5*sj3);
IkReal x13702=(cj3*sj5);
IkReal x13703=((1.0)*r11);
IkReal x13704=((1.0)*r20);
IkReal x13705=(cj3*cj5);
IkReal x13706=(sj3*sj5);
IkReal x13707=(cj1*cj2);
IkReal x13708=((1.0)*r21);
IkReal x13709=(cj5*x13695);
IkReal x13710=(r20*x13696);
IkReal x13711=(r11*x13696);
IkReal x13712=(sj5*x13695);
IkReal x13713=(r21*x13696);
IkReal x13714=(r02*x13695);
IkReal x13715=(x13697+x13698);
evalcond[0]=(r02*x13696);
evalcond[1]=(((sj3*x13714))+x13715);
evalcond[2]=(((r21*x13712))+(((-1.0)*x13704*x13709)));
evalcond[3]=((-1.0)+(((-1.0)*x13699*x13709))+((r11*x13712)));
evalcond[4]=(x13707+(((-1.0)*x13700))+(((-1.0)*cj3*x13714)));
evalcond[5]=(((r10*x13696*x13701))+(((-1.0)*x13703*x13705))+(((-1.0)*x13696*x13703*x13706))+(((-1.0)*x13699*x13702)));
evalcond[6]=(((x13702*x13711))+(((-1.0)*x13701*x13703))+(((-1.0)*x13696*x13699*x13705))+(((-1.0)*x13699*x13706)));
evalcond[7]=(((x13702*x13713))+x13715+(((-1.0)*x13701*x13708))+(((-1.0)*x13696*x13704*x13705))+(((-1.0)*x13704*x13706)));
evalcond[8]=((((-1.0)*x13702*x13704))+x13700+(((-1.0)*x13707))+(((-1.0)*x13696*x13706*x13708))+(((-1.0)*x13705*x13708))+((x13701*x13710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13716=(cj5*r10);
IkReal x13717=(r11*sj5);
CheckValue<IkReal> x13718=IKPowWithIntegerCheck(((((-1.0)*x13716))+x13717),-1);
if(!x13718.valid){
continue;
}
CheckValue<IkReal> x13719=IKPowWithIntegerCheck((((sj3*x13716))+(((-1.0)*sj3*x13717))),-1);
if(!x13719.valid){
continue;
}
if( IKabs(x13718.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13719.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13718.value)+IKsqr(((x13719.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13718.value, ((x13719.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13720=IKsin(j4);
IkReal x13721=IKcos(j4);
IkReal x13722=(cj2*sj1);
IkReal x13723=(cj1*sj2);
IkReal x13724=((1.0)*r10);
IkReal x13725=(sj1*sj2);
IkReal x13726=(cj5*sj3);
IkReal x13727=(cj3*sj5);
IkReal x13728=((1.0)*r11);
IkReal x13729=((1.0)*r20);
IkReal x13730=(cj3*cj5);
IkReal x13731=(sj3*sj5);
IkReal x13732=(cj1*cj2);
IkReal x13733=((1.0)*r21);
IkReal x13734=(cj5*x13720);
IkReal x13735=(r20*x13721);
IkReal x13736=(r11*x13721);
IkReal x13737=(sj5*x13720);
IkReal x13738=(r21*x13721);
IkReal x13739=(r02*x13720);
IkReal x13740=(x13722+x13723);
evalcond[0]=(r02*x13721);
evalcond[1]=(x13740+((sj3*x13739)));
evalcond[2]=(((r21*x13737))+(((-1.0)*x13729*x13734)));
evalcond[3]=((-1.0)+(((-1.0)*x13724*x13734))+((r11*x13737)));
evalcond[4]=(x13732+(((-1.0)*x13725))+(((-1.0)*cj3*x13739)));
evalcond[5]=((((-1.0)*x13724*x13727))+((r10*x13721*x13726))+(((-1.0)*x13721*x13728*x13731))+(((-1.0)*x13728*x13730)));
evalcond[6]=((((-1.0)*x13724*x13731))+((x13727*x13736))+(((-1.0)*x13721*x13724*x13730))+(((-1.0)*x13726*x13728)));
evalcond[7]=(x13740+(((-1.0)*x13726*x13733))+(((-1.0)*x13729*x13731))+((x13727*x13738))+(((-1.0)*x13721*x13729*x13730)));
evalcond[8]=(x13725+(((-1.0)*x13730*x13733))+((x13726*x13735))+(((-1.0)*x13721*x13731*x13733))+(((-1.0)*x13727*x13729))+(((-1.0)*x13732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13741=cj5*cj5;
IkReal x13742=((1.0)*r21);
IkReal x13743=(r11*sj3);
IkReal x13744=(cj3*r10);
IkReal x13745=(cj5*sj5);
IkReal x13746=((1.0)*r20);
IkReal x13747=((1.0)*r22);
IkReal x13748=(cj3*r11);
IkReal x13749=(r10*sj3);
CheckValue<IkReal> x13750=IKPowWithIntegerCheck(IKsign((((r21*x13741*x13743))+(((-1.0)*x13741*x13746*x13749))+(((-1.0)*x13742*x13743))+(((-1.0)*r12*sj3*x13747))+((r21*x13745*x13749))+((r20*x13743*x13745)))),-1);
if(!x13750.valid){
continue;
}
CheckValue<IkReal> x13751 = IKatan2WithCheck(IkReal(((((-1.0)*sj5*x13744*x13747))+(((-1.0)*cj5*x13747*x13748)))),IkReal(((((-1.0)*x13741*x13746*x13748))+(((-1.0)*x13741*x13742*x13744))+((r21*x13744))+(((-1.0)*x13744*x13745*x13746))+((r21*x13745*x13748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13750.value)))+(x13751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13752=IKsin(j4);
IkReal x13753=IKcos(j4);
IkReal x13754=(cj2*sj1);
IkReal x13755=(cj1*sj2);
IkReal x13756=(r00*sj3);
IkReal x13757=((1.0)*sj5);
IkReal x13758=((1.0)*cj5);
IkReal x13759=(r20*sj3);
IkReal x13760=(r11*sj5);
IkReal x13761=(r21*sj5);
IkReal x13762=(cj1*cj2);
IkReal x13763=(r10*sj3);
IkReal x13764=(r11*sj3);
IkReal x13765=(r01*sj5);
IkReal x13766=(sj1*sj2);
IkReal x13767=(cj5*x13753);
IkReal x13768=(cj3*x13753);
IkReal x13769=(r12*x13752);
IkReal x13770=(sj3*x13753);
IkReal x13771=(sj3*x13752);
IkReal x13772=(x13755+x13754);
IkReal x13773=((1.0)*cj3*x13752);
evalcond[0]=(((r22*x13753))+(((-1.0)*r20*x13752*x13758))+((x13752*x13761)));
evalcond[1]=(((r02*x13753))+(((-1.0)*r00*x13752*x13758))+((x13752*x13765)));
evalcond[2]=((-1.0)+((r12*x13753))+(((-1.0)*r10*x13752*x13758))+((x13752*x13760)));
evalcond[3]=((((-1.0)*cj3*r11*x13758))+((sj3*x13769))+(((-1.0)*x13753*x13757*x13764))+((x13763*x13767))+(((-1.0)*cj3*r10*x13757)));
evalcond[4]=((((-1.0)*cj3*x13769))+(((-1.0)*x13757*x13763))+((x13760*x13768))+(((-1.0)*x13758*x13764))+(((-1.0)*r10*x13758*x13768)));
evalcond[5]=((((-1.0)*cj3*r01*x13758))+x13772+(((-1.0)*cj3*r00*x13757))+(((-1.0)*r01*x13757*x13770))+((x13756*x13767))+((r02*x13771)));
evalcond[6]=((((-1.0)*cj3*r21*x13758))+(((-1.0)*x13762))+(((-1.0)*r21*x13757*x13770))+x13766+((r22*x13771))+(((-1.0)*cj3*r20*x13757))+((x13759*x13767)));
evalcond[7]=((((-1.0)*r20*x13758*x13768))+x13772+(((-1.0)*r22*x13773))+(((-1.0)*x13757*x13759))+((x13761*x13768))+(((-1.0)*r21*sj3*x13758)));
evalcond[8]=((((-1.0)*x13766))+x13762+(((-1.0)*x13756*x13757))+(((-1.0)*r00*x13758*x13768))+(((-1.0)*r02*x13773))+(((-1.0)*r01*sj3*x13758))+((x13765*x13768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13774=((1.0)*sj5);
CheckValue<IkReal> x13775 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x13774))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13775.valid){
continue;
}
CheckValue<IkReal> x13776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13774))+(((-1.0)*cj5*r21)))),-1);
if(!x13776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13775.value)+(((1.5707963267949)*(x13776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13777=IKsin(j4);
IkReal x13778=IKcos(j4);
IkReal x13779=(cj2*sj1);
IkReal x13780=(cj1*sj2);
IkReal x13781=(r00*sj3);
IkReal x13782=((1.0)*sj5);
IkReal x13783=((1.0)*cj5);
IkReal x13784=(r20*sj3);
IkReal x13785=(r11*sj5);
IkReal x13786=(r21*sj5);
IkReal x13787=(cj1*cj2);
IkReal x13788=(r10*sj3);
IkReal x13789=(r11*sj3);
IkReal x13790=(r01*sj5);
IkReal x13791=(sj1*sj2);
IkReal x13792=(cj5*x13778);
IkReal x13793=(cj3*x13778);
IkReal x13794=(r12*x13777);
IkReal x13795=(sj3*x13778);
IkReal x13796=(sj3*x13777);
IkReal x13797=(x13779+x13780);
IkReal x13798=((1.0)*cj3*x13777);
evalcond[0]=(((x13777*x13786))+(((-1.0)*r20*x13777*x13783))+((r22*x13778)));
evalcond[1]=(((x13777*x13790))+(((-1.0)*r00*x13777*x13783))+((r02*x13778)));
evalcond[2]=((-1.0)+((x13777*x13785))+(((-1.0)*r10*x13777*x13783))+((r12*x13778)));
evalcond[3]=((((-1.0)*cj3*r10*x13782))+(((-1.0)*x13778*x13782*x13789))+(((-1.0)*cj3*r11*x13783))+((sj3*x13794))+((x13788*x13792)));
evalcond[4]=(((x13785*x13793))+(((-1.0)*x13783*x13789))+(((-1.0)*x13782*x13788))+(((-1.0)*cj3*x13794))+(((-1.0)*r10*x13783*x13793)));
evalcond[5]=(x13797+(((-1.0)*cj3*r00*x13782))+(((-1.0)*cj3*r01*x13783))+((r02*x13796))+(((-1.0)*r01*x13782*x13795))+((x13781*x13792)));
evalcond[6]=(((x13784*x13792))+x13791+((r22*x13796))+(((-1.0)*cj3*r20*x13782))+(((-1.0)*x13787))+(((-1.0)*cj3*r21*x13783))+(((-1.0)*r21*x13782*x13795)));
evalcond[7]=(x13797+(((-1.0)*r20*x13783*x13793))+(((-1.0)*x13782*x13784))+(((-1.0)*r21*sj3*x13783))+((x13786*x13793))+(((-1.0)*r22*x13798)));
evalcond[8]=((((-1.0)*r01*sj3*x13783))+((x13790*x13793))+(((-1.0)*r02*x13798))+x13787+(((-1.0)*x13781*x13782))+(((-1.0)*r00*x13783*x13793))+(((-1.0)*x13791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13799=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13799.valid){
continue;
}
CheckValue<IkReal> x13800 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13799.value)))+(x13800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13801=IKsin(j4);
IkReal x13802=IKcos(j4);
IkReal x13803=(cj2*sj1);
IkReal x13804=(cj1*sj2);
IkReal x13805=(r00*sj3);
IkReal x13806=((1.0)*sj5);
IkReal x13807=((1.0)*cj5);
IkReal x13808=(r20*sj3);
IkReal x13809=(r11*sj5);
IkReal x13810=(r21*sj5);
IkReal x13811=(cj1*cj2);
IkReal x13812=(r10*sj3);
IkReal x13813=(r11*sj3);
IkReal x13814=(r01*sj5);
IkReal x13815=(sj1*sj2);
IkReal x13816=(cj5*x13802);
IkReal x13817=(cj3*x13802);
IkReal x13818=(r12*x13801);
IkReal x13819=(sj3*x13802);
IkReal x13820=(sj3*x13801);
IkReal x13821=(x13804+x13803);
IkReal x13822=((1.0)*cj3*x13801);
evalcond[0]=((((-1.0)*r20*x13801*x13807))+((r22*x13802))+((x13801*x13810)));
evalcond[1]=((((-1.0)*r00*x13801*x13807))+((r02*x13802))+((x13801*x13814)));
evalcond[2]=((-1.0)+((r12*x13802))+(((-1.0)*r10*x13801*x13807))+((x13801*x13809)));
evalcond[3]=(((x13812*x13816))+((sj3*x13818))+(((-1.0)*x13802*x13806*x13813))+(((-1.0)*cj3*r10*x13806))+(((-1.0)*cj3*r11*x13807)));
evalcond[4]=((((-1.0)*cj3*x13818))+(((-1.0)*x13807*x13813))+(((-1.0)*r10*x13807*x13817))+(((-1.0)*x13806*x13812))+((x13809*x13817)));
evalcond[5]=(x13821+(((-1.0)*cj3*r01*x13807))+(((-1.0)*cj3*r00*x13806))+((r02*x13820))+((x13805*x13816))+(((-1.0)*r01*x13806*x13819)));
evalcond[6]=(x13815+(((-1.0)*x13811))+(((-1.0)*cj3*r21*x13807))+((x13808*x13816))+((r22*x13820))+(((-1.0)*cj3*r20*x13806))+(((-1.0)*r21*x13806*x13819)));
evalcond[7]=((((-1.0)*r22*x13822))+(((-1.0)*x13806*x13808))+((x13810*x13817))+x13821+(((-1.0)*r21*sj3*x13807))+(((-1.0)*r20*x13807*x13817)));
evalcond[8]=((((-1.0)*x13805*x13806))+x13811+(((-1.0)*x13815))+((x13814*x13817))+(((-1.0)*r01*sj3*x13807))+(((-1.0)*r02*x13822))+(((-1.0)*r00*x13807*x13817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13823=((-1.0)*r00);
IkReal x13825 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13825)==0){
continue;
}
IkReal x13824=pow(x13825,-0.5);
CheckValue<IkReal> x13826 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13823),IKFAST_ATAN2_MAGTHRESH);
if(!x13826.valid){
continue;
}
IkReal gconst12=((-1.0)*(x13826.value));
IkReal gconst13=(r01*x13824);
IkReal gconst14=(x13823*x13824);
CheckValue<IkReal> x13827 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13827.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13827.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x13828=((-1.0)*r00);
IkReal x13829=x13824;
CheckValue<IkReal> x13831 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13828),IKFAST_ATAN2_MAGTHRESH);
if(!x13831.valid){
continue;
}
IkReal x13830=((-1.0)*(x13831.value));
sj5=gconst13;
cj5=gconst14;
j5=x13830;
IkReal gconst12=x13830;
IkReal gconst13=(r01*x13829);
IkReal gconst14=(x13828*x13829);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13832=((-1.0)*r00);
IkReal x13833=x13824;
CheckValue<IkReal> x13835 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13832),IKFAST_ATAN2_MAGTHRESH);
if(!x13835.valid){
continue;
}
IkReal x13834=((-1.0)*(x13835.value));
sj5=gconst13;
cj5=gconst14;
j5=x13834;
IkReal gconst12=x13834;
IkReal gconst13=(r01*x13833);
IkReal gconst14=(x13832*x13833);
IkReal x13836=r02*r02;
IkReal x13837=(r12*sj0);
IkReal x13838=((1.0)*cj0);
IkReal x13839=x13824;
j4eval[0]=((IKabs(((((-1.0)*r02*x13838))+(((-1.0)*x13837)))))+(IKabs(((((-1.0)*x13838*x13839))+((cj0*x13836*x13839))+((r02*x13837*x13839))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13840=((-1.0)*r00);
IkReal x13841=x13824;
CheckValue<IkReal> x13843 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13840),IKFAST_ATAN2_MAGTHRESH);
if(!x13843.valid){
continue;
}
IkReal x13842=((-1.0)*(x13843.value));
sj5=gconst13;
cj5=gconst14;
j5=x13842;
IkReal gconst12=x13842;
IkReal gconst13=(r01*x13841);
IkReal gconst14=(x13840*x13841);
CheckValue<IkReal> x13847=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13847.valid){
continue;
}
IkReal x13844=x13847.value;
IkReal x13845=(cj3*x13844);
IkReal x13846=(((x13845*(r01*r01)*(r21*r21)))+((cj3*(r22*r22)))+(((2.0)*r00*r01*r20*r21*x13845))+((x13845*(r00*r00)*(r20*r20))));
j4eval[0]=x13846;
j4eval[1]=IKsign(x13846);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x13848=((-1.0)*r00);
IkReal x13849=x13824;
CheckValue<IkReal> x13851 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13848),IKFAST_ATAN2_MAGTHRESH);
if(!x13851.valid){
continue;
}
IkReal x13850=((-1.0)*(x13851.value));
sj5=gconst13;
cj5=gconst14;
j5=x13850;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst12=x13850;
IkReal gconst13=(r01*x13849);
IkReal gconst14=(x13848*x13849);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13852=((-1.0)*r00);
IkReal x13853=x13824;
CheckValue<IkReal> x13855 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13852),IKFAST_ATAN2_MAGTHRESH);
if(!x13855.valid){
continue;
}
IkReal x13854=((-1.0)*(x13855.value));
sj5=gconst13;
cj5=gconst14;
j5=x13854;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst12=x13854;
IkReal gconst13=(r01*x13853);
IkReal gconst14=(x13852*x13853);
IkReal x13856=r02*r02;
IkReal x13857=(r12*sj0);
IkReal x13858=((1.0)*cj0);
IkReal x13859=x13824;
j4eval[0]=((IKabs((((cj0*x13856*x13859))+(((-1.0)*x13858*x13859))+((r02*x13857*x13859)))))+(IKabs(((((-1.0)*x13857))+(((-1.0)*r02*x13858))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13860=((-1.0)*r00);
IkReal x13861=x13824;
CheckValue<IkReal> x13863 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13860),IKFAST_ATAN2_MAGTHRESH);
if(!x13863.valid){
continue;
}
IkReal x13862=((-1.0)*(x13863.value));
sj5=gconst13;
cj5=gconst14;
j5=x13862;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst12=x13862;
IkReal gconst13=(r01*x13861);
IkReal gconst14=(x13860*x13861);
IkReal x13864=r02*r02;
IkReal x13865=(sj1*sj2);
IkReal x13866=(cj1*cj2);
IkReal x13867=((1.0)+(((-1.0)*x13864)));
CheckValue<IkReal> x13874=IKPowWithIntegerCheck(x13867,-1);
if(!x13874.valid){
continue;
}
IkReal x13868=x13874.value;
CheckValue<IkReal> x13875=IKPowWithIntegerCheck(((-1.0)+x13864),-1);
if(!x13875.valid){
continue;
}
IkReal x13869=x13875.value;
IkReal x13870=((1.0)*x13868);
if((x13867) < -0.00001)
continue;
IkReal x13871=IKsqrt(x13867);
IkReal x13872=(r02*r22*x13869*x13871);
IkReal x13873=((((-1.0)*x13870*(r00*r00)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r00*r01*r20*r21*x13868))+(((-1.0)*x13870*(r01*r01)*(r21*r21))));
j4eval[0]=x13873;
j4eval[1]=((IKabs((((r22*x13865))+(((-1.0)*r22*x13866)))))+(IKabs(((((-1.0)*x13865*x13872))+((x13866*x13872))))));
j4eval[2]=IKsign(x13873);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13876=(gconst14*r20);
IkReal x13877=(cj1*cj2);
IkReal x13878=(gconst13*r21);
IkReal x13879=(sj1*sj2);
CheckValue<IkReal> x13880 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13877))+((r22*x13879)))),IkReal(((((-1.0)*x13878*x13879))+((x13877*x13878))+((x13876*x13879))+(((-1.0)*x13876*x13877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13880.valid){
continue;
}
CheckValue<IkReal> x13881=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13876*x13876)))+(((2.0)*x13876*x13878))+(((-1.0)*(r22*r22)))+(((-1.0)*(x13878*x13878))))),-1);
if(!x13881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13880.value)+(((1.5707963267949)*(x13881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13882=IKsin(j4);
IkReal x13883=IKcos(j4);
IkReal x13884=(gconst13*r01);
IkReal x13885=((1.0)*cj2);
IkReal x13886=(gconst13*r21);
IkReal x13887=(gconst13*r11);
IkReal x13888=((1.0)*sj0);
IkReal x13889=(cj1*sj2);
IkReal x13890=((1.0)*x13883);
IkReal x13891=(gconst14*x13883);
IkReal x13892=((1.0)*gconst14*x13882);
evalcond[0]=(((x13882*x13886))+(((-1.0)*r20*x13892))+((r22*x13883)));
evalcond[1]=(((x13882*x13887))+cj0+((r12*x13883))+(((-1.0)*r10*x13892)));
evalcond[2]=(((x13882*x13884))+(((-1.0)*r00*x13892))+((r02*x13883))+(((-1.0)*x13888)));
evalcond[3]=((((-1.0)*cj1*x13885))+((sj1*sj2))+((r20*x13891))+(((-1.0)*x13886*x13890))+((r22*x13882)));
evalcond[4]=(((r02*x13882))+(((-1.0)*x13884*x13890))+((r00*x13891))+(((-1.0)*cj0*x13889))+(((-1.0)*cj0*sj1*x13885)));
evalcond[5]=((((-1.0)*x13888*x13889))+(((-1.0)*sj0*sj1*x13885))+((r10*x13891))+(((-1.0)*x13887*x13890))+((r12*x13882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13893=((1.0)*sj0);
IkReal x13894=((1.0)*cj0);
CheckValue<IkReal> x13895 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x13893))+(((-1.0)*r02*x13894)))),IkReal(((((-1.0)*gconst14*r10*x13893))+(((-1.0)*gconst14*r00*x13894))+((cj0*gconst13*r01))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13895.valid){
continue;
}
CheckValue<IkReal> x13896=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x13896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13895.value)+(((1.5707963267949)*(x13896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13897=IKsin(j4);
IkReal x13898=IKcos(j4);
IkReal x13899=(gconst13*r01);
IkReal x13900=((1.0)*cj2);
IkReal x13901=(gconst13*r21);
IkReal x13902=(gconst13*r11);
IkReal x13903=((1.0)*sj0);
IkReal x13904=(cj1*sj2);
IkReal x13905=((1.0)*x13898);
IkReal x13906=(gconst14*x13898);
IkReal x13907=((1.0)*gconst14*x13897);
evalcond[0]=(((r22*x13898))+((x13897*x13901))+(((-1.0)*r20*x13907)));
evalcond[1]=(cj0+((r12*x13898))+((x13897*x13902))+(((-1.0)*r10*x13907)));
evalcond[2]=(((r02*x13898))+(((-1.0)*r00*x13907))+((x13897*x13899))+(((-1.0)*x13903)));
evalcond[3]=(((r22*x13897))+(((-1.0)*x13901*x13905))+((sj1*sj2))+((r20*x13906))+(((-1.0)*cj1*x13900)));
evalcond[4]=((((-1.0)*cj0*x13904))+((r02*x13897))+((r00*x13906))+(((-1.0)*cj0*sj1*x13900))+(((-1.0)*x13899*x13905)));
evalcond[5]=((((-1.0)*x13902*x13905))+((r10*x13906))+((r12*x13897))+(((-1.0)*x13903*x13904))+(((-1.0)*sj0*sj1*x13900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13908=((1.0)*gconst13);
CheckValue<IkReal> x13909=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst14*r11))+(((-1.0)*r10*x13908)))),-1);
if(!x13909.valid){
continue;
}
CheckValue<IkReal> x13910 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x13908))+((gconst14*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13909.value)))+(x13910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13911=IKsin(j4);
IkReal x13912=IKcos(j4);
IkReal x13913=(gconst13*r01);
IkReal x13914=((1.0)*cj2);
IkReal x13915=(gconst13*r21);
IkReal x13916=(gconst13*r11);
IkReal x13917=((1.0)*sj0);
IkReal x13918=(cj1*sj2);
IkReal x13919=((1.0)*x13912);
IkReal x13920=(gconst14*x13912);
IkReal x13921=((1.0)*gconst14*x13911);
evalcond[0]=(((r22*x13912))+((x13911*x13915))+(((-1.0)*r20*x13921)));
evalcond[1]=(cj0+(((-1.0)*r10*x13921))+((r12*x13912))+((x13911*x13916)));
evalcond[2]=(((r02*x13912))+(((-1.0)*r00*x13921))+((x13911*x13913))+(((-1.0)*x13917)));
evalcond[3]=(((r22*x13911))+((r20*x13920))+((sj1*sj2))+(((-1.0)*x13915*x13919))+(((-1.0)*cj1*x13914)));
evalcond[4]=((((-1.0)*cj0*x13918))+((r02*x13911))+(((-1.0)*x13913*x13919))+(((-1.0)*cj0*sj1*x13914))+((r00*x13920)));
evalcond[5]=((((-1.0)*sj0*sj1*x13914))+(((-1.0)*x13917*x13918))+((r10*x13920))+(((-1.0)*x13916*x13919))+((r12*x13911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x13922=((-1.0)*r00);
IkReal x13923=x13824;
CheckValue<IkReal> x13925 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13922),IKFAST_ATAN2_MAGTHRESH);
if(!x13925.valid){
continue;
}
IkReal x13924=((-1.0)*(x13925.value));
sj5=gconst13;
cj5=gconst14;
j5=x13924;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst12=x13924;
IkReal gconst13=(r01*x13923);
IkReal gconst14=(x13922*x13923);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13926=((-1.0)*r00);
IkReal x13927=x13824;
CheckValue<IkReal> x13929 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13926),IKFAST_ATAN2_MAGTHRESH);
if(!x13929.valid){
continue;
}
IkReal x13928=((-1.0)*(x13929.value));
sj5=gconst13;
cj5=gconst14;
j5=x13928;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst12=x13928;
IkReal gconst13=(r01*x13927);
IkReal gconst14=(x13926*x13927);
IkReal x13930=r02*r02;
IkReal x13931=(r12*sj0);
IkReal x13932=((1.0)*cj0);
IkReal x13933=x13824;
j4eval[0]=((IKabs(((((-1.0)*r02*x13932))+(((-1.0)*x13931)))))+(IKabs((((r02*x13931*x13933))+(((-1.0)*x13932*x13933))+((cj0*x13930*x13933))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13934=((-1.0)*r00);
IkReal x13935=x13824;
CheckValue<IkReal> x13937 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13934),IKFAST_ATAN2_MAGTHRESH);
if(!x13937.valid){
continue;
}
IkReal x13936=((-1.0)*(x13937.value));
sj5=gconst13;
cj5=gconst14;
j5=x13936;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst12=x13936;
IkReal gconst13=(r01*x13935);
IkReal gconst14=(x13934*x13935);
IkReal x13938=r02*r02;
IkReal x13939=(r22*sj1*sj2);
IkReal x13940=(cj1*cj2*r22);
CheckValue<IkReal> x13944=IKPowWithIntegerCheck(((-1.0)+x13938),-1);
if(!x13944.valid){
continue;
}
IkReal x13941=x13944.value;
if((((1.0)+(((-1.0)*x13938)))) < -0.00001)
continue;
IkReal x13942=IKsqrt(((1.0)+(((-1.0)*x13938))));
IkReal x13943=(r02*x13941*x13942);
j4eval[0]=((IKabs(((((-1.0)*x13939*x13943))+((x13940*x13943)))))+(IKabs(((((-1.0)*x13940))+x13939))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13945=(gconst14*r20);
IkReal x13946=(gconst13*r21);
IkReal x13947=(sj1*sj2);
IkReal x13948=((1.0)*cj1*cj2);
CheckValue<IkReal> x13949 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13948))+((r22*x13947)))),IkReal(((((-1.0)*x13946*x13947))+(((-1.0)*x13945*x13948))+((x13945*x13947))+((cj1*cj2*x13946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13949.valid){
continue;
}
CheckValue<IkReal> x13950=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x13945*x13946))+(x13946*x13946)+(x13945*x13945))),-1);
if(!x13950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13949.value)+(((1.5707963267949)*(x13950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13951=IKsin(j4);
IkReal x13952=IKcos(j4);
IkReal x13953=(gconst13*r01);
IkReal x13954=((1.0)*sj0);
IkReal x13955=((1.0)*cj2);
IkReal x13956=(gconst14*r20);
IkReal x13957=(gconst14*r10);
IkReal x13958=(cj1*sj2);
IkReal x13959=((1.0)*gconst14*r00);
IkReal x13960=(gconst13*x13951);
IkReal x13961=((1.0)*x13951);
IkReal x13962=(gconst13*x13952);
IkReal x13963=((1.0)*x13952);
evalcond[0]=(((r22*x13952))+((r21*x13960))+(((-1.0)*x13956*x13961)));
evalcond[1]=(((r12*x13952))+cj0+((r11*x13960))+(((-1.0)*x13957*x13961)));
evalcond[2]=(((x13951*x13953))+(((-1.0)*x13954))+((r02*x13952))+(((-1.0)*x13951*x13959)));
evalcond[3]=((((-1.0)*r22*x13961))+((sj1*sj2))+(((-1.0)*cj1*x13955))+((r21*x13962))+(((-1.0)*x13956*x13963)));
evalcond[4]=((((-1.0)*r02*x13961))+(((-1.0)*x13952*x13959))+(((-1.0)*cj0*x13958))+(((-1.0)*cj0*sj1*x13955))+((x13952*x13953)));
evalcond[5]=((((-1.0)*r12*x13961))+((r11*x13962))+(((-1.0)*x13957*x13963))+(((-1.0)*cj2*sj1*x13954))+(((-1.0)*x13954*x13958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13964=((1.0)*sj0);
IkReal x13965=((1.0)*cj0);
CheckValue<IkReal> x13966 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x13965))+(((-1.0)*r12*x13964)))),IkReal(((((-1.0)*gconst14*r00*x13965))+((cj0*gconst13*r01))+((gconst13*r11*sj0))+(((-1.0)*gconst14*r10*x13964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13966.valid){
continue;
}
CheckValue<IkReal> x13967=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x13967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13966.value)+(((1.5707963267949)*(x13967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13968=IKsin(j4);
IkReal x13969=IKcos(j4);
IkReal x13970=(gconst13*r01);
IkReal x13971=((1.0)*sj0);
IkReal x13972=((1.0)*cj2);
IkReal x13973=(gconst14*r20);
IkReal x13974=(gconst14*r10);
IkReal x13975=(cj1*sj2);
IkReal x13976=((1.0)*gconst14*r00);
IkReal x13977=(gconst13*x13968);
IkReal x13978=((1.0)*x13968);
IkReal x13979=(gconst13*x13969);
IkReal x13980=((1.0)*x13969);
evalcond[0]=((((-1.0)*x13973*x13978))+((r21*x13977))+((r22*x13969)));
evalcond[1]=(cj0+((r11*x13977))+(((-1.0)*x13974*x13978))+((r12*x13969)));
evalcond[2]=(((r02*x13969))+(((-1.0)*x13968*x13976))+((x13968*x13970))+(((-1.0)*x13971)));
evalcond[3]=((((-1.0)*r22*x13978))+((sj1*sj2))+(((-1.0)*x13973*x13980))+(((-1.0)*cj1*x13972))+((r21*x13979)));
evalcond[4]=((((-1.0)*r02*x13978))+(((-1.0)*x13969*x13976))+(((-1.0)*cj0*x13975))+((x13969*x13970))+(((-1.0)*cj0*sj1*x13972)));
evalcond[5]=((((-1.0)*x13971*x13975))+(((-1.0)*r12*x13978))+(((-1.0)*x13974*x13980))+(((-1.0)*cj2*sj1*x13971))+((r11*x13979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13981=((1.0)*gconst13);
CheckValue<IkReal> x13982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13981))+(((-1.0)*gconst14*r11)))),-1);
if(!x13982.valid){
continue;
}
CheckValue<IkReal> x13983 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x13981))+((gconst14*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13982.value)))+(x13983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13984=IKsin(j4);
IkReal x13985=IKcos(j4);
IkReal x13986=(gconst13*r01);
IkReal x13987=((1.0)*sj0);
IkReal x13988=((1.0)*cj2);
IkReal x13989=(gconst14*r20);
IkReal x13990=(gconst14*r10);
IkReal x13991=(cj1*sj2);
IkReal x13992=((1.0)*gconst14*r00);
IkReal x13993=(gconst13*x13984);
IkReal x13994=((1.0)*x13984);
IkReal x13995=(gconst13*x13985);
IkReal x13996=((1.0)*x13985);
evalcond[0]=(((r22*x13985))+((r21*x13993))+(((-1.0)*x13989*x13994)));
evalcond[1]=(((r12*x13985))+cj0+((r11*x13993))+(((-1.0)*x13990*x13994)));
evalcond[2]=((((-1.0)*x13987))+((x13984*x13986))+((r02*x13985))+(((-1.0)*x13984*x13992)));
evalcond[3]=((((-1.0)*cj1*x13988))+((sj1*sj2))+((r21*x13995))+(((-1.0)*x13989*x13996))+(((-1.0)*r22*x13994)));
evalcond[4]=((((-1.0)*cj0*sj1*x13988))+(((-1.0)*r02*x13994))+(((-1.0)*cj0*x13991))+((x13985*x13986))+(((-1.0)*x13985*x13992)));
evalcond[5]=(((r11*x13995))+(((-1.0)*r12*x13994))+(((-1.0)*x13990*x13996))+(((-1.0)*cj2*sj1*x13987))+(((-1.0)*x13987*x13991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13997=((-1.0)*r00);
IkReal x13998=x13824;
CheckValue<IkReal> x14000 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13997),IKFAST_ATAN2_MAGTHRESH);
if(!x14000.valid){
continue;
}
IkReal x13999=((-1.0)*(x14000.value));
sj5=gconst13;
cj5=gconst14;
j5=x13999;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst12=x13999;
IkReal gconst13=(r01*x13998);
IkReal gconst14=(x13997*x13998);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14001=((-1.0)*r00);
IkReal x14002=x13824;
CheckValue<IkReal> x14004 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14001),IKFAST_ATAN2_MAGTHRESH);
if(!x14004.valid){
continue;
}
IkReal x14003=((-1.0)*(x14004.value));
sj5=gconst13;
cj5=gconst14;
j5=x14003;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst12=x14003;
IkReal gconst13=(r01*x14002);
IkReal gconst14=(x14001*x14002);
CheckValue<IkReal> x14012=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14012.valid){
continue;
}
IkReal x14005=x14012.value;
IkReal x14006=(cj3*x14005);
IkReal x14007=(r21*x14006);
IkReal x14008=(r10*x14006);
IkReal x14009=(r11*x14006);
IkReal x14010=(r20*x14006);
IkReal x14011=(r00*r01*x14006);
j4eval[0]=IKsign((((r11*x14007*(r01*r01)))+((cj3*r12*r22))+((r00*r01*r20*x14009))+((r00*r01*r10*x14007))+((r20*x14008*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14013=gconst13*gconst13;
IkReal x14014=gconst14*gconst14;
IkReal x14015=(r21*sj3);
IkReal x14016=((1.0)*r22);
IkReal x14017=(r20*sj3);
IkReal x14018=(cj3*r10);
IkReal x14019=(gconst13*gconst14*r10);
IkReal x14020=((1.0)*cj3*r20);
IkReal x14021=(cj3*gconst14*r11);
CheckValue<IkReal> x14022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*sj3*x14016))+((x14015*x14019))+((gconst13*gconst14*r11*x14017))+(((-1.0)*r10*x14014*x14017))+(((-1.0)*r11*x14013*x14015)))),-1);
if(!x14022.valid){
continue;
}
CheckValue<IkReal> x14023 = IKatan2WithCheck(IkReal(((((-1.0)*x14016*x14021))+(((-1.0)*gconst13*x14016*x14018)))),IkReal((((r21*x14013*x14018))+((gconst13*r21*x14021))+(((-1.0)*r11*x14014*x14020))+(((-1.0)*gconst13*gconst14*r20*x14018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14022.value)))+(x14023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14024=IKsin(j4);
IkReal x14025=IKcos(j4);
IkReal x14026=(cj2*sj1);
IkReal x14027=(cj1*sj2);
IkReal x14028=((1.0)*gconst13);
IkReal x14029=(cj3*r20);
IkReal x14030=(gconst13*r01);
IkReal x14031=(sj1*sj2);
IkReal x14032=(gconst14*r10);
IkReal x14033=((1.0)*gconst14);
IkReal x14034=(cj3*r21);
IkReal x14035=(cj1*cj2);
IkReal x14036=(sj3*x14025);
IkReal x14037=(r12*x14024);
IkReal x14038=(cj3*x14025);
IkReal x14039=(gconst13*x14024);
IkReal x14040=(sj3*x14024);
IkReal x14041=(x14026+x14027);
IkReal x14042=((1.0)*cj3*x14024);
evalcond[0]=(((r22*x14025))+((r21*x14039))+(((-1.0)*r20*x14024*x14033)));
evalcond[1]=(((x14024*x14030))+(((-1.0)*r00*x14024*x14033))+((r02*x14025)));
evalcond[2]=((-1.0)+((r11*x14039))+(((-1.0)*x14024*x14032))+((r12*x14025)));
evalcond[3]=((((-1.0)*r11*x14028*x14036))+((sj3*x14037))+(((-1.0)*cj3*r10*x14028))+(((-1.0)*cj3*r11*x14033))+((x14032*x14036)));
evalcond[4]=((((-1.0)*cj3*x14037))+((gconst13*r11*x14038))+(((-1.0)*x14032*x14038))+(((-1.0)*r10*sj3*x14028))+(((-1.0)*r11*sj3*x14033)));
evalcond[5]=((((-1.0)*r01*x14028*x14036))+((gconst14*r00*x14036))+(((-1.0)*cj3*r01*x14033))+x14041+((r02*x14040))+(((-1.0)*cj3*r00*x14028)));
evalcond[6]=((((-1.0)*r21*x14028*x14036))+((r22*x14040))+((gconst14*r20*x14036))+(((-1.0)*x14033*x14034))+(((-1.0)*x14035))+(((-1.0)*x14028*x14029))+x14031);
evalcond[7]=((((-1.0)*r20*sj3*x14028))+((gconst13*x14025*x14034))+(((-1.0)*x14025*x14029*x14033))+(((-1.0)*r22*x14042))+x14041+(((-1.0)*r21*sj3*x14033)));
evalcond[8]=(((x14030*x14038))+(((-1.0)*x14031))+(((-1.0)*r00*x14033*x14038))+(((-1.0)*r02*x14042))+x14035+(((-1.0)*r01*sj3*x14033))+(((-1.0)*r00*sj3*x14028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14043=gconst13*gconst13;
IkReal x14044=gconst14*gconst14;
IkReal x14045=((1.0)*sj3);
IkReal x14046=(gconst13*r10);
IkReal x14047=(cj3*r21);
IkReal x14048=((1.0)*gconst14);
IkReal x14049=(gconst14*r11);
IkReal x14050=(r21*sj3);
IkReal x14051=(r20*x14044);
CheckValue<IkReal> x14052=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x14046*x14047*x14048))+(((-1.0)*cj3*gconst13*r11*r20*x14048))+((cj3*r10*x14051))+((r11*x14043*x14047)))),-1);
if(!x14052.valid){
continue;
}
CheckValue<IkReal> x14053 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x14045*x14049))+(((-1.0)*r22*x14045*x14046)))),IkReal((((gconst13*x14049*x14050))+((r10*x14043*x14050))+(((-1.0)*r11*x14045*x14051))+(((-1.0)*gconst14*r20*x14045*x14046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14052.value)))+(x14053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14054=IKsin(j4);
IkReal x14055=IKcos(j4);
IkReal x14056=(cj2*sj1);
IkReal x14057=(cj1*sj2);
IkReal x14058=((1.0)*gconst13);
IkReal x14059=(cj3*r20);
IkReal x14060=(gconst13*r01);
IkReal x14061=(sj1*sj2);
IkReal x14062=(gconst14*r10);
IkReal x14063=((1.0)*gconst14);
IkReal x14064=(cj3*r21);
IkReal x14065=(cj1*cj2);
IkReal x14066=(sj3*x14055);
IkReal x14067=(r12*x14054);
IkReal x14068=(cj3*x14055);
IkReal x14069=(gconst13*x14054);
IkReal x14070=(sj3*x14054);
IkReal x14071=(x14057+x14056);
IkReal x14072=((1.0)*cj3*x14054);
evalcond[0]=(((r21*x14069))+(((-1.0)*r20*x14054*x14063))+((r22*x14055)));
evalcond[1]=((((-1.0)*r00*x14054*x14063))+((r02*x14055))+((x14054*x14060)));
evalcond[2]=((-1.0)+(((-1.0)*x14054*x14062))+((r12*x14055))+((r11*x14069)));
evalcond[3]=((((-1.0)*r11*x14058*x14066))+((sj3*x14067))+((x14062*x14066))+(((-1.0)*cj3*r11*x14063))+(((-1.0)*cj3*r10*x14058)));
evalcond[4]=(((gconst13*r11*x14068))+(((-1.0)*r10*sj3*x14058))+(((-1.0)*x14062*x14068))+(((-1.0)*cj3*x14067))+(((-1.0)*r11*sj3*x14063)));
evalcond[5]=(((r02*x14070))+(((-1.0)*cj3*r00*x14058))+(((-1.0)*r01*x14058*x14066))+((gconst14*r00*x14066))+x14071+(((-1.0)*cj3*r01*x14063)));
evalcond[6]=((((-1.0)*r21*x14058*x14066))+((r22*x14070))+(((-1.0)*x14058*x14059))+(((-1.0)*x14065))+((gconst14*r20*x14066))+x14061+(((-1.0)*x14063*x14064)));
evalcond[7]=((((-1.0)*r22*x14072))+(((-1.0)*r21*sj3*x14063))+((gconst13*x14055*x14064))+(((-1.0)*x14055*x14059*x14063))+x14071+(((-1.0)*r20*sj3*x14058)));
evalcond[8]=(((x14060*x14068))+(((-1.0)*r00*sj3*x14058))+(((-1.0)*r01*sj3*x14063))+(((-1.0)*x14061))+x14065+(((-1.0)*r00*x14063*x14068))+(((-1.0)*r02*x14072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14073=((1.0)*gconst13);
CheckValue<IkReal> x14074 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst14*r00))+(((-1.0)*r01*x14073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14074.valid){
continue;
}
CheckValue<IkReal> x14075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14073))+(((-1.0)*gconst14*r21)))),-1);
if(!x14075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14074.value)+(((1.5707963267949)*(x14075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14076=IKsin(j4);
IkReal x14077=IKcos(j4);
IkReal x14078=(cj2*sj1);
IkReal x14079=(cj1*sj2);
IkReal x14080=((1.0)*gconst13);
IkReal x14081=(cj3*r20);
IkReal x14082=(gconst13*r01);
IkReal x14083=(sj1*sj2);
IkReal x14084=(gconst14*r10);
IkReal x14085=((1.0)*gconst14);
IkReal x14086=(cj3*r21);
IkReal x14087=(cj1*cj2);
IkReal x14088=(sj3*x14077);
IkReal x14089=(r12*x14076);
IkReal x14090=(cj3*x14077);
IkReal x14091=(gconst13*x14076);
IkReal x14092=(sj3*x14076);
IkReal x14093=(x14079+x14078);
IkReal x14094=((1.0)*cj3*x14076);
evalcond[0]=(((r22*x14077))+((r21*x14091))+(((-1.0)*r20*x14076*x14085)));
evalcond[1]=(((r02*x14077))+((x14076*x14082))+(((-1.0)*r00*x14076*x14085)));
evalcond[2]=((-1.0)+(((-1.0)*x14076*x14084))+((r11*x14091))+((r12*x14077)));
evalcond[3]=((((-1.0)*cj3*r11*x14085))+((x14084*x14088))+(((-1.0)*r11*x14080*x14088))+(((-1.0)*cj3*r10*x14080))+((sj3*x14089)));
evalcond[4]=((((-1.0)*r11*sj3*x14085))+(((-1.0)*x14084*x14090))+(((-1.0)*r10*sj3*x14080))+((gconst13*r11*x14090))+(((-1.0)*cj3*x14089)));
evalcond[5]=(((gconst14*r00*x14088))+(((-1.0)*cj3*r01*x14085))+((r02*x14092))+x14093+(((-1.0)*r01*x14080*x14088))+(((-1.0)*cj3*r00*x14080)));
evalcond[6]=((((-1.0)*x14085*x14086))+(((-1.0)*x14087))+(((-1.0)*x14080*x14081))+x14083+(((-1.0)*r21*x14080*x14088))+((r22*x14092))+((gconst14*r20*x14088)));
evalcond[7]=((((-1.0)*r22*x14094))+(((-1.0)*x14077*x14081*x14085))+(((-1.0)*r21*sj3*x14085))+((gconst13*x14077*x14086))+x14093+(((-1.0)*r20*sj3*x14080)));
evalcond[8]=((((-1.0)*r00*sj3*x14080))+(((-1.0)*r02*x14094))+((x14082*x14090))+(((-1.0)*x14083))+(((-1.0)*r01*sj3*x14085))+(((-1.0)*r00*x14085*x14090))+x14087);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14095=((-1.0)*r00);
IkReal x14096=((-1.0)*py);
CheckValue<IkReal> x14098 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14095),IKFAST_ATAN2_MAGTHRESH);
if(!x14098.valid){
continue;
}
IkReal x14097=((-1.0)*(x14098.value));
sj5=gconst13;
cj5=gconst14;
j5=x14097;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14096);
rxp0_2=(py*r00);
rxp1_0=(r21*x14096);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst12=x14097;
IkReal gconst13=r01;
IkReal gconst14=x14095;
j4eval[0]=1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14099=((-1.0)*r00);
IkReal x14100=((-1.0)*py);
CheckValue<IkReal> x14102 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14099),IKFAST_ATAN2_MAGTHRESH);
if(!x14102.valid){
continue;
}
IkReal x14101=((-1.0)*(x14102.value));
sj5=gconst13;
cj5=gconst14;
j5=x14101;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14100);
rxp0_2=(py*r00);
rxp1_0=(r21*x14100);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst12=x14101;
IkReal gconst13=r01;
IkReal gconst14=x14099;
j4eval[0]=1.0;
j4eval[1]=(((cj3*r01*r21))+((cj3*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14103=((-1.0)*r00);
IkReal x14104=((-1.0)*py);
CheckValue<IkReal> x14106 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14103),IKFAST_ATAN2_MAGTHRESH);
if(!x14106.valid){
continue;
}
IkReal x14105=((-1.0)*(x14106.value));
sj5=gconst13;
cj5=gconst14;
j5=x14105;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14104);
rxp0_2=(py*r00);
rxp1_0=(r21*x14104);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst12=x14105;
IkReal gconst13=r01;
IkReal gconst14=x14103;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14108=IKPowWithIntegerCheck(r12,-1);
if(!x14108.valid){
continue;
}
IkReal x14107=x14108.value;
CheckValue<IkReal> x14109=IKPowWithIntegerCheck(sj3,-1);
if(!x14109.valid){
continue;
}
if( IKabs((x14107*(x14109.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14107)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14107*(x14109.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14107))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14107*(x14109.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14107));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14110=IKsin(j4);
IkReal x14111=IKcos(j4);
IkReal x14112=((1.0)*cj3);
IkReal x14113=(gconst13*r20);
IkReal x14114=(gconst13*r01);
IkReal x14115=(sj1*sj2);
IkReal x14116=(gconst14*r21);
IkReal x14117=((1.0)*sj3);
IkReal x14118=(gconst13*r00);
IkReal x14119=(gconst14*r01);
IkReal x14120=(cj2*sj1);
IkReal x14121=((1.0)*sj0);
IkReal x14122=(gconst13*r21);
IkReal x14123=((1.0)*cj0);
IkReal x14124=(cj1*sj2);
IkReal x14125=((1.0)*cj1*cj2);
IkReal x14126=(r12*x14110);
IkReal x14127=(cj3*x14111);
IkReal x14128=((1.0)*gconst14*x14110);
IkReal x14129=(gconst14*r20*x14111);
IkReal x14130=(gconst14*r00*x14111);
evalcond[0]=(cj0+((r12*x14111)));
evalcond[1]=((((-1.0)*r20*x14128))+((x14110*x14122)));
evalcond[2]=(((x14110*x14114))+(((-1.0)*r00*x14128))+(((-1.0)*x14121)));
evalcond[3]=((((-1.0)*x14121*x14124))+(((-1.0)*x14120*x14121))+((sj3*x14126)));
evalcond[4]=(((sj0*x14115))+(((-1.0)*cj1*cj2*x14121))+(((-1.0)*x14112*x14126)));
evalcond[5]=(((x14122*x14127))+(((-1.0)*x14116*x14117))+x14124+x14120+(((-1.0)*x14112*x14129))+(((-1.0)*x14113*x14117)));
evalcond[6]=((((-1.0)*x14125))+x14115+(((-1.0)*x14112*x14113))+(((-1.0)*x14112*x14116))+(((-1.0)*x14111*x14117*x14122))+((sj3*x14129)));
evalcond[7]=(((cj0*x14115))+((x14114*x14127))+(((-1.0)*x14112*x14130))+(((-1.0)*x14117*x14118))+(((-1.0)*x14117*x14119))+(((-1.0)*cj1*cj2*x14123)));
evalcond[8]=(((sj3*x14130))+(((-1.0)*x14120*x14123))+(((-1.0)*x14111*x14114*x14117))+(((-1.0)*x14112*x14119))+(((-1.0)*x14112*x14118))+(((-1.0)*x14123*x14124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14131=((1.0)*gconst14);
CheckValue<IkReal> x14132=IKPowWithIntegerCheck((((gconst13*r01))+(((-1.0)*r00*x14131))),-1);
if(!x14132.valid){
continue;
}
CheckValue<IkReal> x14133=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x14131))+((cj3*gconst13*r21))),-1);
if(!x14133.valid){
continue;
}
if( IKabs((sj0*(x14132.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14133.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst13*r20*sj3))+((gconst14*r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x14132.value)))+IKsqr(((x14133.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst13*r20*sj3))+((gconst14*r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x14132.value)), ((x14133.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst13*r20*sj3))+((gconst14*r21*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14134=IKsin(j4);
IkReal x14135=IKcos(j4);
IkReal x14136=((1.0)*cj3);
IkReal x14137=(gconst13*r20);
IkReal x14138=(gconst13*r01);
IkReal x14139=(sj1*sj2);
IkReal x14140=(gconst14*r21);
IkReal x14141=((1.0)*sj3);
IkReal x14142=(gconst13*r00);
IkReal x14143=(gconst14*r01);
IkReal x14144=(cj2*sj1);
IkReal x14145=((1.0)*sj0);
IkReal x14146=(gconst13*r21);
IkReal x14147=((1.0)*cj0);
IkReal x14148=(cj1*sj2);
IkReal x14149=((1.0)*cj1*cj2);
IkReal x14150=(r12*x14134);
IkReal x14151=(cj3*x14135);
IkReal x14152=((1.0)*gconst14*x14134);
IkReal x14153=(gconst14*r20*x14135);
IkReal x14154=(gconst14*r00*x14135);
evalcond[0]=(cj0+((r12*x14135)));
evalcond[1]=((((-1.0)*r20*x14152))+((x14134*x14146)));
evalcond[2]=((((-1.0)*x14145))+((x14134*x14138))+(((-1.0)*r00*x14152)));
evalcond[3]=((((-1.0)*x14144*x14145))+((sj3*x14150))+(((-1.0)*x14145*x14148)));
evalcond[4]=((((-1.0)*x14136*x14150))+((sj0*x14139))+(((-1.0)*cj1*cj2*x14145)));
evalcond[5]=(((x14146*x14151))+x14148+x14144+(((-1.0)*x14136*x14153))+(((-1.0)*x14140*x14141))+(((-1.0)*x14137*x14141)));
evalcond[6]=(((sj3*x14153))+(((-1.0)*x14135*x14141*x14146))+(((-1.0)*x14136*x14137))+(((-1.0)*x14149))+x14139+(((-1.0)*x14136*x14140)));
evalcond[7]=(((x14138*x14151))+(((-1.0)*x14141*x14142))+(((-1.0)*x14141*x14143))+(((-1.0)*x14136*x14154))+((cj0*x14139))+(((-1.0)*cj1*cj2*x14147)));
evalcond[8]=((((-1.0)*x14144*x14147))+((sj3*x14154))+(((-1.0)*x14147*x14148))+(((-1.0)*x14135*x14138*x14141))+(((-1.0)*x14136*x14142))+(((-1.0)*x14136*x14143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14155=IKPowWithIntegerCheck((((gconst13*r01))+(((-1.0)*gconst14*r00))),-1);
if(!x14155.valid){
continue;
}
CheckValue<IkReal> x14156=IKPowWithIntegerCheck(r12,-1);
if(!x14156.valid){
continue;
}
if( IKabs((sj0*(x14155.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x14156.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x14155.value)))+IKsqr(((-1.0)*cj0*(x14156.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x14155.value)), ((-1.0)*cj0*(x14156.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14157=IKsin(j4);
IkReal x14158=IKcos(j4);
IkReal x14159=((1.0)*cj3);
IkReal x14160=(gconst13*r20);
IkReal x14161=(gconst13*r01);
IkReal x14162=(sj1*sj2);
IkReal x14163=(gconst14*r21);
IkReal x14164=((1.0)*sj3);
IkReal x14165=(gconst13*r00);
IkReal x14166=(gconst14*r01);
IkReal x14167=(cj2*sj1);
IkReal x14168=((1.0)*sj0);
IkReal x14169=(gconst13*r21);
IkReal x14170=((1.0)*cj0);
IkReal x14171=(cj1*sj2);
IkReal x14172=((1.0)*cj1*cj2);
IkReal x14173=(r12*x14157);
IkReal x14174=(cj3*x14158);
IkReal x14175=((1.0)*gconst14*x14157);
IkReal x14176=(gconst14*r20*x14158);
IkReal x14177=(gconst14*r00*x14158);
evalcond[0]=(cj0+((r12*x14158)));
evalcond[1]=((((-1.0)*r20*x14175))+((x14157*x14169)));
evalcond[2]=((((-1.0)*r00*x14175))+(((-1.0)*x14168))+((x14157*x14161)));
evalcond[3]=((((-1.0)*x14168*x14171))+(((-1.0)*x14167*x14168))+((sj3*x14173)));
evalcond[4]=(((sj0*x14162))+(((-1.0)*cj1*cj2*x14168))+(((-1.0)*x14159*x14173)));
evalcond[5]=((((-1.0)*x14163*x14164))+(((-1.0)*x14159*x14176))+x14171+x14167+((x14169*x14174))+(((-1.0)*x14160*x14164)));
evalcond[6]=((((-1.0)*x14172))+x14162+((sj3*x14176))+(((-1.0)*x14159*x14160))+(((-1.0)*x14159*x14163))+(((-1.0)*x14158*x14164*x14169)));
evalcond[7]=((((-1.0)*x14164*x14166))+(((-1.0)*x14164*x14165))+(((-1.0)*x14159*x14177))+((x14161*x14174))+((cj0*x14162))+(((-1.0)*cj1*cj2*x14170)));
evalcond[8]=((((-1.0)*x14167*x14170))+((sj3*x14177))+(((-1.0)*x14158*x14161*x14164))+(((-1.0)*x14159*x14165))+(((-1.0)*x14159*x14166))+(((-1.0)*x14170*x14171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14178=((-1.0)*r00);
IkReal x14179=x13824;
CheckValue<IkReal> x14181 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14178),IKFAST_ATAN2_MAGTHRESH);
if(!x14181.valid){
continue;
}
IkReal x14180=((-1.0)*(x14181.value));
sj5=gconst13;
cj5=gconst14;
j5=x14180;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst12=x14180;
IkReal gconst13=(r01*x14179);
IkReal gconst14=(x14178*x14179);
IkReal x14182=r02*r02;
IkReal x14183=(r12*sj0);
IkReal x14184=((1.0)*cj0);
IkReal x14185=x13824;
j4eval[0]=((IKabs(((((-1.0)*x14184*x14185))+((r02*x14183*x14185))+((cj0*x14182*x14185)))))+(IKabs(((((-1.0)*r02*x14184))+(((-1.0)*x14183))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14186=(cj1*sj2);
IkReal x14187=(cj2*sj1);
IkReal x14188=(r12*sj3);
IkReal x14189=(cj3*r10);
IkReal x14190=(cj3*r21);
IkReal x14191=((1.0)*gconst13);
IkReal x14192=((1.0)*gconst14*r21);
IkReal x14193=(cj3*gconst14*r20);
CheckValue<IkReal> x14194=IKPowWithIntegerCheck(((((-1.0)*gconst14*r21*x14189*x14191))+((r11*x14190*(gconst13*gconst13)))+(((-1.0)*r11*x14191*x14193))+((r20*x14189*(gconst14*gconst14)))),-1);
if(!x14194.valid){
continue;
}
CheckValue<IkReal> x14195=IKPowWithIntegerCheck(((((-1.0)*x14193))+((gconst13*x14190))),-1);
if(!x14195.valid){
continue;
}
if( IKabs(((x14194.value)*((((cj0*x14193))+(((-1.0)*r20*x14188*x14191))+((r12*x14187))+((r12*x14186))+(((-1.0)*x14188*x14192))+(((-1.0)*cj0*x14190*x14191)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14195.value)*((((gconst13*r20*sj3))+((gconst14*r21*sj3))+(((-1.0)*x14186))+(((-1.0)*x14187)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14194.value)*((((cj0*x14193))+(((-1.0)*r20*x14188*x14191))+((r12*x14187))+((r12*x14186))+(((-1.0)*x14188*x14192))+(((-1.0)*cj0*x14190*x14191))))))+IKsqr(((x14195.value)*((((gconst13*r20*sj3))+((gconst14*r21*sj3))+(((-1.0)*x14186))+(((-1.0)*x14187))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14194.value)*((((cj0*x14193))+(((-1.0)*r20*x14188*x14191))+((r12*x14187))+((r12*x14186))+(((-1.0)*x14188*x14192))+(((-1.0)*cj0*x14190*x14191))))), ((x14195.value)*((((gconst13*r20*sj3))+((gconst14*r21*sj3))+(((-1.0)*x14186))+(((-1.0)*x14187))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14196=IKsin(j4);
IkReal x14197=IKcos(j4);
IkReal x14198=(r10*sj3);
IkReal x14199=((1.0)*gconst13);
IkReal x14200=(sj1*sj2);
IkReal x14201=((1.0)*gconst14);
IkReal x14202=(cj3*r21);
IkReal x14203=((1.0)*sj0);
IkReal x14204=(gconst13*r01);
IkReal x14205=(r00*sj3);
IkReal x14206=(r01*sj3);
IkReal x14207=(cj2*sj1);
IkReal x14208=(cj3*r10);
IkReal x14209=((1.0)*cj0);
IkReal x14210=(r11*sj3);
IkReal x14211=(r21*sj3);
IkReal x14212=((1.0)*cj3);
IkReal x14213=(cj1*sj2);
IkReal x14214=(r20*x14199);
IkReal x14215=((1.0)*cj1*cj2);
IkReal x14216=(gconst14*x14197);
IkReal x14217=(cj3*x14197);
IkReal x14218=(gconst13*x14196);
IkReal x14219=(r12*x14196);
IkReal x14220=(r02*x14196);
evalcond[0]=((((-1.0)*r20*x14196*x14201))+((r21*x14218)));
evalcond[1]=((((-1.0)*r10*x14196*x14201))+((r11*x14218))+cj0+((r12*x14197)));
evalcond[2]=(((r02*x14197))+(((-1.0)*x14203))+((x14196*x14204))+(((-1.0)*r00*x14196*x14201)));
evalcond[3]=((((-1.0)*x14201*x14211))+((gconst13*x14197*x14202))+(((-1.0)*r20*x14201*x14217))+x14213+x14207+(((-1.0)*sj3*x14214)));
evalcond[4]=((((-1.0)*cj3*x14214))+(((-1.0)*x14197*x14199*x14211))+(((-1.0)*x14201*x14202))+((r20*sj3*x14216))+(((-1.0)*x14215))+x14200);
evalcond[5]=(((x14205*x14216))+(((-1.0)*x14207*x14209))+(((-1.0)*cj3*r00*x14199))+(((-1.0)*x14209*x14213))+((sj3*x14220))+(((-1.0)*x14197*x14199*x14206))+(((-1.0)*cj3*r01*x14201)));
evalcond[6]=((((-1.0)*x14199*x14205))+((x14204*x14217))+((cj0*x14200))+(((-1.0)*cj1*cj2*x14209))+(((-1.0)*x14212*x14220))+(((-1.0)*x14201*x14206))+(((-1.0)*r00*x14201*x14217)));
evalcond[7]=((((-1.0)*x14199*x14208))+(((-1.0)*cj3*r11*x14201))+(((-1.0)*x14197*x14199*x14210))+((sj3*x14219))+((x14198*x14216))+(((-1.0)*x14203*x14207))+(((-1.0)*x14203*x14213)));
evalcond[8]=((((-1.0)*x14201*x14210))+((sj0*x14200))+(((-1.0)*x14212*x14219))+(((-1.0)*x14197*x14201*x14208))+(((-1.0)*cj1*cj2*x14203))+(((-1.0)*x14198*x14199))+((gconst13*r11*x14217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14221=((1.0)*sj0);
IkReal x14222=((1.0)*cj0);
CheckValue<IkReal> x14223 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14221))+(((-1.0)*r02*x14222)))),IkReal(((((-1.0)*gconst14*r00*x14222))+((cj0*gconst13*r01))+((gconst13*r11*sj0))+(((-1.0)*gconst14*r10*x14221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14223.valid){
continue;
}
CheckValue<IkReal> x14224=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14223.value)+(((1.5707963267949)*(x14224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14225=IKsin(j4);
IkReal x14226=IKcos(j4);
IkReal x14227=(r10*sj3);
IkReal x14228=((1.0)*gconst13);
IkReal x14229=(sj1*sj2);
IkReal x14230=((1.0)*gconst14);
IkReal x14231=(cj3*r21);
IkReal x14232=((1.0)*sj0);
IkReal x14233=(gconst13*r01);
IkReal x14234=(r00*sj3);
IkReal x14235=(r01*sj3);
IkReal x14236=(cj2*sj1);
IkReal x14237=(cj3*r10);
IkReal x14238=((1.0)*cj0);
IkReal x14239=(r11*sj3);
IkReal x14240=(r21*sj3);
IkReal x14241=((1.0)*cj3);
IkReal x14242=(cj1*sj2);
IkReal x14243=(r20*x14228);
IkReal x14244=((1.0)*cj1*cj2);
IkReal x14245=(gconst14*x14226);
IkReal x14246=(cj3*x14226);
IkReal x14247=(gconst13*x14225);
IkReal x14248=(r12*x14225);
IkReal x14249=(r02*x14225);
evalcond[0]=(((r21*x14247))+(((-1.0)*r20*x14225*x14230)));
evalcond[1]=((((-1.0)*r10*x14225*x14230))+cj0+((r11*x14247))+((r12*x14226)));
evalcond[2]=((((-1.0)*x14232))+((r02*x14226))+(((-1.0)*r00*x14225*x14230))+((x14225*x14233)));
evalcond[3]=(((gconst13*x14226*x14231))+(((-1.0)*sj3*x14243))+(((-1.0)*x14230*x14240))+(((-1.0)*r20*x14230*x14246))+x14236+x14242);
evalcond[4]=(((r20*sj3*x14245))+(((-1.0)*x14226*x14228*x14240))+(((-1.0)*x14244))+(((-1.0)*cj3*x14243))+x14229+(((-1.0)*x14230*x14231)));
evalcond[5]=((((-1.0)*x14238*x14242))+(((-1.0)*cj3*r00*x14228))+((sj3*x14249))+(((-1.0)*x14236*x14238))+((x14234*x14245))+(((-1.0)*cj3*r01*x14230))+(((-1.0)*x14226*x14228*x14235)));
evalcond[6]=((((-1.0)*x14228*x14234))+(((-1.0)*cj1*cj2*x14238))+((cj0*x14229))+((x14233*x14246))+(((-1.0)*r00*x14230*x14246))+(((-1.0)*x14241*x14249))+(((-1.0)*x14230*x14235)));
evalcond[7]=((((-1.0)*x14232*x14236))+(((-1.0)*cj3*r11*x14230))+((sj3*x14248))+(((-1.0)*x14228*x14237))+((x14227*x14245))+(((-1.0)*x14232*x14242))+(((-1.0)*x14226*x14228*x14239)));
evalcond[8]=(((sj0*x14229))+(((-1.0)*cj1*cj2*x14232))+(((-1.0)*x14226*x14230*x14237))+(((-1.0)*x14227*x14228))+(((-1.0)*x14241*x14248))+((gconst13*r11*x14246))+(((-1.0)*x14230*x14239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14250=gconst13*gconst13;
IkReal x14251=r21*r21;
IkReal x14252=gconst14*gconst14;
IkReal x14253=r20*r20;
IkReal x14254=((1.0)*r21);
IkReal x14255=(r22*sj3);
IkReal x14256=(gconst14*r20);
IkReal x14257=(cj1*sj2);
IkReal x14258=(cj2*sj1);
IkReal x14259=(r20*sj3);
IkReal x14260=((1.0)*gconst13);
IkReal x14261=(gconst14*sj3);
CheckValue<IkReal> x14262=IKPowWithIntegerCheck(IKsign((((cj3*x14252*x14253))+(((-2.0)*cj3*gconst13*r21*x14256))+((cj3*(r22*r22)))+((cj3*x14250*x14251)))),-1);
if(!x14262.valid){
continue;
}
CheckValue<IkReal> x14263 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x14255*x14260))+(((-1.0)*gconst14*x14254*x14255))+((r22*x14258))+((r22*x14257)))),IkReal((((gconst13*x14251*x14261))+((x14256*x14257))+((x14256*x14258))+((r21*x14250*x14259))+(((-1.0)*gconst13*x14254*x14258))+(((-1.0)*gconst13*x14254*x14257))+(((-1.0)*x14252*x14254*x14259))+(((-1.0)*x14253*x14260*x14261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14262.value)))+(x14263.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14264=IKsin(j4);
IkReal x14265=IKcos(j4);
IkReal x14266=((1.0)*gconst13);
IkReal x14267=(cj3*r20);
IkReal x14268=(gconst13*r01);
IkReal x14269=(sj1*sj2);
IkReal x14270=(gconst14*r10);
IkReal x14271=((1.0)*gconst14);
IkReal x14272=(cj2*sj1);
IkReal x14273=((1.0)*sj0);
IkReal x14274=((1.0)*cj0);
IkReal x14275=(cj1*sj2);
IkReal x14276=((1.0)*cj1*cj2);
IkReal x14277=(sj3*x14265);
IkReal x14278=(r21*x14271);
IkReal x14279=(cj3*x14265);
IkReal x14280=(gconst13*x14264);
IkReal x14281=(sj3*x14264);
IkReal x14282=((1.0)*cj3*x14264);
evalcond[0]=(((r21*x14280))+(((-1.0)*r20*x14264*x14271))+((r22*x14265)));
evalcond[1]=((((-1.0)*x14264*x14270))+cj0+((r12*x14265))+((r11*x14280)));
evalcond[2]=(((r02*x14265))+(((-1.0)*x14273))+((x14264*x14268))+(((-1.0)*r00*x14264*x14271)));
evalcond[3]=((((-1.0)*x14276))+(((-1.0)*cj3*x14278))+((r22*x14281))+(((-1.0)*x14266*x14267))+((gconst14*r20*x14277))+x14269+(((-1.0)*r21*x14266*x14277)));
evalcond[4]=((((-1.0)*r22*x14282))+(((-1.0)*r20*sj3*x14266))+(((-1.0)*x14265*x14267*x14271))+(((-1.0)*sj3*x14278))+((gconst13*r21*x14279))+x14272+x14275);
evalcond[5]=((((-1.0)*x14274*x14275))+(((-1.0)*x14272*x14274))+(((-1.0)*r01*x14266*x14277))+((gconst14*r00*x14277))+(((-1.0)*cj3*r00*x14266))+((r02*x14281))+(((-1.0)*cj3*r01*x14271)));
evalcond[6]=((((-1.0)*r00*x14271*x14279))+(((-1.0)*r01*sj3*x14271))+((x14268*x14279))+(((-1.0)*r02*x14282))+((cj0*x14269))+(((-1.0)*r00*sj3*x14266))+(((-1.0)*cj1*cj2*x14274)));
evalcond[7]=((((-1.0)*x14273*x14275))+(((-1.0)*x14272*x14273))+(((-1.0)*cj3*r11*x14271))+((r12*x14281))+(((-1.0)*r11*x14266*x14277))+((x14270*x14277))+(((-1.0)*cj3*r10*x14266)));
evalcond[8]=((((-1.0)*r10*sj3*x14266))+(((-1.0)*x14270*x14279))+((gconst13*r11*x14279))+(((-1.0)*r12*x14282))+(((-1.0)*r11*sj3*x14271))+((sj0*x14269))+(((-1.0)*cj1*cj2*x14273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14283=((1.0)*sj0);
IkReal x14284=((1.0)*cj0);
CheckValue<IkReal> x14285=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14285.valid){
continue;
}
CheckValue<IkReal> x14286 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14284))+(((-1.0)*r12*x14283)))),IkReal(((((-1.0)*gconst14*r00*x14284))+(((-1.0)*gconst14*r10*x14283))+((cj0*gconst13*r01))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14285.value)))+(x14286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14287=IKsin(j4);
IkReal x14288=IKcos(j4);
IkReal x14289=((1.0)*gconst13);
IkReal x14290=(cj3*r20);
IkReal x14291=(gconst13*r01);
IkReal x14292=(sj1*sj2);
IkReal x14293=(gconst14*r10);
IkReal x14294=((1.0)*gconst14);
IkReal x14295=(cj2*sj1);
IkReal x14296=((1.0)*sj0);
IkReal x14297=((1.0)*cj0);
IkReal x14298=(cj1*sj2);
IkReal x14299=((1.0)*cj1*cj2);
IkReal x14300=(sj3*x14288);
IkReal x14301=(r21*x14294);
IkReal x14302=(cj3*x14288);
IkReal x14303=(gconst13*x14287);
IkReal x14304=(sj3*x14287);
IkReal x14305=((1.0)*cj3*x14287);
evalcond[0]=((((-1.0)*r20*x14287*x14294))+((r22*x14288))+((r21*x14303)));
evalcond[1]=((((-1.0)*x14287*x14293))+cj0+((r11*x14303))+((r12*x14288)));
evalcond[2]=(((x14287*x14291))+(((-1.0)*r00*x14287*x14294))+(((-1.0)*x14296))+((r02*x14288)));
evalcond[3]=((((-1.0)*x14289*x14290))+(((-1.0)*cj3*x14301))+((gconst14*r20*x14300))+(((-1.0)*x14299))+(((-1.0)*r21*x14289*x14300))+((r22*x14304))+x14292);
evalcond[4]=((((-1.0)*r22*x14305))+(((-1.0)*sj3*x14301))+((gconst13*r21*x14302))+(((-1.0)*r20*sj3*x14289))+x14295+x14298+(((-1.0)*x14288*x14290*x14294)));
evalcond[5]=(((r02*x14304))+(((-1.0)*r01*x14289*x14300))+(((-1.0)*cj3*r01*x14294))+(((-1.0)*x14297*x14298))+(((-1.0)*cj3*r00*x14289))+((gconst14*r00*x14300))+(((-1.0)*x14295*x14297)));
evalcond[6]=((((-1.0)*r00*x14294*x14302))+(((-1.0)*r02*x14305))+(((-1.0)*r00*sj3*x14289))+((x14291*x14302))+(((-1.0)*r01*sj3*x14294))+(((-1.0)*cj1*cj2*x14297))+((cj0*x14292)));
evalcond[7]=((((-1.0)*r11*x14289*x14300))+(((-1.0)*cj3*r10*x14289))+((x14293*x14300))+((r12*x14304))+(((-1.0)*cj3*r11*x14294))+(((-1.0)*x14296*x14298))+(((-1.0)*x14295*x14296)));
evalcond[8]=((((-1.0)*r11*sj3*x14294))+(((-1.0)*r12*x14305))+((gconst13*r11*x14302))+(((-1.0)*x14293*x14302))+(((-1.0)*cj1*cj2*x14296))+((sj0*x14292))+(((-1.0)*r10*sj3*x14289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14306=((1.0)*gconst13);
CheckValue<IkReal> x14307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x14306))+(((-1.0)*gconst14*r11)))),-1);
if(!x14307.valid){
continue;
}
CheckValue<IkReal> x14308 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x14306))+((gconst14*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14307.value)))+(x14308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14309=IKsin(j4);
IkReal x14310=IKcos(j4);
IkReal x14311=((1.0)*gconst13);
IkReal x14312=(cj3*r20);
IkReal x14313=(gconst13*r01);
IkReal x14314=(sj1*sj2);
IkReal x14315=(gconst14*r10);
IkReal x14316=((1.0)*gconst14);
IkReal x14317=(cj2*sj1);
IkReal x14318=((1.0)*sj0);
IkReal x14319=((1.0)*cj0);
IkReal x14320=(cj1*sj2);
IkReal x14321=((1.0)*cj1*cj2);
IkReal x14322=(sj3*x14310);
IkReal x14323=(r21*x14316);
IkReal x14324=(cj3*x14310);
IkReal x14325=(gconst13*x14309);
IkReal x14326=(sj3*x14309);
IkReal x14327=((1.0)*cj3*x14309);
evalcond[0]=((((-1.0)*r20*x14309*x14316))+((r21*x14325))+((r22*x14310)));
evalcond[1]=(cj0+((r11*x14325))+(((-1.0)*x14309*x14315))+((r12*x14310)));
evalcond[2]=((((-1.0)*r00*x14309*x14316))+((x14309*x14313))+((r02*x14310))+(((-1.0)*x14318)));
evalcond[3]=(((gconst14*r20*x14322))+(((-1.0)*x14321))+(((-1.0)*cj3*x14323))+x14314+(((-1.0)*x14311*x14312))+(((-1.0)*r21*x14311*x14322))+((r22*x14326)));
evalcond[4]=((((-1.0)*x14310*x14312*x14316))+(((-1.0)*r20*sj3*x14311))+(((-1.0)*sj3*x14323))+((gconst13*r21*x14324))+(((-1.0)*r22*x14327))+x14317+x14320);
evalcond[5]=(((gconst14*r00*x14322))+((r02*x14326))+(((-1.0)*cj3*r01*x14316))+(((-1.0)*cj3*r00*x14311))+(((-1.0)*x14319*x14320))+(((-1.0)*x14317*x14319))+(((-1.0)*r01*x14311*x14322)));
evalcond[6]=((((-1.0)*r00*sj3*x14311))+(((-1.0)*r00*x14316*x14324))+((cj0*x14314))+(((-1.0)*cj1*cj2*x14319))+(((-1.0)*r02*x14327))+(((-1.0)*r01*sj3*x14316))+((x14313*x14324)));
evalcond[7]=((((-1.0)*cj3*r11*x14316))+((x14315*x14322))+(((-1.0)*cj3*r10*x14311))+(((-1.0)*r11*x14311*x14322))+(((-1.0)*x14318*x14320))+(((-1.0)*x14317*x14318))+((r12*x14326)));
evalcond[8]=((((-1.0)*x14315*x14324))+(((-1.0)*r10*sj3*x14311))+((sj0*x14314))+(((-1.0)*r11*sj3*x14316))+((gconst13*r11*x14324))+(((-1.0)*cj1*cj2*x14318))+(((-1.0)*r12*x14327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14328=((-1.0)*r01);
IkReal x14330 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14330)==0){
continue;
}
IkReal x14329=pow(x14330,-0.5);
CheckValue<IkReal> x14331 = IKatan2WithCheck(IkReal(x14328),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14331.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14331.value))));
IkReal gconst16=(x14328*x14329);
IkReal gconst17=((1.0)*r00*x14329);
CheckValue<IkReal> x14332 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14332.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14332.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14333=((-1.0)*r01);
CheckValue<IkReal> x14336 = IKatan2WithCheck(IkReal(x14333),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14336.valid){
continue;
}
IkReal x14334=((1.0)*(x14336.value));
IkReal x14335=x14329;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14334)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14334)));
IkReal gconst16=(x14333*x14335);
IkReal gconst17=((1.0)*r00*x14335);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14337=((-1.0)*r01);
CheckValue<IkReal> x14340 = IKatan2WithCheck(IkReal(x14337),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14340.valid){
continue;
}
IkReal x14338=((1.0)*(x14340.value));
IkReal x14339=x14329;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14338)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14338)));
IkReal gconst16=(x14337*x14339);
IkReal gconst17=((1.0)*r00*x14339);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14341=((1.0)*sj0);
IkReal x14342=((1.0)*gconst17);
CheckValue<IkReal> x14343=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14342)))),-1);
if(!x14343.valid){
continue;
}
CheckValue<IkReal> x14344 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14341))+(((-1.0)*cj0*r02)))),IkReal((((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*gconst17*r10*x14341))+(((-1.0)*cj0*r00*x14342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14343.value)))+(x14344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14345=IKsin(j4);
IkReal x14346=IKcos(j4);
IkReal x14347=((1.0)*gconst17);
IkReal x14348=(gconst16*r11);
IkReal x14349=(sj1*sj2);
IkReal x14350=((1.0)*cj3);
IkReal x14351=(cj2*sj1);
IkReal x14352=((1.0)*cj0);
IkReal x14353=((1.0)*sj0);
IkReal x14354=(cj1*sj2);
IkReal x14355=(cj3*x14346);
IkReal x14356=(gconst16*x14345);
IkReal x14357=((1.0)*cj1*cj2);
IkReal x14358=((1.0)*gconst16*sj3);
IkReal x14359=(r12*x14345);
IkReal x14360=(r22*x14345);
IkReal x14361=(sj3*x14346);
IkReal x14362=(r02*x14345);
evalcond[0]=((((-1.0)*r20*x14345*x14347))+((r22*x14346))+((r21*x14356)));
evalcond[1]=(((x14345*x14348))+cj0+(((-1.0)*r10*x14345*x14347))+((r12*x14346)));
evalcond[2]=((((-1.0)*x14353))+((r01*x14356))+(((-1.0)*r00*x14345*x14347))+((r02*x14346)));
evalcond[3]=((((-1.0)*x14357))+(((-1.0)*r21*x14346*x14358))+((sj3*x14360))+(((-1.0)*cj3*r21*x14347))+((gconst17*r20*x14361))+x14349+(((-1.0)*gconst16*r20*x14350)));
evalcond[4]=((((-1.0)*r21*sj3*x14347))+(((-1.0)*r20*x14358))+((gconst16*r21*x14355))+(((-1.0)*r20*x14347*x14355))+x14351+x14354+(((-1.0)*x14350*x14360)));
evalcond[5]=((((-1.0)*x14351*x14352))+((gconst17*r00*x14361))+((sj3*x14362))+(((-1.0)*cj3*r01*x14347))+(((-1.0)*r01*x14346*x14358))+(((-1.0)*x14352*x14354))+(((-1.0)*gconst16*r00*x14350)));
evalcond[6]=(((cj0*x14349))+(((-1.0)*r01*sj3*x14347))+((gconst16*r01*x14355))+(((-1.0)*cj1*cj2*x14352))+(((-1.0)*r00*x14347*x14355))+(((-1.0)*r00*x14358))+(((-1.0)*x14350*x14362)));
evalcond[7]=((((-1.0)*cj3*r11*x14347))+((sj3*x14359))+(((-1.0)*gconst16*r10*x14350))+(((-1.0)*x14351*x14353))+(((-1.0)*x14348*x14361))+((gconst17*r10*x14361))+(((-1.0)*x14353*x14354)));
evalcond[8]=(((sj0*x14349))+(((-1.0)*cj1*cj2*x14353))+((x14348*x14355))+(((-1.0)*r10*x14358))+(((-1.0)*r11*sj3*x14347))+(((-1.0)*r10*x14347*x14355))+(((-1.0)*x14350*x14359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14363=((1.0)*gconst16);
CheckValue<IkReal> x14364=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r11))+(((-1.0)*r10*x14363)))),-1);
if(!x14364.valid){
continue;
}
CheckValue<IkReal> x14365 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst17*r20*sj0))+(((-1.0)*r21*sj0*x14363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14364.value)))+(x14365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14366=IKsin(j4);
IkReal x14367=IKcos(j4);
IkReal x14368=((1.0)*gconst17);
IkReal x14369=(gconst16*r11);
IkReal x14370=(sj1*sj2);
IkReal x14371=((1.0)*cj3);
IkReal x14372=(cj2*sj1);
IkReal x14373=((1.0)*cj0);
IkReal x14374=((1.0)*sj0);
IkReal x14375=(cj1*sj2);
IkReal x14376=(cj3*x14367);
IkReal x14377=(gconst16*x14366);
IkReal x14378=((1.0)*cj1*cj2);
IkReal x14379=((1.0)*gconst16*sj3);
IkReal x14380=(r12*x14366);
IkReal x14381=(r22*x14366);
IkReal x14382=(sj3*x14367);
IkReal x14383=(r02*x14366);
evalcond[0]=(((r21*x14377))+(((-1.0)*r20*x14366*x14368))+((r22*x14367)));
evalcond[1]=(cj0+((r12*x14367))+((x14366*x14369))+(((-1.0)*r10*x14366*x14368)));
evalcond[2]=(((r01*x14377))+((r02*x14367))+(((-1.0)*r00*x14366*x14368))+(((-1.0)*x14374)));
evalcond[3]=(((gconst17*r20*x14382))+(((-1.0)*cj3*r21*x14368))+(((-1.0)*gconst16*r20*x14371))+(((-1.0)*r21*x14367*x14379))+x14370+(((-1.0)*x14378))+((sj3*x14381)));
evalcond[4]=((((-1.0)*r20*x14379))+(((-1.0)*x14371*x14381))+(((-1.0)*r20*x14368*x14376))+(((-1.0)*r21*sj3*x14368))+x14372+x14375+((gconst16*r21*x14376)));
evalcond[5]=((((-1.0)*cj3*r01*x14368))+(((-1.0)*x14372*x14373))+(((-1.0)*x14373*x14375))+(((-1.0)*r01*x14367*x14379))+((gconst17*r00*x14382))+(((-1.0)*gconst16*r00*x14371))+((sj3*x14383)));
evalcond[6]=((((-1.0)*x14371*x14383))+(((-1.0)*r00*x14368*x14376))+(((-1.0)*cj1*cj2*x14373))+(((-1.0)*r01*sj3*x14368))+(((-1.0)*r00*x14379))+((gconst16*r01*x14376))+((cj0*x14370)));
evalcond[7]=((((-1.0)*x14374*x14375))+(((-1.0)*x14372*x14374))+((sj3*x14380))+(((-1.0)*x14369*x14382))+((gconst17*r10*x14382))+(((-1.0)*gconst16*r10*x14371))+(((-1.0)*cj3*r11*x14368)));
evalcond[8]=((((-1.0)*x14371*x14380))+(((-1.0)*r10*x14368*x14376))+((x14369*x14376))+(((-1.0)*r10*x14379))+(((-1.0)*r11*sj3*x14368))+(((-1.0)*cj1*cj2*x14374))+((sj0*x14370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14384=((1.0)*gconst16);
CheckValue<IkReal> x14385 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x14384))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14385.valid){
continue;
}
CheckValue<IkReal> x14386=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x14384)))),-1);
if(!x14386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14385.value)+(((1.5707963267949)*(x14386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14387=IKsin(j4);
IkReal x14388=IKcos(j4);
IkReal x14389=((1.0)*gconst17);
IkReal x14390=(gconst16*r11);
IkReal x14391=(sj1*sj2);
IkReal x14392=((1.0)*cj3);
IkReal x14393=(cj2*sj1);
IkReal x14394=((1.0)*cj0);
IkReal x14395=((1.0)*sj0);
IkReal x14396=(cj1*sj2);
IkReal x14397=(cj3*x14388);
IkReal x14398=(gconst16*x14387);
IkReal x14399=((1.0)*cj1*cj2);
IkReal x14400=((1.0)*gconst16*sj3);
IkReal x14401=(r12*x14387);
IkReal x14402=(r22*x14387);
IkReal x14403=(sj3*x14388);
IkReal x14404=(r02*x14387);
evalcond[0]=(((r21*x14398))+((r22*x14388))+(((-1.0)*r20*x14387*x14389)));
evalcond[1]=(cj0+((x14387*x14390))+((r12*x14388))+(((-1.0)*r10*x14387*x14389)));
evalcond[2]=((((-1.0)*r00*x14387*x14389))+((r01*x14398))+((r02*x14388))+(((-1.0)*x14395)));
evalcond[3]=((((-1.0)*r21*x14388*x14400))+((sj3*x14402))+(((-1.0)*cj3*r21*x14389))+((gconst17*r20*x14403))+x14391+(((-1.0)*gconst16*r20*x14392))+(((-1.0)*x14399)));
evalcond[4]=((((-1.0)*r21*sj3*x14389))+(((-1.0)*x14392*x14402))+((gconst16*r21*x14397))+(((-1.0)*r20*x14389*x14397))+x14396+x14393+(((-1.0)*r20*x14400)));
evalcond[5]=(((gconst17*r00*x14403))+(((-1.0)*x14394*x14396))+(((-1.0)*r01*x14388*x14400))+((sj3*x14404))+(((-1.0)*x14393*x14394))+(((-1.0)*cj3*r01*x14389))+(((-1.0)*gconst16*r00*x14392)));
evalcond[6]=(((cj0*x14391))+(((-1.0)*cj1*cj2*x14394))+(((-1.0)*r01*sj3*x14389))+(((-1.0)*r00*x14400))+(((-1.0)*x14392*x14404))+((gconst16*r01*x14397))+(((-1.0)*r00*x14389*x14397)));
evalcond[7]=(((sj3*x14401))+(((-1.0)*gconst16*r10*x14392))+(((-1.0)*x14393*x14395))+(((-1.0)*x14395*x14396))+(((-1.0)*x14390*x14403))+(((-1.0)*cj3*r11*x14389))+((gconst17*r10*x14403)));
evalcond[8]=(((sj0*x14391))+(((-1.0)*cj1*cj2*x14395))+(((-1.0)*r11*sj3*x14389))+(((-1.0)*r10*x14400))+(((-1.0)*r10*x14389*x14397))+(((-1.0)*x14392*x14401))+((x14390*x14397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14405=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14405;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x14405);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14406=((1.0)*sj5);
IkReal x14407=((((-1.0)*cj5*r11))+(((-1.0)*r10*x14406)));
j4eval[0]=x14407;
j4eval[1]=IKsign(x14407);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x14406)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14408=cj5*cj5;
IkReal x14409=((1.0)*sj3);
IkReal x14410=(r01*r21);
IkReal x14411=(cj5*sj3*sj5);
IkReal x14412=(((r00*r21*x14411))+((sj3*x14408*x14410))+(((-1.0)*r00*r20*x14408*x14409))+(((-1.0)*r02*r22*x14409))+(((-1.0)*x14409*x14410))+((r01*r20*x14411)));
j4eval[0]=x14412;
j4eval[1]=IKsign(x14412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14413=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14413;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x14413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14414=((1.0)*sj5);
IkReal x14415=((((-1.0)*cj5*r11))+(((-1.0)*r10*x14414)));
j4eval[0]=x14415;
j4eval[1]=IKsign(x14415);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x14414))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14416=cj5*cj5;
IkReal x14417=r01*r01;
IkReal x14418=(cj5*r00);
IkReal x14419=(r01*sj5);
IkReal x14420=(((x14416*(r00*r00)))+(((-1.0)*x14416*x14417))+x14417+(r02*r02)+(((-2.0)*x14418*x14419)));
j4eval[0]=x14420;
j4eval[1]=((IKabs(((((-1.0)*x14418))+x14419)))+(IKabs(r02)));
j4eval[2]=IKsign(x14420);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14421=cj5*cj5;
IkReal x14422=r01*r01;
IkReal x14423=(r01*sj5);
IkReal x14424=(cj5*r00);
CheckValue<IkReal> x14425 = IKatan2WithCheck(IkReal((x14423+(((-1.0)*x14424)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14425.valid){
continue;
}
CheckValue<IkReal> x14426=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14421*x14422))+x14422+(r02*r02)+(((-2.0)*x14423*x14424))+((x14421*(r00*r00))))),-1);
if(!x14426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14425.value)+(((1.5707963267949)*(x14426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14427=IKsin(j4);
IkReal x14428=IKcos(j4);
IkReal x14429=((1.0)*cj5);
IkReal x14430=(r21*sj5);
IkReal x14431=(sj5*x14427);
IkReal x14432=((1.0)*x14427);
IkReal x14433=(sj5*x14428);
evalcond[0]=(((r22*x14428))+((x14427*x14430))+(((-1.0)*r20*x14427*x14429)));
evalcond[1]=(((r11*x14431))+((r12*x14428))+(((-1.0)*r10*x14427*x14429)));
evalcond[2]=((-1.0)+((r01*x14431))+(((-1.0)*r00*x14427*x14429))+((r02*x14428)));
evalcond[3]=(((r01*x14433))+(((-1.0)*r02*x14432))+(((-1.0)*r00*x14428*x14429)));
evalcond[4]=(((x14428*x14430))+((cj2*sj1))+(((-1.0)*r20*x14428*x14429))+((cj1*sj2))+(((-1.0)*r22*x14432)));
evalcond[5]=(((r11*x14433))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x14432))+(((-1.0)*r10*x14428*x14429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14434=((1.0)*sj5);
CheckValue<IkReal> x14435=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x14434)))),-1);
if(!x14435.valid){
continue;
}
CheckValue<IkReal> x14436 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x14434))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14435.value)))+(x14436.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14437=IKsin(j4);
IkReal x14438=IKcos(j4);
IkReal x14439=((1.0)*cj5);
IkReal x14440=(r21*sj5);
IkReal x14441=(sj5*x14437);
IkReal x14442=((1.0)*x14437);
IkReal x14443=(sj5*x14438);
evalcond[0]=(((x14437*x14440))+(((-1.0)*r20*x14437*x14439))+((r22*x14438)));
evalcond[1]=(((r11*x14441))+((r12*x14438))+(((-1.0)*r10*x14437*x14439)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14437*x14439))+((r01*x14441))+((r02*x14438)));
evalcond[3]=((((-1.0)*r00*x14438*x14439))+((r01*x14443))+(((-1.0)*r02*x14442)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x14438*x14440))+(((-1.0)*r22*x14442))+(((-1.0)*r20*x14438*x14439)));
evalcond[5]=((((-1.0)*r12*x14442))+(((-1.0)*r10*x14438*x14439))+(((-1.0)*cj1*cj2))+((r11*x14443))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14444 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14444.valid){
continue;
}
CheckValue<IkReal> x14445=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14444.value)+(((1.5707963267949)*(x14445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14446=IKsin(j4);
IkReal x14447=IKcos(j4);
IkReal x14448=((1.0)*cj5);
IkReal x14449=(r21*sj5);
IkReal x14450=(sj5*x14446);
IkReal x14451=((1.0)*x14446);
IkReal x14452=(sj5*x14447);
evalcond[0]=((((-1.0)*r20*x14446*x14448))+((x14446*x14449))+((r22*x14447)));
evalcond[1]=(((r12*x14447))+((r11*x14450))+(((-1.0)*r10*x14446*x14448)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14446*x14448))+((r01*x14450))+((r02*x14447)));
evalcond[3]=(((r01*x14452))+(((-1.0)*r00*x14447*x14448))+(((-1.0)*r02*x14451)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x14447*x14448))+((x14447*x14449))+(((-1.0)*r22*x14451)));
evalcond[5]=((((-1.0)*r10*x14447*x14448))+((r11*x14452))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x14451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14453=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14453;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x14453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14454=((1.0)*sj5);
IkReal x14455=((((-1.0)*cj5*r11))+(((-1.0)*r10*x14454)));
j4eval[0]=x14455;
j4eval[1]=IKsign(x14455);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x14454))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14456=cj5*cj5;
IkReal x14457=r01*r01;
IkReal x14458=(r01*sj5);
IkReal x14459=(cj5*r00);
IkReal x14460=((((2.0)*x14458*x14459))+(((-1.0)*(r02*r02)))+(((-1.0)*x14457))+((x14456*x14457))+(((-1.0)*x14456*(r00*r00))));
j4eval[0]=x14460;
j4eval[1]=IKsign(x14460);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14458))+x14459))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14461=cj5*cj5;
IkReal x14462=r01*r01;
IkReal x14463=(r01*sj5);
IkReal x14464=(cj5*r00);
CheckValue<IkReal> x14465=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x14461*(r00*r00)))+(((-1.0)*x14462))+(((2.0)*x14463*x14464))+((x14461*x14462)))),-1);
if(!x14465.valid){
continue;
}
CheckValue<IkReal> x14466 = IKatan2WithCheck(IkReal(((((-1.0)*x14463))+x14464)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14465.value)))+(x14466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14467=IKsin(j4);
IkReal x14468=IKcos(j4);
IkReal x14469=(cj5*r10);
IkReal x14470=(cj5*r00);
IkReal x14471=(cj5*r20);
IkReal x14472=((1.0)*x14467);
IkReal x14473=(sj5*x14467);
IkReal x14474=((1.0)*sj5*x14468);
evalcond[0]=(((r21*x14473))+((r22*x14468))+(((-1.0)*x14471*x14472)));
evalcond[1]=(((r11*x14473))+(((-1.0)*x14469*x14472))+((r12*x14468)));
evalcond[2]=((((-1.0)*r01*x14474))+((r02*x14467))+((x14468*x14470)));
evalcond[3]=((-1.0)+(((-1.0)*x14470*x14472))+((r01*x14473))+((r02*x14468)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x14467))+(((-1.0)*r21*x14474))+((x14468*x14471)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*x14474))+((r12*x14467))+((x14468*x14469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14475=((1.0)*sj5);
CheckValue<IkReal> x14476 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x14475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14476.valid){
continue;
}
CheckValue<IkReal> x14477=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x14475)))),-1);
if(!x14477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14476.value)+(((1.5707963267949)*(x14477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14478=IKsin(j4);
IkReal x14479=IKcos(j4);
IkReal x14480=(cj5*r10);
IkReal x14481=(cj5*r00);
IkReal x14482=(cj5*r20);
IkReal x14483=((1.0)*x14478);
IkReal x14484=(sj5*x14478);
IkReal x14485=((1.0)*sj5*x14479);
evalcond[0]=(((r21*x14484))+((r22*x14479))+(((-1.0)*x14482*x14483)));
evalcond[1]=((((-1.0)*x14480*x14483))+((r11*x14484))+((r12*x14479)));
evalcond[2]=(((x14479*x14481))+((r02*x14478))+(((-1.0)*r01*x14485)));
evalcond[3]=((-1.0)+(((-1.0)*x14481*x14483))+((r02*x14479))+((r01*x14484)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x14485))+((cj1*sj2))+((r22*x14478))+((x14479*x14482)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14479*x14480))+(((-1.0)*r11*x14485))+((r12*x14478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14486 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14486.valid){
continue;
}
CheckValue<IkReal> x14487=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14486.value)+(((1.5707963267949)*(x14487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14488=IKsin(j4);
IkReal x14489=IKcos(j4);
IkReal x14490=(cj5*r10);
IkReal x14491=(cj5*r00);
IkReal x14492=(cj5*r20);
IkReal x14493=((1.0)*x14488);
IkReal x14494=(sj5*x14488);
IkReal x14495=((1.0)*sj5*x14489);
evalcond[0]=(((r21*x14494))+((r22*x14489))+(((-1.0)*x14492*x14493)));
evalcond[1]=(((r11*x14494))+(((-1.0)*x14490*x14493))+((r12*x14489)));
evalcond[2]=((((-1.0)*r01*x14495))+((r02*x14488))+((x14489*x14491)));
evalcond[3]=((-1.0)+((r02*x14489))+(((-1.0)*x14491*x14493))+((r01*x14494)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x14488))+(((-1.0)*r21*x14495))+((x14489*x14492)));
evalcond[5]=(((r12*x14488))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*x14495))+((x14489*x14490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14497 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14497)==0){
continue;
}
IkReal x14496=pow(x14497,-0.5);
CheckValue<IkReal> x14498 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14498.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14498.value));
IkReal gconst49=((-1.0)*r21*x14496);
IkReal gconst50=(r20*x14496);
CheckValue<IkReal> x14499 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14499.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14499.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14502 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14502.valid){
continue;
}
IkReal x14500=((-1.0)*(x14502.value));
IkReal x14501=x14496;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14500;
IkReal gconst48=x14500;
IkReal gconst49=((-1.0)*r21*x14501);
IkReal gconst50=(r20*x14501);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14505 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14505.valid){
continue;
}
IkReal x14503=((-1.0)*(x14505.value));
IkReal x14504=x14496;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14503;
IkReal gconst48=x14503;
IkReal gconst49=((-1.0)*r21*x14504);
IkReal gconst50=(r20*x14504);
CheckValue<IkReal> x14513=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14513.valid){
continue;
}
IkReal x14506=x14513.value;
IkReal x14507=(cj3*x14506);
IkReal x14508=(r11*x14507);
IkReal x14509=(r01*x14507);
IkReal x14510=(r00*x14507);
IkReal x14511=(r10*x14507);
IkReal x14512=(r20*r21*x14507);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x14510*(r20*r20)))+((r01*x14508*(r21*r21)))+((r00*r20*r21*x14508))+((r10*r20*r21*x14509))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14514=gconst49*gconst49;
IkReal x14515=gconst50*gconst50;
IkReal x14516=(r11*sj3);
IkReal x14517=((1.0)*r01);
IkReal x14518=(gconst49*r00);
IkReal x14519=((1.0)*r12);
IkReal x14520=(cj3*r11);
IkReal x14521=(gconst50*r10);
IkReal x14522=(gconst49*r01);
IkReal x14523=(r10*x14515);
CheckValue<IkReal> x14524 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*gconst50*r12*x14517))+(((-1.0)*cj3*x14518*x14519)))),IkReal((((r00*x14514*x14520))+(((-1.0)*cj3*x14517*x14523))+(((-1.0)*cj3*x14518*x14521))+((gconst50*x14520*x14522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14524.valid){
continue;
}
CheckValue<IkReal> x14525=IKPowWithIntegerCheck(IKsign((((gconst50*x14516*x14518))+((sj3*x14521*x14522))+(((-1.0)*r02*sj3*x14519))+(((-1.0)*r00*sj3*x14523))+(((-1.0)*x14514*x14516*x14517)))),-1);
if(!x14525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14524.value)+(((1.5707963267949)*(x14525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14526=IKsin(j4);
IkReal x14527=IKcos(j4);
IkReal x14528=(sj1*sj2);
IkReal x14529=(gconst49*r21);
IkReal x14530=(cj3*gconst49);
IkReal x14531=((1.0)*r00);
IkReal x14532=(gconst49*sj3);
IkReal x14533=((1.0)*cj2);
IkReal x14534=((1.0)*r20);
IkReal x14535=((1.0)*cj3);
IkReal x14536=(gconst50*r01);
IkReal x14537=(cj1*sj2);
IkReal x14538=((1.0)*sj3);
IkReal x14539=(gconst50*r11);
IkReal x14540=((1.0)*r10);
IkReal x14541=(gconst50*r21);
IkReal x14542=(cj1*x14533);
IkReal x14543=(r01*x14527);
IkReal x14544=(r12*x14526);
IkReal x14545=(r22*x14526);
IkReal x14546=(r11*x14527);
IkReal x14547=(cj3*x14527);
IkReal x14548=(gconst49*x14526);
IkReal x14549=(r02*x14526);
IkReal x14550=((1.0)*gconst50*x14526);
IkReal x14551=(gconst50*sj3*x14527);
evalcond[0]=(((r22*x14527))+(((-1.0)*gconst50*x14526*x14534))+((x14526*x14529)));
evalcond[1]=(((r11*x14548))+(((-1.0)*gconst50*x14526*x14540))+((r12*x14527)));
evalcond[2]=((-1.0)+((r01*x14548))+(((-1.0)*gconst50*x14526*x14531))+((r02*x14527)));
evalcond[3]=((((-1.0)*x14535*x14536))+(((-1.0)*x14532*x14543))+(((-1.0)*x14530*x14531))+((sj3*x14549))+((r00*x14551)));
evalcond[4]=((((-1.0)*x14535*x14549))+(((-1.0)*x14531*x14532))+(((-1.0)*gconst50*x14531*x14547))+(((-1.0)*x14536*x14538))+((x14530*x14543)));
evalcond[5]=((((-1.0)*x14535*x14541))+(((-1.0)*x14530*x14534))+((r20*x14551))+(((-1.0)*x14527*x14529*x14538))+x14528+((sj3*x14545))+(((-1.0)*x14542)));
evalcond[6]=((((-1.0)*x14535*x14545))+((cj2*sj1))+(((-1.0)*x14532*x14534))+(((-1.0)*x14538*x14541))+((x14529*x14547))+x14537+(((-1.0)*gconst50*x14534*x14547)));
evalcond[7]=((((-1.0)*x14535*x14539))+(((-1.0)*x14532*x14546))+(((-1.0)*x14537))+(((-1.0)*sj1*x14533))+(((-1.0)*x14530*x14540))+((sj3*x14544))+((r10*x14551)));
evalcond[8]=((((-1.0)*x14535*x14544))+(((-1.0)*x14538*x14539))+x14528+(((-1.0)*gconst50*r10*x14527*x14535))+((x14530*x14546))+(((-1.0)*x14542))+(((-1.0)*x14532*x14540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14552=gconst49*gconst49;
IkReal x14553=gconst50*gconst50;
IkReal x14554=(cj3*r11);
IkReal x14555=(r01*r10);
IkReal x14556=(r00*sj3);
IkReal x14557=((1.0)*r12);
IkReal x14558=((1.0)*gconst49*gconst50);
IkReal x14559=(gconst50*r01*sj3);
CheckValue<IkReal> x14560=IKPowWithIntegerCheck(IKsign((((cj3*r00*r10*x14553))+((r01*x14552*x14554))+((cj3*r02*r12))+(((-1.0)*cj3*x14555*x14558))+(((-1.0)*r00*x14554*x14558)))),-1);
if(!x14560.valid){
continue;
}
CheckValue<IkReal> x14561 = IKatan2WithCheck(IkReal(((((-1.0)*gconst49*x14556*x14557))+(((-1.0)*x14557*x14559)))),IkReal((((r11*x14552*x14556))+(((-1.0)*sj3*x14553*x14555))+((gconst49*r11*x14559))+(((-1.0)*r10*x14556*x14558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14560.value)))+(x14561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14562=IKsin(j4);
IkReal x14563=IKcos(j4);
IkReal x14564=(sj1*sj2);
IkReal x14565=(gconst49*r21);
IkReal x14566=(cj3*gconst49);
IkReal x14567=((1.0)*r00);
IkReal x14568=(gconst49*sj3);
IkReal x14569=((1.0)*cj2);
IkReal x14570=((1.0)*r20);
IkReal x14571=((1.0)*cj3);
IkReal x14572=(gconst50*r01);
IkReal x14573=(cj1*sj2);
IkReal x14574=((1.0)*sj3);
IkReal x14575=(gconst50*r11);
IkReal x14576=((1.0)*r10);
IkReal x14577=(gconst50*r21);
IkReal x14578=(cj1*x14569);
IkReal x14579=(r01*x14563);
IkReal x14580=(r12*x14562);
IkReal x14581=(r22*x14562);
IkReal x14582=(r11*x14563);
IkReal x14583=(cj3*x14563);
IkReal x14584=(gconst49*x14562);
IkReal x14585=(r02*x14562);
IkReal x14586=((1.0)*gconst50*x14562);
IkReal x14587=(gconst50*sj3*x14563);
evalcond[0]=(((x14562*x14565))+(((-1.0)*gconst50*x14562*x14570))+((r22*x14563)));
evalcond[1]=(((r11*x14584))+(((-1.0)*gconst50*x14562*x14576))+((r12*x14563)));
evalcond[2]=((-1.0)+((r02*x14563))+((r01*x14584))+(((-1.0)*gconst50*x14562*x14567)));
evalcond[3]=((((-1.0)*x14571*x14572))+(((-1.0)*x14568*x14579))+((sj3*x14585))+((r00*x14587))+(((-1.0)*x14566*x14567)));
evalcond[4]=((((-1.0)*x14571*x14585))+((x14566*x14579))+(((-1.0)*gconst50*x14567*x14583))+(((-1.0)*x14572*x14574))+(((-1.0)*x14567*x14568)));
evalcond[5]=(((r20*x14587))+(((-1.0)*x14571*x14577))+(((-1.0)*x14578))+x14564+((sj3*x14581))+(((-1.0)*x14563*x14565*x14574))+(((-1.0)*x14566*x14570)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x14571*x14581))+((x14565*x14583))+(((-1.0)*x14574*x14577))+(((-1.0)*gconst50*x14570*x14583))+x14573+(((-1.0)*x14568*x14570)));
evalcond[7]=((((-1.0)*x14571*x14575))+((r10*x14587))+((sj3*x14580))+(((-1.0)*sj1*x14569))+(((-1.0)*x14573))+(((-1.0)*x14566*x14576))+(((-1.0)*x14568*x14582)));
evalcond[8]=(((x14566*x14582))+(((-1.0)*x14571*x14580))+(((-1.0)*gconst50*r10*x14563*x14571))+(((-1.0)*x14578))+(((-1.0)*x14574*x14575))+x14564+(((-1.0)*x14568*x14576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14588=((1.0)*gconst49);
CheckValue<IkReal> x14589 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst50*r20))+(((-1.0)*r21*x14588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14589.valid){
continue;
}
CheckValue<IkReal> x14590=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x14588))+(((-1.0)*gconst50*r11)))),-1);
if(!x14590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14589.value)+(((1.5707963267949)*(x14590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14591=IKsin(j4);
IkReal x14592=IKcos(j4);
IkReal x14593=(sj1*sj2);
IkReal x14594=(gconst49*r21);
IkReal x14595=(cj3*gconst49);
IkReal x14596=((1.0)*r00);
IkReal x14597=(gconst49*sj3);
IkReal x14598=((1.0)*cj2);
IkReal x14599=((1.0)*r20);
IkReal x14600=((1.0)*cj3);
IkReal x14601=(gconst50*r01);
IkReal x14602=(cj1*sj2);
IkReal x14603=((1.0)*sj3);
IkReal x14604=(gconst50*r11);
IkReal x14605=((1.0)*r10);
IkReal x14606=(gconst50*r21);
IkReal x14607=(cj1*x14598);
IkReal x14608=(r01*x14592);
IkReal x14609=(r12*x14591);
IkReal x14610=(r22*x14591);
IkReal x14611=(r11*x14592);
IkReal x14612=(cj3*x14592);
IkReal x14613=(gconst49*x14591);
IkReal x14614=(r02*x14591);
IkReal x14615=((1.0)*gconst50*x14591);
IkReal x14616=(gconst50*sj3*x14592);
evalcond[0]=(((x14591*x14594))+(((-1.0)*gconst50*x14591*x14599))+((r22*x14592)));
evalcond[1]=((((-1.0)*gconst50*x14591*x14605))+((r11*x14613))+((r12*x14592)));
evalcond[2]=((-1.0)+(((-1.0)*gconst50*x14591*x14596))+((r01*x14613))+((r02*x14592)));
evalcond[3]=((((-1.0)*x14597*x14608))+(((-1.0)*x14595*x14596))+(((-1.0)*x14600*x14601))+((r00*x14616))+((sj3*x14614)));
evalcond[4]=((((-1.0)*gconst50*x14596*x14612))+(((-1.0)*x14600*x14614))+((x14595*x14608))+(((-1.0)*x14596*x14597))+(((-1.0)*x14601*x14603)));
evalcond[5]=((((-1.0)*x14595*x14599))+(((-1.0)*x14600*x14606))+x14593+(((-1.0)*x14592*x14594*x14603))+((sj3*x14610))+((r20*x14616))+(((-1.0)*x14607)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x14600*x14610))+(((-1.0)*gconst50*x14599*x14612))+((x14594*x14612))+(((-1.0)*x14597*x14599))+x14602+(((-1.0)*x14603*x14606)));
evalcond[7]=((((-1.0)*sj1*x14598))+(((-1.0)*x14600*x14604))+((r10*x14616))+(((-1.0)*x14597*x14611))+(((-1.0)*x14595*x14605))+(((-1.0)*x14602))+((sj3*x14609)));
evalcond[8]=((((-1.0)*x14600*x14609))+((x14595*x14611))+(((-1.0)*gconst50*r10*x14592*x14600))+x14593+(((-1.0)*x14597*x14605))+(((-1.0)*x14607))+(((-1.0)*x14603*x14604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14618 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14618)==0){
continue;
}
IkReal x14617=pow(x14618,-0.5);
CheckValue<IkReal> x14619 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14619.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14619.value))));
IkReal gconst52=((1.0)*r21*x14617);
IkReal gconst53=((-1.0)*r20*x14617);
CheckValue<IkReal> x14620 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14620.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14620.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14623 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14623.valid){
continue;
}
IkReal x14621=((1.0)*(x14623.value));
IkReal x14622=x14617;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14621)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14621)));
IkReal gconst52=((1.0)*r21*x14622);
IkReal gconst53=((-1.0)*r20*x14622);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14626 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14626.valid){
continue;
}
IkReal x14624=((1.0)*(x14626.value));
IkReal x14625=x14617;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14624)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14624)));
IkReal gconst52=((1.0)*r21*x14625);
IkReal gconst53=((-1.0)*r20*x14625);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14629 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14629.valid){
continue;
}
IkReal x14627=((1.0)*(x14629.value));
IkReal x14628=x14617;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14627)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14627)));
IkReal gconst52=((1.0)*r21*x14628);
IkReal gconst53=((-1.0)*r20*x14628);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14630=gconst52*gconst52;
IkReal x14631=gconst53*gconst53;
IkReal x14632=(cj3*r21);
IkReal x14633=(r22*sj3);
IkReal x14634=(r01*sj3);
IkReal x14635=(gconst52*gconst53);
IkReal x14636=((1.0)*r01);
IkReal x14637=((1.0)*gconst52*r00);
IkReal x14638=(r20*x14631);
CheckValue<IkReal> x14639 = IKatan2WithCheck(IkReal(((((-1.0)*x14633*x14637))+(((-1.0)*gconst53*x14633*x14636)))),IkReal(((((-1.0)*x14634*x14638))+(((-1.0)*r00*r20*sj3*x14635))+((r21*x14634*x14635))+((r00*r21*sj3*x14630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14639.valid){
continue;
}
CheckValue<IkReal> x14640=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14632*x14635))+(((-1.0)*cj3*r20*x14635*x14636))+((r01*x14630*x14632))+((cj3*r00*x14638))+((cj3*r02*r22)))),-1);
if(!x14640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14639.value)+(((1.5707963267949)*(x14640.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14641=IKsin(j4);
IkReal x14642=IKcos(j4);
IkReal x14643=(sj1*sj2);
IkReal x14644=((1.0)*cj1);
IkReal x14645=(gconst52*r11);
IkReal x14646=((1.0)*sj3);
IkReal x14647=(gconst52*r20);
IkReal x14648=(gconst53*r11);
IkReal x14649=((1.0)*gconst53);
IkReal x14650=(gconst52*r21);
IkReal x14651=((1.0)*cj3);
IkReal x14652=(cj2*sj1);
IkReal x14653=(gconst52*r00);
IkReal x14654=(gconst52*r10);
IkReal x14655=(gconst52*r01);
IkReal x14656=(cj2*x14644);
IkReal x14657=(cj3*x14642);
IkReal x14658=(gconst52*x14641);
IkReal x14659=(r12*x14641);
IkReal x14660=(r22*x14641);
IkReal x14661=(r02*x14641);
IkReal x14662=(gconst53*sj3*x14642);
evalcond[0]=(((r22*x14642))+((x14641*x14650))+(((-1.0)*r20*x14641*x14649)));
evalcond[1]=(((r12*x14642))+(((-1.0)*r10*x14641*x14649))+((x14641*x14645)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14641*x14649))+((x14641*x14655))+((r02*x14642)));
evalcond[3]=((((-1.0)*cj3*r01*x14649))+((r00*x14662))+(((-1.0)*x14642*x14646*x14655))+((sj3*x14661))+(((-1.0)*x14651*x14653)));
evalcond[4]=(((x14655*x14657))+(((-1.0)*x14651*x14661))+(((-1.0)*r00*x14649*x14657))+(((-1.0)*gconst53*r01*x14646))+(((-1.0)*x14646*x14653)));
evalcond[5]=((((-1.0)*cj3*r21*x14649))+(((-1.0)*x14642*x14646*x14650))+x14643+((sj3*x14660))+(((-1.0)*x14656))+(((-1.0)*x14647*x14651))+((r20*x14662)));
evalcond[6]=((((-1.0)*x14646*x14647))+((cj1*sj2))+(((-1.0)*gconst53*r21*x14646))+(((-1.0)*x14651*x14660))+x14652+(((-1.0)*r20*x14649*x14657))+((x14650*x14657)));
evalcond[7]=(((r10*x14662))+(((-1.0)*x14652))+((sj3*x14659))+(((-1.0)*x14642*x14645*x14646))+(((-1.0)*x14651*x14654))+(((-1.0)*x14648*x14651))+(((-1.0)*sj2*x14644)));
evalcond[8]=((((-1.0)*x14646*x14648))+((x14645*x14657))+x14643+(((-1.0)*r10*x14649*x14657))+(((-1.0)*x14656))+(((-1.0)*x14651*x14659))+(((-1.0)*x14646*x14654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14663=((1.0)*gconst52);
CheckValue<IkReal> x14664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x14663))+(((-1.0)*gconst53*r11)))),-1);
if(!x14664.valid){
continue;
}
CheckValue<IkReal> x14665 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x14663))+((gconst53*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14664.value)))+(x14665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14666=IKsin(j4);
IkReal x14667=IKcos(j4);
IkReal x14668=(sj1*sj2);
IkReal x14669=((1.0)*cj1);
IkReal x14670=(gconst52*r11);
IkReal x14671=((1.0)*sj3);
IkReal x14672=(gconst52*r20);
IkReal x14673=(gconst53*r11);
IkReal x14674=((1.0)*gconst53);
IkReal x14675=(gconst52*r21);
IkReal x14676=((1.0)*cj3);
IkReal x14677=(cj2*sj1);
IkReal x14678=(gconst52*r00);
IkReal x14679=(gconst52*r10);
IkReal x14680=(gconst52*r01);
IkReal x14681=(cj2*x14669);
IkReal x14682=(cj3*x14667);
IkReal x14683=(gconst52*x14666);
IkReal x14684=(r12*x14666);
IkReal x14685=(r22*x14666);
IkReal x14686=(r02*x14666);
IkReal x14687=(gconst53*sj3*x14667);
evalcond[0]=(((x14666*x14675))+(((-1.0)*r20*x14666*x14674))+((r22*x14667)));
evalcond[1]=(((x14666*x14670))+(((-1.0)*r10*x14666*x14674))+((r12*x14667)));
evalcond[2]=((-1.0)+((r02*x14667))+(((-1.0)*r00*x14666*x14674))+((x14666*x14680)));
evalcond[3]=((((-1.0)*x14676*x14678))+(((-1.0)*x14667*x14671*x14680))+((r00*x14687))+((sj3*x14686))+(((-1.0)*cj3*r01*x14674)));
evalcond[4]=((((-1.0)*x14671*x14678))+(((-1.0)*r00*x14674*x14682))+((x14680*x14682))+(((-1.0)*gconst53*r01*x14671))+(((-1.0)*x14676*x14686)));
evalcond[5]=(((sj3*x14685))+(((-1.0)*x14672*x14676))+((r20*x14687))+(((-1.0)*x14681))+x14668+(((-1.0)*x14667*x14671*x14675))+(((-1.0)*cj3*r21*x14674)));
evalcond[6]=((((-1.0)*r20*x14674*x14682))+(((-1.0)*x14671*x14672))+(((-1.0)*gconst53*r21*x14671))+((x14675*x14682))+((cj1*sj2))+(((-1.0)*x14676*x14685))+x14677);
evalcond[7]=((((-1.0)*x14676*x14679))+(((-1.0)*sj2*x14669))+((sj3*x14684))+(((-1.0)*x14677))+(((-1.0)*x14673*x14676))+((r10*x14687))+(((-1.0)*x14667*x14670*x14671)));
evalcond[8]=((((-1.0)*x14671*x14679))+(((-1.0)*x14671*x14673))+(((-1.0)*r10*x14674*x14682))+(((-1.0)*x14676*x14684))+(((-1.0)*x14681))+x14668+((x14670*x14682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14688 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst52*r11))+((gconst53*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14688.valid){
continue;
}
CheckValue<IkReal> x14689=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14688.value)+(((1.5707963267949)*(x14689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14690=IKsin(j4);
IkReal x14691=IKcos(j4);
IkReal x14692=(sj1*sj2);
IkReal x14693=((1.0)*cj1);
IkReal x14694=(gconst52*r11);
IkReal x14695=((1.0)*sj3);
IkReal x14696=(gconst52*r20);
IkReal x14697=(gconst53*r11);
IkReal x14698=((1.0)*gconst53);
IkReal x14699=(gconst52*r21);
IkReal x14700=((1.0)*cj3);
IkReal x14701=(cj2*sj1);
IkReal x14702=(gconst52*r00);
IkReal x14703=(gconst52*r10);
IkReal x14704=(gconst52*r01);
IkReal x14705=(cj2*x14693);
IkReal x14706=(cj3*x14691);
IkReal x14707=(gconst52*x14690);
IkReal x14708=(r12*x14690);
IkReal x14709=(r22*x14690);
IkReal x14710=(r02*x14690);
IkReal x14711=(gconst53*sj3*x14691);
evalcond[0]=(((r22*x14691))+((x14690*x14699))+(((-1.0)*r20*x14690*x14698)));
evalcond[1]=((((-1.0)*r10*x14690*x14698))+((r12*x14691))+((x14690*x14694)));
evalcond[2]=((-1.0)+((x14690*x14704))+((r02*x14691))+(((-1.0)*r00*x14690*x14698)));
evalcond[3]=(((sj3*x14710))+(((-1.0)*cj3*r01*x14698))+(((-1.0)*x14700*x14702))+(((-1.0)*x14691*x14695*x14704))+((r00*x14711)));
evalcond[4]=((((-1.0)*r00*x14698*x14706))+((x14704*x14706))+(((-1.0)*gconst53*r01*x14695))+(((-1.0)*x14695*x14702))+(((-1.0)*x14700*x14710)));
evalcond[5]=(((r20*x14711))+(((-1.0)*x14705))+x14692+(((-1.0)*x14691*x14695*x14699))+(((-1.0)*x14696*x14700))+((sj3*x14709))+(((-1.0)*cj3*r21*x14698)));
evalcond[6]=((((-1.0)*r20*x14698*x14706))+(((-1.0)*x14695*x14696))+((cj1*sj2))+(((-1.0)*gconst53*r21*x14695))+(((-1.0)*x14700*x14709))+x14701+((x14699*x14706)));
evalcond[7]=((((-1.0)*x14691*x14694*x14695))+(((-1.0)*x14701))+(((-1.0)*x14700*x14703))+((r10*x14711))+(((-1.0)*x14697*x14700))+(((-1.0)*sj2*x14693))+((sj3*x14708)));
evalcond[8]=((((-1.0)*x14705))+(((-1.0)*r10*x14698*x14706))+(((-1.0)*x14695*x14697))+((x14694*x14706))+(((-1.0)*x14700*x14708))+x14692+(((-1.0)*x14695*x14703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14712=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14712);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14712);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14713=(cj5*r00);
IkReal x14714=(r01*sj5);
j4eval[0]=((((-1.0)*x14713))+x14714);
j4eval[1]=(((sj3*x14713))+(((-1.0)*sj3*x14714)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14715=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14715);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14715);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14716=(r01*sj5);
IkReal x14717=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x14717))+x14716);
j4eval[1]=(((cj3*x14716))+(((-1.0)*cj3*x14717)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14718=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14718);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14718);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14719=IKPowWithIntegerCheck(r22,-1);
if(!x14719.valid){
continue;
}
CheckValue<IkReal> x14720=IKPowWithIntegerCheck(sj3,-1);
if(!x14720.valid){
continue;
}
CheckValue<IkReal> x14721=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x14721.valid){
continue;
}
if( IKabs(((x14719.value)*(x14720.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14721.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14719.value)*(x14720.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14721.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14719.value)*(x14720.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14721.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14722=IKsin(j4);
IkReal x14723=IKcos(j4);
IkReal x14724=(sj1*sj2);
IkReal x14725=(cj5*r10);
IkReal x14726=(r11*sj5);
IkReal x14727=(cj5*r00);
IkReal x14728=((1.0)*cj2);
IkReal x14729=((1.0)*cj5);
IkReal x14730=(cj1*sj2);
IkReal x14731=(r01*sj5);
IkReal x14732=(cj1*x14728);
IkReal x14733=((1.0)*x14722);
IkReal x14734=(sj3*x14723);
IkReal x14735=(cj3*x14723);
IkReal x14736=((1.0)*r00*sj5);
IkReal x14737=((1.0)*r10*sj5);
evalcond[0]=(r22*x14723);
evalcond[1]=(((x14722*x14726))+(((-1.0)*x14725*x14733)));
evalcond[2]=(((r22*sj3*x14722))+(((-1.0)*x14732))+x14724);
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj3*r22*x14733))+x14730);
evalcond[4]=((-1.0)+((x14722*x14731))+(((-1.0)*x14727*x14733)));
evalcond[5]=(((x14727*x14734))+(((-1.0)*cj3*x14736))+(((-1.0)*x14731*x14734))+(((-1.0)*cj3*r01*x14729)));
evalcond[6]=((((-1.0)*x14727*x14735))+(((-1.0)*sj3*x14736))+(((-1.0)*r01*sj3*x14729))+((x14731*x14735)));
evalcond[7]=((((-1.0)*r11*sj3*x14729))+(((-1.0)*sj3*x14737))+((x14726*x14735))+(((-1.0)*x14732))+x14724+(((-1.0)*x14725*x14735)));
evalcond[8]=((((-1.0)*x14730))+(((-1.0)*sj1*x14728))+(((-1.0)*cj3*x14737))+((x14725*x14734))+(((-1.0)*x14726*x14734))+(((-1.0)*cj3*r11*x14729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14738=(r01*sj5);
IkReal x14739=((1.0)*cj5*r00);
CheckValue<IkReal> x14740=IKPowWithIntegerCheck(((((-1.0)*x14739))+x14738),-1);
if(!x14740.valid){
continue;
}
CheckValue<IkReal> x14741=IKPowWithIntegerCheck(((((-1.0)*cj3*x14739))+((cj3*x14738))),-1);
if(!x14741.valid){
continue;
}
if( IKabs(x14740.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14741.value)*((((cj5*r01*sj3))+((r00*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14740.value)+IKsqr(((x14741.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14740.value, ((x14741.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14742=IKsin(j4);
IkReal x14743=IKcos(j4);
IkReal x14744=(sj1*sj2);
IkReal x14745=(cj5*r10);
IkReal x14746=(r11*sj5);
IkReal x14747=(cj5*r00);
IkReal x14748=((1.0)*cj2);
IkReal x14749=((1.0)*cj5);
IkReal x14750=(cj1*sj2);
IkReal x14751=(r01*sj5);
IkReal x14752=(cj1*x14748);
IkReal x14753=((1.0)*x14742);
IkReal x14754=(sj3*x14743);
IkReal x14755=(cj3*x14743);
IkReal x14756=((1.0)*r00*sj5);
IkReal x14757=((1.0)*r10*sj5);
evalcond[0]=(r22*x14743);
evalcond[1]=((((-1.0)*x14745*x14753))+((x14742*x14746)));
evalcond[2]=(((r22*sj3*x14742))+x14744+(((-1.0)*x14752)));
evalcond[3]=(((cj2*sj1))+x14750+(((-1.0)*cj3*r22*x14753)));
evalcond[4]=((-1.0)+(((-1.0)*x14747*x14753))+((x14742*x14751)));
evalcond[5]=(((x14747*x14754))+(((-1.0)*cj3*r01*x14749))+(((-1.0)*x14751*x14754))+(((-1.0)*cj3*x14756)));
evalcond[6]=((((-1.0)*r01*sj3*x14749))+(((-1.0)*sj3*x14756))+((x14751*x14755))+(((-1.0)*x14747*x14755)));
evalcond[7]=(((x14746*x14755))+(((-1.0)*sj3*x14757))+(((-1.0)*r11*sj3*x14749))+x14744+(((-1.0)*x14752))+(((-1.0)*x14745*x14755)));
evalcond[8]=(((x14745*x14754))+(((-1.0)*cj3*r11*x14749))+(((-1.0)*cj3*x14757))+(((-1.0)*sj1*x14748))+(((-1.0)*x14746*x14754))+(((-1.0)*x14750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14758=(cj5*r00);
IkReal x14759=(r01*sj5);
CheckValue<IkReal> x14760=IKPowWithIntegerCheck((x14759+(((-1.0)*x14758))),-1);
if(!x14760.valid){
continue;
}
CheckValue<IkReal> x14761=IKPowWithIntegerCheck((((sj3*x14758))+(((-1.0)*sj3*x14759))),-1);
if(!x14761.valid){
continue;
}
if( IKabs(x14760.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14761.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14760.value)+IKsqr(((x14761.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14760.value, ((x14761.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14762=IKsin(j4);
IkReal x14763=IKcos(j4);
IkReal x14764=(sj1*sj2);
IkReal x14765=(cj5*r10);
IkReal x14766=(r11*sj5);
IkReal x14767=(cj5*r00);
IkReal x14768=((1.0)*cj2);
IkReal x14769=((1.0)*cj5);
IkReal x14770=(cj1*sj2);
IkReal x14771=(r01*sj5);
IkReal x14772=(cj1*x14768);
IkReal x14773=((1.0)*x14762);
IkReal x14774=(sj3*x14763);
IkReal x14775=(cj3*x14763);
IkReal x14776=((1.0)*r00*sj5);
IkReal x14777=((1.0)*r10*sj5);
evalcond[0]=(r22*x14763);
evalcond[1]=((((-1.0)*x14765*x14773))+((x14762*x14766)));
evalcond[2]=((((-1.0)*x14772))+x14764+((r22*sj3*x14762)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*cj3*r22*x14773))+x14770);
evalcond[4]=((-1.0)+((x14762*x14771))+(((-1.0)*x14767*x14773)));
evalcond[5]=((((-1.0)*cj3*x14776))+((x14767*x14774))+(((-1.0)*x14771*x14774))+(((-1.0)*cj3*r01*x14769)));
evalcond[6]=((((-1.0)*r01*sj3*x14769))+(((-1.0)*x14767*x14775))+((x14771*x14775))+(((-1.0)*sj3*x14776)));
evalcond[7]=((((-1.0)*r11*sj3*x14769))+(((-1.0)*x14772))+((x14766*x14775))+(((-1.0)*sj3*x14777))+x14764+(((-1.0)*x14765*x14775)));
evalcond[8]=(((x14765*x14774))+(((-1.0)*cj3*x14777))+(((-1.0)*sj1*x14768))+(((-1.0)*x14766*x14774))+(((-1.0)*x14770))+(((-1.0)*cj3*r11*x14769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14778=cj5*cj5;
IkReal x14779=((1.0)*cj3);
IkReal x14780=(r21*sj3);
IkReal x14781=(cj5*r01);
IkReal x14782=(r00*r21);
IkReal x14783=((1.0)*sj3);
IkReal x14784=(cj5*r00*sj5);
IkReal x14785=(r20*x14778);
CheckValue<IkReal> x14786 = IKatan2WithCheck(IkReal(((((-1.0)*r00*r22*sj5*x14779))+(((-1.0)*r22*x14779*x14781)))),IkReal(((((-1.0)*r20*x14779*x14784))+((cj3*r21*sj5*x14781))+(((-1.0)*x14778*x14779*x14782))+((cj3*x14782))+(((-1.0)*r01*x14779*x14785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14786.valid){
continue;
}
CheckValue<IkReal> x14787=IKPowWithIntegerCheck(IKsign((((x14780*x14784))+(((-1.0)*r01*x14780))+(((-1.0)*r02*r22*x14783))+((r20*sj3*sj5*x14781))+((r01*x14778*x14780))+(((-1.0)*r00*x14783*x14785)))),-1);
if(!x14787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14786.value)+(((1.5707963267949)*(x14787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14788=IKsin(j4);
IkReal x14789=IKcos(j4);
IkReal x14790=(sj1*sj2);
IkReal x14791=((1.0)*cj1);
IkReal x14792=((1.0)*cj5);
IkReal x14793=(r11*sj5);
IkReal x14794=(r21*sj5);
IkReal x14795=((1.0)*sj3);
IkReal x14796=(cj2*sj1);
IkReal x14797=((1.0)*cj3);
IkReal x14798=(r20*sj5);
IkReal x14799=(r10*sj5);
IkReal x14800=(r00*sj5);
IkReal x14801=(r01*sj5);
IkReal x14802=(cj2*x14791);
IkReal x14803=(cj3*x14789);
IkReal x14804=(r12*x14788);
IkReal x14805=(r22*x14788);
IkReal x14806=(r02*x14788);
IkReal x14807=(cj5*sj3*x14789);
evalcond[0]=((((-1.0)*r20*x14788*x14792))+((x14788*x14794))+((r22*x14789)));
evalcond[1]=(((x14788*x14793))+((r12*x14789))+(((-1.0)*r10*x14788*x14792)));
evalcond[2]=((-1.0)+((x14788*x14801))+((r02*x14789))+(((-1.0)*r00*x14788*x14792)));
evalcond[3]=((((-1.0)*cj3*r01*x14792))+((sj3*x14806))+(((-1.0)*x14797*x14800))+((r00*x14807))+(((-1.0)*x14789*x14795*x14801)));
evalcond[4]=((((-1.0)*x14797*x14806))+(((-1.0)*r00*x14792*x14803))+(((-1.0)*r01*sj3*x14792))+(((-1.0)*x14795*x14800))+((x14801*x14803)));
evalcond[5]=((((-1.0)*x14797*x14798))+((sj3*x14805))+(((-1.0)*cj3*r21*x14792))+(((-1.0)*x14802))+(((-1.0)*x14789*x14794*x14795))+x14790+((r20*x14807)));
evalcond[6]=((((-1.0)*x14797*x14805))+((cj1*sj2))+x14796+(((-1.0)*x14795*x14798))+(((-1.0)*r21*sj3*x14792))+((x14794*x14803))+(((-1.0)*r20*x14792*x14803)));
evalcond[7]=((((-1.0)*cj3*r11*x14792))+(((-1.0)*x14797*x14799))+((sj3*x14804))+(((-1.0)*sj2*x14791))+(((-1.0)*x14796))+((r10*x14807))+(((-1.0)*x14789*x14793*x14795)));
evalcond[8]=((((-1.0)*r11*sj3*x14792))+(((-1.0)*x14797*x14804))+((x14793*x14803))+(((-1.0)*x14802))+x14790+(((-1.0)*r10*x14792*x14803))+(((-1.0)*x14795*x14799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14808=((1.0)*sj5);
CheckValue<IkReal> x14809=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x14808)))),-1);
if(!x14809.valid){
continue;
}
CheckValue<IkReal> x14810 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x14808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14809.value)))+(x14810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14811=IKsin(j4);
IkReal x14812=IKcos(j4);
IkReal x14813=(sj1*sj2);
IkReal x14814=((1.0)*cj1);
IkReal x14815=((1.0)*cj5);
IkReal x14816=(r11*sj5);
IkReal x14817=(r21*sj5);
IkReal x14818=((1.0)*sj3);
IkReal x14819=(cj2*sj1);
IkReal x14820=((1.0)*cj3);
IkReal x14821=(r20*sj5);
IkReal x14822=(r10*sj5);
IkReal x14823=(r00*sj5);
IkReal x14824=(r01*sj5);
IkReal x14825=(cj2*x14814);
IkReal x14826=(cj3*x14812);
IkReal x14827=(r12*x14811);
IkReal x14828=(r22*x14811);
IkReal x14829=(r02*x14811);
IkReal x14830=(cj5*sj3*x14812);
evalcond[0]=(((r22*x14812))+((x14811*x14817))+(((-1.0)*r20*x14811*x14815)));
evalcond[1]=(((x14811*x14816))+(((-1.0)*r10*x14811*x14815))+((r12*x14812)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14811*x14815))+((x14811*x14824))+((r02*x14812)));
evalcond[3]=((((-1.0)*x14820*x14823))+(((-1.0)*x14812*x14818*x14824))+((sj3*x14829))+(((-1.0)*cj3*r01*x14815))+((r00*x14830)));
evalcond[4]=((((-1.0)*x14820*x14829))+(((-1.0)*x14818*x14823))+((x14824*x14826))+(((-1.0)*r01*sj3*x14815))+(((-1.0)*r00*x14815*x14826)));
evalcond[5]=((((-1.0)*x14820*x14821))+(((-1.0)*cj3*r21*x14815))+((sj3*x14828))+x14813+((r20*x14830))+(((-1.0)*x14825))+(((-1.0)*x14812*x14817*x14818)));
evalcond[6]=((((-1.0)*x14820*x14828))+(((-1.0)*x14818*x14821))+x14819+((cj1*sj2))+(((-1.0)*r20*x14815*x14826))+(((-1.0)*r21*sj3*x14815))+((x14817*x14826)));
evalcond[7]=((((-1.0)*x14820*x14822))+(((-1.0)*cj3*r11*x14815))+((sj3*x14827))+(((-1.0)*x14812*x14816*x14818))+((r10*x14830))+(((-1.0)*x14819))+(((-1.0)*sj2*x14814)));
evalcond[8]=((((-1.0)*x14820*x14827))+(((-1.0)*x14818*x14822))+x14813+(((-1.0)*r10*x14815*x14826))+(((-1.0)*x14825))+((x14816*x14826))+(((-1.0)*r11*sj3*x14815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14831 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14831.valid){
continue;
}
CheckValue<IkReal> x14832=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14831.value)+(((1.5707963267949)*(x14832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14833=IKsin(j4);
IkReal x14834=IKcos(j4);
IkReal x14835=(sj1*sj2);
IkReal x14836=((1.0)*cj1);
IkReal x14837=((1.0)*cj5);
IkReal x14838=(r11*sj5);
IkReal x14839=(r21*sj5);
IkReal x14840=((1.0)*sj3);
IkReal x14841=(cj2*sj1);
IkReal x14842=((1.0)*cj3);
IkReal x14843=(r20*sj5);
IkReal x14844=(r10*sj5);
IkReal x14845=(r00*sj5);
IkReal x14846=(r01*sj5);
IkReal x14847=(cj2*x14836);
IkReal x14848=(cj3*x14834);
IkReal x14849=(r12*x14833);
IkReal x14850=(r22*x14833);
IkReal x14851=(r02*x14833);
IkReal x14852=(cj5*sj3*x14834);
evalcond[0]=(((x14833*x14839))+((r22*x14834))+(((-1.0)*r20*x14833*x14837)));
evalcond[1]=((((-1.0)*r10*x14833*x14837))+((x14833*x14838))+((r12*x14834)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14833*x14837))+((x14833*x14846))+((r02*x14834)));
evalcond[3]=((((-1.0)*cj3*r01*x14837))+(((-1.0)*x14834*x14840*x14846))+((sj3*x14851))+(((-1.0)*x14842*x14845))+((r00*x14852)));
evalcond[4]=((((-1.0)*r01*sj3*x14837))+(((-1.0)*x14842*x14851))+(((-1.0)*r00*x14837*x14848))+((x14846*x14848))+(((-1.0)*x14840*x14845)));
evalcond[5]=(((r20*x14852))+x14835+((sj3*x14850))+(((-1.0)*x14842*x14843))+(((-1.0)*cj3*r21*x14837))+(((-1.0)*x14834*x14839*x14840))+(((-1.0)*x14847)));
evalcond[6]=((((-1.0)*r21*sj3*x14837))+x14841+((cj1*sj2))+(((-1.0)*x14842*x14850))+(((-1.0)*r20*x14837*x14848))+((x14839*x14848))+(((-1.0)*x14840*x14843)));
evalcond[7]=((((-1.0)*x14841))+((sj3*x14849))+(((-1.0)*x14842*x14844))+(((-1.0)*sj2*x14836))+((r10*x14852))+(((-1.0)*x14834*x14838*x14840))+(((-1.0)*cj3*r11*x14837)));
evalcond[8]=(x14835+(((-1.0)*x14842*x14849))+(((-1.0)*r11*sj3*x14837))+(((-1.0)*r10*x14837*x14848))+(((-1.0)*x14847))+((x14838*x14848))+(((-1.0)*x14840*x14844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14853=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14853;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x14853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14854=((1.0)*sj5);
IkReal x14855=((((-1.0)*r20*x14854))+(((-1.0)*cj5*r21)));
j4eval[0]=x14855;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x14854))))));
j4eval[2]=IKsign(x14855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14856=cj5*cj5;
IkReal x14857=((1.0)*sj3);
IkReal x14858=(r01*r21);
IkReal x14859=(cj5*sj3*sj5);
IkReal x14860=((((-1.0)*r02*r22*x14857))+(((-1.0)*r00*r20*x14856*x14857))+(((-1.0)*x14857*x14858))+((r00*r21*x14859))+((sj3*x14856*x14858))+((r01*r20*x14859)));
j4eval[0]=x14860;
j4eval[1]=IKsign(x14860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14861=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14861;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x14861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14862=((1.0)*sj5);
IkReal x14863=((((-1.0)*r20*x14862))+(((-1.0)*cj5*r21)));
j4eval[0]=x14863;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x14862))))));
j4eval[2]=IKsign(x14863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14864=cj5*cj5;
IkReal x14865=r01*r01;
IkReal x14866=(r01*sj5);
IkReal x14867=(cj5*r00);
IkReal x14868=(((x14864*x14865))+(((2.0)*x14866*x14867))+(((-1.0)*(r02*r02)))+(((-1.0)*x14864*(r00*r00)))+(((-1.0)*x14865)));
j4eval[0]=x14868;
j4eval[1]=IKsign(x14868);
j4eval[2]=((IKabs(r02))+(IKabs((x14866+(((-1.0)*x14867))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14869=cj5*cj5;
IkReal x14870=r01*r01;
IkReal x14871=(r01*sj5);
IkReal x14872=(cj5*r00);
CheckValue<IkReal> x14873 = IKatan2WithCheck(IkReal((x14871+(((-1.0)*x14872)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14873.valid){
continue;
}
CheckValue<IkReal> x14874=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14869*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x14870))+((x14869*x14870))+(((2.0)*x14871*x14872)))),-1);
if(!x14874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14873.value)+(((1.5707963267949)*(x14874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14875=IKsin(j4);
IkReal x14876=IKcos(j4);
IkReal x14877=((1.0)*cj5);
IkReal x14878=(r21*sj5);
IkReal x14879=(sj5*x14875);
IkReal x14880=((1.0)*x14875);
IkReal x14881=(sj5*x14876);
evalcond[0]=(((r22*x14876))+((x14875*x14878))+(((-1.0)*r20*x14875*x14877)));
evalcond[1]=(((r11*x14879))+((r12*x14876))+(((-1.0)*r10*x14875*x14877)));
evalcond[2]=((1.0)+((r01*x14879))+(((-1.0)*r00*x14875*x14877))+((r02*x14876)));
evalcond[3]=((((-1.0)*r02*x14880))+((r01*x14881))+(((-1.0)*r00*x14876*x14877)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x14880))+((cj1*sj2))+(((-1.0)*r20*x14876*x14877))+((x14876*x14878)));
evalcond[5]=(((r11*x14881))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x14880))+((cj1*cj2))+(((-1.0)*r10*x14876*x14877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14882=((1.0)*sj5);
CheckValue<IkReal> x14883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14882))+(((-1.0)*cj5*r21)))),-1);
if(!x14883.valid){
continue;
}
CheckValue<IkReal> x14884 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14883.value)))+(x14884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14885=IKsin(j4);
IkReal x14886=IKcos(j4);
IkReal x14887=((1.0)*cj5);
IkReal x14888=(r21*sj5);
IkReal x14889=(sj5*x14885);
IkReal x14890=((1.0)*x14885);
IkReal x14891=(sj5*x14886);
evalcond[0]=(((x14885*x14888))+((r22*x14886))+(((-1.0)*r20*x14885*x14887)));
evalcond[1]=(((r11*x14889))+(((-1.0)*r10*x14885*x14887))+((r12*x14886)));
evalcond[2]=((1.0)+((r01*x14889))+(((-1.0)*r00*x14885*x14887))+((r02*x14886)));
evalcond[3]=(((r01*x14891))+(((-1.0)*r00*x14886*x14887))+(((-1.0)*r02*x14890)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x14890))+((cj1*sj2))+(((-1.0)*r20*x14886*x14887))+((x14886*x14888)));
evalcond[5]=(((r11*x14891))+(((-1.0)*sj1*sj2))+(((-1.0)*r10*x14886*x14887))+((cj1*cj2))+(((-1.0)*r12*x14890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14892=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14892.valid){
continue;
}
CheckValue<IkReal> x14893 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14892.value)))+(x14893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14894=IKsin(j4);
IkReal x14895=IKcos(j4);
IkReal x14896=((1.0)*cj5);
IkReal x14897=(r21*sj5);
IkReal x14898=(sj5*x14894);
IkReal x14899=((1.0)*x14894);
IkReal x14900=(sj5*x14895);
evalcond[0]=(((x14894*x14897))+(((-1.0)*r20*x14894*x14896))+((r22*x14895)));
evalcond[1]=(((r12*x14895))+((r11*x14898))+(((-1.0)*r10*x14894*x14896)));
evalcond[2]=((1.0)+((r02*x14895))+(((-1.0)*r00*x14894*x14896))+((r01*x14898)));
evalcond[3]=(((r01*x14900))+(((-1.0)*r02*x14899))+(((-1.0)*r00*x14895*x14896)));
evalcond[4]=(((cj2*sj1))+((x14895*x14897))+(((-1.0)*r20*x14895*x14896))+(((-1.0)*r22*x14899))+((cj1*sj2)));
evalcond[5]=(((r11*x14900))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x14899))+(((-1.0)*r10*x14895*x14896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14901=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14901;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x14901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14902=((1.0)*sj5);
IkReal x14903=((((-1.0)*cj5*r21))+(((-1.0)*r20*x14902)));
j4eval[0]=x14903;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x14902)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14904=cj5*cj5;
IkReal x14905=r01*r01;
IkReal x14906=(cj5*r00);
IkReal x14907=(r01*sj5);
IkReal x14908=((((-1.0)*x14904*x14905))+x14905+((x14904*(r00*r00)))+(((-2.0)*x14906*x14907))+(r02*r02));
j4eval[0]=x14908;
j4eval[1]=((IKabs((x14906+(((-1.0)*x14907)))))+(IKabs(r02)));
j4eval[2]=IKsign(x14908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14909=cj5*cj5;
IkReal x14910=r01*r01;
IkReal x14911=(r01*sj5);
IkReal x14912=(cj5*r00);
CheckValue<IkReal> x14913 = IKatan2WithCheck(IkReal((x14912+(((-1.0)*x14911)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14913.valid){
continue;
}
CheckValue<IkReal> x14914=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14911*x14912))+x14910+(((-1.0)*x14909*x14910))+((x14909*(r00*r00)))+(r02*r02))),-1);
if(!x14914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14913.value)+(((1.5707963267949)*(x14914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14915=IKsin(j4);
IkReal x14916=IKcos(j4);
IkReal x14917=(cj5*r10);
IkReal x14918=(cj5*r00);
IkReal x14919=(cj5*r20);
IkReal x14920=((1.0)*x14915);
IkReal x14921=(sj5*x14915);
IkReal x14922=((1.0)*sj5*x14916);
evalcond[0]=(((r22*x14916))+((r21*x14921))+(((-1.0)*x14919*x14920)));
evalcond[1]=((((-1.0)*x14917*x14920))+((r12*x14916))+((r11*x14921)));
evalcond[2]=(((r02*x14915))+(((-1.0)*r01*x14922))+((x14916*x14918)));
evalcond[3]=((1.0)+(((-1.0)*x14918*x14920))+((r02*x14916))+((r01*x14921)));
evalcond[4]=(((cj2*sj1))+((r22*x14915))+((cj1*sj2))+(((-1.0)*r21*x14922))+((x14916*x14919)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x14915))+(((-1.0)*r11*x14922))+((x14916*x14917))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14923=((1.0)*sj5);
CheckValue<IkReal> x14924 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x14923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14924.valid){
continue;
}
CheckValue<IkReal> x14925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14923))+(((-1.0)*cj5*r21)))),-1);
if(!x14925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14924.value)+(((1.5707963267949)*(x14925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14926=IKsin(j4);
IkReal x14927=IKcos(j4);
IkReal x14928=(cj5*r10);
IkReal x14929=(cj5*r00);
IkReal x14930=(cj5*r20);
IkReal x14931=((1.0)*x14926);
IkReal x14932=(sj5*x14926);
IkReal x14933=((1.0)*sj5*x14927);
evalcond[0]=((((-1.0)*x14930*x14931))+((r21*x14932))+((r22*x14927)));
evalcond[1]=((((-1.0)*x14928*x14931))+((r11*x14932))+((r12*x14927)));
evalcond[2]=((((-1.0)*r01*x14933))+((r02*x14926))+((x14927*x14929)));
evalcond[3]=((1.0)+((r01*x14932))+(((-1.0)*x14929*x14931))+((r02*x14927)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x14933))+((r22*x14926))+((x14927*x14930)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*x14933))+((cj1*cj2))+((r12*x14926))+((x14927*x14928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14934=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14934.valid){
continue;
}
CheckValue<IkReal> x14935 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14934.value)))+(x14935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14936=IKsin(j4);
IkReal x14937=IKcos(j4);
IkReal x14938=(cj5*r10);
IkReal x14939=(cj5*r00);
IkReal x14940=(cj5*r20);
IkReal x14941=((1.0)*x14936);
IkReal x14942=(sj5*x14936);
IkReal x14943=((1.0)*sj5*x14937);
evalcond[0]=((((-1.0)*x14940*x14941))+((r22*x14937))+((r21*x14942)));
evalcond[1]=((((-1.0)*x14938*x14941))+((r12*x14937))+((r11*x14942)));
evalcond[2]=(((x14937*x14939))+(((-1.0)*r01*x14943))+((r02*x14936)));
evalcond[3]=((1.0)+(((-1.0)*x14939*x14941))+((r01*x14942))+((r02*x14937)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x14943))+((cj1*sj2))+((x14937*x14940))+((r22*x14936)));
evalcond[5]=(((x14937*x14938))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*x14943))+((cj1*cj2))+((r12*x14936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14945 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14945)==0){
continue;
}
IkReal x14944=pow(x14945,-0.5);
CheckValue<IkReal> x14946 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14946.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14946.value));
IkReal gconst61=((-1.0)*r11*x14944);
IkReal gconst62=(r10*x14944);
CheckValue<IkReal> x14947 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14947.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14947.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14950 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14950.valid){
continue;
}
IkReal x14948=((-1.0)*(x14950.value));
IkReal x14949=x14944;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x14948;
IkReal gconst60=x14948;
IkReal gconst61=((-1.0)*r11*x14949);
IkReal gconst62=(r10*x14949);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14953 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14953.valid){
continue;
}
IkReal x14951=((-1.0)*(x14953.value));
IkReal x14952=x14944;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x14951;
IkReal gconst60=x14951;
IkReal gconst61=((-1.0)*r11*x14952);
IkReal gconst62=(r10*x14952);
CheckValue<IkReal> x14961=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14961.valid){
continue;
}
IkReal x14954=x14961.value;
IkReal x14955=(cj3*x14954);
IkReal x14956=(r00*x14955);
IkReal x14957=(r21*x14955);
IkReal x14958=(r20*x14955);
IkReal x14959=(r01*x14955);
IkReal x14960=(r10*r11*x14955);
j4eval[0]=IKsign((((r20*x14956*(r10*r10)))+((r01*r10*r11*x14958))+((r10*r11*r21*x14956))+((r01*x14957*(r11*r11)))+((cj3*r02*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14962=gconst62*gconst62;
IkReal x14963=gconst61*gconst61;
IkReal x14964=((1.0)*r22);
IkReal x14965=(gconst62*r20);
IkReal x14966=(r01*sj3);
IkReal x14967=(cj3*r01);
IkReal x14968=(r00*sj3);
IkReal x14969=(cj3*gconst61*r00);
IkReal x14970=(r21*x14963);
IkReal x14971=(gconst61*gconst62*r21);
IkReal x14972=((1.0)*r20*x14962);
CheckValue<IkReal> x14973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*sj3*x14964))+(((-1.0)*x14966*x14970))+((gconst61*x14965*x14966))+(((-1.0)*x14968*x14972))+((x14968*x14971)))),-1);
if(!x14973.valid){
continue;
}
CheckValue<IkReal> x14974 = IKatan2WithCheck(IkReal(((((-1.0)*gconst62*x14964*x14967))+(((-1.0)*x14964*x14969)))),IkReal(((((-1.0)*x14967*x14972))+(((-1.0)*x14965*x14969))+((x14967*x14971))+((cj3*r00*x14970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14973.value)))+(x14974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14975=IKsin(j4);
IkReal x14976=IKcos(j4);
IkReal x14977=(cj2*sj1);
IkReal x14978=(cj1*sj2);
IkReal x14979=((1.0)*gconst61);
IkReal x14980=(cj3*r00);
IkReal x14981=(sj1*sj2);
IkReal x14982=((1.0)*gconst62);
IkReal x14983=(cj1*cj2);
IkReal x14984=(cj3*r10);
IkReal x14985=(cj3*r20);
IkReal x14986=(sj3*x14976);
IkReal x14987=(gconst61*x14975);
IkReal x14988=(sj3*x14975);
IkReal x14989=(x14978+x14977);
IkReal x14990=(cj3*gconst61*x14976);
IkReal x14991=((1.0)*cj3*x14975);
evalcond[0]=(((r22*x14976))+((r21*x14987))+(((-1.0)*r20*x14975*x14982)));
evalcond[1]=(((r12*x14976))+((r11*x14987))+(((-1.0)*r10*x14975*x14982)));
evalcond[2]=((1.0)+((r02*x14976))+((r01*x14987))+(((-1.0)*r00*x14975*x14982)));
evalcond[3]=(((gconst62*r00*x14986))+(((-1.0)*r01*x14979*x14986))+(((-1.0)*cj3*r01*x14982))+(((-1.0)*x14979*x14980))+((r02*x14988)));
evalcond[4]=((((-1.0)*x14976*x14980*x14982))+((r01*x14990))+(((-1.0)*r01*sj3*x14982))+(((-1.0)*r00*sj3*x14979))+(((-1.0)*r02*x14991)));
evalcond[5]=(((gconst62*r10*x14986))+x14989+(((-1.0)*cj3*r11*x14982))+(((-1.0)*r11*x14979*x14986))+(((-1.0)*x14979*x14984))+((r12*x14988)));
evalcond[6]=(x14981+((r22*x14988))+(((-1.0)*r21*x14979*x14986))+(((-1.0)*cj3*r21*x14982))+(((-1.0)*x14979*x14985))+((gconst62*r20*x14986))+(((-1.0)*x14983)));
evalcond[7]=(((r21*x14990))+x14989+(((-1.0)*x14976*x14982*x14985))+(((-1.0)*r21*sj3*x14982))+(((-1.0)*r22*x14991))+(((-1.0)*r20*sj3*x14979)));
evalcond[8]=((((-1.0)*r11*sj3*x14982))+(((-1.0)*r12*x14991))+x14983+(((-1.0)*r10*sj3*x14979))+(((-1.0)*x14976*x14982*x14984))+((r11*x14990))+(((-1.0)*x14981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14992=gconst61*gconst61;
IkReal x14993=gconst62*gconst62;
IkReal x14994=(r00*r20);
IkReal x14995=(r21*sj3);
IkReal x14996=((1.0)*r20);
IkReal x14997=(cj3*r21);
IkReal x14998=((1.0)*gconst62*sj3);
IkReal x14999=(gconst61*gconst62*r01);
IkReal x15000=((1.0)*gconst61*r00);
CheckValue<IkReal> x15001=IKPowWithIntegerCheck(IKsign((((cj3*x14993*x14994))+(((-1.0)*gconst62*x14997*x15000))+((cj3*r02*r22))+(((-1.0)*cj3*x14996*x14999))+((r01*x14992*x14997)))),-1);
if(!x15001.valid){
continue;
}
CheckValue<IkReal> x15002 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj3*x15000))+(((-1.0)*r01*r22*x14998)))),IkReal((((x14995*x14999))+(((-1.0)*r01*sj3*x14993*x14996))+((r00*x14992*x14995))+(((-1.0)*gconst61*x14994*x14998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15001.value)))+(x15002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15003=IKsin(j4);
IkReal x15004=IKcos(j4);
IkReal x15005=(cj2*sj1);
IkReal x15006=(cj1*sj2);
IkReal x15007=((1.0)*gconst61);
IkReal x15008=(cj3*r00);
IkReal x15009=(sj1*sj2);
IkReal x15010=((1.0)*gconst62);
IkReal x15011=(cj1*cj2);
IkReal x15012=(cj3*r10);
IkReal x15013=(cj3*r20);
IkReal x15014=(sj3*x15004);
IkReal x15015=(gconst61*x15003);
IkReal x15016=(sj3*x15003);
IkReal x15017=(x15005+x15006);
IkReal x15018=(cj3*gconst61*x15004);
IkReal x15019=((1.0)*cj3*x15003);
evalcond[0]=(((r21*x15015))+(((-1.0)*r20*x15003*x15010))+((r22*x15004)));
evalcond[1]=((((-1.0)*r10*x15003*x15010))+((r12*x15004))+((r11*x15015)));
evalcond[2]=((1.0)+((r01*x15015))+((r02*x15004))+(((-1.0)*r00*x15003*x15010)));
evalcond[3]=(((gconst62*r00*x15014))+(((-1.0)*cj3*r01*x15010))+(((-1.0)*x15007*x15008))+((r02*x15016))+(((-1.0)*r01*x15007*x15014)));
evalcond[4]=((((-1.0)*r00*sj3*x15007))+((r01*x15018))+(((-1.0)*x15004*x15008*x15010))+(((-1.0)*r02*x15019))+(((-1.0)*r01*sj3*x15010)));
evalcond[5]=((((-1.0)*cj3*r11*x15010))+((gconst62*r10*x15014))+(((-1.0)*r11*x15007*x15014))+x15017+(((-1.0)*x15007*x15012))+((r12*x15016)));
evalcond[6]=(((r22*x15016))+(((-1.0)*x15011))+(((-1.0)*cj3*r21*x15010))+x15009+((gconst62*r20*x15014))+(((-1.0)*x15007*x15013))+(((-1.0)*r21*x15007*x15014)));
evalcond[7]=(x15017+((r21*x15018))+(((-1.0)*r22*x15019))+(((-1.0)*r20*sj3*x15007))+(((-1.0)*r21*sj3*x15010))+(((-1.0)*x15004*x15010*x15013)));
evalcond[8]=((((-1.0)*r12*x15019))+(((-1.0)*r10*sj3*x15007))+(((-1.0)*x15009))+x15011+((r11*x15018))+(((-1.0)*x15004*x15010*x15012))+(((-1.0)*r11*sj3*x15010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15020=((1.0)*gconst61);
CheckValue<IkReal> x15021=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*r21))+(((-1.0)*r20*x15020)))),-1);
if(!x15021.valid){
continue;
}
CheckValue<IkReal> x15022 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x15020))+((gconst62*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15021.value)))+(x15022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15023=IKsin(j4);
IkReal x15024=IKcos(j4);
IkReal x15025=(cj2*sj1);
IkReal x15026=(cj1*sj2);
IkReal x15027=((1.0)*gconst61);
IkReal x15028=(cj3*r00);
IkReal x15029=(sj1*sj2);
IkReal x15030=((1.0)*gconst62);
IkReal x15031=(cj1*cj2);
IkReal x15032=(cj3*r10);
IkReal x15033=(cj3*r20);
IkReal x15034=(sj3*x15024);
IkReal x15035=(gconst61*x15023);
IkReal x15036=(sj3*x15023);
IkReal x15037=(x15026+x15025);
IkReal x15038=(cj3*gconst61*x15024);
IkReal x15039=((1.0)*cj3*x15023);
evalcond[0]=(((r21*x15035))+((r22*x15024))+(((-1.0)*r20*x15023*x15030)));
evalcond[1]=((((-1.0)*r10*x15023*x15030))+((r11*x15035))+((r12*x15024)));
evalcond[2]=((1.0)+((r01*x15035))+(((-1.0)*r00*x15023*x15030))+((r02*x15024)));
evalcond[3]=((((-1.0)*r01*x15027*x15034))+((gconst62*r00*x15034))+(((-1.0)*x15027*x15028))+(((-1.0)*cj3*r01*x15030))+((r02*x15036)));
evalcond[4]=((((-1.0)*x15024*x15028*x15030))+((r01*x15038))+(((-1.0)*r00*sj3*x15027))+(((-1.0)*r02*x15039))+(((-1.0)*r01*sj3*x15030)));
evalcond[5]=((((-1.0)*cj3*r11*x15030))+x15037+((r12*x15036))+((gconst62*r10*x15034))+(((-1.0)*x15027*x15032))+(((-1.0)*r11*x15027*x15034)));
evalcond[6]=((((-1.0)*r21*x15027*x15034))+(((-1.0)*x15031))+x15029+(((-1.0)*x15027*x15033))+((r22*x15036))+((gconst62*r20*x15034))+(((-1.0)*cj3*r21*x15030)));
evalcond[7]=(((r21*x15038))+(((-1.0)*x15024*x15030*x15033))+x15037+(((-1.0)*r21*sj3*x15030))+(((-1.0)*r22*x15039))+(((-1.0)*r20*sj3*x15027)));
evalcond[8]=((((-1.0)*x15029))+(((-1.0)*x15024*x15030*x15032))+x15031+((r11*x15038))+(((-1.0)*r12*x15039))+(((-1.0)*r10*sj3*x15027))+(((-1.0)*r11*sj3*x15030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15041 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15041)==0){
continue;
}
IkReal x15040=pow(x15041,-0.5);
CheckValue<IkReal> x15042 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15042.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15042.value))));
IkReal gconst64=((1.0)*r11*x15040);
IkReal gconst65=((-1.0)*r10*x15040);
CheckValue<IkReal> x15043 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15043.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15043.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15046 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15046.valid){
continue;
}
IkReal x15044=((1.0)*(x15046.value));
IkReal x15045=x15040;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15044)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15044)));
IkReal gconst64=((1.0)*r11*x15045);
IkReal gconst65=((-1.0)*r10*x15045);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15047=gconst64*gconst64;
IkReal x15048=gconst65*gconst65;
IkReal x15049=((1.0)*gconst64);
IkReal x15050=(gconst65*r01);
IkReal x15051=(cj3*r20);
IkReal x15052=(r22*sj3);
IkReal x15053=(r21*sj3);
IkReal x15054=(gconst65*r00);
IkReal x15055=(cj3*r21);
IkReal x15056=(r20*sj3);
CheckValue<IkReal> x15057 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x15049*x15052))+(((-1.0)*x15050*x15052)))),IkReal((((r00*x15047*x15053))+(((-1.0)*x15049*x15054*x15056))+((gconst64*x15050*x15053))+(((-1.0)*r01*x15048*x15056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15057.valid){
continue;
}
CheckValue<IkReal> x15058=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15049*x15050*x15051))+((r00*x15048*x15051))+((r01*x15047*x15055))+(((-1.0)*x15049*x15054*x15055))+((cj3*r02*r22)))),-1);
if(!x15058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15057.value)+(((1.5707963267949)*(x15058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15059=IKsin(j4);
IkReal x15060=IKcos(j4);
IkReal x15061=(cj2*sj1);
IkReal x15062=(cj1*sj2);
IkReal x15063=(cj3*gconst64);
IkReal x15064=((1.0)*gconst65);
IkReal x15065=(sj1*sj2);
IkReal x15066=((1.0)*r00);
IkReal x15067=(cj1*cj2);
IkReal x15068=(r21*sj3);
IkReal x15069=(r11*x15060);
IkReal x15070=(sj3*x15059);
IkReal x15071=(r01*x15060);
IkReal x15072=(cj3*x15060);
IkReal x15073=(gconst64*x15059);
IkReal x15074=((1.0)*gconst64*sj3);
IkReal x15075=(x15062+x15061);
IkReal x15076=((1.0)*cj3*x15059);
IkReal x15077=(gconst65*sj3*x15060);
evalcond[0]=((((-1.0)*r20*x15059*x15064))+((r21*x15073))+((r22*x15060)));
evalcond[1]=((((-1.0)*r10*x15059*x15064))+((r11*x15073))+((r12*x15060)));
evalcond[2]=((1.0)+((r01*x15073))+((r02*x15060))+(((-1.0)*r00*x15059*x15064)));
evalcond[3]=((((-1.0)*x15063*x15066))+((r02*x15070))+(((-1.0)*cj3*r01*x15064))+((r00*x15077))+(((-1.0)*x15071*x15074)));
evalcond[4]=(((x15063*x15071))+(((-1.0)*r01*sj3*x15064))+(((-1.0)*r02*x15076))+(((-1.0)*gconst64*sj3*x15066))+(((-1.0)*r00*x15064*x15072)));
evalcond[5]=(((r12*x15070))+(((-1.0)*x15069*x15074))+(((-1.0)*r10*x15063))+x15075+((r10*x15077))+(((-1.0)*cj3*r11*x15064)));
evalcond[6]=((((-1.0)*cj3*r21*x15064))+(((-1.0)*r20*x15063))+(((-1.0)*gconst64*x15060*x15068))+((r22*x15070))+x15065+(((-1.0)*x15067))+((r20*x15077)));
evalcond[7]=((((-1.0)*r20*x15074))+(((-1.0)*x15064*x15068))+(((-1.0)*r20*x15064*x15072))+x15075+(((-1.0)*r22*x15076))+((r21*x15060*x15063)));
evalcond[8]=((((-1.0)*r12*x15076))+(((-1.0)*r11*sj3*x15064))+x15067+(((-1.0)*x15065))+((x15063*x15069))+(((-1.0)*r10*x15074))+(((-1.0)*r10*x15064*x15072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15078=((1.0)*gconst64);
CheckValue<IkReal> x15079=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15078))+(((-1.0)*gconst65*r21)))),-1);
if(!x15079.valid){
continue;
}
CheckValue<IkReal> x15080 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x15078))+((gconst65*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15079.value)))+(x15080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15081=IKsin(j4);
IkReal x15082=IKcos(j4);
IkReal x15083=(cj2*sj1);
IkReal x15084=(cj1*sj2);
IkReal x15085=(cj3*gconst64);
IkReal x15086=((1.0)*gconst65);
IkReal x15087=(sj1*sj2);
IkReal x15088=((1.0)*r00);
IkReal x15089=(cj1*cj2);
IkReal x15090=(r21*sj3);
IkReal x15091=(r11*x15082);
IkReal x15092=(sj3*x15081);
IkReal x15093=(r01*x15082);
IkReal x15094=(cj3*x15082);
IkReal x15095=(gconst64*x15081);
IkReal x15096=((1.0)*gconst64*sj3);
IkReal x15097=(x15084+x15083);
IkReal x15098=((1.0)*cj3*x15081);
IkReal x15099=(gconst65*sj3*x15082);
evalcond[0]=(((r21*x15095))+((r22*x15082))+(((-1.0)*r20*x15081*x15086)));
evalcond[1]=(((r12*x15082))+((r11*x15095))+(((-1.0)*r10*x15081*x15086)));
evalcond[2]=((1.0)+((r02*x15082))+((r01*x15095))+(((-1.0)*r00*x15081*x15086)));
evalcond[3]=((((-1.0)*x15093*x15096))+((r00*x15099))+(((-1.0)*x15085*x15088))+(((-1.0)*cj3*r01*x15086))+((r02*x15092)));
evalcond[4]=((((-1.0)*r01*sj3*x15086))+(((-1.0)*gconst64*sj3*x15088))+((x15085*x15093))+(((-1.0)*r02*x15098))+(((-1.0)*r00*x15086*x15094)));
evalcond[5]=((((-1.0)*cj3*r11*x15086))+x15097+((r10*x15099))+((r12*x15092))+(((-1.0)*r10*x15085))+(((-1.0)*x15091*x15096)));
evalcond[6]=((((-1.0)*gconst64*x15082*x15090))+((r20*x15099))+x15087+(((-1.0)*cj3*r21*x15086))+(((-1.0)*r20*x15085))+((r22*x15092))+(((-1.0)*x15089)));
evalcond[7]=(x15097+(((-1.0)*r22*x15098))+(((-1.0)*r20*x15086*x15094))+(((-1.0)*x15086*x15090))+(((-1.0)*r20*x15096))+((r21*x15082*x15085)));
evalcond[8]=((((-1.0)*r10*x15096))+x15089+(((-1.0)*r10*x15086*x15094))+((x15085*x15091))+(((-1.0)*r12*x15098))+(((-1.0)*r11*sj3*x15086))+(((-1.0)*x15087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15100=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15100);
rxp0_2=(py*r00);
rxp1_0=(r21*x15100);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15101=(cj5*r00);
IkReal x15102=(r01*sj5);
j4eval[0]=(x15102+(((-1.0)*x15101)));
j4eval[1]=((((-1.0)*sj3*x15102))+((sj3*x15101)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15103=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15103);
rxp0_2=(py*r00);
rxp1_0=(r21*x15103);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15104=(r01*sj5);
IkReal x15105=((1.0)*cj5*r00);
j4eval[0]=(x15104+(((-1.0)*x15105)));
j4eval[1]=((((-1.0)*cj3*x15105))+((cj3*x15104)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15106=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15106);
rxp0_2=(py*r00);
rxp1_0=(r21*x15106);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15107=IKPowWithIntegerCheck(r12,-1);
if(!x15107.valid){
continue;
}
CheckValue<IkReal> x15108=IKPowWithIntegerCheck(sj3,-1);
if(!x15108.valid){
continue;
}
CheckValue<IkReal> x15109=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x15109.valid){
continue;
}
if( IKabs(((x15107.value)*(x15108.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15109.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15107.value)*(x15108.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x15109.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15107.value)*(x15108.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x15109.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15110=IKsin(j4);
IkReal x15111=IKcos(j4);
IkReal x15112=(cj2*sj1);
IkReal x15113=(cj1*sj2);
IkReal x15114=(sj1*sj2);
IkReal x15115=(cj3*sj5);
IkReal x15116=((1.0)*cj5);
IkReal x15117=(cj1*cj2);
IkReal x15118=(r12*x15110);
IkReal x15119=((1.0)*sj3*sj5);
IkReal x15120=(r21*x15111);
IkReal x15121=(sj5*x15110);
IkReal x15122=(cj3*x15111);
IkReal x15123=(r01*x15111);
IkReal x15124=(x15113+x15112);
IkReal x15125=(cj5*sj3*x15111);
evalcond[0]=(r12*x15111);
evalcond[1]=(x15124+((sj3*x15118)));
evalcond[2]=(((r21*x15121))+(((-1.0)*r20*x15110*x15116)));
evalcond[3]=((1.0)+((r01*x15121))+(((-1.0)*r00*x15110*x15116)));
evalcond[4]=((((-1.0)*x15114))+x15117+(((-1.0)*cj3*x15118)));
evalcond[5]=(((r00*x15125))+(((-1.0)*cj3*r01*x15116))+(((-1.0)*x15119*x15123))+(((-1.0)*r00*x15115)));
evalcond[6]=(((x15115*x15123))+(((-1.0)*r00*x15119))+(((-1.0)*r01*sj3*x15116))+(((-1.0)*r00*x15116*x15122)));
evalcond[7]=(((x15115*x15120))+(((-1.0)*r20*x15119))+x15124+(((-1.0)*r21*sj3*x15116))+(((-1.0)*r20*x15116*x15122)));
evalcond[8]=(((r20*x15125))+(((-1.0)*x15117))+(((-1.0)*cj3*r21*x15116))+(((-1.0)*x15119*x15120))+x15114+(((-1.0)*r20*x15115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15126=(r01*sj5);
IkReal x15127=((1.0)*cj5*r00);
CheckValue<IkReal> x15128=IKPowWithIntegerCheck(((((-1.0)*x15127))+x15126),-1);
if(!x15128.valid){
continue;
}
CheckValue<IkReal> x15129=IKPowWithIntegerCheck(((((-1.0)*cj3*x15127))+((cj3*x15126))),-1);
if(!x15129.valid){
continue;
}
if( IKabs(((-1.0)*(x15128.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15129.value)*((((cj5*r01*sj3))+((r00*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15128.value)))+IKsqr(((x15129.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15128.value)), ((x15129.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15130=IKsin(j4);
IkReal x15131=IKcos(j4);
IkReal x15132=(cj2*sj1);
IkReal x15133=(cj1*sj2);
IkReal x15134=(sj1*sj2);
IkReal x15135=(cj3*sj5);
IkReal x15136=((1.0)*cj5);
IkReal x15137=(cj1*cj2);
IkReal x15138=(r12*x15130);
IkReal x15139=((1.0)*sj3*sj5);
IkReal x15140=(r21*x15131);
IkReal x15141=(sj5*x15130);
IkReal x15142=(cj3*x15131);
IkReal x15143=(r01*x15131);
IkReal x15144=(x15133+x15132);
IkReal x15145=(cj5*sj3*x15131);
evalcond[0]=(r12*x15131);
evalcond[1]=(((sj3*x15138))+x15144);
evalcond[2]=((((-1.0)*r20*x15130*x15136))+((r21*x15141)));
evalcond[3]=((1.0)+(((-1.0)*r00*x15130*x15136))+((r01*x15141)));
evalcond[4]=((((-1.0)*cj3*x15138))+x15137+(((-1.0)*x15134)));
evalcond[5]=((((-1.0)*r00*x15135))+(((-1.0)*cj3*r01*x15136))+(((-1.0)*x15139*x15143))+((r00*x15145)));
evalcond[6]=((((-1.0)*r01*sj3*x15136))+(((-1.0)*r00*x15139))+(((-1.0)*r00*x15136*x15142))+((x15135*x15143)));
evalcond[7]=((((-1.0)*r20*x15136*x15142))+(((-1.0)*r21*sj3*x15136))+x15144+((x15135*x15140))+(((-1.0)*r20*x15139)));
evalcond[8]=(((r20*x15145))+(((-1.0)*x15139*x15140))+x15134+(((-1.0)*cj3*r21*x15136))+(((-1.0)*x15137))+(((-1.0)*r20*x15135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15146=(cj5*r00);
IkReal x15147=(r01*sj5);
CheckValue<IkReal> x15148=IKPowWithIntegerCheck(((((-1.0)*x15146))+x15147),-1);
if(!x15148.valid){
continue;
}
CheckValue<IkReal> x15149=IKPowWithIntegerCheck(((((-1.0)*sj3*x15147))+((sj3*x15146))),-1);
if(!x15149.valid){
continue;
}
if( IKabs(((-1.0)*(x15148.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15149.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15148.value)))+IKsqr(((x15149.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15148.value)), ((x15149.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15150=IKsin(j4);
IkReal x15151=IKcos(j4);
IkReal x15152=(cj2*sj1);
IkReal x15153=(cj1*sj2);
IkReal x15154=(sj1*sj2);
IkReal x15155=(cj3*sj5);
IkReal x15156=((1.0)*cj5);
IkReal x15157=(cj1*cj2);
IkReal x15158=(r12*x15150);
IkReal x15159=((1.0)*sj3*sj5);
IkReal x15160=(r21*x15151);
IkReal x15161=(sj5*x15150);
IkReal x15162=(cj3*x15151);
IkReal x15163=(r01*x15151);
IkReal x15164=(x15153+x15152);
IkReal x15165=(cj5*sj3*x15151);
evalcond[0]=(r12*x15151);
evalcond[1]=(((sj3*x15158))+x15164);
evalcond[2]=((((-1.0)*r20*x15150*x15156))+((r21*x15161)));
evalcond[3]=((1.0)+(((-1.0)*r00*x15150*x15156))+((r01*x15161)));
evalcond[4]=((((-1.0)*cj3*x15158))+x15157+(((-1.0)*x15154)));
evalcond[5]=((((-1.0)*x15159*x15163))+(((-1.0)*r00*x15155))+(((-1.0)*cj3*r01*x15156))+((r00*x15165)));
evalcond[6]=((((-1.0)*r01*sj3*x15156))+(((-1.0)*r00*x15159))+((x15155*x15163))+(((-1.0)*r00*x15156*x15162)));
evalcond[7]=((((-1.0)*r20*x15159))+(((-1.0)*r20*x15156*x15162))+(((-1.0)*r21*sj3*x15156))+x15164+((x15155*x15160)));
evalcond[8]=((((-1.0)*x15159*x15160))+(((-1.0)*r20*x15155))+((r20*x15165))+(((-1.0)*cj3*r21*x15156))+x15154+(((-1.0)*x15157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15166=cj5*cj5;
IkReal x15167=((1.0)*cj3);
IkReal x15168=(r21*sj3);
IkReal x15169=(cj5*r01);
IkReal x15170=(r00*r21);
IkReal x15171=((1.0)*sj3);
IkReal x15172=(cj5*r00*sj5);
IkReal x15173=(r20*x15166);
CheckValue<IkReal> x15174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x15171))+((r20*sj3*sj5*x15169))+((x15168*x15172))+(((-1.0)*r01*x15168))+((r01*x15166*x15168))+(((-1.0)*r00*x15171*x15173)))),-1);
if(!x15174.valid){
continue;
}
CheckValue<IkReal> x15175 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15167*x15169))+(((-1.0)*r00*r22*sj5*x15167)))),IkReal((((cj3*x15170))+(((-1.0)*r20*x15167*x15172))+(((-1.0)*x15166*x15167*x15170))+((cj3*r21*sj5*x15169))+(((-1.0)*r01*x15167*x15173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15174.value)))+(x15175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15176=IKsin(j4);
IkReal x15177=IKcos(j4);
IkReal x15178=(cj2*sj1);
IkReal x15179=(cj1*sj2);
IkReal x15180=((1.0)*r10);
IkReal x15181=(cj3*sj5);
IkReal x15182=(cj1*cj2);
IkReal x15183=(sj1*sj2);
IkReal x15184=((1.0)*r00);
IkReal x15185=((1.0)*r20);
IkReal x15186=(cj5*x15176);
IkReal x15187=(r11*x15177);
IkReal x15188=(r12*x15176);
IkReal x15189=(sj5*x15176);
IkReal x15190=(r21*x15177);
IkReal x15191=((1.0)*sj3*sj5);
IkReal x15192=((1.0)*cj3*cj5);
IkReal x15193=((1.0)*cj5*sj3);
IkReal x15194=(sj3*x15176);
IkReal x15195=(r01*x15177);
IkReal x15196=(x15179+x15178);
IkReal x15197=(cj5*sj3*x15177);
IkReal x15198=((1.0)*cj3*x15176);
evalcond[0]=((((-1.0)*x15185*x15186))+((r21*x15189))+((r22*x15177)));
evalcond[1]=(((r12*x15177))+(((-1.0)*x15180*x15186))+((r11*x15189)));
evalcond[2]=((1.0)+(((-1.0)*x15184*x15186))+((r02*x15177))+((r01*x15189)));
evalcond[3]=(((r00*x15197))+(((-1.0)*x15191*x15195))+((r02*x15194))+(((-1.0)*r01*x15192))+(((-1.0)*x15181*x15184)));
evalcond[4]=((((-1.0)*cj3*cj5*x15177*x15184))+(((-1.0)*sj3*sj5*x15184))+(((-1.0)*r02*x15198))+((x15181*x15195))+(((-1.0)*r01*x15193)));
evalcond[5]=((((-1.0)*r11*x15192))+((r10*x15197))+(((-1.0)*x15180*x15181))+x15196+((sj3*x15188))+(((-1.0)*x15187*x15191)));
evalcond[6]=((((-1.0)*x15190*x15191))+(((-1.0)*x15182))+((r22*x15194))+x15183+((r20*x15197))+(((-1.0)*r21*x15192))+(((-1.0)*x15181*x15185)));
evalcond[7]=(x15196+(((-1.0)*cj3*cj5*x15177*x15185))+(((-1.0)*r22*x15198))+(((-1.0)*sj3*sj5*x15185))+(((-1.0)*r21*x15193))+((x15181*x15190)));
evalcond[8]=((((-1.0)*x15183))+(((-1.0)*r11*x15193))+((x15181*x15187))+x15182+(((-1.0)*cj3*cj5*x15177*x15180))+(((-1.0)*sj3*sj5*x15180))+(((-1.0)*cj3*x15188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15199=((1.0)*sj5);
CheckValue<IkReal> x15200 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x15199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15200.valid){
continue;
}
CheckValue<IkReal> x15201=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x15199)))),-1);
if(!x15201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15200.value)+(((1.5707963267949)*(x15201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15202=IKsin(j4);
IkReal x15203=IKcos(j4);
IkReal x15204=(cj2*sj1);
IkReal x15205=(cj1*sj2);
IkReal x15206=((1.0)*r10);
IkReal x15207=(cj3*sj5);
IkReal x15208=(cj1*cj2);
IkReal x15209=(sj1*sj2);
IkReal x15210=((1.0)*r00);
IkReal x15211=((1.0)*r20);
IkReal x15212=(cj5*x15202);
IkReal x15213=(r11*x15203);
IkReal x15214=(r12*x15202);
IkReal x15215=(sj5*x15202);
IkReal x15216=(r21*x15203);
IkReal x15217=((1.0)*sj3*sj5);
IkReal x15218=((1.0)*cj3*cj5);
IkReal x15219=((1.0)*cj5*sj3);
IkReal x15220=(sj3*x15202);
IkReal x15221=(r01*x15203);
IkReal x15222=(x15205+x15204);
IkReal x15223=(cj5*sj3*x15203);
IkReal x15224=((1.0)*cj3*x15202);
evalcond[0]=(((r22*x15203))+((r21*x15215))+(((-1.0)*x15211*x15212)));
evalcond[1]=(((r11*x15215))+((r12*x15203))+(((-1.0)*x15206*x15212)));
evalcond[2]=((1.0)+(((-1.0)*x15210*x15212))+((r01*x15215))+((r02*x15203)));
evalcond[3]=(((r00*x15223))+((r02*x15220))+(((-1.0)*x15217*x15221))+(((-1.0)*x15207*x15210))+(((-1.0)*r01*x15218)));
evalcond[4]=((((-1.0)*sj3*sj5*x15210))+(((-1.0)*r02*x15224))+((x15207*x15221))+(((-1.0)*r01*x15219))+(((-1.0)*cj3*cj5*x15203*x15210)));
evalcond[5]=(((sj3*x15214))+x15222+((r10*x15223))+(((-1.0)*r11*x15218))+(((-1.0)*x15213*x15217))+(((-1.0)*x15206*x15207)));
evalcond[6]=(((r22*x15220))+(((-1.0)*r21*x15218))+(((-1.0)*x15208))+x15209+((r20*x15223))+(((-1.0)*x15216*x15217))+(((-1.0)*x15207*x15211)));
evalcond[7]=((((-1.0)*r21*x15219))+(((-1.0)*sj3*sj5*x15211))+x15222+((x15207*x15216))+(((-1.0)*r22*x15224))+(((-1.0)*cj3*cj5*x15203*x15211)));
evalcond[8]=((((-1.0)*cj3*cj5*x15203*x15206))+(((-1.0)*x15209))+(((-1.0)*sj3*sj5*x15206))+x15208+(((-1.0)*cj3*x15214))+(((-1.0)*r11*x15219))+((x15207*x15213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15225=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15225.valid){
continue;
}
CheckValue<IkReal> x15226 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15225.value)))+(x15226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15227=IKsin(j4);
IkReal x15228=IKcos(j4);
IkReal x15229=(cj2*sj1);
IkReal x15230=(cj1*sj2);
IkReal x15231=((1.0)*r10);
IkReal x15232=(cj3*sj5);
IkReal x15233=(cj1*cj2);
IkReal x15234=(sj1*sj2);
IkReal x15235=((1.0)*r00);
IkReal x15236=((1.0)*r20);
IkReal x15237=(cj5*x15227);
IkReal x15238=(r11*x15228);
IkReal x15239=(r12*x15227);
IkReal x15240=(sj5*x15227);
IkReal x15241=(r21*x15228);
IkReal x15242=((1.0)*sj3*sj5);
IkReal x15243=((1.0)*cj3*cj5);
IkReal x15244=((1.0)*cj5*sj3);
IkReal x15245=(sj3*x15227);
IkReal x15246=(r01*x15228);
IkReal x15247=(x15229+x15230);
IkReal x15248=(cj5*sj3*x15228);
IkReal x15249=((1.0)*cj3*x15227);
evalcond[0]=(((r22*x15228))+((r21*x15240))+(((-1.0)*x15236*x15237)));
evalcond[1]=(((r12*x15228))+(((-1.0)*x15231*x15237))+((r11*x15240)));
evalcond[2]=((1.0)+((r01*x15240))+((r02*x15228))+(((-1.0)*x15235*x15237)));
evalcond[3]=((((-1.0)*x15232*x15235))+((r00*x15248))+(((-1.0)*x15242*x15246))+(((-1.0)*r01*x15243))+((r02*x15245)));
evalcond[4]=((((-1.0)*sj3*sj5*x15235))+(((-1.0)*cj3*cj5*x15228*x15235))+(((-1.0)*r01*x15244))+(((-1.0)*r02*x15249))+((x15232*x15246)));
evalcond[5]=(((sj3*x15239))+(((-1.0)*x15231*x15232))+x15247+(((-1.0)*r11*x15243))+((r10*x15248))+(((-1.0)*x15238*x15242)));
evalcond[6]=((((-1.0)*x15232*x15236))+(((-1.0)*x15233))+x15234+((r22*x15245))+(((-1.0)*x15241*x15242))+(((-1.0)*r21*x15243))+((r20*x15248)));
evalcond[7]=((((-1.0)*sj3*sj5*x15236))+(((-1.0)*cj3*cj5*x15228*x15236))+x15247+(((-1.0)*r22*x15249))+(((-1.0)*r21*x15244))+((x15232*x15241)));
evalcond[8]=((((-1.0)*x15234))+(((-1.0)*sj3*sj5*x15231))+(((-1.0)*cj3*cj5*x15228*x15231))+x15233+(((-1.0)*r11*x15244))+(((-1.0)*cj3*x15239))+((x15232*x15238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15250=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15250);
rxp1_1=(px*r21);
rxp1_2=(r11*x15250);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15251=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15251);
rxp1_1=(px*r21);
rxp1_2=(r11*x15251);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15252=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15252)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15252)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15253=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15253);
rxp1_1=(px*r21);
rxp1_2=(r11*x15253);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15254=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15254);
rxp1_1=(px*r21);
rxp1_2=(r11*x15254);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15255=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15255);
rxp1_1=(px*r21);
rxp1_2=(r11*x15255);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15256=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15256);
rxp1_1=(px*r21);
rxp1_2=(r11*x15256);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15259=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15259.valid){
continue;
}
IkReal x15257=x15259.value;
IkReal x15258=(sj0*x15257);
cj4array[0]=(((cj1*cj2*x15258))+(((-1.0)*sj1*sj2*x15258)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15260=IKsin(j4);
IkReal x15261=IKcos(j4);
IkReal x15262=(r21*sj5);
IkReal x15263=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x15260);
evalcond[1]=((((-1.0)*sj0))+((r02*x15261)));
evalcond[2]=(((x15260*x15262))+(((-1.0)*x15260*x15263)));
evalcond[3]=((((-1.0)*cj5*r10*x15260))+((r11*sj5*x15260)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15261*x15262))+(((-1.0)*x15261*x15263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15266=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15266.valid){
continue;
}
IkReal x15264=x15266.value;
IkReal x15265=((1.0)*x15264);
cj4array[0]=((((-1.0)*cj2*sj1*x15265))+(((-1.0)*cj1*sj2*x15265)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15267=IKsin(j4);
IkReal x15268=IKcos(j4);
IkReal x15269=((1.0)*sj0);
IkReal x15270=((1.0)*cj5);
IkReal x15271=(sj5*x15267);
evalcond[0]=((-1.0)*r02*x15267);
evalcond[1]=((((-1.0)*x15269))+((r02*x15268)));
evalcond[2]=((((-1.0)*r20*x15267*x15270))+((r21*x15271)));
evalcond[3]=(((r11*x15271))+(((-1.0)*r10*x15267*x15270)));
evalcond[4]=(((sj0*sj1*sj2))+(((-1.0)*r10*x15268*x15270))+(((-1.0)*cj1*cj2*x15269))+((r11*sj5*x15268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15272=IKPowWithIntegerCheck(r02,-1);
if(!x15272.valid){
continue;
}
cj4array[0]=(sj0*(x15272.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15273=IKsin(j4);
IkReal x15274=IKcos(j4);
IkReal x15275=(r21*sj5);
IkReal x15276=((1.0)*cj5);
IkReal x15277=(r11*sj5);
evalcond[0]=((-1.0)*r02*x15273);
evalcond[1]=((((-1.0)*r20*x15273*x15276))+((x15273*x15275)));
evalcond[2]=((((-1.0)*r10*x15273*x15276))+((x15273*x15277)));
evalcond[3]=(((x15274*x15275))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x15274*x15276)));
evalcond[4]=(((x15274*x15277))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r10*x15274*x15276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15278=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15278);
rxp1_1=(px*r21);
rxp1_2=(r11*x15278);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15279=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15279);
rxp1_1=(px*r21);
rxp1_2=(r11*x15279);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15280=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15280);
rxp1_1=(px*r21);
rxp1_2=(r11*x15280);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15283=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15283.valid){
continue;
}
IkReal x15281=x15283.value;
IkReal x15282=(sj0*x15281);
cj4array[0]=(((cj1*cj2*x15282))+(((-1.0)*sj1*sj2*x15282)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15284=IKsin(j4);
IkReal x15285=IKcos(j4);
IkReal x15286=(r21*sj5);
IkReal x15287=(cj5*r20);
IkReal x15288=((1.0)*x15284);
evalcond[0]=(r02*x15284);
evalcond[1]=((((-1.0)*sj0))+((r02*x15285)));
evalcond[2]=((((-1.0)*x15287*x15288))+((x15284*x15286)));
evalcond[3]=(((r11*sj5*x15284))+(((-1.0)*cj5*r10*x15288)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x15285*x15286))+((x15285*x15287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15291=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15291.valid){
continue;
}
IkReal x15289=x15291.value;
IkReal x15290=((1.0)*x15289);
cj4array[0]=((((-1.0)*cj2*sj1*x15290))+(((-1.0)*cj1*sj2*x15290)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15292=IKsin(j4);
IkReal x15293=IKcos(j4);
IkReal x15294=(r11*sj5);
IkReal x15295=((1.0)*sj0);
IkReal x15296=((1.0)*cj5*x15292);
evalcond[0]=(r02*x15292);
evalcond[1]=((((-1.0)*x15295))+((r02*x15293)));
evalcond[2]=((((-1.0)*r20*x15296))+((r21*sj5*x15292)));
evalcond[3]=(((x15292*x15294))+(((-1.0)*r10*x15296)));
evalcond[4]=((((-1.0)*x15293*x15294))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x15295))+((cj5*r10*x15293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15297=IKPowWithIntegerCheck(r02,-1);
if(!x15297.valid){
continue;
}
cj4array[0]=(sj0*(x15297.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15298=IKsin(j4);
IkReal x15299=IKcos(j4);
IkReal x15300=(cj5*x15299);
IkReal x15301=(sj5*x15298);
IkReal x15302=((1.0)*sj5*x15299);
IkReal x15303=((1.0)*cj5*x15298);
evalcond[0]=(r02*x15298);
evalcond[1]=(((r21*x15301))+(((-1.0)*r20*x15303)));
evalcond[2]=((((-1.0)*r10*x15303))+((r11*x15301)));
evalcond[3]=(((cj2*sj1))+((r20*x15300))+((cj1*sj2))+(((-1.0)*r21*x15302)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x15300))+((sj0*sj1*sj2))+(((-1.0)*r11*x15302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15304 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15304.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15304.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15305 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15305.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15305.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15306=((-1.0)*r10);
CheckValue<IkReal> x15308 = IKatan2WithCheck(IkReal(x15306),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15308.valid){
continue;
}
IkReal x15307=((-1.0)*(x15308.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15306);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15307;
IkReal gconst66=x15307;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15309=((-1.0)*r10);
CheckValue<IkReal> x15311 = IKatan2WithCheck(IkReal(x15309),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15311.valid){
continue;
}
IkReal x15310=((-1.0)*(x15311.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15309);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15310;
IkReal gconst66=x15310;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15312=((-1.0)*r10);
CheckValue<IkReal> x15314 = IKatan2WithCheck(IkReal(x15312),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15314.valid){
continue;
}
IkReal x15313=((-1.0)*(x15314.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15312);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15313;
IkReal gconst66=x15313;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r10*r21))+(((-1.0)*cj3*r11*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15315=(cj2*sj1);
IkReal x15316=(cj1*sj2);
CheckValue<IkReal> x15317=IKPowWithIntegerCheck(r02,-1);
if(!x15317.valid){
continue;
}
CheckValue<IkReal> x15318=IKPowWithIntegerCheck(sj3,-1);
if(!x15318.valid){
continue;
}
CheckValue<IkReal> x15319=IKPowWithIntegerCheck((((cj3*gconst67*r21))+(((-1.0)*cj3*gconst68*r20))),-1);
if(!x15319.valid){
continue;
}
if( IKabs(((x15317.value)*(x15318.value)*((((cj0*x15316))+((cj0*x15315)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15319.value)*(((((-1.0)*x15315))+(((-1.0)*x15316))+((gconst67*r20*sj3))+((gconst68*r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15317.value)*(x15318.value)*((((cj0*x15316))+((cj0*x15315))))))+IKsqr(((x15319.value)*(((((-1.0)*x15315))+(((-1.0)*x15316))+((gconst67*r20*sj3))+((gconst68*r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15317.value)*(x15318.value)*((((cj0*x15316))+((cj0*x15315))))), ((x15319.value)*(((((-1.0)*x15315))+(((-1.0)*x15316))+((gconst67*r20*sj3))+((gconst68*r21*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15320=IKsin(j4);
IkReal x15321=IKcos(j4);
IkReal x15322=((1.0)*sj3);
IkReal x15323=(gconst67*r10);
IkReal x15324=(sj1*sj2);
IkReal x15325=(gconst67*r11);
IkReal x15326=(gconst68*r21);
IkReal x15327=((1.0)*r20);
IkReal x15328=(cj2*sj1);
IkReal x15329=((1.0)*sj0);
IkReal x15330=((1.0)*cj3);
IkReal x15331=(gconst68*r10);
IkReal x15332=((1.0)*cj0);
IkReal x15333=(gconst67*r21);
IkReal x15334=(gconst68*r11);
IkReal x15335=(cj1*sj2);
IkReal x15336=((1.0)*cj1*cj2);
IkReal x15337=(cj3*x15321);
IkReal x15338=(sj3*x15321);
IkReal x15339=(r02*x15320);
evalcond[0]=((((-1.0)*x15329))+((r02*x15321)));
evalcond[1]=((((-1.0)*gconst68*x15320*x15327))+((x15320*x15333)));
evalcond[2]=(((x15320*x15325))+cj0+(((-1.0)*x15320*x15331)));
evalcond[3]=(((sj3*x15339))+(((-1.0)*x15332*x15335))+(((-1.0)*x15328*x15332)));
evalcond[4]=(((cj0*x15324))+(((-1.0)*cj1*cj2*x15332))+(((-1.0)*x15330*x15339)));
evalcond[5]=((((-1.0)*x15322*x15326))+(((-1.0)*gconst67*r20*x15322))+((x15333*x15337))+x15335+x15328+(((-1.0)*gconst68*x15327*x15337)));
evalcond[6]=(((gconst68*r20*x15338))+x15324+(((-1.0)*x15336))+(((-1.0)*cj3*gconst67*x15327))+(((-1.0)*x15326*x15330))+(((-1.0)*x15321*x15322*x15333)));
evalcond[7]=((((-1.0)*x15322*x15323))+(((-1.0)*cj1*cj2*x15329))+(((-1.0)*x15321*x15330*x15331))+((x15325*x15337))+((sj0*x15324))+(((-1.0)*x15322*x15334)));
evalcond[8]=((((-1.0)*x15323*x15330))+((x15331*x15338))+(((-1.0)*x15330*x15334))+(((-1.0)*x15329*x15335))+(((-1.0)*x15328*x15329))+(((-1.0)*x15321*x15322*x15325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15341=IKPowWithIntegerCheck(r02,-1);
if(!x15341.valid){
continue;
}
IkReal x15340=x15341.value;
CheckValue<IkReal> x15342=IKPowWithIntegerCheck(cj3,-1);
if(!x15342.valid){
continue;
}
if( IKabs((x15340*(x15342.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x15340)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15340*(x15342.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))+IKsqr((sj0*x15340))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15340*(x15342.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))), (sj0*x15340));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15343=IKsin(j4);
IkReal x15344=IKcos(j4);
IkReal x15345=((1.0)*sj3);
IkReal x15346=(gconst67*r10);
IkReal x15347=(sj1*sj2);
IkReal x15348=(gconst67*r11);
IkReal x15349=(gconst68*r21);
IkReal x15350=((1.0)*r20);
IkReal x15351=(cj2*sj1);
IkReal x15352=((1.0)*sj0);
IkReal x15353=((1.0)*cj3);
IkReal x15354=(gconst68*r10);
IkReal x15355=((1.0)*cj0);
IkReal x15356=(gconst67*r21);
IkReal x15357=(gconst68*r11);
IkReal x15358=(cj1*sj2);
IkReal x15359=((1.0)*cj1*cj2);
IkReal x15360=(cj3*x15344);
IkReal x15361=(sj3*x15344);
IkReal x15362=(r02*x15343);
evalcond[0]=((((-1.0)*x15352))+((r02*x15344)));
evalcond[1]=((((-1.0)*gconst68*x15343*x15350))+((x15343*x15356)));
evalcond[2]=(cj0+(((-1.0)*x15343*x15354))+((x15343*x15348)));
evalcond[3]=((((-1.0)*x15355*x15358))+(((-1.0)*x15351*x15355))+((sj3*x15362)));
evalcond[4]=((((-1.0)*cj1*cj2*x15355))+((cj0*x15347))+(((-1.0)*x15353*x15362)));
evalcond[5]=((((-1.0)*x15345*x15349))+x15351+x15358+((x15356*x15360))+(((-1.0)*gconst68*x15350*x15360))+(((-1.0)*gconst67*r20*x15345)));
evalcond[6]=((((-1.0)*cj3*gconst67*x15350))+(((-1.0)*x15349*x15353))+(((-1.0)*x15359))+x15347+(((-1.0)*x15344*x15345*x15356))+((gconst68*r20*x15361)));
evalcond[7]=((((-1.0)*cj1*cj2*x15352))+((sj0*x15347))+(((-1.0)*x15345*x15357))+((x15348*x15360))+(((-1.0)*x15345*x15346))+(((-1.0)*x15344*x15353*x15354)));
evalcond[8]=((((-1.0)*x15352*x15358))+(((-1.0)*x15353*x15357))+((x15354*x15361))+(((-1.0)*x15346*x15353))+(((-1.0)*x15351*x15352))+(((-1.0)*x15344*x15345*x15348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15364=IKPowWithIntegerCheck(r02,-1);
if(!x15364.valid){
continue;
}
IkReal x15363=x15364.value;
CheckValue<IkReal> x15365=IKPowWithIntegerCheck(sj3,-1);
if(!x15365.valid){
continue;
}
if( IKabs((x15363*(x15365.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x15363)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15363*(x15365.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x15363))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15363*(x15365.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x15363));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15366=IKsin(j4);
IkReal x15367=IKcos(j4);
IkReal x15368=((1.0)*sj3);
IkReal x15369=(gconst67*r10);
IkReal x15370=(sj1*sj2);
IkReal x15371=(gconst67*r11);
IkReal x15372=(gconst68*r21);
IkReal x15373=((1.0)*r20);
IkReal x15374=(cj2*sj1);
IkReal x15375=((1.0)*sj0);
IkReal x15376=((1.0)*cj3);
IkReal x15377=(gconst68*r10);
IkReal x15378=((1.0)*cj0);
IkReal x15379=(gconst67*r21);
IkReal x15380=(gconst68*r11);
IkReal x15381=(cj1*sj2);
IkReal x15382=((1.0)*cj1*cj2);
IkReal x15383=(cj3*x15367);
IkReal x15384=(sj3*x15367);
IkReal x15385=(r02*x15366);
evalcond[0]=(((r02*x15367))+(((-1.0)*x15375)));
evalcond[1]=((((-1.0)*gconst68*x15366*x15373))+((x15366*x15379)));
evalcond[2]=(cj0+((x15366*x15371))+(((-1.0)*x15366*x15377)));
evalcond[3]=((((-1.0)*x15378*x15381))+(((-1.0)*x15374*x15378))+((sj3*x15385)));
evalcond[4]=(((cj0*x15370))+(((-1.0)*cj1*cj2*x15378))+(((-1.0)*x15376*x15385)));
evalcond[5]=((((-1.0)*gconst67*r20*x15368))+(((-1.0)*x15368*x15372))+x15374+x15381+((x15379*x15383))+(((-1.0)*gconst68*x15373*x15383)));
evalcond[6]=((((-1.0)*x15372*x15376))+(((-1.0)*cj3*gconst67*x15373))+x15370+(((-1.0)*x15382))+(((-1.0)*x15367*x15368*x15379))+((gconst68*r20*x15384)));
evalcond[7]=(((x15371*x15383))+(((-1.0)*x15367*x15376*x15377))+(((-1.0)*cj1*cj2*x15375))+((sj0*x15370))+(((-1.0)*x15368*x15369))+(((-1.0)*x15368*x15380)));
evalcond[8]=((((-1.0)*x15369*x15376))+((x15377*x15384))+(((-1.0)*x15375*x15381))+(((-1.0)*x15376*x15380))+(((-1.0)*x15367*x15368*x15371))+(((-1.0)*x15374*x15375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15386=((-1.0)*r10);
CheckValue<IkReal> x15387 = IKatan2WithCheck(IkReal(x15386),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15387.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15387.value))));
IkReal gconst70=x15386;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15388 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15388.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15388.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15389=((-1.0)*r10);
IkReal x15390=((-1.0)*r11);
CheckValue<IkReal> x15392 = IKatan2WithCheck(IkReal(x15389),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15392.valid){
continue;
}
IkReal x15391=((1.0)*(x15392.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15389);
rxp1_1=(px*r21);
rxp1_2=(px*x15390);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15391)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15391)));
IkReal gconst70=x15389;
IkReal gconst71=x15390;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15393=((-1.0)*r10);
IkReal x15394=((-1.0)*r11);
CheckValue<IkReal> x15396 = IKatan2WithCheck(IkReal(x15393),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15396.valid){
continue;
}
IkReal x15395=((1.0)*(x15396.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15393);
rxp1_1=(px*r21);
rxp1_2=(px*x15394);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15395)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15395)));
IkReal gconst70=x15393;
IkReal gconst71=x15394;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15397=((-1.0)*r10);
IkReal x15398=((-1.0)*r11);
CheckValue<IkReal> x15400 = IKatan2WithCheck(IkReal(x15397),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15400.valid){
continue;
}
IkReal x15399=((1.0)*(x15400.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15397);
rxp1_1=(px*r21);
rxp1_2=(px*x15398);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15399)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15399)));
IkReal gconst70=x15397;
IkReal gconst71=x15398;
IkReal x15401=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r10*r21*x15401))+((r11*r20*x15401)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15402=(cj2*sj1);
IkReal x15403=(cj1*sj2);
CheckValue<IkReal> x15404=IKPowWithIntegerCheck(r02,-1);
if(!x15404.valid){
continue;
}
CheckValue<IkReal> x15405=IKPowWithIntegerCheck(sj3,-1);
if(!x15405.valid){
continue;
}
CheckValue<IkReal> x15406=IKPowWithIntegerCheck((((cj3*gconst70*r21))+(((-1.0)*cj3*gconst71*r20))),-1);
if(!x15406.valid){
continue;
}
if( IKabs(((x15404.value)*(x15405.value)*((((cj0*x15403))+((cj0*x15402)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15406.value)*(((((-1.0)*x15402))+(((-1.0)*x15403))+((gconst71*r21*sj3))+((gconst70*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15404.value)*(x15405.value)*((((cj0*x15403))+((cj0*x15402))))))+IKsqr(((x15406.value)*(((((-1.0)*x15402))+(((-1.0)*x15403))+((gconst71*r21*sj3))+((gconst70*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15404.value)*(x15405.value)*((((cj0*x15403))+((cj0*x15402))))), ((x15406.value)*(((((-1.0)*x15402))+(((-1.0)*x15403))+((gconst71*r21*sj3))+((gconst70*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15407=IKsin(j4);
IkReal x15408=IKcos(j4);
IkReal x15409=(cj3*r21);
IkReal x15410=((1.0)*gconst71);
IkReal x15411=(sj1*sj2);
IkReal x15412=((1.0)*sj3);
IkReal x15413=(cj2*sj1);
IkReal x15414=((1.0)*sj0);
IkReal x15415=(gconst71*sj3);
IkReal x15416=((1.0)*cj0);
IkReal x15417=(gconst70*r10);
IkReal x15418=((1.0)*cj3);
IkReal x15419=(cj3*r11);
IkReal x15420=(gconst70*r20);
IkReal x15421=(cj1*sj2);
IkReal x15422=((1.0)*cj1*cj2);
IkReal x15423=(gconst70*x15408);
IkReal x15424=(gconst70*x15407);
IkReal x15425=(r10*x15408);
IkReal x15426=(r02*x15407);
IkReal x15427=(r20*x15408);
evalcond[0]=(((r02*x15408))+(((-1.0)*x15414)));
evalcond[1]=(((r21*x15424))+(((-1.0)*r20*x15407*x15410)));
evalcond[2]=(cj0+((r11*x15424))+(((-1.0)*r10*x15407*x15410)));
evalcond[3]=((((-1.0)*x15416*x15421))+((sj3*x15426))+(((-1.0)*x15413*x15416)));
evalcond[4]=(((cj0*x15411))+(((-1.0)*x15418*x15426))+(((-1.0)*cj1*cj2*x15416)));
evalcond[5]=(((x15409*x15423))+(((-1.0)*r21*sj3*x15410))+(((-1.0)*x15412*x15420))+(((-1.0)*cj3*x15410*x15427))+x15413+x15421);
evalcond[6]=(((x15415*x15427))+(((-1.0)*x15409*x15410))+(((-1.0)*x15422))+x15411+(((-1.0)*x15418*x15420))+(((-1.0)*r21*x15412*x15423)));
evalcond[7]=((((-1.0)*cj3*x15410*x15425))+((x15419*x15423))+(((-1.0)*r11*sj3*x15410))+((sj0*x15411))+(((-1.0)*cj1*cj2*x15414))+(((-1.0)*x15412*x15417)));
evalcond[8]=(((x15415*x15425))+(((-1.0)*x15414*x15421))+(((-1.0)*x15410*x15419))+(((-1.0)*x15413*x15414))+(((-1.0)*r11*x15412*x15423))+(((-1.0)*x15417*x15418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15429=IKPowWithIntegerCheck(r02,-1);
if(!x15429.valid){
continue;
}
IkReal x15428=x15429.value;
CheckValue<IkReal> x15430=IKPowWithIntegerCheck(cj3,-1);
if(!x15430.valid){
continue;
}
if( IKabs((x15428*(x15430.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x15428)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15428*(x15430.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))+IKsqr((sj0*x15428))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15428*(x15430.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))), (sj0*x15428));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15431=IKsin(j4);
IkReal x15432=IKcos(j4);
IkReal x15433=(cj3*r21);
IkReal x15434=((1.0)*gconst71);
IkReal x15435=(sj1*sj2);
IkReal x15436=((1.0)*sj3);
IkReal x15437=(cj2*sj1);
IkReal x15438=((1.0)*sj0);
IkReal x15439=(gconst71*sj3);
IkReal x15440=((1.0)*cj0);
IkReal x15441=(gconst70*r10);
IkReal x15442=((1.0)*cj3);
IkReal x15443=(cj3*r11);
IkReal x15444=(gconst70*r20);
IkReal x15445=(cj1*sj2);
IkReal x15446=((1.0)*cj1*cj2);
IkReal x15447=(gconst70*x15432);
IkReal x15448=(gconst70*x15431);
IkReal x15449=(r10*x15432);
IkReal x15450=(r02*x15431);
IkReal x15451=(r20*x15432);
evalcond[0]=(((r02*x15432))+(((-1.0)*x15438)));
evalcond[1]=((((-1.0)*r20*x15431*x15434))+((r21*x15448)));
evalcond[2]=(cj0+((r11*x15448))+(((-1.0)*r10*x15431*x15434)));
evalcond[3]=(((sj3*x15450))+(((-1.0)*x15440*x15445))+(((-1.0)*x15437*x15440)));
evalcond[4]=(((cj0*x15435))+(((-1.0)*x15442*x15450))+(((-1.0)*cj1*cj2*x15440)));
evalcond[5]=(((x15433*x15447))+(((-1.0)*r21*sj3*x15434))+(((-1.0)*cj3*x15434*x15451))+x15445+x15437+(((-1.0)*x15436*x15444)));
evalcond[6]=((((-1.0)*x15442*x15444))+(((-1.0)*r21*x15436*x15447))+((x15439*x15451))+x15435+(((-1.0)*x15446))+(((-1.0)*x15433*x15434)));
evalcond[7]=((((-1.0)*cj1*cj2*x15438))+(((-1.0)*r11*sj3*x15434))+((sj0*x15435))+((x15443*x15447))+(((-1.0)*cj3*x15434*x15449))+(((-1.0)*x15436*x15441)));
evalcond[8]=((((-1.0)*x15441*x15442))+(((-1.0)*r11*x15436*x15447))+(((-1.0)*x15438*x15445))+(((-1.0)*x15437*x15438))+((x15439*x15449))+(((-1.0)*x15434*x15443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15453=IKPowWithIntegerCheck(r02,-1);
if(!x15453.valid){
continue;
}
IkReal x15452=x15453.value;
CheckValue<IkReal> x15454=IKPowWithIntegerCheck(sj3,-1);
if(!x15454.valid){
continue;
}
if( IKabs((x15452*(x15454.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x15452)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15452*(x15454.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x15452))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15452*(x15454.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x15452));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15455=IKsin(j4);
IkReal x15456=IKcos(j4);
IkReal x15457=(cj3*r21);
IkReal x15458=((1.0)*gconst71);
IkReal x15459=(sj1*sj2);
IkReal x15460=((1.0)*sj3);
IkReal x15461=(cj2*sj1);
IkReal x15462=((1.0)*sj0);
IkReal x15463=(gconst71*sj3);
IkReal x15464=((1.0)*cj0);
IkReal x15465=(gconst70*r10);
IkReal x15466=((1.0)*cj3);
IkReal x15467=(cj3*r11);
IkReal x15468=(gconst70*r20);
IkReal x15469=(cj1*sj2);
IkReal x15470=((1.0)*cj1*cj2);
IkReal x15471=(gconst70*x15456);
IkReal x15472=(gconst70*x15455);
IkReal x15473=(r10*x15456);
IkReal x15474=(r02*x15455);
IkReal x15475=(r20*x15456);
evalcond[0]=((((-1.0)*x15462))+((r02*x15456)));
evalcond[1]=(((r21*x15472))+(((-1.0)*r20*x15455*x15458)));
evalcond[2]=(cj0+((r11*x15472))+(((-1.0)*r10*x15455*x15458)));
evalcond[3]=((((-1.0)*x15461*x15464))+(((-1.0)*x15464*x15469))+((sj3*x15474)));
evalcond[4]=((((-1.0)*cj1*cj2*x15464))+(((-1.0)*x15466*x15474))+((cj0*x15459)));
evalcond[5]=(((x15457*x15471))+(((-1.0)*cj3*x15458*x15475))+(((-1.0)*x15460*x15468))+x15469+x15461+(((-1.0)*r21*sj3*x15458)));
evalcond[6]=((((-1.0)*x15457*x15458))+((x15463*x15475))+(((-1.0)*r21*x15460*x15471))+(((-1.0)*x15470))+(((-1.0)*x15466*x15468))+x15459);
evalcond[7]=((((-1.0)*cj1*cj2*x15462))+(((-1.0)*cj3*x15458*x15473))+(((-1.0)*x15460*x15465))+((x15467*x15471))+(((-1.0)*r11*sj3*x15458))+((sj0*x15459)));
evalcond[8]=(((x15463*x15473))+(((-1.0)*r11*x15460*x15471))+(((-1.0)*x15462*x15469))+(((-1.0)*x15461*x15462))+(((-1.0)*x15458*x15467))+(((-1.0)*x15465*x15466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15476=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15476);
rxp1_1=(px*r21);
rxp1_2=(r11*x15476);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15477=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15477);
rxp1_1=(px*r21);
rxp1_2=(r11*x15477);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15478=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15478);
rxp1_1=(px*r21);
rxp1_2=(r11*x15478);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15481=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15481.valid){
continue;
}
IkReal x15479=x15481.value;
IkReal x15480=(sj0*x15479);
cj4array[0]=(((cj2*sj1*x15480))+((cj1*sj2*x15480)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15482=IKsin(j4);
IkReal x15483=IKcos(j4);
IkReal x15484=(cj5*r20);
IkReal x15485=(r21*sj5);
IkReal x15486=((1.0)*x15482);
evalcond[0]=(r02*x15482);
evalcond[1]=((((-1.0)*sj0))+((r02*x15483)));
evalcond[2]=(((x15482*x15485))+(((-1.0)*x15484*x15486)));
evalcond[3]=((((-1.0)*cj5*r10*x15486))+((r11*sj5*x15482)));
evalcond[4]=(((x15483*x15484))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15483*x15485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15488=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15488.valid){
continue;
}
IkReal x15487=x15488.value;
cj4array[0]=(((cj1*cj2*x15487))+(((-1.0)*sj1*sj2*x15487)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15489=IKsin(j4);
IkReal x15490=IKcos(j4);
IkReal x15491=(r11*sj5);
IkReal x15492=((1.0)*sj0);
IkReal x15493=((1.0)*cj5*x15489);
evalcond[0]=(r02*x15489);
evalcond[1]=(((r02*x15490))+(((-1.0)*x15492)));
evalcond[2]=((((-1.0)*r20*x15493))+((r21*sj5*x15489)));
evalcond[3]=(((x15489*x15491))+(((-1.0)*r10*x15493)));
evalcond[4]=((((-1.0)*x15490*x15491))+(((-1.0)*cj1*sj2*x15492))+((cj5*r10*x15490))+(((-1.0)*cj2*sj1*x15492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15494=IKPowWithIntegerCheck(r02,-1);
if(!x15494.valid){
continue;
}
cj4array[0]=(sj0*(x15494.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15495=IKsin(j4);
IkReal x15496=IKcos(j4);
IkReal x15497=((1.0)*cj1);
IkReal x15498=(cj5*x15496);
IkReal x15499=(sj5*x15495);
IkReal x15500=((1.0)*sj5*x15496);
IkReal x15501=((1.0)*cj5*x15495);
evalcond[0]=(r02*x15495);
evalcond[1]=((((-1.0)*r20*x15501))+((r21*x15499)));
evalcond[2]=(((r11*x15499))+(((-1.0)*r10*x15501)));
evalcond[3]=(((r20*x15498))+((sj1*sj2))+(((-1.0)*cj2*x15497))+(((-1.0)*r21*x15500)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((r10*x15498))+(((-1.0)*r11*x15500))+(((-1.0)*sj0*sj2*x15497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15502=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15502);
rxp1_1=(px*r21);
rxp1_2=(r11*x15502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15503=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15503);
rxp1_1=(px*r21);
rxp1_2=(r11*x15503);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15504=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15504);
rxp1_1=(px*r21);
rxp1_2=(r11*x15504);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15507=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15507.valid){
continue;
}
IkReal x15505=x15507.value;
IkReal x15506=(sj0*x15505);
cj4array[0]=(((cj1*sj2*x15506))+((cj2*sj1*x15506)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15508=IKsin(j4);
IkReal x15509=IKcos(j4);
IkReal x15510=(r21*sj5);
IkReal x15511=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x15508);
evalcond[1]=((((-1.0)*sj0))+((r02*x15509)));
evalcond[2]=(((x15508*x15510))+(((-1.0)*x15508*x15511)));
evalcond[3]=(((r11*sj5*x15508))+(((-1.0)*cj5*r10*x15508)));
evalcond[4]=(((x15509*x15510))+(((-1.0)*cj1*cj2))+(((-1.0)*x15509*x15511))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15513=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15513.valid){
continue;
}
IkReal x15512=x15513.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15512))+((cj1*cj2*x15512)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15514=IKsin(j4);
IkReal x15515=IKcos(j4);
IkReal x15516=((1.0)*sj0);
IkReal x15517=((1.0)*cj5);
IkReal x15518=(sj5*x15514);
evalcond[0]=((-1.0)*r02*x15514);
evalcond[1]=(((r02*x15515))+(((-1.0)*x15516)));
evalcond[2]=(((r21*x15518))+(((-1.0)*r20*x15514*x15517)));
evalcond[3]=(((r11*x15518))+(((-1.0)*r10*x15514*x15517)));
evalcond[4]=(((r11*sj5*x15515))+(((-1.0)*r10*x15515*x15517))+(((-1.0)*cj1*sj2*x15516))+(((-1.0)*cj2*sj1*x15516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15519=IKPowWithIntegerCheck(r02,-1);
if(!x15519.valid){
continue;
}
cj4array[0]=(sj0*(x15519.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15520=IKsin(j4);
IkReal x15521=IKcos(j4);
IkReal x15522=((1.0)*sj0);
IkReal x15523=(r21*sj5);
IkReal x15524=((1.0)*cj5);
IkReal x15525=(r11*sj5);
evalcond[0]=((-1.0)*r02*x15520);
evalcond[1]=(((x15520*x15523))+(((-1.0)*r20*x15520*x15524)));
evalcond[2]=(((x15520*x15525))+(((-1.0)*r10*x15520*x15524)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15521*x15523))+(((-1.0)*r20*x15521*x15524)));
evalcond[4]=((((-1.0)*cj2*sj1*x15522))+(((-1.0)*r10*x15521*x15524))+((x15521*x15525))+(((-1.0)*cj1*sj2*x15522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15527=IKPowWithIntegerCheck(r02,-1);
if(!x15527.valid){
continue;
}
IkReal x15526=x15527.value;
CheckValue<IkReal> x15528=IKPowWithIntegerCheck(sj3,-1);
if(!x15528.valid){
continue;
}
if( IKabs((x15526*(x15528.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x15526)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15526*(x15528.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr((sj0*x15526))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15526*(x15528.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), (sj0*x15526));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15529=IKsin(j4);
IkReal x15530=IKcos(j4);
IkReal x15531=((1.0)*r10);
IkReal x15532=(sj1*sj2);
IkReal x15533=(cj5*sj3);
IkReal x15534=(cj3*sj5);
IkReal x15535=((1.0)*r20);
IkReal x15536=(cj2*sj1);
IkReal x15537=((1.0)*sj0);
IkReal x15538=((1.0)*r11);
IkReal x15539=(cj3*cj5);
IkReal x15540=(sj3*sj5);
IkReal x15541=((1.0)*cj0);
IkReal x15542=((1.0)*r21);
IkReal x15543=(cj1*sj2);
IkReal x15544=((1.0)*cj1*cj2);
IkReal x15545=(cj5*x15529);
IkReal x15546=(r20*x15530);
IkReal x15547=(r11*x15530);
IkReal x15548=(sj5*x15529);
IkReal x15549=(r21*x15530);
IkReal x15550=(r02*x15529);
evalcond[0]=(((r02*x15530))+(((-1.0)*x15537)));
evalcond[1]=(((r21*x15548))+(((-1.0)*x15535*x15545)));
evalcond[2]=(cj0+(((-1.0)*x15531*x15545))+((r11*x15548)));
evalcond[3]=((((-1.0)*x15536*x15541))+((sj3*x15550))+(((-1.0)*x15541*x15543)));
evalcond[4]=((((-1.0)*cj1*cj2*x15541))+(((-1.0)*cj3*x15550))+((cj0*x15532)));
evalcond[5]=((((-1.0)*x15533*x15542))+((x15534*x15549))+(((-1.0)*x15530*x15535*x15539))+(((-1.0)*x15535*x15540))+x15536+x15543);
evalcond[6]=(((x15533*x15546))+(((-1.0)*x15544))+(((-1.0)*x15530*x15540*x15542))+x15532+(((-1.0)*x15539*x15542))+(((-1.0)*x15534*x15535)));
evalcond[7]=((((-1.0)*cj1*cj2*x15537))+(((-1.0)*x15533*x15538))+((sj0*x15532))+((x15534*x15547))+(((-1.0)*x15531*x15540))+(((-1.0)*x15530*x15531*x15539)));
evalcond[8]=((((-1.0)*x15530*x15538*x15540))+(((-1.0)*x15531*x15534))+(((-1.0)*x15537*x15543))+(((-1.0)*x15538*x15539))+(((-1.0)*x15536*x15537))+((r10*x15530*x15533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15551=((1.0)*cj5);
CheckValue<IkReal> x15552=IKPowWithIntegerCheck(((((-1.0)*r10*x15551))+((r11*sj5))),-1);
if(!x15552.valid){
continue;
}
CheckValue<IkReal> x15553=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15551))),-1);
if(!x15553.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15552.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15553.value)*((((r20*sj3*sj5))+((cj5*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15552.value)))+IKsqr(((x15553.value)*((((r20*sj3*sj5))+((cj5*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15552.value)), ((x15553.value)*((((r20*sj3*sj5))+((cj5*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15554=IKsin(j4);
IkReal x15555=IKcos(j4);
IkReal x15556=((1.0)*r10);
IkReal x15557=(sj1*sj2);
IkReal x15558=(cj5*sj3);
IkReal x15559=(cj3*sj5);
IkReal x15560=((1.0)*r20);
IkReal x15561=(cj2*sj1);
IkReal x15562=((1.0)*sj0);
IkReal x15563=((1.0)*r11);
IkReal x15564=(cj3*cj5);
IkReal x15565=(sj3*sj5);
IkReal x15566=((1.0)*cj0);
IkReal x15567=((1.0)*r21);
IkReal x15568=(cj1*sj2);
IkReal x15569=((1.0)*cj1*cj2);
IkReal x15570=(cj5*x15554);
IkReal x15571=(r20*x15555);
IkReal x15572=(r11*x15555);
IkReal x15573=(sj5*x15554);
IkReal x15574=(r21*x15555);
IkReal x15575=(r02*x15554);
evalcond[0]=(((r02*x15555))+(((-1.0)*x15562)));
evalcond[1]=(((r21*x15573))+(((-1.0)*x15560*x15570)));
evalcond[2]=(cj0+(((-1.0)*x15556*x15570))+((r11*x15573)));
evalcond[3]=((((-1.0)*x15566*x15568))+((sj3*x15575))+(((-1.0)*x15561*x15566)));
evalcond[4]=((((-1.0)*cj1*cj2*x15566))+((cj0*x15557))+(((-1.0)*cj3*x15575)));
evalcond[5]=(((x15559*x15574))+(((-1.0)*x15558*x15567))+(((-1.0)*x15555*x15560*x15564))+x15568+x15561+(((-1.0)*x15560*x15565)));
evalcond[6]=((((-1.0)*x15555*x15565*x15567))+(((-1.0)*x15564*x15567))+(((-1.0)*x15559*x15560))+((x15558*x15571))+x15557+(((-1.0)*x15569)));
evalcond[7]=(((x15559*x15572))+((sj0*x15557))+(((-1.0)*x15558*x15563))+(((-1.0)*cj1*cj2*x15562))+(((-1.0)*x15556*x15565))+(((-1.0)*x15555*x15556*x15564)));
evalcond[8]=((((-1.0)*x15555*x15563*x15565))+(((-1.0)*x15556*x15559))+(((-1.0)*x15562*x15568))+((r10*x15555*x15558))+(((-1.0)*x15563*x15564))+(((-1.0)*x15561*x15562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15576=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15576.valid){
continue;
}
CheckValue<IkReal> x15577=IKPowWithIntegerCheck(r02,-1);
if(!x15577.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15576.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*(x15577.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15576.value)))+IKsqr((sj0*(x15577.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15576.value)), (sj0*(x15577.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15578=IKsin(j4);
IkReal x15579=IKcos(j4);
IkReal x15580=((1.0)*r10);
IkReal x15581=(sj1*sj2);
IkReal x15582=(cj5*sj3);
IkReal x15583=(cj3*sj5);
IkReal x15584=((1.0)*r20);
IkReal x15585=(cj2*sj1);
IkReal x15586=((1.0)*sj0);
IkReal x15587=((1.0)*r11);
IkReal x15588=(cj3*cj5);
IkReal x15589=(sj3*sj5);
IkReal x15590=((1.0)*cj0);
IkReal x15591=((1.0)*r21);
IkReal x15592=(cj1*sj2);
IkReal x15593=((1.0)*cj1*cj2);
IkReal x15594=(cj5*x15578);
IkReal x15595=(r20*x15579);
IkReal x15596=(r11*x15579);
IkReal x15597=(sj5*x15578);
IkReal x15598=(r21*x15579);
IkReal x15599=(r02*x15578);
evalcond[0]=((((-1.0)*x15586))+((r02*x15579)));
evalcond[1]=((((-1.0)*x15584*x15594))+((r21*x15597)));
evalcond[2]=(cj0+(((-1.0)*x15580*x15594))+((r11*x15597)));
evalcond[3]=((((-1.0)*x15585*x15590))+((sj3*x15599))+(((-1.0)*x15590*x15592)));
evalcond[4]=(((cj0*x15581))+(((-1.0)*cj1*cj2*x15590))+(((-1.0)*cj3*x15599)));
evalcond[5]=((((-1.0)*x15582*x15591))+(((-1.0)*x15579*x15584*x15588))+x15592+x15585+((x15583*x15598))+(((-1.0)*x15584*x15589)));
evalcond[6]=(((x15582*x15595))+(((-1.0)*x15593))+(((-1.0)*x15579*x15589*x15591))+x15581+(((-1.0)*x15588*x15591))+(((-1.0)*x15583*x15584)));
evalcond[7]=((((-1.0)*x15579*x15580*x15588))+(((-1.0)*cj1*cj2*x15586))+(((-1.0)*x15580*x15589))+(((-1.0)*x15582*x15587))+((x15583*x15596))+((sj0*x15581)));
evalcond[8]=((((-1.0)*x15579*x15587*x15589))+(((-1.0)*x15587*x15588))+(((-1.0)*x15585*x15586))+(((-1.0)*x15580*x15583))+(((-1.0)*x15586*x15592))+((r10*x15579*x15582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15600=((1.0)*sj0);
IkReal x15601=((1.0)*cj0);
CheckValue<IkReal> x15602 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15600))+(((-1.0)*r02*x15601)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x15600))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x15601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15602.valid){
continue;
}
CheckValue<IkReal> x15603=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15602.value)+(((1.5707963267949)*(x15603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15604=IKsin(j4);
IkReal x15605=IKcos(j4);
IkReal x15606=(r11*sj5);
IkReal x15607=((1.0)*cj5);
IkReal x15608=(sj1*sj2);
IkReal x15609=((1.0)*sj5);
IkReal x15610=(r21*sj5);
IkReal x15611=(cj2*sj1);
IkReal x15612=((1.0)*sj0);
IkReal x15613=((1.0)*cj0);
IkReal x15614=(r01*sj5);
IkReal x15615=(cj1*sj2);
IkReal x15616=(cj3*x15605);
IkReal x15617=((1.0)*cj1*cj2);
IkReal x15618=(r12*x15604);
IkReal x15619=(sj3*x15605);
IkReal x15620=(sj3*x15604);
IkReal x15621=(cj5*x15619);
IkReal x15622=((1.0)*cj3*x15604);
evalcond[0]=(((r22*x15605))+(((-1.0)*r20*x15604*x15607))+((x15604*x15610)));
evalcond[1]=(cj0+(((-1.0)*r10*x15604*x15607))+((r12*x15605))+((x15604*x15606)));
evalcond[2]=((((-1.0)*r00*x15604*x15607))+(((-1.0)*x15612))+((r02*x15605))+((x15604*x15614)));
evalcond[3]=(((r22*x15620))+(((-1.0)*x15617))+(((-1.0)*cj3*r21*x15607))+x15608+((r20*x15621))+(((-1.0)*cj3*r20*x15609))+(((-1.0)*r21*x15609*x15619)));
evalcond[4]=((((-1.0)*r21*sj3*x15607))+(((-1.0)*r20*sj3*x15609))+x15611+x15615+((x15610*x15616))+(((-1.0)*r20*x15607*x15616))+(((-1.0)*r22*x15622)));
evalcond[5]=((((-1.0)*cj3*r00*x15609))+((r00*x15621))+(((-1.0)*x15611*x15613))+(((-1.0)*r01*x15609*x15619))+((r02*x15620))+(((-1.0)*x15613*x15615))+(((-1.0)*cj3*r01*x15607)));
evalcond[6]=((((-1.0)*r00*sj3*x15609))+((cj0*x15608))+((x15614*x15616))+(((-1.0)*r01*sj3*x15607))+(((-1.0)*r00*x15607*x15616))+(((-1.0)*r02*x15622))+(((-1.0)*cj1*cj2*x15613)));
evalcond[7]=((((-1.0)*cj3*r10*x15609))+(((-1.0)*cj3*r11*x15607))+(((-1.0)*x15611*x15612))+(((-1.0)*x15606*x15619))+(((-1.0)*x15612*x15615))+((sj3*x15618))+((r10*x15621)));
evalcond[8]=((((-1.0)*r10*x15607*x15616))+(((-1.0)*r10*sj3*x15609))+(((-1.0)*cj3*x15618))+((x15606*x15616))+(((-1.0)*cj1*cj2*x15612))+(((-1.0)*r11*sj3*x15607))+((sj0*x15608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15623=((1.0)*sj5);
CheckValue<IkReal> x15624=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x15623)))),-1);
if(!x15624.valid){
continue;
}
CheckValue<IkReal> x15625 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x15623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15624.value)))+(x15625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15626=IKsin(j4);
IkReal x15627=IKcos(j4);
IkReal x15628=(r11*sj5);
IkReal x15629=((1.0)*cj5);
IkReal x15630=(sj1*sj2);
IkReal x15631=((1.0)*sj5);
IkReal x15632=(r21*sj5);
IkReal x15633=(cj2*sj1);
IkReal x15634=((1.0)*sj0);
IkReal x15635=((1.0)*cj0);
IkReal x15636=(r01*sj5);
IkReal x15637=(cj1*sj2);
IkReal x15638=(cj3*x15627);
IkReal x15639=((1.0)*cj1*cj2);
IkReal x15640=(r12*x15626);
IkReal x15641=(sj3*x15627);
IkReal x15642=(sj3*x15626);
IkReal x15643=(cj5*x15641);
IkReal x15644=((1.0)*cj3*x15626);
evalcond[0]=(((r22*x15627))+((x15626*x15632))+(((-1.0)*r20*x15626*x15629)));
evalcond[1]=(cj0+((x15626*x15628))+(((-1.0)*r10*x15626*x15629))+((r12*x15627)));
evalcond[2]=(((x15626*x15636))+((r02*x15627))+(((-1.0)*x15634))+(((-1.0)*r00*x15626*x15629)));
evalcond[3]=((((-1.0)*cj3*r20*x15631))+x15630+(((-1.0)*cj3*r21*x15629))+((r22*x15642))+(((-1.0)*x15639))+(((-1.0)*r21*x15631*x15641))+((r20*x15643)));
evalcond[4]=((((-1.0)*r20*sj3*x15631))+(((-1.0)*r21*sj3*x15629))+(((-1.0)*r20*x15629*x15638))+x15633+x15637+((x15632*x15638))+(((-1.0)*r22*x15644)));
evalcond[5]=((((-1.0)*r01*x15631*x15641))+(((-1.0)*x15633*x15635))+((r00*x15643))+(((-1.0)*x15635*x15637))+(((-1.0)*cj3*r01*x15629))+(((-1.0)*cj3*r00*x15631))+((r02*x15642)));
evalcond[6]=((((-1.0)*cj1*cj2*x15635))+(((-1.0)*r01*sj3*x15629))+(((-1.0)*r00*x15629*x15638))+((cj0*x15630))+((x15636*x15638))+(((-1.0)*r02*x15644))+(((-1.0)*r00*sj3*x15631)));
evalcond[7]=((((-1.0)*x15628*x15641))+((sj3*x15640))+(((-1.0)*x15633*x15634))+(((-1.0)*cj3*r10*x15631))+(((-1.0)*x15634*x15637))+((r10*x15643))+(((-1.0)*cj3*r11*x15629)));
evalcond[8]=((((-1.0)*cj1*cj2*x15634))+(((-1.0)*r11*sj3*x15629))+(((-1.0)*r10*x15629*x15638))+(((-1.0)*cj3*x15640))+(((-1.0)*r10*sj3*x15631))+((sj0*x15630))+((x15628*x15638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15645=((1.0)*sj5);
CheckValue<IkReal> x15646=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15645))+(((-1.0)*cj5*r01)))),-1);
if(!x15646.valid){
continue;
}
CheckValue<IkReal> x15647 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*x15645))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15646.value)))+(x15647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15648=IKsin(j4);
IkReal x15649=IKcos(j4);
IkReal x15650=(r11*sj5);
IkReal x15651=((1.0)*cj5);
IkReal x15652=(sj1*sj2);
IkReal x15653=((1.0)*sj5);
IkReal x15654=(r21*sj5);
IkReal x15655=(cj2*sj1);
IkReal x15656=((1.0)*sj0);
IkReal x15657=((1.0)*cj0);
IkReal x15658=(r01*sj5);
IkReal x15659=(cj1*sj2);
IkReal x15660=(cj3*x15649);
IkReal x15661=((1.0)*cj1*cj2);
IkReal x15662=(r12*x15648);
IkReal x15663=(sj3*x15649);
IkReal x15664=(sj3*x15648);
IkReal x15665=(cj5*x15663);
IkReal x15666=((1.0)*cj3*x15648);
evalcond[0]=((((-1.0)*r20*x15648*x15651))+((r22*x15649))+((x15648*x15654)));
evalcond[1]=(cj0+((r12*x15649))+(((-1.0)*r10*x15648*x15651))+((x15648*x15650)));
evalcond[2]=((((-1.0)*r00*x15648*x15651))+(((-1.0)*x15656))+((r02*x15649))+((x15648*x15658)));
evalcond[3]=((((-1.0)*cj3*r20*x15653))+(((-1.0)*x15661))+(((-1.0)*cj3*r21*x15651))+(((-1.0)*r21*x15653*x15663))+((r20*x15665))+x15652+((r22*x15664)));
evalcond[4]=((((-1.0)*r20*x15651*x15660))+(((-1.0)*r21*sj3*x15651))+((x15654*x15660))+x15659+x15655+(((-1.0)*r22*x15666))+(((-1.0)*r20*sj3*x15653)));
evalcond[5]=((((-1.0)*cj3*r01*x15651))+((r02*x15664))+(((-1.0)*x15657*x15659))+((r00*x15665))+(((-1.0)*r01*x15653*x15663))+(((-1.0)*cj3*r00*x15653))+(((-1.0)*x15655*x15657)));
evalcond[6]=((((-1.0)*cj1*cj2*x15657))+((x15658*x15660))+(((-1.0)*r00*x15651*x15660))+(((-1.0)*r00*sj3*x15653))+((cj0*x15652))+(((-1.0)*r01*sj3*x15651))+(((-1.0)*r02*x15666)));
evalcond[7]=((((-1.0)*x15650*x15663))+((r10*x15665))+(((-1.0)*cj3*r10*x15653))+(((-1.0)*cj3*r11*x15651))+((sj3*x15662))+(((-1.0)*x15656*x15659))+(((-1.0)*x15655*x15656)));
evalcond[8]=((((-1.0)*cj1*cj2*x15656))+(((-1.0)*cj3*x15662))+(((-1.0)*r10*x15651*x15660))+(((-1.0)*r11*sj3*x15651))+(((-1.0)*r10*sj3*x15653))+((sj0*x15652))+((x15650*x15660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15667=cj5*cj5;
IkReal x15668=r21*r21;
IkReal x15669=r20*r20;
IkReal x15670=(cj5*r21);
IkReal x15671=(r20*sj5);
IkReal x15672=((1.0)*sj5);
IkReal x15673=(sj1*sj2);
IkReal x15674=((1.0)*sj3);
IkReal x15675=(cj3*cj5);
IkReal x15676=(cj1*cj2);
IkReal x15677=(cj5*r20);
IkReal x15678=(sj3*x15668);
IkReal x15679=((1.0)*cj3*r22);
IkReal x15680=(cj3*r20*r21);
CheckValue<IkReal> x15681=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15674*(r22*r22)))+(((-1.0)*x15667*x15669*x15674))+(((2.0)*sj3*x15670*x15671))+(((-1.0)*x15668*x15674))+((x15667*x15678)))),-1);
if(!x15681.valid){
continue;
}
CheckValue<IkReal> x15682 = IKatan2WithCheck(IkReal(((((-1.0)*x15671*x15679))+(((-1.0)*x15670*x15679))+((r22*x15673))+(((-1.0)*r22*x15676)))),IkReal((((x15673*x15677))+(((-1.0)*x15669*x15672*x15675))+(((-1.0)*x15676*x15677))+(((-1.0)*r21*x15672*x15673))+((r21*sj5*x15676))+x15680+((sj5*x15668*x15675))+(((-2.0)*x15667*x15680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15681.value)))+(x15682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15683=IKsin(j4);
IkReal x15684=IKcos(j4);
IkReal x15685=((1.0)*sj3);
IkReal x15686=(cj5*r21);
IkReal x15687=((1.0)*cj3);
IkReal x15688=(r20*sj5);
IkReal x15689=(cj5*r20);
IkReal x15690=(r22*x15683);
IkReal x15691=(r21*sj5*x15684);
evalcond[0]=(((r21*sj5*x15683))+((r22*x15684))+(((-1.0)*x15683*x15689)));
evalcond[1]=((((-1.0)*x15685*x15691))+((sj3*x15690))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15687*x15688))+(((-1.0)*x15686*x15687))+((sj3*x15684*x15689)));
evalcond[2]=(((cj2*sj1))+((cj3*x15691))+((cj1*sj2))+(((-1.0)*x15685*x15686))+(((-1.0)*x15685*x15688))+(((-1.0)*x15687*x15690))+(((-1.0)*x15684*x15687*x15689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15692=(cj5*sj4);
IkReal x15693=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x15692))+((r01*x15693))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15692))+(((-1.0)*r11*x15693))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x15692))+((r01*x15693))+((cj4*r02))))+IKsqr((((r10*x15692))+(((-1.0)*r11*x15693))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x15692))+((r01*x15693))+((cj4*r02))), (((r10*x15692))+(((-1.0)*r11*x15693))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15694=IKcos(j0);
IkReal x15695=IKsin(j0);
IkReal x15696=((1.0)*cj3);
IkReal x15697=(r02*sj4);
IkReal x15698=(r12*sj4);
IkReal x15699=(r11*sj5);
IkReal x15700=(r10*sj5);
IkReal x15701=(cj5*r01);
IkReal x15702=(r01*sj5);
IkReal x15703=((1.0)*cj2);
IkReal x15704=(cj5*r11);
IkReal x15705=(cj3*cj4);
IkReal x15706=((0.398)*sj2);
IkReal x15707=((1.0)*sj3);
IkReal x15708=(r00*sj5);
IkReal x15709=((0.398)*cj2);
IkReal x15710=(cj4*cj5*r00);
IkReal x15711=((1.0)*cj1*sj2);
IkReal x15712=(cj4*cj5*r10);
IkReal x15713=(cj4*x15707);
IkReal x15714=(sj1*x15694);
IkReal x15715=(cj1*x15695);
IkReal x15716=(sj1*x15695);
IkReal x15717=((1.0)*cj5*sj4);
IkReal x15718=(cj1*x15694);
evalcond[0]=((((-1.0)*r10*x15717))+x15694+((sj4*x15699))+((cj4*r12)));
evalcond[1]=(((sj4*x15702))+(((-1.0)*x15695))+(((-1.0)*r00*x15717))+((cj4*r02)));
evalcond[2]=((((-1.0)*x15703*x15714))+((sj3*x15710))+((sj3*x15697))+(((-1.0)*x15702*x15713))+(((-1.0)*x15696*x15701))+(((-1.0)*x15696*x15708))+(((-1.0)*x15694*x15711)));
evalcond[3]=((((-1.0)*x15707*x15708))+((x15702*x15705))+(((-1.0)*x15701*x15707))+(((-1.0)*x15703*x15718))+(((-1.0)*x15696*x15710))+((sj2*x15714))+(((-1.0)*x15696*x15697)));
evalcond[4]=((((-1.0)*x15703*x15716))+((sj3*x15712))+((sj3*x15698))+(((-1.0)*x15696*x15700))+(((-1.0)*x15696*x15704))+(((-1.0)*x15699*x15713))+(((-1.0)*x15695*x15711)));
evalcond[5]=((((-1.0)*x15704*x15707))+(((-1.0)*x15703*x15715))+(((-1.0)*x15696*x15712))+(((-1.0)*x15700*x15707))+((x15699*x15705))+((sj2*x15716))+(((-1.0)*x15696*x15698)));
evalcond[6]=((((-1.0)*x15706*x15714))+((x15709*x15718))+(((-1.0)*px))+(((0.418)*x15718))+(((-0.122)*x15695))+(((-1.53e-6)*x15714))+(((0.098)*x15701))+(((0.098)*x15708)));
evalcond[7]=((((-1.0)*x15706*x15716))+((x15709*x15715))+(((-1.0)*py))+(((0.122)*x15694))+(((0.418)*x15715))+(((-1.53e-6)*x15716))+(((0.098)*x15704))+(((0.098)*x15700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15719=cj5*cj5;
IkReal x15720=r21*r21;
IkReal x15721=r20*r20;
IkReal x15722=(r21*sj3);
IkReal x15723=((1.0)*cj5);
IkReal x15724=(sj3*sj5);
IkReal x15725=(cj5*r20);
IkReal x15726=(cj1*sj2);
IkReal x15727=(r21*sj5);
IkReal x15728=(cj2*sj1);
IkReal x15729=(cj3*x15720);
CheckValue<IkReal> x15730 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15722*x15723))+((r22*x15726))+((r22*x15728))+(((-1.0)*r20*r22*x15724)))),IkReal((((cj5*x15720*x15724))+((r20*x15722))+(((-1.0)*x15727*x15728))+(((-1.0)*x15721*x15723*x15724))+(((-1.0)*x15726*x15727))+((x15725*x15726))+((x15725*x15728))+(((-2.0)*r20*x15719*x15722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15730.valid){
continue;
}
CheckValue<IkReal> x15731=IKPowWithIntegerCheck(IKsign((((cj3*x15719*x15721))+(((-1.0)*x15719*x15729))+((cj3*(r22*r22)))+x15729+(((-2.0)*cj3*x15725*x15727)))),-1);
if(!x15731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15730.value)+(((1.5707963267949)*(x15731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15732=IKsin(j4);
IkReal x15733=IKcos(j4);
IkReal x15734=((1.0)*sj3);
IkReal x15735=(cj5*r21);
IkReal x15736=((1.0)*cj3);
IkReal x15737=(r20*sj5);
IkReal x15738=(cj5*r20);
IkReal x15739=(r22*x15732);
IkReal x15740=(r21*sj5*x15733);
evalcond[0]=((((-1.0)*x15732*x15738))+((r21*sj5*x15732))+((r22*x15733)));
evalcond[1]=((((-1.0)*x15736*x15737))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15735*x15736))+((sj3*x15739))+(((-1.0)*x15734*x15740))+((sj3*x15733*x15738)));
evalcond[2]=(((cj2*sj1))+((cj3*x15740))+(((-1.0)*x15733*x15736*x15738))+(((-1.0)*x15736*x15739))+((cj1*sj2))+(((-1.0)*x15734*x15735))+(((-1.0)*x15734*x15737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15741=(cj5*sj4);
IkReal x15742=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x15741))+((r01*x15742))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15742))+((r10*x15741))+(((-1.0)*cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x15741))+((r01*x15742))+((cj4*r02))))+IKsqr(((((-1.0)*r11*x15742))+((r10*x15741))+(((-1.0)*cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x15741))+((r01*x15742))+((cj4*r02))), ((((-1.0)*r11*x15742))+((r10*x15741))+(((-1.0)*cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15743=IKcos(j0);
IkReal x15744=IKsin(j0);
IkReal x15745=((1.0)*cj3);
IkReal x15746=(r02*sj4);
IkReal x15747=(r12*sj4);
IkReal x15748=(r11*sj5);
IkReal x15749=(r10*sj5);
IkReal x15750=(cj5*r01);
IkReal x15751=(r01*sj5);
IkReal x15752=((1.0)*cj2);
IkReal x15753=(cj5*r11);
IkReal x15754=(cj3*cj4);
IkReal x15755=((0.398)*sj2);
IkReal x15756=((1.0)*sj3);
IkReal x15757=(r00*sj5);
IkReal x15758=((0.398)*cj2);
IkReal x15759=(cj4*cj5*r00);
IkReal x15760=((1.0)*cj1*sj2);
IkReal x15761=(cj4*cj5*r10);
IkReal x15762=(cj4*x15756);
IkReal x15763=(sj1*x15743);
IkReal x15764=(cj1*x15744);
IkReal x15765=(sj1*x15744);
IkReal x15766=((1.0)*cj5*sj4);
IkReal x15767=(cj1*x15743);
evalcond[0]=(((sj4*x15748))+x15743+(((-1.0)*r10*x15766))+((cj4*r12)));
evalcond[1]=((((-1.0)*x15744))+((sj4*x15751))+(((-1.0)*r00*x15766))+((cj4*r02)));
evalcond[2]=(((sj3*x15746))+(((-1.0)*x15743*x15760))+(((-1.0)*x15751*x15762))+(((-1.0)*x15752*x15763))+((sj3*x15759))+(((-1.0)*x15745*x15750))+(((-1.0)*x15745*x15757)));
evalcond[3]=((((-1.0)*x15756*x15757))+(((-1.0)*x15750*x15756))+(((-1.0)*x15745*x15746))+(((-1.0)*x15752*x15767))+((sj2*x15763))+(((-1.0)*x15745*x15759))+((x15751*x15754)));
evalcond[4]=(((sj3*x15747))+(((-1.0)*x15748*x15762))+(((-1.0)*x15745*x15749))+(((-1.0)*x15752*x15765))+(((-1.0)*x15744*x15760))+((sj3*x15761))+(((-1.0)*x15745*x15753)));
evalcond[5]=((((-1.0)*x15753*x15756))+(((-1.0)*x15749*x15756))+(((-1.0)*x15745*x15747))+(((-1.0)*x15752*x15764))+(((-1.0)*x15745*x15761))+((x15748*x15754))+((sj2*x15765)));
evalcond[6]=((((0.098)*x15750))+(((0.098)*x15757))+(((-1.53e-6)*x15763))+((x15758*x15767))+(((-0.122)*x15744))+(((-1.0)*px))+(((-1.0)*x15755*x15763))+(((0.418)*x15767)));
evalcond[7]=((((0.122)*x15743))+(((0.098)*x15749))+(((0.098)*x15753))+(((-1.53e-6)*x15765))+((x15758*x15764))+(((-1.0)*py))+(((-1.0)*x15755*x15765))+(((0.418)*x15764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ec66 (bd2703caddf0dc73f3e76ebfce750d16)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
